
mikanos/kernel/kernel.elf:     ファイル形式 elf64-x86-64


セクション .text の逆アセンブル:

0000000000103f20 <_Z6printkPKcz>:
PixelWriter* pixel_writer;

char console_buf[sizeof(Console)];
Console* console;

int printk(const char* format, ...) {
  103f20:	55                   	push   %rbp
  103f21:	48 89 e5             	mov    %rsp,%rbp
  103f24:	41 56                	push   %r14
  103f26:	53                   	push   %rbx
  103f27:	48 81 ec d0 04 00 00 	sub    $0x4d0,%rsp
  103f2e:	49 89 fa             	mov    %rdi,%r10
  103f31:	84 c0                	test   %al,%al
  103f33:	74 29                	je     103f5e <_Z6printkPKcz+0x3e>
  103f35:	0f 29 85 50 ff ff ff 	movaps %xmm0,-0xb0(%rbp)
  103f3c:	0f 29 8d 60 ff ff ff 	movaps %xmm1,-0xa0(%rbp)
  103f43:	0f 29 95 70 ff ff ff 	movaps %xmm2,-0x90(%rbp)
  103f4a:	0f 29 5d 80          	movaps %xmm3,-0x80(%rbp)
  103f4e:	0f 29 65 90          	movaps %xmm4,-0x70(%rbp)
  103f52:	0f 29 6d a0          	movaps %xmm5,-0x60(%rbp)
  103f56:	0f 29 75 b0          	movaps %xmm6,-0x50(%rbp)
  103f5a:	0f 29 7d c0          	movaps %xmm7,-0x40(%rbp)
  103f5e:	48 89 b5 28 ff ff ff 	mov    %rsi,-0xd8(%rbp)
  103f65:	48 89 95 30 ff ff ff 	mov    %rdx,-0xd0(%rbp)
  103f6c:	48 89 8d 38 ff ff ff 	mov    %rcx,-0xc8(%rbp)
  103f73:	4c 89 85 40 ff ff ff 	mov    %r8,-0xc0(%rbp)
  103f7a:	4c 89 8d 48 ff ff ff 	mov    %r9,-0xb8(%rbp)
  103f81:	48 b8 08 00 00 00 30 	movabs $0x3000000008,%rax
  103f88:	00 00 00 
  va_list ap;
  int result;
  char s[1024];

  va_start(ap, format);
  103f8b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  103f8f:	48 8d 45 10          	lea    0x10(%rbp),%rax
  103f93:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  103f97:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  103f9e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  103fa2:	4c 8d b5 20 fb ff ff 	lea    -0x4e0(%rbp),%r14
  103fa9:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  result = vsprintf(s, format, ap);
  103fad:	4c 89 f7             	mov    %r14,%rdi
  103fb0:	4c 89 d6             	mov    %r10,%rsi
  103fb3:	e8 38 8b 00 00       	call   10caf0 <vsprintf>
  103fb8:	89 c3                	mov    %eax,%ebx
  va_end(ap);

  console->PutString(s);
  103fba:	48 8b 3d 6f 38 01 00 	mov    0x1386f(%rip),%rdi        # 117830 <console>
  103fc1:	4c 89 f6             	mov    %r14,%rsi
  103fc4:	e8 d7 12 00 00       	call   1052a0 <_ZN7Console9PutStringEPKc>
  return result;
  103fc9:	89 d8                	mov    %ebx,%eax
  103fcb:	48 81 c4 d0 04 00 00 	add    $0x4d0,%rsp
  103fd2:	5b                   	pop    %rbx
  103fd3:	41 5e                	pop    %r14
  103fd5:	5d                   	pop    %rbp
  103fd6:	c3                   	ret    
  103fd7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  103fde:	00 00 

0000000000103fe0 <_Z13MouseObserveraa>:
}

char mouse_cursor_buf[sizeof(MouseCursor)];
MouseCursor* mouse_cursor;

void MouseObserver(int8_t displacement_x, int8_t displacement_y) {
  103fe0:	55                   	push   %rbp
  103fe1:	48 89 e5             	mov    %rsp,%rbp
  mouse_cursor->MoveRelative({displacement_x, displacement_y});
  103fe4:	48 8b 05 6d 38 01 00 	mov    0x1386d(%rip),%rax        # 117858 <mouse_cursor>
  103feb:	48 c1 e6 20          	shl    $0x20,%rsi
  103fef:	89 f9                	mov    %edi,%ecx
  103ff1:	48 09 ce             	or     %rcx,%rsi
  103ff4:	48 89 c7             	mov    %rax,%rdi
  103ff7:	5d                   	pop    %rbp
  103ff8:	e9 13 0e 00 00       	jmp    104e10 <_ZN11MouseCursor12MoveRelativeE8Vector2DIiE>
  103ffd:	0f 1f 00             	nopl   (%rax)

0000000000104000 <_Z15SwitchEhci2XhciRKN3pci6DeviceE>:
}

void SwitchEhci2Xhci(const pci::Device& xhc_dev) {
  104000:	55                   	push   %rbp
  104001:	48 89 e5             	mov    %rsp,%rbp
  104004:	41 57                	push   %r15
  104006:	41 56                	push   %r14
  104008:	41 54                	push   %r12
  10400a:	53                   	push   %rbx
  bool intel_ehc_exist = false;
  for (int i = 0; i < pci::num_device; ++i) {
  10400b:	8b 05 5f 38 11 00    	mov    0x11385f(%rip),%eax        # 217870 <_ZN3pci10num_deviceE>
  104011:	85 c0                	test   %eax,%eax
  104013:	7e 5f                	jle    104074 <_Z15SwitchEhci2XhciRKN3pci6DeviceE+0x74>
  104015:	49 89 fc             	mov    %rdi,%r12
  104018:	bb 7a 78 21 00       	mov    $0x21787a,%ebx
  10401d:	45 31 f6             	xor    %r14d,%r14d
  104020:	eb 1e                	jmp    104040 <_Z15SwitchEhci2XhciRKN3pci6DeviceE+0x40>
  104022:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  104029:	00 00 00 
  10402c:	0f 1f 40 00          	nopl   0x0(%rax)
  104030:	49 83 c6 01          	add    $0x1,%r14
  104034:	48 63 c8             	movslq %eax,%rcx
  104037:	48 83 c3 07          	add    $0x7,%rbx
  10403b:	49 39 ce             	cmp    %rcx,%r14
  10403e:	7d 34                	jge    104074 <_Z15SwitchEhci2XhciRKN3pci6DeviceE+0x74>
  /** @brief PCI デバイスのクラスコード */
  struct ClassCode {
    uint8_t base, sub, interface;

    /** @brief ベースクラスが等しい場合に真を返す */
    bool Match(uint8_t b) { return b == base; }
  104040:	80 7b fe 0c          	cmpb   $0xc,-0x2(%rbx)
    /** @brief ベースクラスとサブクラスが等しい場合に真を返す */
    bool Match(uint8_t b, uint8_t s) { return Match(b) && s == sub; }
  104044:	75 ea                	jne    104030 <_Z15SwitchEhci2XhciRKN3pci6DeviceE+0x30>
  104046:	80 7b ff 03          	cmpb   $0x3,-0x1(%rbx)
    /** @brief ベース，サブ，インターフェースが等しい場合に真を返す */
    bool Match(uint8_t b, uint8_t s, uint8_t i) {
      return Match(b, s) && i == interface;
  10404a:	75 e4                	jne    104030 <_Z15SwitchEhci2XhciRKN3pci6DeviceE+0x30>
  10404c:	80 3b 20             	cmpb   $0x20,(%rbx)
    if (pci::devices[i].class_code.Match(0x0cu, 0x03u, 0x20u) /* EHCI */ &&
  10404f:	75 df                	jne    104030 <_Z15SwitchEhci2XhciRKN3pci6DeviceE+0x30>
  uint8_t ReadHeaderType(uint8_t bus, uint8_t device, uint8_t function);
  /** @brief クラスコードレジスタを読み取る（全ヘッダタイプ共通） */
  ClassCode ReadClassCode(uint8_t bus, uint8_t device, uint8_t function);

  inline uint16_t ReadVendorId(const Device& dev) {
    return ReadVendorId(dev.bus, dev.device, dev.function);
  104051:	0f b6 7b fa          	movzbl -0x6(%rbx),%edi
  104055:	0f b6 73 fb          	movzbl -0x5(%rbx),%esi
  104059:	0f b6 53 fc          	movzbl -0x4(%rbx),%edx
  10405d:	e8 2e 14 00 00       	call   105490 <_ZN3pci12ReadVendorIdEhhh>
        0x8086 == pci::ReadVendorId(pci::devices[i])) {
  104062:	0f b7 c0             	movzwl %ax,%eax
  104065:	3d 86 80 00 00       	cmp    $0x8086,%eax
    if (pci::devices[i].class_code.Match(0x0cu, 0x03u, 0x20u) /* EHCI */ &&
  10406a:	74 11                	je     10407d <_Z15SwitchEhci2XhciRKN3pci6DeviceE+0x7d>
  for (int i = 0; i < pci::num_device; ++i) {
  10406c:	8b 05 fe 37 11 00    	mov    0x1137fe(%rip),%eax        # 217870 <_ZN3pci10num_deviceE>
  104072:	eb bc                	jmp    104030 <_Z15SwitchEhci2XhciRKN3pci6DeviceE+0x30>
  pci::WriteConfReg(xhc_dev, 0xd8, superspeed_ports); // USB3_PSSEN
  uint32_t ehci2xhci_ports = pci::ReadConfReg(xhc_dev, 0xd4); // XUSB2PRM
  pci::WriteConfReg(xhc_dev, 0xd0, ehci2xhci_ports); // XUSB2PR
  Log(kDebug, "SwitchEhci2Xhci: SS = %02, xHCI = %02x\n",
      superspeed_ports, ehci2xhci_ports);
}
  104074:	5b                   	pop    %rbx
  104075:	41 5c                	pop    %r12
  104077:	41 5e                	pop    %r14
  104079:	41 5f                	pop    %r15
  10407b:	5d                   	pop    %rbp
  10407c:	c3                   	ret    
  uint32_t superspeed_ports = pci::ReadConfReg(xhc_dev, 0xdc); // USB3PRM
  10407d:	4c 89 e7             	mov    %r12,%rdi
  104080:	be dc 00 00 00       	mov    $0xdc,%esi
  104085:	e8 86 19 00 00       	call   105a10 <_ZN3pci11ReadConfRegERKNS_6DeviceEh>
  10408a:	41 89 c6             	mov    %eax,%r14d
  pci::WriteConfReg(xhc_dev, 0xd8, superspeed_ports); // USB3_PSSEN
  10408d:	4c 89 e7             	mov    %r12,%rdi
  104090:	be d8 00 00 00       	mov    $0xd8,%esi
  104095:	89 c2                	mov    %eax,%edx
  104097:	e8 b4 19 00 00       	call   105a50 <_ZN3pci12WriteConfRegERKNS_6DeviceEhj>
  uint32_t ehci2xhci_ports = pci::ReadConfReg(xhc_dev, 0xd4); // XUSB2PRM
  10409c:	4c 89 e7             	mov    %r12,%rdi
  10409f:	be d4 00 00 00       	mov    $0xd4,%esi
  1040a4:	e8 67 19 00 00       	call   105a10 <_ZN3pci11ReadConfRegERKNS_6DeviceEh>
  1040a9:	41 89 c7             	mov    %eax,%r15d
  pci::WriteConfReg(xhc_dev, 0xd0, ehci2xhci_ports); // XUSB2PR
  1040ac:	4c 89 e7             	mov    %r12,%rdi
  1040af:	be d0 00 00 00       	mov    $0xd0,%esi
  1040b4:	89 c2                	mov    %eax,%edx
  1040b6:	e8 95 19 00 00       	call   105a50 <_ZN3pci12WriteConfRegERKNS_6DeviceEhj>
  Log(kDebug, "SwitchEhci2Xhci: SS = %02, xHCI = %02x\n",
  1040bb:	be 1f 06 10 00       	mov    $0x10061f,%esi
  1040c0:	bf 07 00 00 00       	mov    $0x7,%edi
  1040c5:	44 89 f2             	mov    %r14d,%edx
  1040c8:	44 89 f9             	mov    %r15d,%ecx
  1040cb:	31 c0                	xor    %eax,%eax
  1040cd:	5b                   	pop    %rbx
  1040ce:	41 5c                	pop    %r12
  1040d0:	41 5e                	pop    %r14
  1040d2:	41 5f                	pop    %r15
  1040d4:	5d                   	pop    %rbp
  1040d5:	e9 46 22 00 00       	jmp    106320 <_Z3Log8LogLevelPKcz>
  1040da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000001040e0 <_Z14IntHandlerXHCIP14InterruptFrame>:
};

ArrayQueue<Message>* main_queue;

__attribute__((interrupt))
void IntHandlerXHCI(InterruptFrame* frame) {
  1040e0:	55                   	push   %rbp
  1040e1:	48 89 e5             	mov    %rsp,%rbp
  1040e4:	50                   	push   %rax
  1040e5:	41 53                	push   %r11
  1040e7:	41 52                	push   %r10
  1040e9:	41 51                	push   %r9
  1040eb:	41 50                	push   %r8
  1040ed:	57                   	push   %rdi
  1040ee:	56                   	push   %rsi
  1040ef:	52                   	push   %rdx
  1040f0:	51                   	push   %rcx
  1040f1:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  1040f8:	44 0f 29 7d a0       	movaps %xmm15,-0x60(%rbp)
  1040fd:	44 0f 29 75 90       	movaps %xmm14,-0x70(%rbp)
  104102:	44 0f 29 6d 80       	movaps %xmm13,-0x80(%rbp)
  104107:	44 0f 29 a5 70 ff ff 	movaps %xmm12,-0x90(%rbp)
  10410e:	ff 
  10410f:	44 0f 29 9d 60 ff ff 	movaps %xmm11,-0xa0(%rbp)
  104116:	ff 
  104117:	44 0f 29 95 50 ff ff 	movaps %xmm10,-0xb0(%rbp)
  10411e:	ff 
  10411f:	44 0f 29 8d 40 ff ff 	movaps %xmm9,-0xc0(%rbp)
  104126:	ff 
  104127:	44 0f 29 85 30 ff ff 	movaps %xmm8,-0xd0(%rbp)
  10412e:	ff 
  10412f:	0f 29 bd 20 ff ff ff 	movaps %xmm7,-0xe0(%rbp)
  104136:	0f 29 b5 10 ff ff ff 	movaps %xmm6,-0xf0(%rbp)
  10413d:	0f 29 ad 00 ff ff ff 	movaps %xmm5,-0x100(%rbp)
  104144:	0f 29 a5 f0 fe ff ff 	movaps %xmm4,-0x110(%rbp)
  10414b:	0f 29 9d e0 fe ff ff 	movaps %xmm3,-0x120(%rbp)
  104152:	0f 29 95 d0 fe ff ff 	movaps %xmm2,-0x130(%rbp)
  104159:	0f 29 8d c0 fe ff ff 	movaps %xmm1,-0x140(%rbp)
  104160:	0f 29 85 b0 fe ff ff 	movaps %xmm0,-0x150(%rbp)
  104167:	fc                   	cld    
  main_queue->Push(Message{Message::kInterruptXHCI});
  104168:	48 8b 05 f9 36 01 00 	mov    0x136f9(%rip),%rax        # 117868 <main_queue>
  : data_{buf}, read_pos_{0}, write_pos_{0}, count_{0}, capacity_{size}
{}

template <typename T>
Error ArrayQueue<T>::Push(const T& value) {
  if (count_ == capacity_) {
  10416f:	48 8b 50 18          	mov    0x18(%rax),%rdx
  104173:	48 8b 48 20          	mov    0x20(%rax),%rcx
  104177:	48 39 ca             	cmp    %rcx,%rdx
  10417a:	74 27                	je     1041a3 <_Z14IntHandlerXHCIP14InterruptFrame+0xc3>
    return MAKE_ERROR(Error::kFull);
  }

  data_[write_pos_] = value;
  10417c:	48 8b 30             	mov    (%rax),%rsi
  10417f:	48 8b 78 10          	mov    0x10(%rax),%rdi
  104183:	c7 04 be 00 00 00 00 	movl   $0x0,(%rsi,%rdi,4)
  ++count_;
  10418a:	48 83 c2 01          	add    $0x1,%rdx
  10418e:	48 89 50 18          	mov    %rdx,0x18(%rax)
  ++write_pos_;
  104192:	48 83 c7 01          	add    $0x1,%rdi
  104196:	31 d2                	xor    %edx,%edx
  if (write_pos_ == capacity_) {
  104198:	48 39 cf             	cmp    %rcx,%rdi
  10419b:	48 0f 45 d7          	cmovne %rdi,%rdx
  10419f:	48 89 50 10          	mov    %rdx,0x10(%rax)
  NotifyEndOfInterrupt();
  1041a3:	e8 68 22 00 00       	call   106410 <_Z20NotifyEndOfInterruptv>
  1041a8:	0f 28 85 b0 fe ff ff 	movaps -0x150(%rbp),%xmm0
  1041af:	0f 28 8d c0 fe ff ff 	movaps -0x140(%rbp),%xmm1
  1041b6:	0f 28 95 d0 fe ff ff 	movaps -0x130(%rbp),%xmm2
  1041bd:	0f 28 9d e0 fe ff ff 	movaps -0x120(%rbp),%xmm3
  1041c4:	0f 28 a5 f0 fe ff ff 	movaps -0x110(%rbp),%xmm4
  1041cb:	0f 28 ad 00 ff ff ff 	movaps -0x100(%rbp),%xmm5
  1041d2:	0f 28 b5 10 ff ff ff 	movaps -0xf0(%rbp),%xmm6
  1041d9:	0f 28 bd 20 ff ff ff 	movaps -0xe0(%rbp),%xmm7
  1041e0:	44 0f 28 85 30 ff ff 	movaps -0xd0(%rbp),%xmm8
  1041e7:	ff 
  1041e8:	44 0f 28 8d 40 ff ff 	movaps -0xc0(%rbp),%xmm9
  1041ef:	ff 
  1041f0:	44 0f 28 95 50 ff ff 	movaps -0xb0(%rbp),%xmm10
  1041f7:	ff 
  1041f8:	44 0f 28 9d 60 ff ff 	movaps -0xa0(%rbp),%xmm11
  1041ff:	ff 
  104200:	44 0f 28 a5 70 ff ff 	movaps -0x90(%rbp),%xmm12
  104207:	ff 
  104208:	44 0f 28 6d 80       	movaps -0x80(%rbp),%xmm13
  10420d:	44 0f 28 75 90       	movaps -0x70(%rbp),%xmm14
  104212:	44 0f 28 7d a0       	movaps -0x60(%rbp),%xmm15
}
  104217:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  10421e:	59                   	pop    %rcx
  10421f:	5a                   	pop    %rdx
  104220:	5e                   	pop    %rsi
  104221:	5f                   	pop    %rdi
  104222:	41 58                	pop    %r8
  104224:	41 59                	pop    %r9
  104226:	41 5a                	pop    %r10
  104228:	41 5b                	pop    %r11
  10422a:	58                   	pop    %rax
  10422b:	5d                   	pop    %rbp
  10422c:	48 cf                	iretq  
  10422e:	66 90                	xchg   %ax,%ax

0000000000104230 <KernelMainNewStack>:
// #@@range_begin(main_new_stack)
alignas(16) uint8_t kernel_main_stack[1024 * 1024];

extern "C" void KernelMainNewStack(
    const FrameBufferConfig& frame_buffer_config_ref,
    const MemoryMap& memory_map_ref) {
  104230:	55                   	push   %rbp
  104231:	48 89 e5             	mov    %rsp,%rbp
  104234:	41 57                	push   %r15
  104236:	41 56                	push   %r14
  104238:	41 55                	push   %r13
  10423a:	41 54                	push   %r12
  10423c:	53                   	push   %rbx
  10423d:	48 81 ec a8 01 00 00 	sub    $0x1a8,%rsp
  FrameBufferConfig frame_buffer_config{frame_buffer_config_ref};
  104244:	48 8b 47 10          	mov    0x10(%rdi),%rax
  104248:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  10424c:	0f 10 07             	movups (%rdi),%xmm0
  10424f:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  MemoryMap memory_map{memory_map_ref};
  104253:	48 8b 5e 08          	mov    0x8(%rsi),%rbx
  104257:	4c 8b 66 10          	mov    0x10(%rsi),%r12
  10425b:	4c 8b 6e 20          	mov    0x20(%rsi),%r13
// #@@range_end(main_new_stack)

  switch (frame_buffer_config.pixel_format) {
  10425f:	8b 45 94             	mov    -0x6c(%rbp),%eax
  104262:	85 c0                	test   %eax,%eax
  104264:	74 22                	je     104288 <KernelMainNewStack+0x58>
  104266:	83 f8 01             	cmp    $0x1,%eax
  104269:	75 45                	jne    1042b0 <KernelMainNewStack+0x80>
  10426b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  uint8_t r, g, b;
};

class PixelWriter {
 public:
  PixelWriter(const FrameBufferConfig& config) : config_{config} {
  10426f:	48 89 05 a2 2d 01 00 	mov    %rax,0x12da2(%rip)        # 117018 <pixel_writer_buf+0x8>
  104276:	bf 10 70 11 00       	mov    $0x117010,%edi
  virtual void Write(int x, int y, const PixelColor& c) override;
};

class BGRResv8BitPerColorPixelWriter : public PixelWriter {
 public:
  using PixelWriter::PixelWriter;
  10427b:	48 c7 05 8a 2d 01 00 	movq   $0x1011e8,0x12d8a(%rip)        # 117010 <pixel_writer_buf>
  104282:	e8 11 10 00 
  104286:	eb 1b                	jmp    1042a3 <KernelMainNewStack+0x73>
  104288:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  PixelWriter(const FrameBufferConfig& config) : config_{config} {
  10428c:	48 89 05 85 2d 01 00 	mov    %rax,0x12d85(%rip)        # 117018 <pixel_writer_buf+0x8>
  104293:	bf 10 70 11 00       	mov    $0x117010,%edi
  using PixelWriter::PixelWriter;
  104298:	48 c7 05 6d 2d 01 00 	movq   $0x1011c0,0x12d6d(%rip)        # 117010 <pixel_writer_buf>
  10429f:	c0 11 10 00 
  1042a3:	48 c7 05 72 2d 01 00 	movq   $0x117010,0x12d72(%rip)        # 117020 <pixel_writer>
  1042aa:	10 70 11 00 
  1042ae:	eb 07                	jmp    1042b7 <KernelMainNewStack+0x87>


  const int kFrameWidth = frame_buffer_config.horizontal_resolution;
  const int kFrameHeight = frame_buffer_config.vertical_resolution;

  FillRectangle(*pixel_writer,
  1042b0:	48 8b 3d 69 2d 01 00 	mov    0x12d69(%rip),%rdi        # 117020 <pixel_writer>
  const int kFrameWidth = frame_buffer_config.horizontal_resolution;
  1042b7:	4c 63 7d 8c          	movslq -0x74(%rbp),%r15
  const int kFrameHeight = frame_buffer_config.vertical_resolution;
  1042bb:	8b 45 90             	mov    -0x70(%rbp),%eax
  1042be:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
                {0, 0},
  1042c5:	48 c7 85 38 fe ff ff 	movq   $0x0,-0x1c8(%rbp)
  1042cc:	00 00 00 00 
                {kFrameWidth, kFrameHeight - 50},
  1042d0:	44 89 bd d0 fe ff ff 	mov    %r15d,-0x130(%rbp)
  1042d7:	44 8d 70 ce          	lea    -0x32(%rax),%r14d
  1042db:	44 89 b5 d4 fe ff ff 	mov    %r14d,-0x12c(%rbp)
  1042e2:	48 8d b5 38 fe ff ff 	lea    -0x1c8(%rbp),%rsi
  1042e9:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
  FillRectangle(*pixel_writer,
  1042f0:	b9 b6 10 10 00       	mov    $0x1010b6,%ecx
  1042f5:	e8 76 09 00 00       	call   104c70 <_Z13FillRectangleR11PixelWriterRK8Vector2DIiES4_RK10PixelColor>
                kDesktopBGColor);
  FillRectangle(*pixel_writer,
  1042fa:	48 8b 3d 1f 2d 01 00 	mov    0x12d1f(%rip),%rdi        # 117020 <pixel_writer>
                {0, kFrameHeight - 50},
  104301:	c7 85 38 fe ff ff 00 	movl   $0x0,-0x1c8(%rbp)
  104308:	00 00 00 
  10430b:	44 89 b5 3c fe ff ff 	mov    %r14d,-0x1c4(%rbp)
                {kFrameWidth, 50},
  104312:	44 89 bd d0 fe ff ff 	mov    %r15d,-0x130(%rbp)
  104319:	c7 85 d4 fe ff ff 32 	movl   $0x32,-0x12c(%rbp)
  104320:	00 00 00 
                {1, 8, 17});
  104323:	66 c7 45 a0 01 08    	movw   $0x801,-0x60(%rbp)
  104329:	c6 45 a2 11          	movb   $0x11,-0x5e(%rbp)
  10432d:	48 8d b5 38 fe ff ff 	lea    -0x1c8(%rbp),%rsi
  104334:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
  10433b:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
  FillRectangle(*pixel_writer,
  10433f:	e8 2c 09 00 00       	call   104c70 <_Z13FillRectangleR11PixelWriterRK8Vector2DIiES4_RK10PixelColor>
  FillRectangle(*pixel_writer,
  104344:	48 8b 3d d5 2c 01 00 	mov    0x12cd5(%rip),%rdi        # 117020 <pixel_writer>
                {0, kFrameHeight - 50},
  10434b:	c7 85 38 fe ff ff 00 	movl   $0x0,-0x1c8(%rbp)
  104352:	00 00 00 
  104355:	44 89 b5 3c fe ff ff 	mov    %r14d,-0x1c4(%rbp)
                {kFrameWidth / 5, 50},
  10435c:	49 69 c7 67 66 66 66 	imul   $0x66666667,%r15,%rax
  104363:	48 89 c1             	mov    %rax,%rcx
  104366:	48 c1 e9 3f          	shr    $0x3f,%rcx
  10436a:	48 c1 f8 21          	sar    $0x21,%rax
  10436e:	01 c8                	add    %ecx,%eax
  104370:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%rbp)
  104376:	c7 85 d4 fe ff ff 32 	movl   $0x32,-0x12c(%rbp)
  10437d:	00 00 00 
                {80, 80, 80});
  104380:	66 c7 45 a0 50 50    	movw   $0x5050,-0x60(%rbp)
  104386:	c6 45 a2 50          	movb   $0x50,-0x5e(%rbp)
  10438a:	48 8d b5 38 fe ff ff 	lea    -0x1c8(%rbp),%rsi
  104391:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
  104398:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
  FillRectangle(*pixel_writer,
  10439c:	e8 cf 08 00 00       	call   104c70 <_Z13FillRectangleR11PixelWriterRK8Vector2DIiES4_RK10PixelColor>
  DrawRectangle(*pixel_writer,
  1043a1:	48 8b 3d 78 2c 01 00 	mov    0x12c78(%rip),%rdi        # 117020 <pixel_writer>
                {10, kFrameHeight - 40},
  1043a8:	c7 85 38 fe ff ff 0a 	movl   $0xa,-0x1c8(%rbp)
  1043af:	00 00 00 
  1043b2:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  1043b9:	83 c0 d8             	add    $0xffffffd8,%eax
  1043bc:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%rbp)
  1043c2:	48 b8 1e 00 00 00 1e 	movabs $0x1e0000001e,%rax
  1043c9:	00 00 00 
                {30, 30},
  1043cc:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
                {160, 160, 160});
  1043d3:	66 c7 45 a0 a0 a0    	movw   $0xa0a0,-0x60(%rbp)
  1043d9:	c6 45 a2 a0          	movb   $0xa0,-0x5e(%rbp)
  1043dd:	4c 8d bd 38 fe ff ff 	lea    -0x1c8(%rbp),%r15
  1043e4:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
  1043eb:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
  DrawRectangle(*pixel_writer,
  1043ef:	4c 89 fe             	mov    %r15,%rsi
  1043f2:	e8 99 07 00 00       	call   104b90 <_Z13DrawRectangleR11PixelWriterRK8Vector2DIiES4_RK10PixelColor>

  console = new(console_buf) Console{
    *pixel_writer, kDesktopFGColor, kDesktopBGColor
  1043f7:	48 8b 35 22 2c 01 00 	mov    0x12c22(%rip),%rsi        # 117020 <pixel_writer>
  console = new(console_buf) Console{
  1043fe:	bf 30 70 11 00       	mov    $0x117030,%edi
  104403:	ba b9 10 10 00       	mov    $0x1010b9,%edx
  104408:	b9 b6 10 10 00       	mov    $0x1010b6,%ecx
  10440d:	e8 3e 0e 00 00       	call   105250 <_ZN7ConsoleC1ER11PixelWriterRK10PixelColorS4_>
  104412:	48 c7 05 13 34 01 00 	movq   $0x117030,0x13413(%rip)        # 117830 <console>
  104419:	30 70 11 00 
  };
  printk("Welcome to MikanOS!\n");
  10441d:	bf 2d 0d 10 00       	mov    $0x100d2d,%edi
  104422:	31 c0                	xor    %eax,%eax
  104424:	e8 f7 fa ff ff       	call   103f20 <_Z6printkPKcz>
  SetLogLevel(kWarn);
  104429:	bf 04 00 00 00       	mov    $0x4,%edi
  10442e:	e8 dd 1e 00 00       	call   106310 <_Z11SetLogLevel8LogLevel>

  // #@@range_begin(setup_segments_and_page)
  SetupSegments();
  104433:	e8 d8 20 00 00       	call   106510 <_Z13SetupSegmentsv>

  const uint16_t kernel_cs = 1 << 3;
  const uint16_t kernel_ss = 2 << 3;
  SetDSAll(0);
  104438:	31 ff                	xor    %edi,%edi
  10443a:	e8 90 1e 00 00       	call   1062cf <SetDSAll>
  SetCSSS(kernel_cs, kernel_ss);
  10443f:	bf 08 00 00 00       	mov    $0x8,%edi
  104444:	be 10 00 00 00       	mov    $0x10,%esi
  104449:	e8 68 1e 00 00       	call   1062b6 <SetCSSS>

  SetupIdentityPageTable();
  10444e:	e8 fd 20 00 00       	call   106550 <_Z22SetupIdentityPageTablev>
  // #@@range_end(setup_segments_and_page)

  const auto memory_map_base = reinterpret_cast<uintptr_t>(memory_map.buffer);
  for (uintptr_t iter = memory_map_base;
       iter < memory_map_base + memory_map.map_size;
  104453:	49 01 dc             	add    %rbx,%r12
  104456:	4c 39 e3             	cmp    %r12,%rbx
  for (uintptr_t iter = memory_map_base;
  104459:	73 53                	jae    1044ae <KernelMainNewStack+0x27e>
  10445b:	41 be 98 00 00 00    	mov    $0x98,%r14d
  104461:	eb 15                	jmp    104478 <KernelMainNewStack+0x248>
  104463:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10446a:	00 00 00 
  10446d:	0f 1f 00             	nopl   (%rax)
       iter += memory_map.descriptor_size) {
  104470:	4c 01 eb             	add    %r13,%rbx
       iter < memory_map_base + memory_map.map_size;
  104473:	4c 39 e3             	cmp    %r12,%rbx
  for (uintptr_t iter = memory_map_base;
  104476:	73 36                	jae    1044ae <KernelMainNewStack+0x27e>
    auto desc = reinterpret_cast<MemoryDescriptor*>(iter);
    if (IsAvailable(static_cast<MemoryType>(desc->type))) {
  104478:	8b 33                	mov    (%rbx),%esi
  10447a:	83 fe 07             	cmp    $0x7,%esi
  10447d:	77 f1                	ja     104470 <KernelMainNewStack+0x240>
  10447f:	41 0f a3 f6          	bt     %esi,%r14d
  104483:	73 eb                	jae    104470 <KernelMainNewStack+0x240>
      printk("type = %u, phys = %08lx - %08lx, pages = %lu, attr = %08lx\n",
          desc->type,
          desc->physical_start,
  104485:	48 8b 53 08          	mov    0x8(%rbx),%rdx
          desc->physical_start + desc->number_of_pages * 4096 - 1,
  104489:	4c 8b 43 18          	mov    0x18(%rbx),%r8
  10448d:	4c 89 c0             	mov    %r8,%rax
  104490:	48 c1 e0 0c          	shl    $0xc,%rax
  104494:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  104498:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
          desc->number_of_pages,
          desc->attribute);
  10449c:	4c 8b 4b 20          	mov    0x20(%rbx),%r9
      printk("type = %u, phys = %08lx - %08lx, pages = %lu, attr = %08lx\n",
  1044a0:	bf 21 03 10 00       	mov    $0x100321,%edi
  1044a5:	31 c0                	xor    %eax,%eax
  1044a7:	e8 74 fa ff ff       	call   103f20 <_Z6printkPKcz>
  1044ac:	eb c2                	jmp    104470 <KernelMainNewStack+0x240>
    }
  }

  mouse_cursor = new(mouse_cursor_buf) MouseCursor{
    pixel_writer, kDesktopBGColor, {300, 200}
  1044ae:	48 8b 35 6b 2b 01 00 	mov    0x12b6b(%rip),%rsi        # 117020 <pixel_writer>
  1044b5:	48 b9 2c 01 00 00 c8 	movabs $0xc80000012c,%rcx
  1044bc:	00 00 00 
  mouse_cursor = new(mouse_cursor_buf) MouseCursor{
  1044bf:	bf 40 78 11 00       	mov    $0x117840,%edi
  1044c4:	ba 2d 76 ed 00       	mov    $0xed762d,%edx
  1044c9:	e8 62 08 00 00       	call   104d30 <_ZN11MouseCursorC1EP11PixelWriter10PixelColor8Vector2DIiE>
  1044ce:	48 c7 05 7f 33 01 00 	movq   $0x117840,0x1337f(%rip)        # 117858 <mouse_cursor>
  1044d5:	40 78 11 00 
  : data_{buf}, read_pos_{0}, write_pos_{0}, count_{0}, capacity_{size}
  1044d9:	4c 89 bd 50 ff ff ff 	mov    %r15,-0xb0(%rbp)
  1044e0:	0f 57 c0             	xorps  %xmm0,%xmm0
  1044e3:	0f 11 85 58 ff ff ff 	movups %xmm0,-0xa8(%rbp)
  1044ea:	0f 28 05 9f bc ff ff 	movaps -0x4361(%rip),%xmm0        # 100190 <__dso_handle+0x190>
  1044f1:	0f 11 85 68 ff ff ff 	movups %xmm0,-0x98(%rbp)
  1044f8:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  };

  std::array<Message, 32> main_queue_data;
  ArrayQueue<Message> main_queue{main_queue_data};
  ::main_queue = &main_queue;
  1044ff:	48 89 05 62 33 01 00 	mov    %rax,0x13362(%rip)        # 117868 <main_queue>

  auto err = pci::ScanAllBus();
  104506:	e8 95 10 00 00       	call   1055a0 <_ZN3pci10ScanAllBusEv>

    // element access:
    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
    reference operator[](size_type __n)             {return __elems_[__n];}
    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
    const_reference operator[](size_type __n) const {return __elems_[__n];}
  10450b:	48 98                	cltq   
  operator bool() const {
    return this->code_ != kSuccess;
  }

  const char* Name() const {
    return code_names_[static_cast<int>(this->code_)];
  10450d:	48 8b 14 c5 c0 10 10 	mov    0x1010c0(,%rax,8),%rdx
  104514:	00 
  104515:	45 31 e4             	xor    %r12d,%r12d
  Log(kDebug, "ScanAllBus: %s\n", err.Name());
  104518:	be 45 0e 10 00       	mov    $0x100e45,%esi
  10451d:	bf 07 00 00 00       	mov    $0x7,%edi
  104522:	31 c0                	xor    %eax,%eax
  104524:	e8 f7 1d 00 00       	call   106320 <_Z3Log8LogLevelPKcz>

  for (int i = 0; i < pci::num_device; ++i) {
  104529:	83 3d 40 33 11 00 00 	cmpl   $0x0,0x113340(%rip)        # 217870 <_ZN3pci10num_deviceE>
  104530:	0f 8e e5 00 00 00    	jle    10461b <KernelMainNewStack+0x3eb>
  104536:	bb 74 78 21 00       	mov    $0x217874,%ebx
  10453b:	45 31 e4             	xor    %r12d,%r12d
  10453e:	66 90                	xchg   %ax,%ax
  104540:	0f b6 3b             	movzbl (%rbx),%edi
  104543:	0f b6 73 01          	movzbl 0x1(%rbx),%esi
  104547:	0f b6 53 02          	movzbl 0x2(%rbx),%edx
  10454b:	e8 40 0f 00 00       	call   105490 <_ZN3pci12ReadVendorIdEhhh>
  104550:	41 89 c7             	mov    %eax,%r15d
    const auto& dev = pci::devices[i];
    auto vendor_id = pci::ReadVendorId(dev);
    auto class_code = pci::ReadClassCode(dev.bus, dev.device, dev.function);
  104553:	0f b6 3b             	movzbl (%rbx),%edi
  104556:	0f b6 73 01          	movzbl 0x1(%rbx),%esi
  10455a:	0f b6 53 02          	movzbl 0x2(%rbx),%edx
  10455e:	e8 bd 0f 00 00       	call   105520 <_ZN3pci13ReadClassCodeEhhh>
  104563:	41 89 c2             	mov    %eax,%r10d
    Log(kDebug, "%d.%d.%d: vend %04x, class %08x, head %02x\n",
        dev.bus, dev.device, dev.function,
  104566:	0f b6 13             	movzbl (%rbx),%edx
  104569:	0f b6 4b 01          	movzbl 0x1(%rbx),%ecx
  10456d:	44 0f b6 43 02       	movzbl 0x2(%rbx),%r8d
        vendor_id, class_code, dev.header_type);
  104572:	45 0f b7 cf          	movzwl %r15w,%r9d
  104576:	44 0f b6 5b 03       	movzbl 0x3(%rbx),%r11d
    Log(kDebug, "%d.%d.%d: vend %04x, class %08x, head %02x\n",
  10457b:	be e1 0e 10 00       	mov    $0x100ee1,%esi
  104580:	bf 07 00 00 00       	mov    $0x7,%edi
  104585:	31 c0                	xor    %eax,%eax
  104587:	41 53                	push   %r11
  104589:	41 52                	push   %r10
  10458b:	e8 90 1d 00 00       	call   106320 <_Z3Log8LogLevelPKcz>
  104590:	48 83 c4 10          	add    $0x10,%rsp
  for (int i = 0; i < pci::num_device; ++i) {
  104594:	49 83 c4 01          	add    $0x1,%r12
  104598:	48 63 05 d1 32 11 00 	movslq 0x1132d1(%rip),%rax        # 217870 <_ZN3pci10num_deviceE>
  10459f:	48 83 c3 07          	add    $0x7,%rbx
  1045a3:	49 39 c4             	cmp    %rax,%r12
  1045a6:	7c 98                	jl     104540 <KernelMainNewStack+0x310>
  }

  // Intel 製を優先して xHC を探す
  pci::Device* xhc_dev = nullptr;
  for (int i = 0; i < pci::num_device; ++i) {
  1045a8:	85 c0                	test   %eax,%eax
  1045aa:	0f 8e 9a 00 00 00    	jle    10464a <KernelMainNewStack+0x41a>
  1045b0:	bb 74 78 21 00       	mov    $0x217874,%ebx
  1045b5:	45 31 ff             	xor    %r15d,%r15d
  1045b8:	45 31 e4             	xor    %r12d,%r12d
  1045bb:	4c 8d 75 a0          	lea    -0x60(%rbp),%r14
  1045bf:	eb 1f                	jmp    1045e0 <KernelMainNewStack+0x3b0>
  1045c1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1045c8:	00 00 00 
  1045cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  1045d0:	49 83 c7 01          	add    $0x1,%r15
  1045d4:	48 63 c8             	movslq %eax,%rcx
  1045d7:	48 83 c3 07          	add    $0x7,%rbx
  1045db:	49 39 cf             	cmp    %rcx,%r15
  1045de:	7d 41                	jge    104621 <KernelMainNewStack+0x3f1>
    bool Match(uint8_t b) { return b == base; }
  1045e0:	80 7b 04 0c          	cmpb   $0xc,0x4(%rbx)
    bool Match(uint8_t b, uint8_t s) { return Match(b) && s == sub; }
  1045e4:	75 ea                	jne    1045d0 <KernelMainNewStack+0x3a0>
  1045e6:	80 7b 05 03          	cmpb   $0x3,0x5(%rbx)
      return Match(b, s) && i == interface;
  1045ea:	75 e4                	jne    1045d0 <KernelMainNewStack+0x3a0>
  1045ec:	80 7b 06 30          	cmpb   $0x30,0x6(%rbx)
    if (pci::devices[i].class_code.Match(0x0cu, 0x03u, 0x30u)) {
  1045f0:	75 de                	jne    1045d0 <KernelMainNewStack+0x3a0>
    return ReadVendorId(dev.bus, dev.device, dev.function);
  1045f2:	0f b6 3b             	movzbl (%rbx),%edi
  1045f5:	0f b6 73 01          	movzbl 0x1(%rbx),%esi
  1045f9:	0f b6 53 02          	movzbl 0x2(%rbx),%edx
  1045fd:	e8 8e 0e 00 00       	call   105490 <_ZN3pci12ReadVendorIdEhhh>
      xhc_dev = &pci::devices[i];

      if (0x8086 == pci::ReadVendorId(*xhc_dev)) {
  104602:	0f b7 c0             	movzwl %ax,%eax
  104605:	3d 86 80 00 00       	cmp    $0x8086,%eax
  10460a:	0f 84 57 03 00 00    	je     104967 <KernelMainNewStack+0x737>
  for (int i = 0; i < pci::num_device; ++i) {
  104610:	8b 05 5a 32 11 00    	mov    0x11325a(%rip),%eax        # 217870 <_ZN3pci10num_deviceE>
  104616:	49 89 dc             	mov    %rbx,%r12
  104619:	eb b5                	jmp    1045d0 <KernelMainNewStack+0x3a0>
  10461b:	4c 8d 75 a0          	lea    -0x60(%rbp),%r14
  10461f:	eb 35                	jmp    104656 <KernelMainNewStack+0x426>
        break;
      }
    }
  }

  if (xhc_dev) {
  104621:	4d 85 e4             	test   %r12,%r12
  104624:	74 2d                	je     104653 <KernelMainNewStack+0x423>
    Log(kInfo, "xHC has been found: %d.%d.%d\n",
        xhc_dev->bus, xhc_dev->device, xhc_dev->function);
  104626:	41 0f b6 14 24       	movzbl (%r12),%edx
  10462b:	41 0f b6 4c 24 01    	movzbl 0x1(%r12),%ecx
  104631:	45 0f b6 44 24 02    	movzbl 0x2(%r12),%r8d
    Log(kInfo, "xHC has been found: %d.%d.%d\n",
  104637:	be c7 09 10 00       	mov    $0x1009c7,%esi
  10463c:	bf 06 00 00 00       	mov    $0x6,%edi
  104641:	31 c0                	xor    %eax,%eax
  104643:	e8 d8 1c 00 00       	call   106320 <_Z3Log8LogLevelPKcz>
  104648:	eb 0c                	jmp    104656 <KernelMainNewStack+0x426>
  10464a:	45 31 e4             	xor    %r12d,%r12d
  10464d:	4c 8d 75 a0          	lea    -0x60(%rbp),%r14
  104651:	eb 03                	jmp    104656 <KernelMainNewStack+0x426>
  104653:	45 31 e4             	xor    %r12d,%r12d
  }
  printk("2023/6/28 dev:2\n");
  104656:	bf dc 04 10 00       	mov    $0x1004dc,%edi
  10465b:	31 c0                	xor    %eax,%eax
  10465d:	e8 be f8 ff ff       	call   103f20 <_Z6printkPKcz>

  SetIDTEntry(idt[InterruptVector::kXHCI], MakeIDTAttr(DescriptorType::kInterruptGate, 0),
  104662:	bf 54 7d 21 00       	mov    $0x217d54,%edi
  104667:	ba e0 40 10 00       	mov    $0x1040e0,%edx
  10466c:	be 00 8e 00 00       	mov    $0x8e00,%esi
  104671:	b9 08 00 00 00       	mov    $0x8,%ecx
  104676:	e8 65 1d 00 00       	call   1063e0 <_Z11SetIDTEntryR19InterruptDescriptor28InterruptDescriptorAttributemt>
              reinterpret_cast<uint64_t>(IntHandlerXHCI), kernel_cs);
  LoadIDT(sizeof(idt) - 1, reinterpret_cast<uintptr_t>(&idt[0]));
  10467b:	be 54 79 21 00       	mov    $0x217954,%esi
  104680:	bf ff 0f 00 00       	mov    $0xfff,%edi
  104685:	e8 f8 1b 00 00       	call   106282 <LoadIDT>
  10468a:	b8 23 00 e0 fe       	mov    $0xfee00023,%eax

  const uint8_t bsp_local_apic_id =
    *reinterpret_cast<const uint32_t*>(0xfee00020) >> 24;
  10468f:	0f b6 30             	movzbl (%rax),%esi
  pci::ConfigureMSIFixedDestination(
  104692:	4c 89 e7             	mov    %r12,%rdi
  104695:	ba 01 00 00 00       	mov    $0x1,%edx
  10469a:	31 c9                	xor    %ecx,%ecx
  10469c:	41 b8 40 00 00 00    	mov    $0x40,%r8d
  1046a2:	45 31 c9             	xor    %r9d,%r9d
  1046a5:	e8 46 1a 00 00       	call   1060f0 <_ZN3pci28ConfigureMSIFixedDestinationERKNS_6DeviceEhNS_14MSITriggerModeENS_15MSIDeliveryModeEhj>
  1046aa:	48 8d bd b8 fe ff ff 	lea    -0x148(%rbp),%rdi
      *xhc_dev, bsp_local_apic_id,
      pci::MSITriggerMode::kLevel, pci::MSIDeliveryMode::kFixed,
      InterruptVector::kXHCI, 0);

  const WithError<uint64_t> xhc_bar = pci::ReadBar(*xhc_dev, 0);
  1046b1:	4c 89 e6             	mov    %r12,%rsi
  1046b4:	31 d2                	xor    %edx,%edx
  1046b6:	e8 e5 13 00 00       	call   105aa0 <_ZN3pci7ReadBarERNS_6DeviceEj>
  1046bb:	48 63 85 c0 fe ff ff 	movslq -0x140(%rbp),%rax
  1046c2:	48 8b 14 c5 c0 10 10 	mov    0x1010c0(,%rax,8),%rdx
  1046c9:	00 
  Log(kDebug, "ReadBar: %s\n", xhc_bar.error.Name());
  1046ca:	be 8b 0f 10 00       	mov    $0x100f8b,%esi
  1046cf:	bf 07 00 00 00       	mov    $0x7,%edi
  1046d4:	31 c0                	xor    %eax,%eax
  1046d6:	e8 45 1c 00 00       	call   106320 <_Z3Log8LogLevelPKcz>
  const uint64_t xhc_mmio_base = xhc_bar.value & ~static_cast<uint64_t>(0xf);
  1046db:	48 8b 9d b8 fe ff ff 	mov    -0x148(%rbp),%rbx
  1046e2:	48 83 e3 f0          	and    $0xfffffffffffffff0,%rbx
  Log(kDebug, "xHC mmio_base = %08lx\n", xhc_mmio_base);
  1046e6:	be f9 0d 10 00       	mov    $0x100df9,%esi
  1046eb:	bf 07 00 00 00       	mov    $0x7,%edi
  1046f0:	48 89 da             	mov    %rbx,%rdx
  1046f3:	31 c0                	xor    %eax,%eax
  1046f5:	e8 26 1c 00 00       	call   106320 <_Z3Log8LogLevelPKcz>
  1046fa:	4c 8d bd d0 fe ff ff 	lea    -0x130(%rbp),%r15

  usb::xhci::Controller xhc{xhc_mmio_base};
  104701:	4c 89 ff             	mov    %r15,%rdi
  104704:	48 89 de             	mov    %rbx,%rsi
  104707:	e8 44 30 00 00       	call   107750 <_ZN3usb4xhci10ControllerC1Em>
  10470c:	41 0f b6 3c 24       	movzbl (%r12),%edi
  104711:	41 0f b6 74 24 01    	movzbl 0x1(%r12),%esi
  104717:	41 0f b6 54 24 02    	movzbl 0x2(%r12),%edx
  10471d:	e8 6e 0d 00 00       	call   105490 <_ZN3pci12ReadVendorIdEhhh>

  if (0x8086 == pci::ReadVendorId(*xhc_dev)) {
  104722:	0f b7 c0             	movzwl %ax,%eax
  104725:	3d 86 80 00 00       	cmp    $0x8086,%eax
  10472a:	75 08                	jne    104734 <KernelMainNewStack+0x504>
    SwitchEhci2Xhci(*xhc_dev);
  10472c:	4c 89 e7             	mov    %r12,%rdi
  10472f:	e8 cc f8 ff ff       	call   104000 <_Z15SwitchEhci2XhciRKN3pci6DeviceE>
  }
  {
    auto err = xhc.Initialize();
  104734:	4c 89 ff             	mov    %r15,%rdi
  104737:	e8 44 30 00 00       	call   107780 <_ZN3usb4xhci10Controller10InitializeEv>
  10473c:	48 98                	cltq   
  10473e:	48 8b 14 c5 c0 10 10 	mov    0x1010c0(,%rax,8),%rdx
  104745:	00 
    Log(kDebug, "xhc.Initialize: %s\n", err.Name());
  104746:	be c1 03 10 00       	mov    $0x1003c1,%esi
  10474b:	bf 07 00 00 00       	mov    $0x7,%edi
  104750:	31 c0                	xor    %eax,%eax
  104752:	e8 c9 1b 00 00       	call   106320 <_Z3Log8LogLevelPKcz>
  }

  Log(kInfo, "xHC starting\n");
  104757:	be 9a 06 10 00       	mov    $0x10069a,%esi
  10475c:	bf 06 00 00 00       	mov    $0x6,%edi
  104761:	31 c0                	xor    %eax,%eax
  104763:	e8 b8 1b 00 00       	call   106320 <_Z3Log8LogLevelPKcz>
  xhc.Run();
  104768:	4c 89 ff             	mov    %r15,%rdi
  10476b:	e8 a0 32 00 00       	call   107a10 <_ZN3usb4xhci10Controller3RunEv>

  ::xhc = &xhc;
  104770:	4c 89 3d e9 30 01 00 	mov    %r15,0x130e9(%rip)        # 117860 <xhc>
    explicit __func(const _Fp& __f, _Alloc&& __a)
        : __f_(__f, _VSTD::move(__a)) {}

    _LIBCPP_INLINE_VISIBILITY
    explicit __func(_Fp&& __f, _Alloc&& __a)
        : __f_(_VSTD::move(__f), _VSTD::move(__a)) {}
  104777:	48 c7 45 a0 78 11 10 	movq   $0x101178,-0x60(%rbp)
  10477e:	00 

  template <class... _Args, size_t... _Indexes>
  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
  __compressed_pair_elem(piecewise_construct_t, tuple<_Args...> __args,
                         __tuple_indices<_Indexes...>)
      : __value_(_VSTD::forward<_Args>(_VSTD::get<_Indexes>(__args))...) {}
  10477f:	48 c7 45 a8 e0 3f 10 	movq   $0x103fe0,-0x58(%rbp)
  104786:	00 
            _FunAlloc __af(__a);
            if (sizeof(_Fun) <= sizeof(__buf_) &&
                is_nothrow_copy_constructible<_Fp>::value &&
                is_nothrow_copy_constructible<_FunAlloc>::value)
            {
                __f_ =
  104787:	4c 89 75 c0          	mov    %r14,-0x40(%rbp)

template<class _Rp, class ..._ArgTypes>
void
function<_Rp(_ArgTypes...)>::swap(function& __f) _NOEXCEPT
{
    __f_.swap(__f.__f_);
  10478b:	be 40 b4 27 00       	mov    $0x27b440,%esi
  104790:	4c 89 f7             	mov    %r14,%rdi
  104793:	e8 a8 02 00 00       	call   104a40 <_ZNSt3__110__function12__value_funcIFvaaEE4swapERS3_>
        if ((void*)__f_ == &__buf_)
  104798:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10479c:	49 39 fe             	cmp    %rdi,%r14
  10479f:	74 19                	je     1047ba <KernelMainNewStack+0x58a>
        else if (__f_)
  1047a1:	48 85 ff             	test   %rdi,%rdi
  1047a4:	74 06                	je     1047ac <KernelMainNewStack+0x57c>
            __f_->destroy_deallocate();
  1047a6:	48 8b 07             	mov    (%rdi),%rax
  1047a9:	ff 50 28             	call   *0x28(%rax)

  usb::HIDMouseDriver::default_observer = MouseObserver;

  for (int i = 1; i <= xhc.MaxPorts(); ++i) {
  1047ac:	80 bd e8 fe ff ff 00 	cmpb   $0x0,-0x118(%rbp)
  1047b3:	75 18                	jne    1047cd <KernelMainNewStack+0x59d>
  1047b5:	e9 c8 00 00 00       	jmp    104882 <KernelMainNewStack+0x652>
            __f_->destroy();
  1047ba:	48 8b 07             	mov    (%rdi),%rax
  1047bd:	ff 50 20             	call   *0x20(%rax)
  1047c0:	80 bd e8 fe ff ff 00 	cmpb   $0x0,-0x118(%rbp)
  1047c7:	0f 84 b5 00 00 00    	je     104882 <KernelMainNewStack+0x652>
  1047cd:	4c 8d 7d a0          	lea    -0x60(%rbp),%r15
  1047d1:	4c 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%r14
  1047d8:	45 31 e4             	xor    %r12d,%r12d
  1047db:	31 db                	xor    %ebx,%ebx
  1047dd:	eb 15                	jmp    1047f4 <KernelMainNewStack+0x5c4>
  1047df:	90                   	nop
    EventRing* PrimaryEventRing() { return &er_; }
    DoorbellRegister* DoorbellRegisterAt(uint8_t index);
    Port PortAt(uint8_t port_num) {
      return Port{port_num, PortRegisterSets()[port_num - 1]};
    }
    uint8_t MaxPorts() const { return max_ports_; }
  1047e0:	0f b6 85 e8 fe ff ff 	movzbl -0x118(%rbp),%eax
  1047e7:	48 83 c3 10          	add    $0x10,%rbx
  1047eb:	49 39 c4             	cmp    %rax,%r12
  1047ee:	0f 83 8e 00 00 00    	jae    104882 <KernelMainNewStack+0x652>
    InterrupterRegisterSetArray InterrupterRegisterSets() const {
      return {mmio_base_ + cap_->RTSOFF.Read().Offset() + 0x20u, 1024};
    }

    PortRegisterSetArray PortRegisterSets() const {
      return {reinterpret_cast<uintptr_t>(op_) + 0x400u, max_ports_};
  1047f4:	49 83 c4 01          	add    $0x1,%r12
  1047f8:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
    auto port = xhc.PortAt(i);
  1047ff:	48 01 d8             	add    %rbx,%rax
  104802:	48 05 00 04 00 00    	add    $0x400,%rax
  104808:	44 88 65 a0          	mov    %r12b,-0x60(%rbp)
  10480c:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    Log(kDebug, "Port %d: IsConnected=%d\n", i, port.IsConnected());
  104810:	4c 89 ff             	mov    %r15,%rdi
  104813:	e8 a8 3f 00 00       	call   1087c0 <_ZNK3usb4xhci4Port11IsConnectedEv>
  104818:	0f b6 c8             	movzbl %al,%ecx
  10481b:	be 55 0e 10 00       	mov    $0x100e55,%esi
  104820:	bf 07 00 00 00       	mov    $0x7,%edi
  104825:	44 89 e2             	mov    %r12d,%edx
  104828:	31 c0                	xor    %eax,%eax
  10482a:	e8 f1 1a 00 00       	call   106320 <_Z3Log8LogLevelPKcz>

    if (port.IsConnected()) {
  10482f:	4c 89 ff             	mov    %r15,%rdi
  104832:	e8 89 3f 00 00       	call   1087c0 <_ZNK3usb4xhci4Port11IsConnectedEv>
  104837:	84 c0                	test   %al,%al
  104839:	74 a5                	je     1047e0 <KernelMainNewStack+0x5b0>
      if (auto err = ConfigurePort(xhc, port)) {
  10483b:	4c 89 f7             	mov    %r14,%rdi
  10483e:	4c 89 fe             	mov    %r15,%rsi
  104841:	e8 2a 32 00 00       	call   107a70 <_ZN3usb4xhci13ConfigurePortERNS0_10ControllerERNS0_4PortE>
    return this->code_ != kSuccess;
  104846:	85 c0                	test   %eax,%eax
  104848:	74 96                	je     1047e0 <KernelMainNewStack+0x5b0>
  10484a:	48 89 d1             	mov    %rdx,%rcx
  10484d:	49 89 c0             	mov    %rax,%r8
  104850:	49 c1 e8 20          	shr    $0x20,%r8
  104854:	48 98                	cltq   
    return code_names_[static_cast<int>(this->code_)];
  104856:	48 8b 14 c5 c0 10 10 	mov    0x1010c0(,%rax,8),%rdx
  10485d:	00 
        Log(kError, "failed to configure port: %s at %s:%d\n",
  10485e:	be 42 0d 10 00       	mov    $0x100d42,%esi
  104863:	bf 03 00 00 00       	mov    $0x3,%edi
  104868:	31 c0                	xor    %eax,%eax
  10486a:	e8 b1 1a 00 00       	call   106320 <_Z3Log8LogLevelPKcz>
  10486f:	e9 6c ff ff ff       	jmp    1047e0 <KernelMainNewStack+0x5b0>
  104874:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10487b:	00 00 00 
  10487e:	66 90                	xchg   %ax,%ax
  }

  while (true) {
    __asm__("cli");
    if (main_queue.Count() == 0) {
      __asm__("sti\n\thlt");
  104880:	fb                   	sti    
  104881:	f4                   	hlt    
    __asm__("cli");
  104882:	fa                   	cli    
  return MAKE_ERROR(Error::kSuccess);
}

template <typename T>
size_t ArrayQueue<T>::Count() const {
  return count_;
  104883:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    if (main_queue.Count() == 0) {
  10488a:	48 85 c0             	test   %rax,%rax
  10488d:	74 f1                	je     104880 <KernelMainNewStack+0x650>
  return capacity_;
}

template <typename T>
const T& ArrayQueue<T>::Front() const {
  return data_[read_pos_];
  10488f:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  104896:	48 8b b5 58 ff ff ff 	mov    -0xa8(%rbp),%rsi
      continue;
    }

    Message msg = main_queue.Front();
  10489d:	8b 14 b1             	mov    (%rcx,%rsi,4),%edx
  --count_;
  1048a0:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
  1048a4:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  ++read_pos_;
  1048ab:	48 83 c6 01          	add    $0x1,%rsi
  1048af:	31 c0                	xor    %eax,%eax
  if (read_pos_ == capacity_) {
  1048b1:	48 3b b5 70 ff ff ff 	cmp    -0x90(%rbp),%rsi
  1048b8:	48 0f 45 c6          	cmovne %rsi,%rax
  1048bc:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
    main_queue.Pop();
    __asm__("sti");
  1048c3:	fb                   	sti    

    switch (msg.type) {
  1048c4:	85 d2                	test   %edx,%edx
  1048c6:	74 18                	je     1048e0 <KernelMainNewStack+0x6b0>
              err.Name(), err.File(), err.Line());
        }
      }
      break;
    default:
      Log(kError, "Unknown message type: %d\n", msg.type);
  1048c8:	be 5f 05 10 00       	mov    $0x10055f,%esi
  1048cd:	bf 03 00 00 00       	mov    $0x3,%edi
  1048d2:	31 c0                	xor    %eax,%eax
  1048d4:	e8 47 1a 00 00       	call   106320 <_Z3Log8LogLevelPKcz>
  1048d9:	eb a7                	jmp    104882 <KernelMainNewStack+0x652>
  1048db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  class EventRing {
   public:
    Error Initialize(size_t buf_size, InterrupterRegisterSet* interrupter);

    TRB* ReadDequeuePointer() const {
      return reinterpret_cast<TRB*>(interrupter_->ERDP.Read().Pointer());
  1048e0:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
class MemMapRegister {
 public:
  T Read() const {
    T tmp;
    for (size_t i = 0; i < len_; ++i) {
      tmp.data[i] = value_.data[i];
  1048e7:	48 8b 40 18          	mov    0x18(%rax),%rax
      uint64_t event_handler_busy : 1;
      uint64_t event_ring_dequeue_pointer : 60;
    } __attribute__((packed)) bits;

    uint64_t Pointer() const {
      return bits.event_ring_dequeue_pointer << 4;
  1048eb:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
    }

    void WriteDequeuePointer(TRB* p);

    bool HasFront() const {
      return Front()->bits.cycle_bit == cycle_bit_;
  1048ef:	8b 40 0c             	mov    0xc(%rax),%eax
  1048f2:	83 e0 01             	and    $0x1,%eax
  1048f5:	0f b6 8d 38 ff ff ff 	movzbl -0xc8(%rbp),%ecx
  1048fc:	39 c8                	cmp    %ecx,%eax
      while (xhc.PrimaryEventRing()->HasFront()) {
  1048fe:	75 82                	jne    104882 <KernelMainNewStack+0x652>
  104900:	48 8d 9d d0 fe ff ff 	lea    -0x130(%rbp),%rbx
  104907:	eb 2b                	jmp    104934 <KernelMainNewStack+0x704>
  104909:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      return reinterpret_cast<TRB*>(interrupter_->ERDP.Read().Pointer());
  104910:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  104917:	48 8b 40 18          	mov    0x18(%rax),%rax
  10491b:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
      return Front()->bits.cycle_bit == cycle_bit_;
  10491f:	8b 40 0c             	mov    0xc(%rax),%eax
  104922:	83 e0 01             	and    $0x1,%eax
  104925:	0f b6 8d 38 ff ff ff 	movzbl -0xc8(%rbp),%ecx
  10492c:	39 c8                	cmp    %ecx,%eax
  10492e:	0f 85 4e ff ff ff    	jne    104882 <KernelMainNewStack+0x652>
        if (auto err = ProcessEvent(xhc)) {
  104934:	48 89 df             	mov    %rbx,%rdi
  104937:	e8 b4 35 00 00       	call   107ef0 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE>
    return this->code_ != kSuccess;
  10493c:	85 c0                	test   %eax,%eax
  10493e:	74 d0                	je     104910 <KernelMainNewStack+0x6e0>
  104940:	48 89 d1             	mov    %rdx,%rcx
  104943:	49 89 c0             	mov    %rax,%r8
  104946:	49 c1 e8 20          	shr    $0x20,%r8
  10494a:	48 98                	cltq   
    return code_names_[static_cast<int>(this->code_)];
  10494c:	48 8b 14 c5 c0 10 10 	mov    0x1010c0(,%rax,8),%rdx
  104953:	00 
          Log(kError, "Error while ProcessEvent: %s at %s:%d\n",
  104954:	be e1 07 10 00       	mov    $0x1007e1,%esi
  104959:	bf 03 00 00 00       	mov    $0x3,%edi
  10495e:	31 c0                	xor    %eax,%eax
  104960:	e8 bb 19 00 00       	call   106320 <_Z3Log8LogLevelPKcz>
  104965:	eb a9                	jmp    104910 <KernelMainNewStack+0x6e0>
  104967:	49 89 dc             	mov    %rbx,%r12
  10496a:	e9 b7 fc ff ff       	jmp    104626 <KernelMainNewStack+0x3f6>
  10496f:	90                   	nop

0000000000104970 <__cxa_pure_virtual>:
    }
  }
}

extern "C" void __cxa_pure_virtual() {
  104970:	55                   	push   %rbp
  104971:	48 89 e5             	mov    %rsp,%rbp
  104974:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10497b:	00 00 00 
  10497e:	66 90                	xchg   %ax,%ax
  while (1) __asm__("hlt");
  104980:	f4                   	hlt    
  104981:	eb fd                	jmp    104980 <__cxa_pure_virtual+0x10>
  104983:	cc                   	int3   
  104984:	cc                   	int3   
  104985:	cc                   	int3   
  104986:	cc                   	int3   
  104987:	cc                   	int3   
  104988:	cc                   	int3   
  104989:	cc                   	int3   
  10498a:	cc                   	int3   
  10498b:	cc                   	int3   
  10498c:	cc                   	int3   
  10498d:	cc                   	int3   
  10498e:	cc                   	int3   
  10498f:	cc                   	int3   

0000000000104990 <_ZNSt3__110__function6__baseIFvaaEED2Ev>:
    _LIBCPP_INLINE_VISIBILITY virtual ~__base() {}
  104990:	55                   	push   %rbp
  104991:	48 89 e5             	mov    %rsp,%rbp
  104994:	5d                   	pop    %rbp
  104995:	c3                   	ret    
  104996:	cc                   	int3   
  104997:	cc                   	int3   
  104998:	cc                   	int3   
  104999:	cc                   	int3   
  10499a:	cc                   	int3   
  10499b:	cc                   	int3   
  10499c:	cc                   	int3   
  10499d:	cc                   	int3   
  10499e:	cc                   	int3   
  10499f:	cc                   	int3   

00000000001049a0 <_ZNSt3__110__function6__funcIPFvaaENS_9allocatorIS3_EES2_ED0Ev>:
template<class _FD, class _Alloc, class _FB> class __func;
  1049a0:	55                   	push   %rbp
  1049a1:	48 89 e5             	mov    %rsp,%rbp
  1049a4:	5d                   	pop    %rbp
  1049a5:	e9 86 f0 00 00       	jmp    113a30 <_ZdlPv>
  1049aa:	cc                   	int3   
  1049ab:	cc                   	int3   
  1049ac:	cc                   	int3   
  1049ad:	cc                   	int3   
  1049ae:	cc                   	int3   
  1049af:	cc                   	int3   

00000000001049b0 <_ZNKSt3__110__function6__funcIPFvaaENS_9allocatorIS3_EES2_E7__cloneEv>:
{
  1049b0:	55                   	push   %rbp
  1049b1:	48 89 e5             	mov    %rsp,%rbp
  1049b4:	53                   	push   %rbx
  1049b5:	50                   	push   %rax
  1049b6:	48 89 fb             	mov    %rdi,%rbx
  ((void)__align);
#endif
#ifdef _LIBCPP_HAS_NO_BUILTIN_OPERATOR_NEW_DELETE
  return ::operator new(__size);
#else
  return __builtin_operator_new(__size);
  1049b9:	bf 10 00 00 00       	mov    $0x10,%edi
  1049be:	e8 dd ef 00 00       	call   1139a0 <_Znwm>
        : __f_(__f, _VSTD::move(__a)) {}
  1049c3:	48 c7 00 78 11 10 00 	movq   $0x101178,(%rax)
  1049ca:	48 8b 4b 08          	mov    0x8(%rbx),%rcx
  1049ce:	48 89 48 08          	mov    %rcx,0x8(%rax)
}
  1049d2:	48 83 c4 08          	add    $0x8,%rsp
  1049d6:	5b                   	pop    %rbx
  1049d7:	5d                   	pop    %rbp
  1049d8:	c3                   	ret    
  1049d9:	cc                   	int3   
  1049da:	cc                   	int3   
  1049db:	cc                   	int3   
  1049dc:	cc                   	int3   
  1049dd:	cc                   	int3   
  1049de:	cc                   	int3   
  1049df:	cc                   	int3   

00000000001049e0 <_ZNKSt3__110__function6__funcIPFvaaENS_9allocatorIS3_EES2_E7__cloneEPNS0_6__baseIS2_EE>:
{
  1049e0:	55                   	push   %rbp
  1049e1:	48 89 e5             	mov    %rsp,%rbp
        : __f_(__f, __a) {}
  1049e4:	48 c7 06 78 11 10 00 	movq   $0x101178,(%rsi)
  1049eb:	48 8b 47 08          	mov    0x8(%rdi),%rax
  1049ef:	48 89 46 08          	mov    %rax,0x8(%rsi)
}
  1049f3:	5d                   	pop    %rbp
  1049f4:	c3                   	ret    
  1049f5:	cc                   	int3   
  1049f6:	cc                   	int3   
  1049f7:	cc                   	int3   
  1049f8:	cc                   	int3   
  1049f9:	cc                   	int3   
  1049fa:	cc                   	int3   
  1049fb:	cc                   	int3   
  1049fc:	cc                   	int3   
  1049fd:	cc                   	int3   
  1049fe:	cc                   	int3   
  1049ff:	cc                   	int3   

0000000000104a00 <_ZNSt3__110__function6__funcIPFvaaENS_9allocatorIS3_EES2_E7destroyEv>:
{
  104a00:	55                   	push   %rbp
  104a01:	48 89 e5             	mov    %rsp,%rbp
}
  104a04:	5d                   	pop    %rbp
  104a05:	c3                   	ret    
  104a06:	cc                   	int3   
  104a07:	cc                   	int3   
  104a08:	cc                   	int3   
  104a09:	cc                   	int3   
  104a0a:	cc                   	int3   
  104a0b:	cc                   	int3   
  104a0c:	cc                   	int3   
  104a0d:	cc                   	int3   
  104a0e:	cc                   	int3   
  104a0f:	cc                   	int3   

0000000000104a10 <_ZNSt3__110__function6__funcIPFvaaENS_9allocatorIS3_EES2_E18destroy_deallocateEv>:
{
  104a10:	55                   	push   %rbp
  104a11:	48 89 e5             	mov    %rsp,%rbp

  static inline void __do_call(void *__ptr) {
#ifdef _LIBCPP_HAS_NO_BUILTIN_OPERATOR_NEW_DELETE
    return ::operator delete(__ptr);
#else
    return __builtin_operator_delete(__ptr);
  104a14:	5d                   	pop    %rbp
  104a15:	e9 16 f0 00 00       	jmp    113a30 <_ZdlPv>
  104a1a:	cc                   	int3   
  104a1b:	cc                   	int3   
  104a1c:	cc                   	int3   
  104a1d:	cc                   	int3   
  104a1e:	cc                   	int3   
  104a1f:	cc                   	int3   

0000000000104a20 <_ZNSt3__110__function6__funcIPFvaaENS_9allocatorIS3_EES2_EclEOaS7_>:
{
  104a20:	55                   	push   %rbp
  104a21:	48 89 e5             	mov    %rsp,%rbp

template <class _Fp, class ..._Args>
inline _LIBCPP_INLINE_VISIBILITY
auto
__invoke(_Fp&& __f, _Args&& ...__args)
_LIBCPP_INVOKE_RETURN(_VSTD::forward<_Fp>(__f)(_VSTD::forward<_Args>(__args)...))
  104a24:	48 8b 47 08          	mov    0x8(%rdi),%rax
  104a28:	0f be 3e             	movsbl (%rsi),%edi
  104a2b:	0f be 32             	movsbl (%rdx),%esi
  104a2e:	5d                   	pop    %rbp
  104a2f:	ff e0                	jmp    *%rax
  104a31:	cc                   	int3   
  104a32:	cc                   	int3   
  104a33:	cc                   	int3   
  104a34:	cc                   	int3   
  104a35:	cc                   	int3   
  104a36:	cc                   	int3   
  104a37:	cc                   	int3   
  104a38:	cc                   	int3   
  104a39:	cc                   	int3   
  104a3a:	cc                   	int3   
  104a3b:	cc                   	int3   
  104a3c:	cc                   	int3   
  104a3d:	cc                   	int3   
  104a3e:	cc                   	int3   
  104a3f:	cc                   	int3   

0000000000104a40 <_ZNSt3__110__function12__value_funcIFvaaEE4swapERS3_>:
    {
  104a40:	55                   	push   %rbp
  104a41:	48 89 e5             	mov    %rsp,%rbp
  104a44:	41 57                	push   %r15
  104a46:	41 56                	push   %r14
  104a48:	53                   	push   %rbx
  104a49:	48 83 ec 28          	sub    $0x28,%rsp
        if (&__f == this)
  104a4d:	48 39 fe             	cmp    %rdi,%rsi
  104a50:	0f 84 c9 00 00 00    	je     104b1f <_ZNSt3__110__function12__value_funcIFvaaEE4swapERS3_+0xdf>
  104a56:	49 89 f6             	mov    %rsi,%r14
  104a59:	48 89 fb             	mov    %rdi,%rbx
        if ((void*)__f_ == &__buf_ && (void*)__f.__f_ == &__f.__buf_)
  104a5c:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
  104a60:	48 39 df             	cmp    %rbx,%rdi
  104a63:	74 16                	je     104a7b <_ZNSt3__110__function12__value_funcIFvaaEE4swapERS3_+0x3b>
        else if ((void*)__f.__f_ == &__f.__buf_)
  104a65:	49 8b 46 20          	mov    0x20(%r14),%rax
  104a69:	49 39 c6             	cmp    %rax,%r14
  104a6c:	74 30                	je     104a9e <_ZNSt3__110__function12__value_funcIFvaaEE4swapERS3_+0x5e>
#endif
swap(_Tp& __x, _Tp& __y) _NOEXCEPT_(is_nothrow_move_constructible<_Tp>::value &&
                                    is_nothrow_move_assignable<_Tp>::value)
{
    _Tp __t(_VSTD::move(__x));
    __x = _VSTD::move(__y);
  104a6e:	48 89 43 20          	mov    %rax,0x20(%rbx)
    __y = _VSTD::move(__t);
  104a72:	49 89 7e 20          	mov    %rdi,0x20(%r14)
  104a76:	e9 a4 00 00 00       	jmp    104b1f <_ZNSt3__110__function12__value_funcIFvaaEE4swapERS3_+0xdf>
        if ((void*)__f_ == &__buf_ && (void*)__f.__f_ == &__f.__buf_)
  104a7b:	4d 39 76 20          	cmp    %r14,0x20(%r14)
  104a7f:	74 41                	je     104ac2 <_ZNSt3__110__function12__value_funcIFvaaEE4swapERS3_+0x82>
            __f_->__clone(__as_base(&__f.__buf_));
  104a81:	48 8b 07             	mov    (%rdi),%rax
  104a84:	4c 89 f6             	mov    %r14,%rsi
  104a87:	ff 50 18             	call   *0x18(%rax)
            __f_->destroy();
  104a8a:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
  104a8e:	48 8b 07             	mov    (%rdi),%rax
  104a91:	ff 50 20             	call   *0x20(%rax)
            __f_ = __f.__f_;
  104a94:	49 8b 46 20          	mov    0x20(%r14),%rax
  104a98:	48 89 43 20          	mov    %rax,0x20(%rbx)
  104a9c:	eb 7d                	jmp    104b1b <_ZNSt3__110__function12__value_funcIFvaaEE4swapERS3_+0xdb>
            __f.__f_->__clone(__as_base(&__buf_));
  104a9e:	48 8b 08             	mov    (%rax),%rcx
  104aa1:	48 89 c7             	mov    %rax,%rdi
  104aa4:	48 89 de             	mov    %rbx,%rsi
  104aa7:	ff 51 18             	call   *0x18(%rcx)
            __f.__f_->destroy();
  104aaa:	49 8b 7e 20          	mov    0x20(%r14),%rdi
  104aae:	48 8b 07             	mov    (%rdi),%rax
  104ab1:	ff 50 20             	call   *0x20(%rax)
            __f.__f_ = __f_;
  104ab4:	48 8b 43 20          	mov    0x20(%rbx),%rax
  104ab8:	49 89 46 20          	mov    %rax,0x20(%r14)
            __f_ = __as_base(&__buf_);
  104abc:	48 89 5b 20          	mov    %rbx,0x20(%rbx)
  104ac0:	eb 5d                	jmp    104b1f <_ZNSt3__110__function12__value_funcIFvaaEE4swapERS3_+0xdf>
            __f_->__clone(__t);
  104ac2:	48 8b 07             	mov    (%rdi),%rax
  104ac5:	4c 8d 7d c0          	lea    -0x40(%rbp),%r15
  104ac9:	4c 89 fe             	mov    %r15,%rsi
  104acc:	ff 50 18             	call   *0x18(%rax)
            __f_->destroy();
  104acf:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
  104ad3:	48 8b 07             	mov    (%rdi),%rax
  104ad6:	ff 50 20             	call   *0x20(%rax)
            __f_ = 0;
  104ad9:	48 c7 43 20 00 00 00 	movq   $0x0,0x20(%rbx)
  104ae0:	00 
            __f.__f_->__clone(__as_base(&__buf_));
  104ae1:	49 8b 7e 20          	mov    0x20(%r14),%rdi
  104ae5:	48 8b 07             	mov    (%rdi),%rax
  104ae8:	48 89 de             	mov    %rbx,%rsi
  104aeb:	ff 50 18             	call   *0x18(%rax)
            __f.__f_->destroy();
  104aee:	49 8b 7e 20          	mov    0x20(%r14),%rdi
  104af2:	48 8b 07             	mov    (%rdi),%rax
  104af5:	ff 50 20             	call   *0x20(%rax)
            __f.__f_ = 0;
  104af8:	49 c7 46 20 00 00 00 	movq   $0x0,0x20(%r14)
  104aff:	00 
            __f_ = __as_base(&__buf_);
  104b00:	48 89 5b 20          	mov    %rbx,0x20(%rbx)
            __t->__clone(__as_base(&__f.__buf_));
  104b04:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  104b08:	4c 89 ff             	mov    %r15,%rdi
  104b0b:	4c 89 f6             	mov    %r14,%rsi
  104b0e:	ff 50 18             	call   *0x18(%rax)
            __t->destroy();
  104b11:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  104b15:	4c 89 ff             	mov    %r15,%rdi
  104b18:	ff 50 20             	call   *0x20(%rax)
  104b1b:	4d 89 76 20          	mov    %r14,0x20(%r14)
    }
  104b1f:	48 83 c4 28          	add    $0x28,%rsp
  104b23:	5b                   	pop    %rbx
  104b24:	41 5e                	pop    %r14
  104b26:	41 5f                	pop    %r15
  104b28:	5d                   	pop    %rbp
  104b29:	c3                   	ret    
  104b2a:	cc                   	int3   
  104b2b:	cc                   	int3   
  104b2c:	cc                   	int3   
  104b2d:	cc                   	int3   
  104b2e:	cc                   	int3   
  104b2f:	cc                   	int3   

0000000000104b30 <_ZN30RGBResv8BitPerColorPixelWriter5WriteEiiRK10PixelColor>:
 * 画像描画関連のプログラムを集めたファイル．
 */

#include "graphics.hpp"

void RGBResv8BitPerColorPixelWriter::Write(int x, int y, const PixelColor& c) {
  104b30:	55                   	push   %rbp
  104b31:	48 89 e5             	mov    %rsp,%rbp
    return config_.frame_buffer + 4 * (config_.pixels_per_scan_line * y + x);
  104b34:	48 8b 47 08          	mov    0x8(%rdi),%rax
  104b38:	48 8b 38             	mov    (%rax),%rdi
  104b3b:	0f af 50 08          	imul   0x8(%rax),%edx
  104b3f:	01 f2                	add    %esi,%edx
  104b41:	c1 e2 02             	shl    $0x2,%edx
  auto p = PixelAt(x, y);
  p[0] = c.r;
  104b44:	8a 01                	mov    (%rcx),%al
  104b46:	88 04 17             	mov    %al,(%rdi,%rdx,1)
  p[1] = c.g;
  104b49:	8a 41 01             	mov    0x1(%rcx),%al
  104b4c:	88 44 17 01          	mov    %al,0x1(%rdi,%rdx,1)
  p[2] = c.b;
  104b50:	8a 41 02             	mov    0x2(%rcx),%al
  104b53:	88 44 17 02          	mov    %al,0x2(%rdi,%rdx,1)
}
  104b57:	5d                   	pop    %rbp
  104b58:	c3                   	ret    
  104b59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000104b60 <_ZN30BGRResv8BitPerColorPixelWriter5WriteEiiRK10PixelColor>:

void BGRResv8BitPerColorPixelWriter::Write(int x, int y, const PixelColor& c) {
  104b60:	55                   	push   %rbp
  104b61:	48 89 e5             	mov    %rsp,%rbp
  104b64:	48 8b 47 08          	mov    0x8(%rdi),%rax
  104b68:	48 8b 38             	mov    (%rax),%rdi
  104b6b:	0f af 50 08          	imul   0x8(%rax),%edx
  104b6f:	01 f2                	add    %esi,%edx
  104b71:	c1 e2 02             	shl    $0x2,%edx
  auto p = PixelAt(x, y);
  p[0] = c.b;
  104b74:	8a 41 02             	mov    0x2(%rcx),%al
  104b77:	88 04 17             	mov    %al,(%rdi,%rdx,1)
  p[1] = c.g;
  104b7a:	8a 41 01             	mov    0x1(%rcx),%al
  104b7d:	88 44 17 01          	mov    %al,0x1(%rdi,%rdx,1)
  p[2] = c.r;
  104b81:	8a 01                	mov    (%rcx),%al
  104b83:	88 44 17 02          	mov    %al,0x2(%rdi,%rdx,1)
}
  104b87:	5d                   	pop    %rbp
  104b88:	c3                   	ret    
  104b89:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000104b90 <_Z13DrawRectangleR11PixelWriterRK8Vector2DIiES4_RK10PixelColor>:

void DrawRectangle(PixelWriter& writer, const Vector2D<int>& pos,
                   const Vector2D<int>& size, const PixelColor& c) {
  104b90:	55                   	push   %rbp
  104b91:	48 89 e5             	mov    %rsp,%rbp
  104b94:	41 57                	push   %r15
  104b96:	41 56                	push   %r14
  104b98:	41 55                	push   %r13
  104b9a:	41 54                	push   %r12
  104b9c:	53                   	push   %rbx
  104b9d:	50                   	push   %rax
  104b9e:	49 89 ce             	mov    %rcx,%r14
  104ba1:	49 89 d7             	mov    %rdx,%r15
  104ba4:	49 89 f4             	mov    %rsi,%r12
  104ba7:	49 89 fd             	mov    %rdi,%r13
  for (int dx = 0; dx < size.x; ++dx) {
  104baa:	83 3a 00             	cmpl   $0x0,(%rdx)
  104bad:	7e 53                	jle    104c02 <_Z13DrawRectangleR11PixelWriterRK8Vector2DIiES4_RK10PixelColor+0x72>
  104baf:	31 db                	xor    %ebx,%ebx
  104bb1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  104bb8:	00 00 00 
  104bbb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  104bc0:	41 8b 34 24          	mov    (%r12),%esi
    writer.Write(pos.x + dx, pos.y, c);
  104bc4:	01 de                	add    %ebx,%esi
  104bc6:	41 8b 54 24 04       	mov    0x4(%r12),%edx
  104bcb:	49 8b 45 00          	mov    0x0(%r13),%rax
  104bcf:	4c 89 ef             	mov    %r13,%rdi
  104bd2:	4c 89 f1             	mov    %r14,%rcx
  104bd5:	ff 50 10             	call   *0x10(%rax)
  104bd8:	41 8b 34 24          	mov    (%r12),%esi
    writer.Write(pos.x + dx, pos.y + size.y - 1, c);
  104bdc:	01 de                	add    %ebx,%esi
  104bde:	41 8b 44 24 04       	mov    0x4(%r12),%eax
  104be3:	41 8b 4f 04          	mov    0x4(%r15),%ecx
  104be7:	8d 14 08             	lea    (%rax,%rcx,1),%edx
  104bea:	83 c2 ff             	add    $0xffffffff,%edx
  104bed:	49 8b 45 00          	mov    0x0(%r13),%rax
  104bf1:	4c 89 ef             	mov    %r13,%rdi
  104bf4:	4c 89 f1             	mov    %r14,%rcx
  104bf7:	ff 50 10             	call   *0x10(%rax)
  for (int dx = 0; dx < size.x; ++dx) {
  104bfa:	83 c3 01             	add    $0x1,%ebx
  104bfd:	41 3b 1f             	cmp    (%r15),%ebx
  104c00:	7c be                	jl     104bc0 <_Z13DrawRectangleR11PixelWriterRK8Vector2DIiES4_RK10PixelColor+0x30>
  }
  for (int dy = 1; dy < size.y - 1; ++dy) {
  104c02:	41 83 7f 04 03       	cmpl   $0x3,0x4(%r15)
  104c07:	7c 4e                	jl     104c57 <_Z13DrawRectangleR11PixelWriterRK8Vector2DIiES4_RK10PixelColor+0xc7>
  104c09:	bb 01 00 00 00       	mov    $0x1,%ebx
  104c0e:	66 90                	xchg   %ax,%ax
    writer.Write(pos.x, pos.y + dy, c);
  104c10:	41 8b 34 24          	mov    (%r12),%esi
  104c14:	41 8b 54 24 04       	mov    0x4(%r12),%edx
  104c19:	01 da                	add    %ebx,%edx
  104c1b:	49 8b 45 00          	mov    0x0(%r13),%rax
  104c1f:	4c 89 ef             	mov    %r13,%rdi
  104c22:	4c 89 f1             	mov    %r14,%rcx
  104c25:	ff 50 10             	call   *0x10(%rax)
    writer.Write(pos.x + size.x - 1, pos.y + dy, c);
  104c28:	41 8b 04 24          	mov    (%r12),%eax
  104c2c:	41 8b 0f             	mov    (%r15),%ecx
  104c2f:	8d 34 08             	lea    (%rax,%rcx,1),%esi
  104c32:	83 c6 ff             	add    $0xffffffff,%esi
  104c35:	41 8b 54 24 04       	mov    0x4(%r12),%edx
  104c3a:	01 da                	add    %ebx,%edx
  104c3c:	49 8b 45 00          	mov    0x0(%r13),%rax
  104c40:	4c 89 ef             	mov    %r13,%rdi
  104c43:	4c 89 f1             	mov    %r14,%rcx
  104c46:	ff 50 10             	call   *0x10(%rax)
  for (int dy = 1; dy < size.y - 1; ++dy) {
  104c49:	83 c3 01             	add    $0x1,%ebx
  104c4c:	41 8b 47 04          	mov    0x4(%r15),%eax
  104c50:	83 c0 ff             	add    $0xffffffff,%eax
  104c53:	39 c3                	cmp    %eax,%ebx
  104c55:	7c b9                	jl     104c10 <_Z13DrawRectangleR11PixelWriterRK8Vector2DIiES4_RK10PixelColor+0x80>
  }
}
  104c57:	48 83 c4 08          	add    $0x8,%rsp
  104c5b:	5b                   	pop    %rbx
  104c5c:	41 5c                	pop    %r12
  104c5e:	41 5d                	pop    %r13
  104c60:	41 5e                	pop    %r14
  104c62:	41 5f                	pop    %r15
  104c64:	5d                   	pop    %rbp
  104c65:	c3                   	ret    
  104c66:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  104c6d:	00 00 00 

0000000000104c70 <_Z13FillRectangleR11PixelWriterRK8Vector2DIiES4_RK10PixelColor>:

void FillRectangle(PixelWriter& writer, const Vector2D<int>& pos,
                   const Vector2D<int>& size, const PixelColor& c) {
  104c70:	55                   	push   %rbp
  104c71:	48 89 e5             	mov    %rsp,%rbp
  104c74:	41 57                	push   %r15
  104c76:	41 56                	push   %r14
  104c78:	41 55                	push   %r13
  104c7a:	41 54                	push   %r12
  104c7c:	53                   	push   %rbx
  104c7d:	50                   	push   %rax
  104c7e:	48 89 d3             	mov    %rdx,%rbx
  for (int dy = 0; dy < size.y; ++dy) {
  104c81:	8b 52 04             	mov    0x4(%rdx),%edx
  104c84:	85 d2                	test   %edx,%edx
  104c86:	7e 65                	jle    104ced <_Z13FillRectangleR11PixelWriterRK8Vector2DIiES4_RK10PixelColor+0x7d>
  104c88:	49 89 cc             	mov    %rcx,%r12
  104c8b:	49 89 f5             	mov    %rsi,%r13
  104c8e:	49 89 ff             	mov    %rdi,%r15
    for (int dx = 0; dx < size.x; ++dx) {
  104c91:	8b 33                	mov    (%rbx),%esi
  104c93:	31 c0                	xor    %eax,%eax
  104c95:	eb 10                	jmp    104ca7 <_Z13FillRectangleR11PixelWriterRK8Vector2DIiES4_RK10PixelColor+0x37>
  104c97:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  104c9e:	00 00 
  for (int dy = 0; dy < size.y; ++dy) {
  104ca0:	83 c0 01             	add    $0x1,%eax
  104ca3:	39 d0                	cmp    %edx,%eax
  104ca5:	7d 46                	jge    104ced <_Z13FillRectangleR11PixelWriterRK8Vector2DIiES4_RK10PixelColor+0x7d>
    for (int dx = 0; dx < size.x; ++dx) {
  104ca7:	85 f6                	test   %esi,%esi
  104ca9:	7e f5                	jle    104ca0 <_Z13FillRectangleR11PixelWriterRK8Vector2DIiES4_RK10PixelColor+0x30>
  104cab:	45 31 f6             	xor    %r14d,%r14d
  104cae:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  104cb1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  104cb8:	00 00 00 
  104cbb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  104cc0:	41 8b 75 00          	mov    0x0(%r13),%esi
      writer.Write(pos.x + dx, pos.y + dy, c);
  104cc4:	44 01 f6             	add    %r14d,%esi
  104cc7:	41 8b 55 04          	mov    0x4(%r13),%edx
  104ccb:	01 c2                	add    %eax,%edx
  104ccd:	4d 8b 07             	mov    (%r15),%r8
  104cd0:	4c 89 ff             	mov    %r15,%rdi
  104cd3:	4c 89 e1             	mov    %r12,%rcx
  104cd6:	41 ff 50 10          	call   *0x10(%r8)
  104cda:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    for (int dx = 0; dx < size.x; ++dx) {
  104cdd:	41 83 c6 01          	add    $0x1,%r14d
  104ce1:	8b 33                	mov    (%rbx),%esi
  104ce3:	41 39 f6             	cmp    %esi,%r14d
  104ce6:	7c d8                	jl     104cc0 <_Z13FillRectangleR11PixelWriterRK8Vector2DIiES4_RK10PixelColor+0x50>
  for (int dy = 0; dy < size.y; ++dy) {
  104ce8:	8b 53 04             	mov    0x4(%rbx),%edx
  104ceb:	eb b3                	jmp    104ca0 <_Z13FillRectangleR11PixelWriterRK8Vector2DIiES4_RK10PixelColor+0x30>
    }
  }
}
  104ced:	48 83 c4 08          	add    $0x8,%rsp
  104cf1:	5b                   	pop    %rbx
  104cf2:	41 5c                	pop    %r12
  104cf4:	41 5d                	pop    %r13
  104cf6:	41 5e                	pop    %r14
  104cf8:	41 5f                	pop    %r15
  104cfa:	5d                   	pop    %rbp
  104cfb:	c3                   	ret    
  104cfc:	cc                   	int3   
  104cfd:	cc                   	int3   
  104cfe:	cc                   	int3   
  104cff:	cc                   	int3   

0000000000104d00 <_ZN30RGBResv8BitPerColorPixelWriterD0Ev>:
class RGBResv8BitPerColorPixelWriter : public PixelWriter {
  104d00:	55                   	push   %rbp
  104d01:	48 89 e5             	mov    %rsp,%rbp
  104d04:	5d                   	pop    %rbp
  104d05:	e9 26 ed 00 00       	jmp    113a30 <_ZdlPv>
  104d0a:	cc                   	int3   
  104d0b:	cc                   	int3   
  104d0c:	cc                   	int3   
  104d0d:	cc                   	int3   
  104d0e:	cc                   	int3   
  104d0f:	cc                   	int3   

0000000000104d10 <_ZN11PixelWriterD2Ev>:
  virtual ~PixelWriter() = default;
  104d10:	55                   	push   %rbp
  104d11:	48 89 e5             	mov    %rsp,%rbp
  104d14:	5d                   	pop    %rbp
  104d15:	c3                   	ret    
  104d16:	cc                   	int3   
  104d17:	cc                   	int3   
  104d18:	cc                   	int3   
  104d19:	cc                   	int3   
  104d1a:	cc                   	int3   
  104d1b:	cc                   	int3   
  104d1c:	cc                   	int3   
  104d1d:	cc                   	int3   
  104d1e:	cc                   	int3   
  104d1f:	cc                   	int3   

0000000000104d20 <_ZN30BGRResv8BitPerColorPixelWriterD0Ev>:
class BGRResv8BitPerColorPixelWriter : public PixelWriter {
  104d20:	55                   	push   %rbp
  104d21:	48 89 e5             	mov    %rsp,%rbp
  104d24:	5d                   	pop    %rbp
  104d25:	e9 06 ed 00 00       	jmp    113a30 <_ZdlPv>
  104d2a:	cc                   	int3   
  104d2b:	cc                   	int3   
  104d2c:	cc                   	int3   
  104d2d:	cc                   	int3   
  104d2e:	cc                   	int3   
  104d2f:	cc                   	int3   

0000000000104d30 <_ZN11MouseCursorC1EP11PixelWriter10PixelColor8Vector2DIiE>:

MouseCursor::MouseCursor(PixelWriter* writer, PixelColor erase_color,
                         Vector2D<int> initial_position)
    : pixel_writer_{writer},
      erase_color_{erase_color},
      position_{initial_position} {
  104d30:	55                   	push   %rbp
  104d31:	48 89 e5             	mov    %rsp,%rbp
  104d34:	41 57                	push   %r15
  104d36:	41 56                	push   %r14
  104d38:	41 55                	push   %r13
  104d3a:	41 54                	push   %r12
  104d3c:	53                   	push   %rbx
  104d3d:	48 83 ec 28          	sub    $0x28,%rsp
  104d41:	49 89 ce             	mov    %rcx,%r14
  104d44:	48 89 f3             	mov    %rsi,%rbx
    : pixel_writer_{writer},
  104d47:	48 89 37             	mov    %rsi,(%rdi)
      erase_color_{erase_color},
  104d4a:	66 89 57 08          	mov    %dx,0x8(%rdi)
  104d4e:	c1 ea 10             	shr    $0x10,%edx
  104d51:	88 57 0a             	mov    %dl,0xa(%rdi)
      position_{initial_position} {
  104d54:	48 89 4f 0c          	mov    %rcx,0xc(%rdi)
  104d58:	48 89 c8             	mov    %rcx,%rax
  104d5b:	48 c1 e8 20          	shr    $0x20,%rax
  104d5f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  104d63:	41 bf 00 12 10 00    	mov    $0x101200,%r15d
  104d69:	31 c9                	xor    %ecx,%ecx
  104d6b:	eb 15                	jmp    104d82 <_ZN11MouseCursorC1EP11PixelWriter10PixelColor8Vector2DIiE+0x52>
  104d6d:	0f 1f 00             	nopl   (%rax)
  104d70:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    for (int dy = 0; dy < kMouseCursorHeight; ++dy) {
  104d74:	48 83 c1 01          	add    $0x1,%rcx
  104d78:	49 83 c7 10          	add    $0x10,%r15
  104d7c:	48 83 f9 18          	cmp    $0x18,%rcx
  104d80:	74 70                	je     104df2 <_ZN11MouseCursorC1EP11PixelWriter10PixelColor8Vector2DIiE+0xc2>
  104d82:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  104d86:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
  104d8a:	44 8d 2c 01          	lea    (%rcx,%rax,1),%r13d
  104d8e:	45 31 e4             	xor    %r12d,%r12d
  104d91:	eb 35                	jmp    104dc8 <_ZN11MouseCursorC1EP11PixelWriter10PixelColor8Vector2DIiE+0x98>
  104d93:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  104d9a:	00 00 00 
  104d9d:	0f 1f 00             	nopl   (%rax)
          pixel_writer->Write(position.x + dx, position.y + dy, {255, 255, 255});
  104da0:	43 8d 34 26          	lea    (%r14,%r12,1),%esi
  104da4:	66 c7 45 d0 ff ff    	movw   $0xffff,-0x30(%rbp)
  104daa:	c6 45 d2 ff          	movb   $0xff,-0x2e(%rbp)
  104dae:	48 8b 03             	mov    (%rbx),%rax
  104db1:	48 89 df             	mov    %rbx,%rdi
  104db4:	44 89 ea             	mov    %r13d,%edx
  104db7:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  104dbb:	ff 50 10             	call   *0x10(%rax)
      for (int dx = 0; dx < kMouseCursorWidth; ++dx) {
  104dbe:	49 83 c4 01          	add    $0x1,%r12
  104dc2:	49 83 fc 0f          	cmp    $0xf,%r12
  104dc6:	74 a8                	je     104d70 <_ZN11MouseCursorC1EP11PixelWriter10PixelColor8Vector2DIiE+0x40>
        if (mouse_cursor_shape[dy][dx] == '@') {
  104dc8:	43 0f b6 04 27       	movzbl (%r15,%r12,1),%eax
  104dcd:	3c 2e                	cmp    $0x2e,%al
  104dcf:	74 cf                	je     104da0 <_ZN11MouseCursorC1EP11PixelWriter10PixelColor8Vector2DIiE+0x70>
  104dd1:	3c 40                	cmp    $0x40,%al
  104dd3:	75 e9                	jne    104dbe <_ZN11MouseCursorC1EP11PixelWriter10PixelColor8Vector2DIiE+0x8e>
          pixel_writer->Write(position.x + dx, position.y + dy, {0, 0, 0});
  104dd5:	43 8d 34 26          	lea    (%r14,%r12,1),%esi
  104dd9:	66 c7 45 c8 00 00    	movw   $0x0,-0x38(%rbp)
  104ddf:	c6 45 ca 00          	movb   $0x0,-0x36(%rbp)
  104de3:	48 8b 03             	mov    (%rbx),%rax
  104de6:	48 89 df             	mov    %rbx,%rdi
  104de9:	44 89 ea             	mov    %r13d,%edx
  104dec:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
  104df0:	eb c9                	jmp    104dbb <_ZN11MouseCursorC1EP11PixelWriter10PixelColor8Vector2DIiE+0x8b>
  DrawMouseCursor(pixel_writer_, position_);
}
  104df2:	48 83 c4 28          	add    $0x28,%rsp
  104df6:	5b                   	pop    %rbx
  104df7:	41 5c                	pop    %r12
  104df9:	41 5d                	pop    %r13
  104dfb:	41 5e                	pop    %r14
  104dfd:	41 5f                	pop    %r15
  104dff:	5d                   	pop    %rbp
  104e00:	c3                   	ret    
  104e01:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  104e08:	00 00 00 
  104e0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000104e10 <_ZN11MouseCursor12MoveRelativeE8Vector2DIiE>:

void MouseCursor::MoveRelative(Vector2D<int> displacement) {
  104e10:	55                   	push   %rbp
  104e11:	48 89 e5             	mov    %rsp,%rbp
  104e14:	41 57                	push   %r15
  104e16:	41 56                	push   %r14
  104e18:	41 55                	push   %r13
  104e1a:	41 54                	push   %r12
  104e1c:	53                   	push   %rbx
  104e1d:	48 83 ec 48          	sub    $0x48,%rsp
  104e21:	48 89 f0             	mov    %rsi,%rax
  104e24:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  104e28:	48 c1 ee 20          	shr    $0x20,%rsi
  104e2c:	48 89 75 a8          	mov    %rsi,-0x58(%rbp)
  EraseMouseCursor(pixel_writer_, position_, erase_color_);
  104e30:	48 8b 1f             	mov    (%rdi),%rbx
  104e33:	4c 8b 7f 0c          	mov    0xc(%rdi),%r15
  104e37:	0f b7 47 08          	movzwl 0x8(%rdi),%eax
  104e3b:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  104e3f:	8a 4f 0a             	mov    0xa(%rdi),%cl
  104e42:	4c 89 fa             	mov    %r15,%rdx
  104e45:	48 c1 ea 20          	shr    $0x20,%rdx
  104e49:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  104e4d:	88 4d d2             	mov    %cl,-0x2e(%rbp)
  104e50:	66 89 45 d0          	mov    %ax,-0x30(%rbp)
  104e54:	41 be 00 12 10 00    	mov    $0x101200,%r14d
  104e5a:	31 c9                	xor    %ecx,%ecx
  104e5c:	eb 14                	jmp    104e72 <_ZN11MouseCursor12MoveRelativeE8Vector2DIiE+0x62>
  104e5e:	66 90                	xchg   %ax,%ax
  104e60:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
    for (int dy = 0; dy < kMouseCursorHeight; ++dy) {
  104e64:	48 83 c1 01          	add    $0x1,%rcx
  104e68:	49 83 c6 10          	add    $0x10,%r14
  104e6c:	48 83 f9 18          	cmp    $0x18,%rcx
  104e70:	74 45                	je     104eb7 <_ZN11MouseCursor12MoveRelativeE8Vector2DIiE+0xa7>
  104e72:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  104e76:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  104e7a:	44 8d 2c 01          	lea    (%rcx,%rax,1),%r13d
  104e7e:	45 31 e4             	xor    %r12d,%r12d
  104e81:	eb 17                	jmp    104e9a <_ZN11MouseCursor12MoveRelativeE8Vector2DIiE+0x8a>
  104e83:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  104e8a:	00 00 00 
  104e8d:	0f 1f 00             	nopl   (%rax)
      for (int dx = 0; dx < kMouseCursorWidth; ++dx) {
  104e90:	49 83 c4 01          	add    $0x1,%r12
  104e94:	49 83 fc 0f          	cmp    $0xf,%r12
  104e98:	74 c6                	je     104e60 <_ZN11MouseCursor12MoveRelativeE8Vector2DIiE+0x50>
        if (mouse_cursor_shape[dy][dx] != ' ') {
  104e9a:	43 80 3c 26 20       	cmpb   $0x20,(%r14,%r12,1)
  104e9f:	74 ef                	je     104e90 <_ZN11MouseCursor12MoveRelativeE8Vector2DIiE+0x80>
          pixel_writer->Write(position.x + dx, position.y + dy, erase_color);
  104ea1:	43 8d 34 27          	lea    (%r15,%r12,1),%esi
  104ea5:	48 8b 03             	mov    (%rbx),%rax
  104ea8:	48 89 df             	mov    %rbx,%rdi
  104eab:	44 89 ea             	mov    %r13d,%edx
  104eae:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  104eb2:	ff 50 10             	call   *0x10(%rax)
  104eb5:	eb d9                	jmp    104e90 <_ZN11MouseCursor12MoveRelativeE8Vector2DIiE+0x80>
  104eb7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  104ebb:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
struct Vector2D {
  T x, y;

  template <typename U>
  Vector2D<T>& operator +=(const Vector2D<U>& rhs) {
    x += rhs.x;
  104ebf:	01 48 0c             	add    %ecx,0xc(%rax)
  104ec2:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
    y += rhs.y;
  104ec6:	01 48 10             	add    %ecx,0x10(%rax)
  position_ += displacement;
  DrawMouseCursor(pixel_writer_, position_);
  104ec9:	48 8b 18             	mov    (%rax),%rbx
  104ecc:	4c 8b 68 0c          	mov    0xc(%rax),%r13
  104ed0:	4c 89 e8             	mov    %r13,%rax
  104ed3:	48 c1 e8 20          	shr    $0x20,%rax
  104ed7:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  104edb:	41 be 00 12 10 00    	mov    $0x101200,%r14d
  104ee1:	31 c9                	xor    %ecx,%ecx
  104ee3:	eb 1d                	jmp    104f02 <_ZN11MouseCursor12MoveRelativeE8Vector2DIiE+0xf2>
  104ee5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  104eec:	00 00 00 
  104eef:	90                   	nop
  104ef0:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
    for (int dy = 0; dy < kMouseCursorHeight; ++dy) {
  104ef4:	48 83 c1 01          	add    $0x1,%rcx
  104ef8:	49 83 c6 10          	add    $0x10,%r14
  104efc:	48 83 f9 18          	cmp    $0x18,%rcx
  104f00:	74 70                	je     104f72 <_ZN11MouseCursor12MoveRelativeE8Vector2DIiE+0x162>
  104f02:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  104f06:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  104f0a:	44 8d 24 01          	lea    (%rcx,%rax,1),%r12d
  104f0e:	45 31 ff             	xor    %r15d,%r15d
  104f11:	eb 35                	jmp    104f48 <_ZN11MouseCursor12MoveRelativeE8Vector2DIiE+0x138>
  104f13:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  104f1a:	00 00 00 
  104f1d:	0f 1f 00             	nopl   (%rax)
          pixel_writer->Write(position.x + dx, position.y + dy, {255, 255, 255});
  104f20:	43 8d 34 2f          	lea    (%r15,%r13,1),%esi
  104f24:	66 c7 45 c8 ff ff    	movw   $0xffff,-0x38(%rbp)
  104f2a:	c6 45 ca ff          	movb   $0xff,-0x36(%rbp)
  104f2e:	48 8b 03             	mov    (%rbx),%rax
  104f31:	48 89 df             	mov    %rbx,%rdi
  104f34:	44 89 e2             	mov    %r12d,%edx
  104f37:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
  104f3b:	ff 50 10             	call   *0x10(%rax)
      for (int dx = 0; dx < kMouseCursorWidth; ++dx) {
  104f3e:	49 83 c7 01          	add    $0x1,%r15
  104f42:	49 83 ff 0f          	cmp    $0xf,%r15
  104f46:	74 a8                	je     104ef0 <_ZN11MouseCursor12MoveRelativeE8Vector2DIiE+0xe0>
        if (mouse_cursor_shape[dy][dx] == '@') {
  104f48:	43 0f b6 04 3e       	movzbl (%r14,%r15,1),%eax
  104f4d:	3c 2e                	cmp    $0x2e,%al
  104f4f:	74 cf                	je     104f20 <_ZN11MouseCursor12MoveRelativeE8Vector2DIiE+0x110>
  104f51:	3c 40                	cmp    $0x40,%al
  104f53:	75 e9                	jne    104f3e <_ZN11MouseCursor12MoveRelativeE8Vector2DIiE+0x12e>
          pixel_writer->Write(position.x + dx, position.y + dy, {0, 0, 0});
  104f55:	43 8d 34 2f          	lea    (%r15,%r13,1),%esi
  104f59:	66 c7 45 c0 00 00    	movw   $0x0,-0x40(%rbp)
  104f5f:	c6 45 c2 00          	movb   $0x0,-0x3e(%rbp)
  104f63:	48 8b 03             	mov    (%rbx),%rax
  104f66:	48 89 df             	mov    %rbx,%rdi
  104f69:	44 89 e2             	mov    %r12d,%edx
  104f6c:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  104f70:	eb c9                	jmp    104f3b <_ZN11MouseCursor12MoveRelativeE8Vector2DIiE+0x12b>
}
  104f72:	48 83 c4 48          	add    $0x48,%rsp
  104f76:	5b                   	pop    %rbx
  104f77:	41 5c                	pop    %r12
  104f79:	41 5d                	pop    %r13
  104f7b:	41 5e                	pop    %r14
  104f7d:	41 5f                	pop    %r15
  104f7f:	5d                   	pop    %rbp
  104f80:	c3                   	ret    
  104f81:	cc                   	int3   
  104f82:	cc                   	int3   
  104f83:	cc                   	int3   
  104f84:	cc                   	int3   
  104f85:	cc                   	int3   
  104f86:	cc                   	int3   
  104f87:	cc                   	int3   
  104f88:	cc                   	int3   
  104f89:	cc                   	int3   
  104f8a:	cc                   	int3   
  104f8b:	cc                   	int3   
  104f8c:	cc                   	int3   
  104f8d:	cc                   	int3   
  104f8e:	cc                   	int3   
  104f8f:	cc                   	int3   

0000000000104f90 <_Z7GetFontc>:

extern const uint8_t _binary_hankaku_bin_start;
extern const uint8_t _binary_hankaku_bin_end;
extern const uint8_t _binary_hankaku_bin_size;

const uint8_t* GetFont(char c) {
  104f90:	55                   	push   %rbp
  104f91:	48 89 e5             	mov    %rsp,%rbp
  auto index = 16 * static_cast<unsigned int>(c);
  104f94:	c1 e7 04             	shl    $0x4,%edi
  if (index >= reinterpret_cast<uintptr_t>(&_binary_hankaku_bin_size)) {
  104f97:	b9 00 10 00 00       	mov    $0x1000,%ecx
  104f9c:	31 c0                	xor    %eax,%eax
  104f9e:	48 39 cf             	cmp    %rcx,%rdi
  104fa1:	48 8d 8f e0 4b 11 00 	lea    0x114be0(%rdi),%rcx
  104fa8:	48 0f 42 c1          	cmovb  %rcx,%rax
    return nullptr;
  }
  return &_binary_hankaku_bin_start + index;
}
  104fac:	5d                   	pop    %rbp
  104fad:	c3                   	ret    
  104fae:	66 90                	xchg   %ax,%ax

0000000000104fb0 <_Z10WriteAsciiR11PixelWriteriicRK10PixelColor>:

void WriteAscii(PixelWriter& writer, int x, int y, char c, const PixelColor& color) {
  104fb0:	55                   	push   %rbp
  104fb1:	48 89 e5             	mov    %rsp,%rbp
  104fb4:	41 57                	push   %r15
  104fb6:	41 56                	push   %r14
  104fb8:	41 55                	push   %r13
  104fba:	41 54                	push   %r12
  104fbc:	53                   	push   %rbx
  104fbd:	48 83 ec 38          	sub    $0x38,%rsp
  104fc1:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  auto index = 16 * static_cast<unsigned int>(c);
  104fc5:	c1 e1 04             	shl    $0x4,%ecx
  if (index >= reinterpret_cast<uintptr_t>(&_binary_hankaku_bin_size)) {
  104fc8:	b8 00 10 00 00       	mov    $0x1000,%eax
  104fcd:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
  104fd1:	48 39 c1             	cmp    %rax,%rcx
  const uint8_t* font = GetFont(c);
  if (font == nullptr) {
  104fd4:	0f 83 86 01 00 00    	jae    105160 <_Z10WriteAsciiR11PixelWriteriicRK10PixelColor+0x1b0>
  104fda:	4d 89 c4             	mov    %r8,%r12
  104fdd:	48 89 fb             	mov    %rdi,%rbx
  104fe0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  104fe4:	8d 48 01             	lea    0x1(%rax),%ecx
  104fe7:	89 4d bc             	mov    %ecx,-0x44(%rbp)
  104fea:	8d 48 02             	lea    0x2(%rax),%ecx
  104fed:	89 4d c0             	mov    %ecx,-0x40(%rbp)
  104ff0:	8d 48 03             	lea    0x3(%rax),%ecx
  104ff3:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
  104ff6:	8d 48 04             	lea    0x4(%rax),%ecx
  104ff9:	89 4d c8             	mov    %ecx,-0x38(%rbp)
  104ffc:	8d 48 05             	lea    0x5(%rax),%ecx
  104fff:	89 4d cc             	mov    %ecx,-0x34(%rbp)
  105002:	8d 48 06             	lea    0x6(%rax),%ecx
  105005:	89 4d d0             	mov    %ecx,-0x30(%rbp)
  105008:	8d 40 07             	lea    0x7(%rax),%eax
  10500b:	89 45 d4             	mov    %eax,-0x2c(%rbp)
    return;
  }
  for (int dy = 0; dy < 16; ++dy) {
  10500e:	89 d0                	mov    %edx,%eax
  105010:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  105014:	45 31 ff             	xor    %r15d,%r15d
  105017:	eb 15                	jmp    10502e <_Z10WriteAsciiR11PixelWriteriicRK10PixelColor+0x7e>
  105019:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  105020:	49 83 c7 01          	add    $0x1,%r15
  105024:	49 83 ff 10          	cmp    $0x10,%r15
  105028:	0f 84 32 01 00 00    	je     105160 <_Z10WriteAsciiR11PixelWriteriicRK10PixelColor+0x1b0>
  10502e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    for (int dx = 0; dx < 8; ++dx) {
      if ((font[dy] << dx) & 0x80u) {
  105032:	4e 8d 2c 38          	lea    (%rax,%r15,1),%r13
  105036:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10503a:	46 0f b6 b4 38 e0 4b 	movzbl 0x114be0(%rax,%r15,1),%r14d
  105041:	11 00 
  105043:	45 84 f6             	test   %r14b,%r14b
  105046:	78 48                	js     105090 <_Z10WriteAsciiR11PixelWriteriicRK10PixelColor+0xe0>
  105048:	41 f6 c6 40          	test   $0x40,%r14b
  10504c:	75 5b                	jne    1050a9 <_Z10WriteAsciiR11PixelWriteriicRK10PixelColor+0xf9>
  10504e:	41 f6 c6 20          	test   $0x20,%r14b
  105052:	75 6d                	jne    1050c1 <_Z10WriteAsciiR11PixelWriteriicRK10PixelColor+0x111>
  105054:	41 f6 c6 10          	test   $0x10,%r14b
  105058:	75 7f                	jne    1050d9 <_Z10WriteAsciiR11PixelWriteriicRK10PixelColor+0x129>
  10505a:	41 f6 c6 08          	test   $0x8,%r14b
  10505e:	0f 85 91 00 00 00    	jne    1050f5 <_Z10WriteAsciiR11PixelWriteriicRK10PixelColor+0x145>
  105064:	41 f6 c6 04          	test   $0x4,%r14b
  105068:	0f 85 a3 00 00 00    	jne    105111 <_Z10WriteAsciiR11PixelWriteriicRK10PixelColor+0x161>
  10506e:	41 f6 c6 02          	test   $0x2,%r14b
  105072:	0f 85 b5 00 00 00    	jne    10512d <_Z10WriteAsciiR11PixelWriteriicRK10PixelColor+0x17d>
  105078:	41 f6 c6 01          	test   $0x1,%r14b
  10507c:	74 a2                	je     105020 <_Z10WriteAsciiR11PixelWriteriicRK10PixelColor+0x70>
  10507e:	e9 c6 00 00 00       	jmp    105149 <_Z10WriteAsciiR11PixelWriteriicRK10PixelColor+0x199>
  105083:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10508a:	00 00 00 
  10508d:	0f 1f 00             	nopl   (%rax)
        writer.Write(x + dx, y + dy, color);
  105090:	48 8b 03             	mov    (%rbx),%rax
  105093:	48 89 df             	mov    %rbx,%rdi
  105096:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  10509a:	44 89 ea             	mov    %r13d,%edx
  10509d:	4c 89 e1             	mov    %r12,%rcx
  1050a0:	ff 50 10             	call   *0x10(%rax)
      if ((font[dy] << dx) & 0x80u) {
  1050a3:	41 f6 c6 40          	test   $0x40,%r14b
  1050a7:	74 a5                	je     10504e <_Z10WriteAsciiR11PixelWriteriicRK10PixelColor+0x9e>
        writer.Write(x + dx, y + dy, color);
  1050a9:	48 8b 03             	mov    (%rbx),%rax
  1050ac:	48 89 df             	mov    %rbx,%rdi
  1050af:	8b 75 bc             	mov    -0x44(%rbp),%esi
  1050b2:	44 89 ea             	mov    %r13d,%edx
  1050b5:	4c 89 e1             	mov    %r12,%rcx
  1050b8:	ff 50 10             	call   *0x10(%rax)
      if ((font[dy] << dx) & 0x80u) {
  1050bb:	41 f6 c6 20          	test   $0x20,%r14b
  1050bf:	74 93                	je     105054 <_Z10WriteAsciiR11PixelWriteriicRK10PixelColor+0xa4>
        writer.Write(x + dx, y + dy, color);
  1050c1:	48 8b 03             	mov    (%rbx),%rax
  1050c4:	48 89 df             	mov    %rbx,%rdi
  1050c7:	8b 75 c0             	mov    -0x40(%rbp),%esi
  1050ca:	44 89 ea             	mov    %r13d,%edx
  1050cd:	4c 89 e1             	mov    %r12,%rcx
  1050d0:	ff 50 10             	call   *0x10(%rax)
      if ((font[dy] << dx) & 0x80u) {
  1050d3:	41 f6 c6 10          	test   $0x10,%r14b
  1050d7:	74 81                	je     10505a <_Z10WriteAsciiR11PixelWriteriicRK10PixelColor+0xaa>
        writer.Write(x + dx, y + dy, color);
  1050d9:	48 8b 03             	mov    (%rbx),%rax
  1050dc:	48 89 df             	mov    %rbx,%rdi
  1050df:	8b 75 c4             	mov    -0x3c(%rbp),%esi
  1050e2:	44 89 ea             	mov    %r13d,%edx
  1050e5:	4c 89 e1             	mov    %r12,%rcx
  1050e8:	ff 50 10             	call   *0x10(%rax)
      if ((font[dy] << dx) & 0x80u) {
  1050eb:	41 f6 c6 08          	test   $0x8,%r14b
  1050ef:	0f 84 6f ff ff ff    	je     105064 <_Z10WriteAsciiR11PixelWriteriicRK10PixelColor+0xb4>
        writer.Write(x + dx, y + dy, color);
  1050f5:	48 8b 03             	mov    (%rbx),%rax
  1050f8:	48 89 df             	mov    %rbx,%rdi
  1050fb:	8b 75 c8             	mov    -0x38(%rbp),%esi
  1050fe:	44 89 ea             	mov    %r13d,%edx
  105101:	4c 89 e1             	mov    %r12,%rcx
  105104:	ff 50 10             	call   *0x10(%rax)
      if ((font[dy] << dx) & 0x80u) {
  105107:	41 f6 c6 04          	test   $0x4,%r14b
  10510b:	0f 84 5d ff ff ff    	je     10506e <_Z10WriteAsciiR11PixelWriteriicRK10PixelColor+0xbe>
        writer.Write(x + dx, y + dy, color);
  105111:	48 8b 03             	mov    (%rbx),%rax
  105114:	48 89 df             	mov    %rbx,%rdi
  105117:	8b 75 cc             	mov    -0x34(%rbp),%esi
  10511a:	44 89 ea             	mov    %r13d,%edx
  10511d:	4c 89 e1             	mov    %r12,%rcx
  105120:	ff 50 10             	call   *0x10(%rax)
      if ((font[dy] << dx) & 0x80u) {
  105123:	41 f6 c6 02          	test   $0x2,%r14b
  105127:	0f 84 4b ff ff ff    	je     105078 <_Z10WriteAsciiR11PixelWriteriicRK10PixelColor+0xc8>
        writer.Write(x + dx, y + dy, color);
  10512d:	48 8b 03             	mov    (%rbx),%rax
  105130:	48 89 df             	mov    %rbx,%rdi
  105133:	8b 75 d0             	mov    -0x30(%rbp),%esi
  105136:	44 89 ea             	mov    %r13d,%edx
  105139:	4c 89 e1             	mov    %r12,%rcx
  10513c:	ff 50 10             	call   *0x10(%rax)
      if ((font[dy] << dx) & 0x80u) {
  10513f:	41 f6 c6 01          	test   $0x1,%r14b
  105143:	0f 84 d7 fe ff ff    	je     105020 <_Z10WriteAsciiR11PixelWriteriicRK10PixelColor+0x70>
        writer.Write(x + dx, y + dy, color);
  105149:	48 8b 03             	mov    (%rbx),%rax
  10514c:	48 89 df             	mov    %rbx,%rdi
  10514f:	8b 75 d4             	mov    -0x2c(%rbp),%esi
  105152:	44 89 ea             	mov    %r13d,%edx
  105155:	4c 89 e1             	mov    %r12,%rcx
  105158:	ff 50 10             	call   *0x10(%rax)
  10515b:	e9 c0 fe ff ff       	jmp    105020 <_Z10WriteAsciiR11PixelWriteriicRK10PixelColor+0x70>
      }
    }
  }
}
  105160:	48 83 c4 38          	add    $0x38,%rsp
  105164:	5b                   	pop    %rbx
  105165:	41 5c                	pop    %r12
  105167:	41 5d                	pop    %r13
  105169:	41 5e                	pop    %r14
  10516b:	41 5f                	pop    %r15
  10516d:	5d                   	pop    %rbp
  10516e:	c3                   	ret    
  10516f:	90                   	nop

0000000000105170 <_Z11WriteStringR11PixelWriteriiPKcRK10PixelColor>:

void WriteString(PixelWriter& writer, int x, int y, const char* s, const PixelColor& color) {
  105170:	55                   	push   %rbp
  105171:	48 89 e5             	mov    %rsp,%rbp
  105174:	41 57                	push   %r15
  105176:	41 56                	push   %r14
  105178:	41 55                	push   %r13
  10517a:	41 54                	push   %r12
  10517c:	53                   	push   %rbx
  10517d:	50                   	push   %rax
  for (int i = 0; s[i] != '\0'; ++i) {
  10517e:	8a 01                	mov    (%rcx),%al
  105180:	84 c0                	test   %al,%al
  105182:	74 3f                	je     1051c3 <_Z11WriteStringR11PixelWriteriiPKcRK10PixelColor+0x53>
  105184:	4d 89 c6             	mov    %r8,%r14
  105187:	49 89 cc             	mov    %rcx,%r12
  10518a:	41 89 d7             	mov    %edx,%r15d
  10518d:	89 f3                	mov    %esi,%ebx
  10518f:	49 89 fd             	mov    %rdi,%r13
  105192:	49 83 c4 01          	add    $0x1,%r12
  105196:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10519d:	00 00 00 
    WriteAscii(writer, x + 8 * i, y, s[i], color);
  1051a0:	0f be c8             	movsbl %al,%ecx
  1051a3:	4c 89 ef             	mov    %r13,%rdi
  1051a6:	89 de                	mov    %ebx,%esi
  1051a8:	44 89 fa             	mov    %r15d,%edx
  1051ab:	4d 89 f0             	mov    %r14,%r8
  1051ae:	e8 fd fd ff ff       	call   104fb0 <_Z10WriteAsciiR11PixelWriteriicRK10PixelColor>
  for (int i = 0; s[i] != '\0'; ++i) {
  1051b3:	41 0f b6 04 24       	movzbl (%r12),%eax
  1051b8:	83 c3 08             	add    $0x8,%ebx
  1051bb:	49 83 c4 01          	add    $0x1,%r12
  1051bf:	84 c0                	test   %al,%al
  1051c1:	75 dd                	jne    1051a0 <_Z11WriteStringR11PixelWriteriiPKcRK10PixelColor+0x30>
  }
}
  1051c3:	48 83 c4 08          	add    $0x8,%rsp
  1051c7:	5b                   	pop    %rbx
  1051c8:	41 5c                	pop    %r12
  1051ca:	41 5d                	pop    %r13
  1051cc:	41 5e                	pop    %r14
  1051ce:	41 5f                	pop    %r15
  1051d0:	5d                   	pop    %rbp
  1051d1:	c3                   	ret    
  1051d2:	cc                   	int3   
  1051d3:	cc                   	int3   
  1051d4:	cc                   	int3   
  1051d5:	cc                   	int3   
  1051d6:	cc                   	int3   
  1051d7:	cc                   	int3   
  1051d8:	cc                   	int3   
  1051d9:	cc                   	int3   
  1051da:	cc                   	int3   
  1051db:	cc                   	int3   
  1051dc:	cc                   	int3   
  1051dd:	cc                   	int3   
  1051de:	cc                   	int3   
  1051df:	cc                   	int3   

00000000001051e0 <_exit>:
#include <errno.h>
#include <sys/types.h>

void _exit(void) {
  1051e0:	55                   	push   %rbp
  1051e1:	48 89 e5             	mov    %rsp,%rbp
  1051e4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1051eb:	00 00 00 
  1051ee:	66 90                	xchg   %ax,%ax
  while (1) __asm__("hlt");
  1051f0:	f4                   	hlt    
  1051f1:	eb fd                	jmp    1051f0 <_exit+0x10>
  1051f3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1051fa:	00 00 00 
  1051fd:	0f 1f 00             	nopl   (%rax)

0000000000105200 <sbrk>:
}

caddr_t sbrk(int incr) {
  105200:	55                   	push   %rbp
  105201:	48 89 e5             	mov    %rsp,%rbp
  errno = ENOMEM;
  105204:	e8 e7 5e 00 00       	call   10b0f0 <__errno>
  105209:	c7 00 0c 00 00 00    	movl   $0xc,(%rax)
  return (caddr_t)-1;
  10520f:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  105216:	5d                   	pop    %rbp
  105217:	c3                   	ret    
  105218:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10521f:	00 

0000000000105220 <getpid>:
}

int getpid(void) {
  105220:	55                   	push   %rbp
  105221:	48 89 e5             	mov    %rsp,%rbp
  return 1;
  105224:	b8 01 00 00 00       	mov    $0x1,%eax
  105229:	5d                   	pop    %rbp
  10522a:	c3                   	ret    
  10522b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000105230 <kill>:
}

int kill(int pid, int sig) {
  105230:	55                   	push   %rbp
  105231:	48 89 e5             	mov    %rsp,%rbp
  errno = EINVAL;
  105234:	e8 b7 5e 00 00       	call   10b0f0 <__errno>
  105239:	c7 00 16 00 00 00    	movl   $0x16,(%rax)
  return -1;
  10523f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  105244:	5d                   	pop    %rbp
  105245:	c3                   	ret    
  105246:	cc                   	int3   
  105247:	cc                   	int3   
  105248:	cc                   	int3   
  105249:	cc                   	int3   
  10524a:	cc                   	int3   
  10524b:	cc                   	int3   
  10524c:	cc                   	int3   
  10524d:	cc                   	int3   
  10524e:	cc                   	int3   
  10524f:	cc                   	int3   

0000000000105250 <_ZN7ConsoleC1ER11PixelWriterRK10PixelColorS4_>:
#include "font.hpp"

Console::Console(PixelWriter& writer,
    const PixelColor& fg_color, const PixelColor& bg_color)
    : writer_{writer}, fg_color_{fg_color}, bg_color_{bg_color},
      buffer_{}, cursor_row_{0}, cursor_column_{0} {
  105250:	55                   	push   %rbp
  105251:	48 89 e5             	mov    %rsp,%rbp
  105254:	53                   	push   %rbx
  105255:	50                   	push   %rax
  105256:	48 89 fb             	mov    %rdi,%rbx
    : writer_{writer}, fg_color_{fg_color}, bg_color_{bg_color},
  105259:	48 89 37             	mov    %rsi,(%rdi)
  10525c:	0f b7 02             	movzwl (%rdx),%eax
  10525f:	66 89 47 08          	mov    %ax,0x8(%rdi)
  105263:	8a 42 02             	mov    0x2(%rdx),%al
  105266:	88 47 0a             	mov    %al,0xa(%rdi)
  105269:	0f b7 01             	movzwl (%rcx),%eax
  10526c:	66 89 47 0b          	mov    %ax,0xb(%rdi)
  105270:	8a 41 02             	mov    0x2(%rcx),%al
  105273:	88 47 0d             	mov    %al,0xd(%rdi)
      buffer_{}, cursor_row_{0}, cursor_column_{0} {
  105276:	48 83 c7 0e          	add    $0xe,%rdi
  10527a:	ba e9 07 00 00       	mov    $0x7e9,%edx
  10527f:	31 f6                	xor    %esi,%esi
  105281:	e8 1a 65 00 00       	call   10b7a0 <memset>
  105286:	48 c7 83 f8 07 00 00 	movq   $0x0,0x7f8(%rbx)
  10528d:	00 00 00 00 
}
  105291:	48 83 c4 08          	add    $0x8,%rsp
  105295:	5b                   	pop    %rbx
  105296:	5d                   	pop    %rbp
  105297:	c3                   	ret    
  105298:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10529f:	00 

00000000001052a0 <_ZN7Console9PutStringEPKc>:

void Console::PutString(const char* s) {
  1052a0:	55                   	push   %rbp
  1052a1:	48 89 e5             	mov    %rsp,%rbp
  1052a4:	41 57                	push   %r15
  1052a6:	41 56                	push   %r14
  1052a8:	53                   	push   %rbx
  1052a9:	50                   	push   %rax
  1052aa:	48 89 f3             	mov    %rsi,%rbx
  1052ad:	49 89 fe             	mov    %rdi,%r14
  1052b0:	4c 8d 7f 08          	lea    0x8(%rdi),%r15
  1052b4:	eb 0e                	jmp    1052c4 <_ZN7Console9PutStringEPKc+0x24>
  1052b6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1052bd:	00 00 00 
    } else if (cursor_column_ < kColumns - 1) {
      WriteAscii(writer_, 8 * cursor_column_, 16 * cursor_row_, *s, fg_color_);
      buffer_[cursor_row_][cursor_column_] = *s;
      ++cursor_column_;
    }
    ++s;
  1052c0:	48 83 c3 01          	add    $0x1,%rbx
  while (*s) {
  1052c4:	0f b6 03             	movzbl (%rbx),%eax
  1052c7:	3c 0a                	cmp    $0xa,%al
  1052c9:	74 55                	je     105320 <_ZN7Console9PutStringEPKc+0x80>
  1052cb:	84 c0                	test   %al,%al
  1052cd:	74 5f                	je     10532e <_ZN7Console9PutStringEPKc+0x8e>
    } else if (cursor_column_ < kColumns - 1) {
  1052cf:	41 8b b6 fc 07 00 00 	mov    0x7fc(%r14),%esi
  1052d6:	83 fe 4e             	cmp    $0x4e,%esi
  1052d9:	7f e5                	jg     1052c0 <_ZN7Console9PutStringEPKc+0x20>
      WriteAscii(writer_, 8 * cursor_column_, 16 * cursor_row_, *s, fg_color_);
  1052db:	49 8b 3e             	mov    (%r14),%rdi
  1052de:	c1 e6 03             	shl    $0x3,%esi
  1052e1:	41 8b 96 f8 07 00 00 	mov    0x7f8(%r14),%edx
  1052e8:	c1 e2 04             	shl    $0x4,%edx
  1052eb:	0f be c8             	movsbl %al,%ecx
  1052ee:	4d 89 f8             	mov    %r15,%r8
  1052f1:	e8 ba fc ff ff       	call   104fb0 <_Z10WriteAsciiR11PixelWriteriicRK10PixelColor>
      buffer_[cursor_row_][cursor_column_] = *s;
  1052f6:	0f b6 03             	movzbl (%rbx),%eax
  1052f9:	49 63 8e f8 07 00 00 	movslq 0x7f8(%r14),%rcx
  105300:	49 63 96 fc 07 00 00 	movslq 0x7fc(%r14),%rdx
  105307:	48 8d 0c c9          	lea    (%rcx,%rcx,8),%rcx
  10530b:	48 8d 0c c9          	lea    (%rcx,%rcx,8),%rcx
  10530f:	4c 01 f1             	add    %r14,%rcx
  105312:	88 44 0a 0e          	mov    %al,0xe(%rdx,%rcx,1)
      ++cursor_column_;
  105316:	41 83 86 fc 07 00 00 	addl   $0x1,0x7fc(%r14)
  10531d:	01 
  10531e:	eb a0                	jmp    1052c0 <_ZN7Console9PutStringEPKc+0x20>
      Newline();
  105320:	4c 89 f7             	mov    %r14,%rdi
  105323:	e8 18 00 00 00       	call   105340 <_ZN7Console7NewlineEv>
    ++s;
  105328:	48 83 c3 01          	add    $0x1,%rbx
  10532c:	eb 96                	jmp    1052c4 <_ZN7Console9PutStringEPKc+0x24>
  }
}
  10532e:	48 83 c4 08          	add    $0x8,%rsp
  105332:	5b                   	pop    %rbx
  105333:	41 5e                	pop    %r14
  105335:	41 5f                	pop    %r15
  105337:	5d                   	pop    %rbp
  105338:	c3                   	ret    
  105339:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000105340 <_ZN7Console7NewlineEv>:

void Console::Newline() {
  105340:	55                   	push   %rbp
  105341:	48 89 e5             	mov    %rsp,%rbp
  105344:	41 57                	push   %r15
  105346:	41 56                	push   %r14
  105348:	41 55                	push   %r13
  10534a:	41 54                	push   %r12
  10534c:	53                   	push   %rbx
  10534d:	50                   	push   %rax
  10534e:	49 89 fd             	mov    %rdi,%r13
  cursor_column_ = 0;
  105351:	c7 87 fc 07 00 00 00 	movl   $0x0,0x7fc(%rdi)
  105358:	00 00 00 
  if (cursor_row_ < kRows - 1) {
  10535b:	8b 87 f8 07 00 00    	mov    0x7f8(%rdi),%eax
  105361:	83 f8 18             	cmp    $0x18,%eax
  105364:	7d 19                	jge    10537f <_ZN7Console7NewlineEv+0x3f>
    ++cursor_row_;
  105366:	83 c0 01             	add    $0x1,%eax
  105369:	41 89 85 f8 07 00 00 	mov    %eax,0x7f8(%r13)
      memcpy(buffer_[row], buffer_[row + 1], kColumns + 1);
      WriteString(writer_, 0, 16 * row, buffer_[row], fg_color_);
    }
    memset(buffer_[kRows - 1], 0, kColumns + 1);
  }
}
  105370:	48 83 c4 08          	add    $0x8,%rsp
  105374:	5b                   	pop    %rbx
  105375:	41 5c                	pop    %r12
  105377:	41 5d                	pop    %r13
  105379:	41 5e                	pop    %r14
  10537b:	41 5f                	pop    %r15
  10537d:	5d                   	pop    %rbp
  10537e:	c3                   	ret    
  10537f:	4d 8d 75 0b          	lea    0xb(%r13),%r14
  105383:	45 31 ff             	xor    %r15d,%r15d
  105386:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10538d:	00 00 00 
  105390:	31 db                	xor    %ebx,%ebx
  105392:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  105399:	00 00 00 
  10539c:	0f 1f 40 00          	nopl   0x0(%rax)
        writer_.Write(x, y, bg_color_);
  1053a0:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  1053a4:	48 8b 07             	mov    (%rdi),%rax
  1053a7:	89 de                	mov    %ebx,%esi
  1053a9:	44 89 fa             	mov    %r15d,%edx
  1053ac:	4c 89 f1             	mov    %r14,%rcx
  1053af:	ff 50 10             	call   *0x10(%rax)
      for (int x = 0; x < 8 * kColumns; ++x) {
  1053b2:	83 c3 01             	add    $0x1,%ebx
  1053b5:	81 fb 80 02 00 00    	cmp    $0x280,%ebx
  1053bb:	75 e3                	jne    1053a0 <_ZN7Console7NewlineEv+0x60>
    for (int y = 0; y < 16 * kRows; ++y) {
  1053bd:	41 83 c7 01          	add    $0x1,%r15d
  1053c1:	41 81 ff 90 01 00 00 	cmp    $0x190,%r15d
  1053c8:	75 c6                	jne    105390 <_ZN7Console7NewlineEv+0x50>
  1053ca:	4d 8d 75 08          	lea    0x8(%r13),%r14
    for (int row = 0; row < kRows - 1; ++row) {
  1053ce:	4d 8d 7d 5f          	lea    0x5f(%r13),%r15
  1053d2:	45 31 e4             	xor    %r12d,%r12d
  1053d5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1053dc:	00 00 00 
  1053df:	90                   	nop
      memcpy(buffer_[row], buffer_[row + 1], kColumns + 1);
  1053e0:	49 8d 5f af          	lea    -0x51(%r15),%rbx
  1053e4:	ba 51 00 00 00       	mov    $0x51,%edx
  1053e9:	48 89 df             	mov    %rbx,%rdi
  1053ec:	4c 89 fe             	mov    %r15,%rsi
  1053ef:	e8 0c 5d 00 00       	call   10b100 <memcpy>
      WriteString(writer_, 0, 16 * row, buffer_[row], fg_color_);
  1053f4:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  1053f8:	31 f6                	xor    %esi,%esi
  1053fa:	44 89 e2             	mov    %r12d,%edx
  1053fd:	48 89 d9             	mov    %rbx,%rcx
  105400:	4d 89 f0             	mov    %r14,%r8
  105403:	e8 68 fd ff ff       	call   105170 <_Z11WriteStringR11PixelWriteriiPKcRK10PixelColor>
    for (int row = 0; row < kRows - 1; ++row) {
  105408:	49 83 c4 10          	add    $0x10,%r12
  10540c:	49 83 c7 51          	add    $0x51,%r15
  105410:	49 81 fc 80 01 00 00 	cmp    $0x180,%r12
  105417:	75 c7                	jne    1053e0 <_ZN7Console7NewlineEv+0xa0>
    memset(buffer_[kRows - 1], 0, kColumns + 1);
  105419:	49 81 c5 a6 07 00 00 	add    $0x7a6,%r13
  105420:	ba 51 00 00 00       	mov    $0x51,%edx
  105425:	4c 89 ef             	mov    %r13,%rdi
  105428:	31 f6                	xor    %esi,%esi
  10542a:	48 83 c4 08          	add    $0x8,%rsp
  10542e:	5b                   	pop    %rbx
  10542f:	41 5c                	pop    %r12
  105431:	41 5d                	pop    %r13
  105433:	41 5e                	pop    %r14
  105435:	41 5f                	pop    %r15
  105437:	5d                   	pop    %rbp
  105438:	e9 63 63 00 00       	jmp    10b7a0 <memset>
  10543d:	cc                   	int3   
  10543e:	cc                   	int3   
  10543f:	cc                   	int3   

0000000000105440 <_ZN3pci12WriteAddressEj>:
    return MAKE_ERROR(Error::kNotImplemented);
  }
}

namespace pci {
  void WriteAddress(uint32_t address) {
  105440:	55                   	push   %rbp
  105441:	48 89 e5             	mov    %rsp,%rbp
  105444:	89 fe                	mov    %edi,%esi
    IoOut32(kConfigAddress, address);
  105446:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  10544b:	5d                   	pop    %rbp
  10544c:	e9 1f 0e 00 00       	jmp    106270 <IoOut32>
  105451:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  105458:	00 00 00 
  10545b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000105460 <_ZN3pci9WriteDataEj>:
  }

  void WriteData(uint32_t value) {
  105460:	55                   	push   %rbp
  105461:	48 89 e5             	mov    %rsp,%rbp
  105464:	89 fe                	mov    %edi,%esi
    IoOut32(kConfigData, value);
  105466:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  10546b:	5d                   	pop    %rbp
  10546c:	e9 ff 0d 00 00       	jmp    106270 <IoOut32>
  105471:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  105478:	00 00 00 
  10547b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000105480 <_ZN3pci8ReadDataEv>:
  }

  uint32_t ReadData() {
  105480:	55                   	push   %rbp
  105481:	48 89 e5             	mov    %rsp,%rbp
    return IoIn32(kConfigData);
  105484:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105489:	5d                   	pop    %rbp
  10548a:	e9 e8 0d 00 00       	jmp    106277 <IoIn32>
  10548f:	90                   	nop

0000000000105490 <_ZN3pci12ReadVendorIdEhhh>:
  }

  uint16_t ReadVendorId(uint8_t bus, uint8_t device, uint8_t function) {
  105490:	55                   	push   %rbp
  105491:	48 89 e5             	mov    %rsp,%rbp
        return x << bits;
  105494:	c1 e7 10             	shl    $0x10,%edi
  105497:	c1 e6 0b             	shl    $0xb,%esi
        | (reg_addr & 0xfcu);
  10549a:	09 fe                	or     %edi,%esi
        return x << bits;
  10549c:	c1 e2 08             	shl    $0x8,%edx
        | (reg_addr & 0xfcu);
  10549f:	09 d6                	or     %edx,%esi
  1054a1:	81 ce 00 00 00 80    	or     $0x80000000,%esi
    IoOut32(kConfigAddress, address);
  1054a7:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  1054ac:	e8 bf 0d 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  1054b1:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  1054b6:	e8 bc 0d 00 00       	call   106277 <IoIn32>
    WriteAddress(MakeAddress(bus, device, function, 0x00));
    return ReadData() & 0xffffu;
  1054bb:	5d                   	pop    %rbp
  1054bc:	c3                   	ret    
  1054bd:	0f 1f 00             	nopl   (%rax)

00000000001054c0 <_ZN3pci12ReadDeviceIdEhhh>:
  }

  uint16_t ReadDeviceId(uint8_t bus, uint8_t device, uint8_t function) {
  1054c0:	55                   	push   %rbp
  1054c1:	48 89 e5             	mov    %rsp,%rbp
        return x << bits;
  1054c4:	c1 e7 10             	shl    $0x10,%edi
  1054c7:	c1 e6 0b             	shl    $0xb,%esi
        | (reg_addr & 0xfcu);
  1054ca:	09 fe                	or     %edi,%esi
        return x << bits;
  1054cc:	c1 e2 08             	shl    $0x8,%edx
        | (reg_addr & 0xfcu);
  1054cf:	09 d6                	or     %edx,%esi
  1054d1:	81 ce 00 00 00 80    	or     $0x80000000,%esi
    IoOut32(kConfigAddress, address);
  1054d7:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  1054dc:	e8 8f 0d 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  1054e1:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  1054e6:	e8 8c 0d 00 00       	call   106277 <IoIn32>
    WriteAddress(MakeAddress(bus, device, function, 0x00));
    return ReadData() >> 16;
  1054eb:	c1 e8 10             	shr    $0x10,%eax
  1054ee:	5d                   	pop    %rbp
  1054ef:	c3                   	ret    

00000000001054f0 <_ZN3pci14ReadHeaderTypeEhhh>:
  }

  uint8_t ReadHeaderType(uint8_t bus, uint8_t device, uint8_t function) {
  1054f0:	55                   	push   %rbp
  1054f1:	48 89 e5             	mov    %rsp,%rbp
        return x << bits;
  1054f4:	c1 e7 10             	shl    $0x10,%edi
  1054f7:	c1 e6 0b             	shl    $0xb,%esi
        | (reg_addr & 0xfcu);
  1054fa:	09 fe                	or     %edi,%esi
        return x << bits;
  1054fc:	c1 e2 08             	shl    $0x8,%edx
        | (reg_addr & 0xfcu);
  1054ff:	09 d6                	or     %edx,%esi
  105501:	81 ce 0c 00 00 80    	or     $0x8000000c,%esi
    IoOut32(kConfigAddress, address);
  105507:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  10550c:	e8 5f 0d 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  105511:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105516:	e8 5c 0d 00 00       	call   106277 <IoIn32>
    WriteAddress(MakeAddress(bus, device, function, 0x0c));
    return (ReadData() >> 16) & 0xffu;
  10551b:	c1 e8 10             	shr    $0x10,%eax
  10551e:	5d                   	pop    %rbp
  10551f:	c3                   	ret    

0000000000105520 <_ZN3pci13ReadClassCodeEhhh>:
  }

  ClassCode ReadClassCode(uint8_t bus, uint8_t device, uint8_t function) {
  105520:	55                   	push   %rbp
  105521:	48 89 e5             	mov    %rsp,%rbp
        return x << bits;
  105524:	c1 e7 10             	shl    $0x10,%edi
  105527:	c1 e6 0b             	shl    $0xb,%esi
        | (reg_addr & 0xfcu);
  10552a:	09 fe                	or     %edi,%esi
        return x << bits;
  10552c:	c1 e2 08             	shl    $0x8,%edx
        | (reg_addr & 0xfcu);
  10552f:	09 d6                	or     %edx,%esi
  105531:	81 ce 08 00 00 80    	or     $0x80000008,%esi
    IoOut32(kConfigAddress, address);
  105537:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  10553c:	e8 2f 0d 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  105541:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105546:	e8 2c 0d 00 00       	call   106277 <IoIn32>
    WriteAddress(MakeAddress(bus, device, function, 0x08));
    auto reg = ReadData();
    ClassCode cc;
    cc.base       = (reg >> 24) & 0xffu;
    cc.sub        = (reg >> 16) & 0xffu;
    cc.interface  = (reg >> 8)  & 0xffu;
  10554b:	c1 e8 08             	shr    $0x8,%eax
    return cc;
  }
  10554e:	89 c1                	mov    %eax,%ecx
  105550:	81 e1 00 ff 00 00    	and    $0xff00,%ecx
  105556:	c1 c0 10             	rol    $0x10,%eax
  105559:	09 c8                	or     %ecx,%eax
  10555b:	5d                   	pop    %rbp
  10555c:	c3                   	ret    
  10555d:	0f 1f 00             	nopl   (%rax)

0000000000105560 <_ZN3pci14ReadBusNumbersEhhh>:

  uint32_t ReadBusNumbers(uint8_t bus, uint8_t device, uint8_t function) {
  105560:	55                   	push   %rbp
  105561:	48 89 e5             	mov    %rsp,%rbp
        return x << bits;
  105564:	c1 e7 10             	shl    $0x10,%edi
  105567:	c1 e6 0b             	shl    $0xb,%esi
        | (reg_addr & 0xfcu);
  10556a:	09 fe                	or     %edi,%esi
        return x << bits;
  10556c:	c1 e2 08             	shl    $0x8,%edx
        | (reg_addr & 0xfcu);
  10556f:	09 d6                	or     %edx,%esi
  105571:	81 ce 18 00 00 80    	or     $0x80000018,%esi
    IoOut32(kConfigAddress, address);
  105577:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  10557c:	e8 ef 0c 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  105581:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105586:	5d                   	pop    %rbp
  105587:	e9 eb 0c 00 00       	jmp    106277 <IoIn32>
  10558c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000105590 <_ZN3pci22IsSingleFunctionDeviceEh>:
    WriteAddress(MakeAddress(bus, device, function, 0x18));
    return ReadData();
  }

  bool IsSingleFunctionDevice(uint8_t header_type) {
  105590:	55                   	push   %rbp
  105591:	48 89 e5             	mov    %rsp,%rbp
  105594:	89 f8                	mov    %edi,%eax
    return (header_type & 0x80u) == 0;
  105596:	f6 d0                	not    %al
  105598:	c0 e8 07             	shr    $0x7,%al
  10559b:	5d                   	pop    %rbp
  10559c:	c3                   	ret    
  10559d:	0f 1f 00             	nopl   (%rax)

00000000001055a0 <_ZN3pci10ScanAllBusEv>:
  }

  Error ScanAllBus() {
  1055a0:	55                   	push   %rbp
  1055a1:	48 89 e5             	mov    %rsp,%rbp
  1055a4:	41 56                	push   %r14
  1055a6:	53                   	push   %rbx
    num_device = 0;
  1055a7:	c7 05 bf 22 11 00 00 	movl   $0x0,0x1122bf(%rip)        # 217870 <_ZN3pci10num_deviceE>
  1055ae:	00 00 00 
    IoOut32(kConfigAddress, address);
  1055b1:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  1055b6:	be 0c 00 00 80       	mov    $0x8000000c,%esi
  1055bb:	e8 b0 0c 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  1055c0:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  1055c5:	e8 ad 0c 00 00       	call   106277 <IoIn32>
    return (ReadData() >> 16) & 0xffu;
  1055ca:	c1 e8 10             	shr    $0x10,%eax
    return (header_type & 0x80u) == 0;
  1055cd:	84 c0                	test   %al,%al

    auto header_type = ReadHeaderType(0, 0, 0);
    if (IsSingleFunctionDevice(header_type)) {
  1055cf:	78 24                	js     1055f5 <_ZN3pci10ScanAllBusEv+0x55>
      return ScanBus(0);
  1055d1:	31 ff                	xor    %edi,%edi
  1055d3:	e8 b8 01 00 00       	call   105790 <_ZN12_GLOBAL__N_17ScanBusEh>
  1055d8:	49 89 d6             	mov    %rdx,%r14
  1055db:	48 bb 00 00 00 00 ff 	movabs $0xffffffff00000000,%rbx
  1055e2:	ff ff ff 
      if (auto err = ScanBus(function)) {
        return err;
      }
    }
    return MAKE_ERROR(Error::kSuccess);
  }
  1055e5:	48 21 c3             	and    %rax,%rbx
  1055e8:	89 c0                	mov    %eax,%eax
  1055ea:	48 09 d8             	or     %rbx,%rax
  1055ed:	4c 89 f2             	mov    %r14,%rdx
  1055f0:	5b                   	pop    %rbx
  1055f1:	41 5e                	pop    %r14
  1055f3:	5d                   	pop    %rbp
  1055f4:	c3                   	ret    
    IoOut32(kConfigAddress, address);
  1055f5:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  1055fa:	be 00 00 00 80       	mov    $0x80000000,%esi
  1055ff:	e8 6c 0c 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  105604:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105609:	e8 69 0c 00 00       	call   106277 <IoIn32>
      if (ReadVendorId(0, 0, function) == 0xffffu) {
  10560e:	66 83 f8 ff          	cmp    $0xffff,%ax
  105612:	74 0b                	je     10561f <_ZN3pci10ScanAllBusEv+0x7f>
      if (auto err = ScanBus(function)) {
  105614:	31 ff                	xor    %edi,%edi
  105616:	e8 75 01 00 00       	call   105790 <_ZN12_GLOBAL__N_17ScanBusEh>
    return this->code_ != kSuccess;
  10561b:	85 c0                	test   %eax,%eax
  10561d:	75 b9                	jne    1055d8 <_ZN3pci10ScanAllBusEv+0x38>
    IoOut32(kConfigAddress, address);
  10561f:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105624:	be 00 01 00 80       	mov    $0x80000100,%esi
  105629:	e8 42 0c 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  10562e:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105633:	e8 3f 0c 00 00       	call   106277 <IoIn32>
      if (ReadVendorId(0, 0, function) == 0xffffu) {
  105638:	66 83 f8 ff          	cmp    $0xffff,%ax
  10563c:	74 0e                	je     10564c <_ZN3pci10ScanAllBusEv+0xac>
      if (auto err = ScanBus(function)) {
  10563e:	bf 01 00 00 00       	mov    $0x1,%edi
  105643:	e8 48 01 00 00       	call   105790 <_ZN12_GLOBAL__N_17ScanBusEh>
  105648:	85 c0                	test   %eax,%eax
  10564a:	75 8c                	jne    1055d8 <_ZN3pci10ScanAllBusEv+0x38>
    IoOut32(kConfigAddress, address);
  10564c:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105651:	be 00 02 00 80       	mov    $0x80000200,%esi
  105656:	e8 15 0c 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  10565b:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105660:	e8 12 0c 00 00       	call   106277 <IoIn32>
      if (ReadVendorId(0, 0, function) == 0xffffu) {
  105665:	66 83 f8 ff          	cmp    $0xffff,%ax
  105669:	74 12                	je     10567d <_ZN3pci10ScanAllBusEv+0xdd>
      if (auto err = ScanBus(function)) {
  10566b:	bf 02 00 00 00       	mov    $0x2,%edi
  105670:	e8 1b 01 00 00       	call   105790 <_ZN12_GLOBAL__N_17ScanBusEh>
  105675:	85 c0                	test   %eax,%eax
  105677:	0f 85 5b ff ff ff    	jne    1055d8 <_ZN3pci10ScanAllBusEv+0x38>
    IoOut32(kConfigAddress, address);
  10567d:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105682:	be 00 03 00 80       	mov    $0x80000300,%esi
  105687:	e8 e4 0b 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  10568c:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105691:	e8 e1 0b 00 00       	call   106277 <IoIn32>
      if (ReadVendorId(0, 0, function) == 0xffffu) {
  105696:	66 83 f8 ff          	cmp    $0xffff,%ax
  10569a:	74 12                	je     1056ae <_ZN3pci10ScanAllBusEv+0x10e>
      if (auto err = ScanBus(function)) {
  10569c:	bf 03 00 00 00       	mov    $0x3,%edi
  1056a1:	e8 ea 00 00 00       	call   105790 <_ZN12_GLOBAL__N_17ScanBusEh>
  1056a6:	85 c0                	test   %eax,%eax
  1056a8:	0f 85 2a ff ff ff    	jne    1055d8 <_ZN3pci10ScanAllBusEv+0x38>
    IoOut32(kConfigAddress, address);
  1056ae:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  1056b3:	be 00 04 00 80       	mov    $0x80000400,%esi
  1056b8:	e8 b3 0b 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  1056bd:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  1056c2:	e8 b0 0b 00 00       	call   106277 <IoIn32>
      if (ReadVendorId(0, 0, function) == 0xffffu) {
  1056c7:	66 83 f8 ff          	cmp    $0xffff,%ax
  1056cb:	74 12                	je     1056df <_ZN3pci10ScanAllBusEv+0x13f>
      if (auto err = ScanBus(function)) {
  1056cd:	bf 04 00 00 00       	mov    $0x4,%edi
  1056d2:	e8 b9 00 00 00       	call   105790 <_ZN12_GLOBAL__N_17ScanBusEh>
  1056d7:	85 c0                	test   %eax,%eax
  1056d9:	0f 85 f9 fe ff ff    	jne    1055d8 <_ZN3pci10ScanAllBusEv+0x38>
    IoOut32(kConfigAddress, address);
  1056df:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  1056e4:	be 00 05 00 80       	mov    $0x80000500,%esi
  1056e9:	e8 82 0b 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  1056ee:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  1056f3:	e8 7f 0b 00 00       	call   106277 <IoIn32>
      if (ReadVendorId(0, 0, function) == 0xffffu) {
  1056f8:	66 83 f8 ff          	cmp    $0xffff,%ax
  1056fc:	74 12                	je     105710 <_ZN3pci10ScanAllBusEv+0x170>
      if (auto err = ScanBus(function)) {
  1056fe:	bf 05 00 00 00       	mov    $0x5,%edi
  105703:	e8 88 00 00 00       	call   105790 <_ZN12_GLOBAL__N_17ScanBusEh>
  105708:	85 c0                	test   %eax,%eax
  10570a:	0f 85 c8 fe ff ff    	jne    1055d8 <_ZN3pci10ScanAllBusEv+0x38>
    IoOut32(kConfigAddress, address);
  105710:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105715:	be 00 06 00 80       	mov    $0x80000600,%esi
  10571a:	e8 51 0b 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  10571f:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105724:	e8 4e 0b 00 00       	call   106277 <IoIn32>
      if (ReadVendorId(0, 0, function) == 0xffffu) {
  105729:	66 83 f8 ff          	cmp    $0xffff,%ax
  10572d:	74 12                	je     105741 <_ZN3pci10ScanAllBusEv+0x1a1>
      if (auto err = ScanBus(function)) {
  10572f:	bf 06 00 00 00       	mov    $0x6,%edi
  105734:	e8 57 00 00 00       	call   105790 <_ZN12_GLOBAL__N_17ScanBusEh>
  105739:	85 c0                	test   %eax,%eax
  10573b:	0f 85 97 fe ff ff    	jne    1055d8 <_ZN3pci10ScanAllBusEv+0x38>
  105741:	48 bb 00 00 00 00 f3 	movabs $0xf300000000,%rbx
  105748:	00 00 00 
    IoOut32(kConfigAddress, address);
  10574b:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105750:	be 00 07 00 80       	mov    $0x80000700,%esi
  105755:	e8 16 0b 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  10575a:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  10575f:	e8 13 0b 00 00       	call   106277 <IoIn32>
  105764:	41 be c4 0b 10 00    	mov    $0x100bc4,%r14d
      if (ReadVendorId(0, 0, function) == 0xffffu) {
  10576a:	66 83 f8 ff          	cmp    $0xffff,%ax
  10576e:	74 12                	je     105782 <_ZN3pci10ScanAllBusEv+0x1e2>
      if (auto err = ScanBus(function)) {
  105770:	bf 07 00 00 00       	mov    $0x7,%edi
  105775:	e8 16 00 00 00       	call   105790 <_ZN12_GLOBAL__N_17ScanBusEh>
  10577a:	85 c0                	test   %eax,%eax
  10577c:	0f 85 56 fe ff ff    	jne    1055d8 <_ZN3pci10ScanAllBusEv+0x38>
  105782:	31 c0                	xor    %eax,%eax
  105784:	e9 5f fe ff ff       	jmp    1055e8 <_ZN3pci10ScanAllBusEv+0x48>
  105789:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000105790 <_ZN12_GLOBAL__N_17ScanBusEh>:
  Error ScanBus(uint8_t bus) {
  105790:	55                   	push   %rbp
  105791:	48 89 e5             	mov    %rsp,%rbp
  105794:	41 57                	push   %r15
  105796:	41 56                	push   %r14
  105798:	41 55                	push   %r13
  10579a:	41 54                	push   %r12
  10579c:	53                   	push   %rbx
  10579d:	50                   	push   %rax
  10579e:	44 0f b6 ff          	movzbl %dil,%r15d
  1057a2:	41 89 fd             	mov    %edi,%r13d
  1057a5:	41 c1 e5 10          	shl    $0x10,%r13d
  1057a9:	31 db                	xor    %ebx,%ebx
  1057ab:	45 31 f6             	xor    %r14d,%r14d
  1057ae:	eb 1c                	jmp    1057cc <_ZN12_GLOBAL__N_17ScanBusEh+0x3c>
  1057b0:	85 c0                	test   %eax,%eax
      if (auto err = ScanDevice(bus, device)) {
  1057b2:	0f 85 34 02 00 00    	jne    1059ec <_ZN12_GLOBAL__N_17ScanBusEh+0x25c>
    for (uint8_t device = 0; device < 32; ++device) {
  1057b8:	41 83 c6 01          	add    $0x1,%r14d
  1057bc:	81 c3 00 08 00 00    	add    $0x800,%ebx
  1057c2:	41 83 fe 20          	cmp    $0x20,%r14d
  1057c6:	0f 84 0d 02 00 00    	je     1059d9 <_ZN12_GLOBAL__N_17ScanBusEh+0x249>
        | (reg_addr & 0xfcu);
  1057cc:	41 89 dc             	mov    %ebx,%r12d
  1057cf:	45 09 ec             	or     %r13d,%r12d
  1057d2:	44 89 e6             	mov    %r12d,%esi
  1057d5:	81 ce 00 00 00 80    	or     $0x80000000,%esi
    IoOut32(kConfigAddress, address);
  1057db:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  1057e0:	e8 8b 0a 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  1057e5:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  1057ea:	e8 88 0a 00 00       	call   106277 <IoIn32>
      if (ReadVendorId(bus, device, 0) == 0xffffu) {
  1057ef:	66 83 f8 ff          	cmp    $0xffff,%ax
  1057f3:	74 c3                	je     1057b8 <_ZN12_GLOBAL__N_17ScanBusEh+0x28>
    if (auto err = ScanFunction(bus, device, 0)) {
  1057f5:	41 0f b6 f6          	movzbl %r14b,%esi
  1057f9:	44 89 ff             	mov    %r15d,%edi
  1057fc:	31 d2                	xor    %edx,%edx
  1057fe:	e8 1d 09 00 00       	call   106120 <_ZN12_GLOBAL__N_112ScanFunctionEhhh>
  105803:	85 c0                	test   %eax,%eax
  105805:	75 a9                	jne    1057b0 <_ZN12_GLOBAL__N_17ScanBusEh+0x20>
        | (reg_addr & 0xfcu);
  105807:	44 89 e6             	mov    %r12d,%esi
  10580a:	81 ce 0c 00 00 80    	or     $0x8000000c,%esi
    IoOut32(kConfigAddress, address);
  105810:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105815:	e8 56 0a 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  10581a:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  10581f:	e8 53 0a 00 00       	call   106277 <IoIn32>
    return (ReadData() >> 16) & 0xffu;
  105824:	c1 e8 10             	shr    $0x10,%eax
    return (header_type & 0x80u) == 0;
  105827:	84 c0                	test   %al,%al
    if (IsSingleFunctionDevice(ReadHeaderType(bus, device, 0))) {
  105829:	79 8d                	jns    1057b8 <_ZN12_GLOBAL__N_17ScanBusEh+0x28>
        | (reg_addr & 0xfcu);
  10582b:	44 89 e6             	mov    %r12d,%esi
  10582e:	81 ce 00 01 00 80    	or     $0x80000100,%esi
    IoOut32(kConfigAddress, address);
  105834:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105839:	e8 32 0a 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  10583e:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105843:	e8 2f 0a 00 00       	call   106277 <IoIn32>
      if (ReadVendorId(bus, device, function) == 0xffffu) {
  105848:	66 83 f8 ff          	cmp    $0xffff,%ax
  10584c:	74 19                	je     105867 <_ZN12_GLOBAL__N_17ScanBusEh+0xd7>
      if (auto err = ScanFunction(bus, device, function)) {
  10584e:	41 0f b6 f6          	movzbl %r14b,%esi
  105852:	44 89 ff             	mov    %r15d,%edi
  105855:	ba 01 00 00 00       	mov    $0x1,%edx
  10585a:	e8 c1 08 00 00       	call   106120 <_ZN12_GLOBAL__N_112ScanFunctionEhhh>
  10585f:	85 c0                	test   %eax,%eax
  105861:	0f 85 49 ff ff ff    	jne    1057b0 <_ZN12_GLOBAL__N_17ScanBusEh+0x20>
        | (reg_addr & 0xfcu);
  105867:	44 89 e6             	mov    %r12d,%esi
  10586a:	81 ce 00 02 00 80    	or     $0x80000200,%esi
    IoOut32(kConfigAddress, address);
  105870:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105875:	e8 f6 09 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  10587a:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  10587f:	e8 f3 09 00 00       	call   106277 <IoIn32>
      if (ReadVendorId(bus, device, function) == 0xffffu) {
  105884:	66 83 f8 ff          	cmp    $0xffff,%ax
  105888:	74 19                	je     1058a3 <_ZN12_GLOBAL__N_17ScanBusEh+0x113>
      if (auto err = ScanFunction(bus, device, function)) {
  10588a:	41 0f b6 f6          	movzbl %r14b,%esi
  10588e:	44 89 ff             	mov    %r15d,%edi
  105891:	ba 02 00 00 00       	mov    $0x2,%edx
  105896:	e8 85 08 00 00       	call   106120 <_ZN12_GLOBAL__N_112ScanFunctionEhhh>
  10589b:	85 c0                	test   %eax,%eax
  10589d:	0f 85 0d ff ff ff    	jne    1057b0 <_ZN12_GLOBAL__N_17ScanBusEh+0x20>
        | (reg_addr & 0xfcu);
  1058a3:	44 89 e6             	mov    %r12d,%esi
  1058a6:	81 ce 00 03 00 80    	or     $0x80000300,%esi
    IoOut32(kConfigAddress, address);
  1058ac:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  1058b1:	e8 ba 09 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  1058b6:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  1058bb:	e8 b7 09 00 00       	call   106277 <IoIn32>
      if (ReadVendorId(bus, device, function) == 0xffffu) {
  1058c0:	66 83 f8 ff          	cmp    $0xffff,%ax
  1058c4:	74 19                	je     1058df <_ZN12_GLOBAL__N_17ScanBusEh+0x14f>
      if (auto err = ScanFunction(bus, device, function)) {
  1058c6:	41 0f b6 f6          	movzbl %r14b,%esi
  1058ca:	44 89 ff             	mov    %r15d,%edi
  1058cd:	ba 03 00 00 00       	mov    $0x3,%edx
  1058d2:	e8 49 08 00 00       	call   106120 <_ZN12_GLOBAL__N_112ScanFunctionEhhh>
  1058d7:	85 c0                	test   %eax,%eax
  1058d9:	0f 85 d1 fe ff ff    	jne    1057b0 <_ZN12_GLOBAL__N_17ScanBusEh+0x20>
        | (reg_addr & 0xfcu);
  1058df:	44 89 e6             	mov    %r12d,%esi
  1058e2:	81 ce 00 04 00 80    	or     $0x80000400,%esi
    IoOut32(kConfigAddress, address);
  1058e8:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  1058ed:	e8 7e 09 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  1058f2:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  1058f7:	e8 7b 09 00 00       	call   106277 <IoIn32>
      if (ReadVendorId(bus, device, function) == 0xffffu) {
  1058fc:	66 83 f8 ff          	cmp    $0xffff,%ax
  105900:	74 19                	je     10591b <_ZN12_GLOBAL__N_17ScanBusEh+0x18b>
      if (auto err = ScanFunction(bus, device, function)) {
  105902:	41 0f b6 f6          	movzbl %r14b,%esi
  105906:	44 89 ff             	mov    %r15d,%edi
  105909:	ba 04 00 00 00       	mov    $0x4,%edx
  10590e:	e8 0d 08 00 00       	call   106120 <_ZN12_GLOBAL__N_112ScanFunctionEhhh>
  105913:	85 c0                	test   %eax,%eax
  105915:	0f 85 95 fe ff ff    	jne    1057b0 <_ZN12_GLOBAL__N_17ScanBusEh+0x20>
        | (reg_addr & 0xfcu);
  10591b:	44 89 e6             	mov    %r12d,%esi
  10591e:	81 ce 00 05 00 80    	or     $0x80000500,%esi
    IoOut32(kConfigAddress, address);
  105924:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105929:	e8 42 09 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  10592e:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105933:	e8 3f 09 00 00       	call   106277 <IoIn32>
      if (ReadVendorId(bus, device, function) == 0xffffu) {
  105938:	66 83 f8 ff          	cmp    $0xffff,%ax
  10593c:	74 19                	je     105957 <_ZN12_GLOBAL__N_17ScanBusEh+0x1c7>
      if (auto err = ScanFunction(bus, device, function)) {
  10593e:	41 0f b6 f6          	movzbl %r14b,%esi
  105942:	44 89 ff             	mov    %r15d,%edi
  105945:	ba 05 00 00 00       	mov    $0x5,%edx
  10594a:	e8 d1 07 00 00       	call   106120 <_ZN12_GLOBAL__N_112ScanFunctionEhhh>
  10594f:	85 c0                	test   %eax,%eax
  105951:	0f 85 59 fe ff ff    	jne    1057b0 <_ZN12_GLOBAL__N_17ScanBusEh+0x20>
        | (reg_addr & 0xfcu);
  105957:	44 89 e6             	mov    %r12d,%esi
  10595a:	81 ce 00 06 00 80    	or     $0x80000600,%esi
    IoOut32(kConfigAddress, address);
  105960:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105965:	e8 06 09 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  10596a:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  10596f:	e8 03 09 00 00       	call   106277 <IoIn32>
      if (ReadVendorId(bus, device, function) == 0xffffu) {
  105974:	66 83 f8 ff          	cmp    $0xffff,%ax
  105978:	74 19                	je     105993 <_ZN12_GLOBAL__N_17ScanBusEh+0x203>
      if (auto err = ScanFunction(bus, device, function)) {
  10597a:	41 0f b6 f6          	movzbl %r14b,%esi
  10597e:	44 89 ff             	mov    %r15d,%edi
  105981:	ba 06 00 00 00       	mov    $0x6,%edx
  105986:	e8 95 07 00 00       	call   106120 <_ZN12_GLOBAL__N_112ScanFunctionEhhh>
  10598b:	85 c0                	test   %eax,%eax
  10598d:	0f 85 1d fe ff ff    	jne    1057b0 <_ZN12_GLOBAL__N_17ScanBusEh+0x20>
        | (reg_addr & 0xfcu);
  105993:	41 81 cc 00 07 00 80 	or     $0x80000700,%r12d
    IoOut32(kConfigAddress, address);
  10599a:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  10599f:	44 89 e6             	mov    %r12d,%esi
  1059a2:	e8 c9 08 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  1059a7:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  1059ac:	e8 c6 08 00 00       	call   106277 <IoIn32>
      if (ReadVendorId(bus, device, function) == 0xffffu) {
  1059b1:	66 83 f8 ff          	cmp    $0xffff,%ax
  1059b5:	0f 84 fd fd ff ff    	je     1057b8 <_ZN12_GLOBAL__N_17ScanBusEh+0x28>
      if (auto err = ScanFunction(bus, device, function)) {
  1059bb:	41 0f b6 f6          	movzbl %r14b,%esi
  1059bf:	44 89 ff             	mov    %r15d,%edi
  1059c2:	ba 07 00 00 00       	mov    $0x7,%edx
  1059c7:	e8 54 07 00 00       	call   106120 <_ZN12_GLOBAL__N_112ScanFunctionEhhh>
  1059cc:	85 c0                	test   %eax,%eax
  1059ce:	0f 85 dc fd ff ff    	jne    1057b0 <_ZN12_GLOBAL__N_17ScanBusEh+0x20>
  1059d4:	e9 df fd ff ff       	jmp    1057b8 <_ZN12_GLOBAL__N_17ScanBusEh+0x28>
  1059d9:	ba c4 0b 10 00       	mov    $0x100bc4,%edx
  1059de:	48 b9 00 00 00 00 60 	movabs $0x6000000000,%rcx
  1059e5:	00 00 00 
  1059e8:	31 c0                	xor    %eax,%eax
  1059ea:	eb 0f                	jmp    1059fb <_ZN12_GLOBAL__N_17ScanBusEh+0x26b>
  1059ec:	48 b9 00 00 00 00 ff 	movabs $0xffffffff00000000,%rcx
  1059f3:	ff ff ff 
  1059f6:	48 21 c1             	and    %rax,%rcx
  }
  1059f9:	89 c0                	mov    %eax,%eax
  }
  1059fb:	48 09 c1             	or     %rax,%rcx
  1059fe:	48 89 c8             	mov    %rcx,%rax
  105a01:	48 83 c4 08          	add    $0x8,%rsp
  105a05:	5b                   	pop    %rbx
  105a06:	41 5c                	pop    %r12
  105a08:	41 5d                	pop    %r13
  105a0a:	41 5e                	pop    %r14
  105a0c:	41 5f                	pop    %r15
  105a0e:	5d                   	pop    %rbp
  105a0f:	c3                   	ret    

0000000000105a10 <_ZN3pci11ReadConfRegERKNS_6DeviceEh>:

  uint32_t ReadConfReg(const Device& dev, uint8_t reg_addr) {
  105a10:	55                   	push   %rbp
  105a11:	48 89 e5             	mov    %rsp,%rbp
    WriteAddress(MakeAddress(dev.bus, dev.device, dev.function, reg_addr));
  105a14:	0f b6 07             	movzbl (%rdi),%eax
  105a17:	0f b6 4f 01          	movzbl 0x1(%rdi),%ecx
  105a1b:	0f b6 57 02          	movzbl 0x2(%rdi),%edx
        return x << bits;
  105a1f:	c1 e0 10             	shl    $0x10,%eax
  105a22:	c1 e1 0b             	shl    $0xb,%ecx
  105a25:	c1 e2 08             	shl    $0x8,%edx
        | (reg_addr & 0xfcu);
  105a28:	09 ca                	or     %ecx,%edx
  105a2a:	83 e6 fc             	and    $0xfffffffc,%esi
  105a2d:	09 c6                	or     %eax,%esi
  105a2f:	09 d6                	or     %edx,%esi
  105a31:	81 ce 00 00 00 80    	or     $0x80000000,%esi
    IoOut32(kConfigAddress, address);
  105a37:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105a3c:	e8 2f 08 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  105a41:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105a46:	5d                   	pop    %rbp
  105a47:	e9 2b 08 00 00       	jmp    106277 <IoIn32>
  105a4c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000105a50 <_ZN3pci12WriteConfRegERKNS_6DeviceEhj>:
    return ReadData();
  }

  void WriteConfReg(const Device& dev, uint8_t reg_addr, uint32_t value) {
  105a50:	55                   	push   %rbp
  105a51:	48 89 e5             	mov    %rsp,%rbp
  105a54:	53                   	push   %rbx
  105a55:	50                   	push   %rax
  105a56:	89 d3                	mov    %edx,%ebx
    WriteAddress(MakeAddress(dev.bus, dev.device, dev.function, reg_addr));
  105a58:	0f b6 07             	movzbl (%rdi),%eax
  105a5b:	0f b6 4f 01          	movzbl 0x1(%rdi),%ecx
  105a5f:	0f b6 57 02          	movzbl 0x2(%rdi),%edx
        return x << bits;
  105a63:	c1 e0 10             	shl    $0x10,%eax
  105a66:	c1 e1 0b             	shl    $0xb,%ecx
  105a69:	c1 e2 08             	shl    $0x8,%edx
        | (reg_addr & 0xfcu);
  105a6c:	09 ca                	or     %ecx,%edx
  105a6e:	83 e6 fc             	and    $0xfffffffc,%esi
  105a71:	09 c6                	or     %eax,%esi
  105a73:	09 d6                	or     %edx,%esi
  105a75:	81 ce 00 00 00 80    	or     $0x80000000,%esi
    IoOut32(kConfigAddress, address);
  105a7b:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105a80:	e8 eb 07 00 00       	call   106270 <IoOut32>
    IoOut32(kConfigData, value);
  105a85:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105a8a:	89 de                	mov    %ebx,%esi
  105a8c:	48 83 c4 08          	add    $0x8,%rsp
  105a90:	5b                   	pop    %rbx
  105a91:	5d                   	pop    %rbp
  105a92:	e9 d9 07 00 00       	jmp    106270 <IoOut32>
  105a97:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  105a9e:	00 00 

0000000000105aa0 <_ZN3pci7ReadBarERNS_6DeviceEj>:
    WriteData(value);
  }

  WithError<uint64_t> ReadBar(Device& device, unsigned int bar_index) {
  105aa0:	55                   	push   %rbp
  105aa1:	48 89 e5             	mov    %rsp,%rbp
  105aa4:	41 57                	push   %r15
  105aa6:	41 56                	push   %r14
  105aa8:	41 55                	push   %r13
  105aaa:	41 54                	push   %r12
  105aac:	53                   	push   %rbx
  105aad:	50                   	push   %rax
  105aae:	48 89 fb             	mov    %rdi,%rbx
    if (bar_index >= 6) {
  105ab1:	83 fa 06             	cmp    $0x6,%edx
  105ab4:	72 16                	jb     105acc <_ZN3pci7ReadBarERNS_6DeviceEj+0x2c>
      return {0, MAKE_ERROR(Error::kIndexOutOfRange)};
  105ab6:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  105abd:	b8 02 01 00 00       	mov    $0x102,%eax
  105ac2:	b9 04 00 00 00       	mov    $0x4,%ecx
  105ac7:	e9 cb 00 00 00       	jmp    105b97 <_ZN3pci7ReadBarERNS_6DeviceEj+0xf7>
  105acc:	41 89 d7             	mov    %edx,%r15d
  105acf:	49 89 f6             	mov    %rsi,%r14
   * 発見したデバイスの数を num_devices に設定する．
   */
  Error ScanAllBus();

  constexpr uint8_t CalcBarAddress(unsigned int bar_index) {
    return 0x10 + 4 * bar_index;
  105ad2:	46 8d 2c bd 00 00 00 	lea    0x0(,%r15,4),%r13d
  105ad9:	00 
  105ada:	41 8d 45 10          	lea    0x10(%r13),%eax
    WriteAddress(MakeAddress(dev.bus, dev.device, dev.function, reg_addr));
  105ade:	0f b6 0e             	movzbl (%rsi),%ecx
  105ae1:	0f b6 56 01          	movzbl 0x1(%rsi),%edx
  105ae5:	0f b6 7e 02          	movzbl 0x2(%rsi),%edi
        return x << bits;
  105ae9:	c1 e1 10             	shl    $0x10,%ecx
  105aec:	c1 e2 0b             	shl    $0xb,%edx
  105aef:	c1 e7 08             	shl    $0x8,%edi
        | (reg_addr & 0xfcu);
  105af2:	09 d7                	or     %edx,%edi
  105af4:	0f b6 f0             	movzbl %al,%esi
  105af7:	09 ce                	or     %ecx,%esi
  105af9:	09 fe                	or     %edi,%esi
  105afb:	81 ce 00 00 00 80    	or     $0x80000000,%esi
    IoOut32(kConfigAddress, address);
  105b01:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105b06:	e8 65 07 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  105b0b:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105b10:	e8 62 07 00 00       	call   106277 <IoIn32>
  105b15:	41 89 c4             	mov    %eax,%r12d

    const auto addr = CalcBarAddress(bar_index);
    const auto bar = ReadConfReg(device, addr);

    // 32 bit address
    if ((bar & 4u) == 0) {
  105b18:	41 f6 c4 04          	test   $0x4,%r12b
  105b1c:	75 0d                	jne    105b2b <_ZN3pci7ReadBarERNS_6DeviceEj+0x8b>
      return {bar, MAKE_ERROR(Error::kSuccess)};
  105b1e:	44 89 e0             	mov    %r12d,%eax
  105b21:	48 89 03             	mov    %rax,(%rbx)
  105b24:	b8 0a 01 00 00       	mov    $0x10a,%eax
  105b29:	eb 6a                	jmp    105b95 <_ZN3pci7ReadBarERNS_6DeviceEj+0xf5>
    }

    // 64 bit address
    if (bar_index >= 5) {
  105b2b:	41 83 ff 05          	cmp    $0x5,%r15d
  105b2f:	72 13                	jb     105b44 <_ZN3pci7ReadBarERNS_6DeviceEj+0xa4>
      return {0, MAKE_ERROR(Error::kIndexOutOfRange)};
  105b31:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  105b38:	b8 0f 01 00 00       	mov    $0x10f,%eax
  105b3d:	b9 04 00 00 00       	mov    $0x4,%ecx
  105b42:	eb 53                	jmp    105b97 <_ZN3pci7ReadBarERNS_6DeviceEj+0xf7>
    }

    const auto bar_upper = ReadConfReg(device, addr + 4);
  105b44:	41 80 c5 14          	add    $0x14,%r13b
    WriteAddress(MakeAddress(dev.bus, dev.device, dev.function, reg_addr));
  105b48:	41 0f b6 06          	movzbl (%r14),%eax
  105b4c:	41 0f b6 4e 01       	movzbl 0x1(%r14),%ecx
  105b51:	41 0f b6 56 02       	movzbl 0x2(%r14),%edx
        return x << bits;
  105b56:	c1 e0 10             	shl    $0x10,%eax
  105b59:	c1 e1 0b             	shl    $0xb,%ecx
  105b5c:	c1 e2 08             	shl    $0x8,%edx
        | (reg_addr & 0xfcu);
  105b5f:	09 ca                	or     %ecx,%edx
  105b61:	41 0f b6 f5          	movzbl %r13b,%esi
  105b65:	09 c6                	or     %eax,%esi
  105b67:	09 d6                	or     %edx,%esi
  105b69:	81 ce 00 00 00 80    	or     $0x80000000,%esi
    IoOut32(kConfigAddress, address);
  105b6f:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105b74:	e8 f7 06 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  105b79:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105b7e:	e8 f4 06 00 00       	call   106277 <IoIn32>
    return {
      bar | (static_cast<uint64_t>(bar_upper) << 32),
  105b83:	44 89 e1             	mov    %r12d,%ecx
  105b86:	48 c1 e0 20          	shl    $0x20,%rax
  105b8a:	48 09 c8             	or     %rcx,%rax
    return {
  105b8d:	48 89 03             	mov    %rax,(%rbx)
  105b90:	b8 15 01 00 00       	mov    $0x115,%eax
  105b95:	31 c9                	xor    %ecx,%ecx
  105b97:	89 4b 08             	mov    %ecx,0x8(%rbx)
  105b9a:	89 43 0c             	mov    %eax,0xc(%rbx)
  105b9d:	48 c7 43 10 c4 0b 10 	movq   $0x100bc4,0x10(%rbx)
  105ba4:	00 
      MAKE_ERROR(Error::kSuccess)
    };
  }
  105ba5:	48 89 d8             	mov    %rbx,%rax
  105ba8:	48 83 c4 08          	add    $0x8,%rsp
  105bac:	5b                   	pop    %rbx
  105bad:	41 5c                	pop    %r12
  105baf:	41 5d                	pop    %r13
  105bb1:	41 5e                	pop    %r14
  105bb3:	41 5f                	pop    %r15
  105bb5:	5d                   	pop    %rbp
  105bb6:	c3                   	ret    
  105bb7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  105bbe:	00 00 

0000000000105bc0 <_ZN3pci20ReadCapabilityHeaderERKNS_6DeviceEh>:

  CapabilityHeader ReadCapabilityHeader(const Device& dev, uint8_t addr) {
  105bc0:	55                   	push   %rbp
  105bc1:	48 89 e5             	mov    %rsp,%rbp
    WriteAddress(MakeAddress(dev.bus, dev.device, dev.function, reg_addr));
  105bc4:	0f b6 07             	movzbl (%rdi),%eax
  105bc7:	0f b6 4f 01          	movzbl 0x1(%rdi),%ecx
  105bcb:	0f b6 57 02          	movzbl 0x2(%rdi),%edx
        return x << bits;
  105bcf:	c1 e0 10             	shl    $0x10,%eax
  105bd2:	c1 e1 0b             	shl    $0xb,%ecx
  105bd5:	c1 e2 08             	shl    $0x8,%edx
        | (reg_addr & 0xfcu);
  105bd8:	09 ca                	or     %ecx,%edx
  105bda:	83 e6 fc             	and    $0xfffffffc,%esi
  105bdd:	09 c6                	or     %eax,%esi
  105bdf:	09 d6                	or     %edx,%esi
  105be1:	81 ce 00 00 00 80    	or     $0x80000000,%esi
    IoOut32(kConfigAddress, address);
  105be7:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105bec:	e8 7f 06 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  105bf1:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105bf6:	5d                   	pop    %rbp
  105bf7:	e9 7b 06 00 00       	jmp    106277 <IoIn32>
  105bfc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000105c00 <_ZN3pci12ConfigureMSIERKNS_6DeviceEjjj>:
    header.data = pci::ReadConfReg(dev, addr);
    return header;
  }

  Error ConfigureMSI(const Device& dev, uint32_t msg_addr, uint32_t msg_data,
                     unsigned int num_vector_exponent) {
  105c00:	55                   	push   %rbp
  105c01:	48 89 e5             	mov    %rsp,%rbp
  105c04:	41 57                	push   %r15
  105c06:	41 56                	push   %r14
  105c08:	41 55                	push   %r13
  105c0a:	41 54                	push   %r12
  105c0c:	53                   	push   %rbx
  105c0d:	48 83 ec 28          	sub    $0x28,%rsp
  105c11:	41 89 cd             	mov    %ecx,%r13d
  105c14:	41 89 d6             	mov    %edx,%r14d
  105c17:	89 f3                	mov    %esi,%ebx
  105c19:	49 89 fc             	mov    %rdi,%r12
    WriteAddress(MakeAddress(dev.bus, dev.device, dev.function, reg_addr));
  105c1c:	0f b6 07             	movzbl (%rdi),%eax
  105c1f:	0f b6 4f 01          	movzbl 0x1(%rdi),%ecx
  105c23:	0f b6 77 02          	movzbl 0x2(%rdi),%esi
        return x << bits;
  105c27:	c1 e0 10             	shl    $0x10,%eax
  105c2a:	c1 e1 0b             	shl    $0xb,%ecx
        | (reg_addr & 0xfcu);
  105c2d:	09 c1                	or     %eax,%ecx
        return x << bits;
  105c2f:	c1 e6 08             	shl    $0x8,%esi
        | (reg_addr & 0xfcu);
  105c32:	09 ce                	or     %ecx,%esi
  105c34:	81 ce 34 00 00 80    	or     $0x80000034,%esi
    IoOut32(kConfigAddress, address);
  105c3a:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105c3f:	e8 2c 06 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  105c44:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105c49:	e8 29 06 00 00       	call   106277 <IoIn32>
    uint8_t cap_addr = ReadConfReg(dev, 0x34) & 0xffu;
    uint8_t msi_cap_addr = 0, msix_cap_addr = 0;
    while (cap_addr != 0) {
  105c4e:	84 c0                	test   %al,%al
  105c50:	0f 84 77 02 00 00    	je     105ecd <_ZN3pci12ConfigureMSIERKNS_6DeviceEjjj+0x2cd>
  105c56:	89 5d b4             	mov    %ebx,-0x4c(%rbp)
  105c59:	44 89 75 b0          	mov    %r14d,-0x50(%rbp)
  105c5d:	45 31 ff             	xor    %r15d,%r15d
  105c60:	45 31 f6             	xor    %r14d,%r14d
  105c63:	eb 18                	jmp    105c7d <_ZN3pci12ConfigureMSIERKNS_6DeviceEjjj+0x7d>
  105c65:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  105c6c:	00 00 00 
  105c6f:	90                   	nop
  105c70:	41 89 de             	mov    %ebx,%r14d
      if (header.bits.cap_id == kCapabilityMSI) {
        msi_cap_addr = cap_addr;
      } else if (header.bits.cap_id == kCapabilityMSIX) {
        msix_cap_addr = cap_addr;
      }
      cap_addr = header.bits.next_ptr;
  105c73:	c1 e8 08             	shr    $0x8,%eax
    while (cap_addr != 0) {
  105c76:	25 ff 00 00 00       	and    $0xff,%eax
  105c7b:	74 4f                	je     105ccc <_ZN3pci12ConfigureMSIERKNS_6DeviceEjjj+0xcc>
  105c7d:	89 c3                	mov    %eax,%ebx
    WriteAddress(MakeAddress(dev.bus, dev.device, dev.function, reg_addr));
  105c7f:	41 0f b6 0c 24       	movzbl (%r12),%ecx
  105c84:	41 0f b6 54 24 01    	movzbl 0x1(%r12),%edx
  105c8a:	41 0f b6 74 24 02    	movzbl 0x2(%r12),%esi
        return x << bits;
  105c90:	c1 e1 10             	shl    $0x10,%ecx
  105c93:	c1 e2 0b             	shl    $0xb,%edx
  105c96:	c1 e6 08             	shl    $0x8,%esi
        | (reg_addr & 0xfcu);
  105c99:	09 d6                	or     %edx,%esi
  105c9b:	25 fc 00 00 00       	and    $0xfc,%eax
  105ca0:	09 c8                	or     %ecx,%eax
  105ca2:	09 f0                	or     %esi,%eax
  105ca4:	0d 00 00 00 80       	or     $0x80000000,%eax
    IoOut32(kConfigAddress, address);
  105ca9:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105cae:	89 c6                	mov    %eax,%esi
  105cb0:	e8 bb 05 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  105cb5:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105cba:	e8 b8 05 00 00       	call   106277 <IoIn32>
      if (header.bits.cap_id == kCapabilityMSI) {
  105cbf:	3c 05                	cmp    $0x5,%al
  105cc1:	74 ad                	je     105c70 <_ZN3pci12ConfigureMSIERKNS_6DeviceEjjj+0x70>
  105cc3:	3c 11                	cmp    $0x11,%al
  105cc5:	75 ac                	jne    105c73 <_ZN3pci12ConfigureMSIERKNS_6DeviceEjjj+0x73>
  105cc7:	41 89 df             	mov    %ebx,%r15d
  105cca:	eb a7                	jmp    105c73 <_ZN3pci12ConfigureMSIERKNS_6DeviceEjjj+0x73>
    }

    if (msi_cap_addr) {
  105ccc:	45 84 f6             	test   %r14b,%r14b
  105ccf:	0f 84 fb 01 00 00    	je     105ed0 <_ZN3pci12ConfigureMSIERKNS_6DeviceEjjj+0x2d0>
    WriteAddress(MakeAddress(dev.bus, dev.device, dev.function, reg_addr));
  105cd5:	41 0f b6 34 24       	movzbl (%r12),%esi
  105cda:	41 0f b6 44 24 01    	movzbl 0x1(%r12),%eax
  105ce0:	41 0f b6 4c 24 02    	movzbl 0x2(%r12),%ecx
        return x << bits;
  105ce6:	c1 e6 10             	shl    $0x10,%esi
  105ce9:	c1 e0 0b             	shl    $0xb,%eax
  105cec:	c1 e1 08             	shl    $0x8,%ecx
        | (reg_addr & 0xfcu);
  105cef:	09 c1                	or     %eax,%ecx
  105cf1:	44 89 f0             	mov    %r14d,%eax
  105cf4:	24 fc                	and    $0xfc,%al
  105cf6:	0f b6 c0             	movzbl %al,%eax
  105cf9:	89 45 b8             	mov    %eax,-0x48(%rbp)
  105cfc:	09 c6                	or     %eax,%esi
  105cfe:	09 ce                	or     %ecx,%esi
  105d00:	81 ce 00 00 00 80    	or     $0x80000000,%esi
    IoOut32(kConfigAddress, address);
  105d06:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105d0b:	e8 60 05 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  105d10:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105d15:	e8 5d 05 00 00       	call   106277 <IoIn32>
  105d1a:	89 c3                	mov    %eax,%ebx
    msi_cap.msg_addr = ReadConfReg(dev, cap_addr + 4);
  105d1c:	41 8d 46 04          	lea    0x4(%r14),%eax
    WriteAddress(MakeAddress(dev.bus, dev.device, dev.function, reg_addr));
  105d20:	41 0f b6 34 24       	movzbl (%r12),%esi
  105d25:	41 0f b6 4c 24 01    	movzbl 0x1(%r12),%ecx
  105d2b:	41 0f b6 54 24 02    	movzbl 0x2(%r12),%edx
        return x << bits;
  105d31:	c1 e6 10             	shl    $0x10,%esi
  105d34:	c1 e1 0b             	shl    $0xb,%ecx
  105d37:	c1 e2 08             	shl    $0x8,%edx
        | (reg_addr & 0xfcu);
  105d3a:	09 ca                	or     %ecx,%edx
  105d3c:	24 fc                	and    $0xfc,%al
  105d3e:	0f b6 c0             	movzbl %al,%eax
  105d41:	89 45 bc             	mov    %eax,-0x44(%rbp)
  105d44:	09 c6                	or     %eax,%esi
  105d46:	09 d6                	or     %edx,%esi
  105d48:	81 ce 00 00 00 80    	or     $0x80000000,%esi
    IoOut32(kConfigAddress, address);
  105d4e:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105d53:	e8 18 05 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  105d58:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105d5d:	e8 15 05 00 00       	call   106277 <IoIn32>
    uint8_t msg_data_addr = cap_addr + 8;
  105d62:	45 8d 7e 08          	lea    0x8(%r14),%r15d
  105d66:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  105d6d:	b8 00 00 00 00       	mov    $0x0,%eax
  105d72:	4c 89 7d c8          	mov    %r15,-0x38(%rbp)
    if (msi_cap.header.bits.addr_64_capable) {
  105d76:	f7 c3 00 00 80 00    	test   $0x800000,%ebx
  105d7c:	74 48                	je     105dc6 <_ZN3pci12ConfigureMSIERKNS_6DeviceEjjj+0x1c6>
    WriteAddress(MakeAddress(dev.bus, dev.device, dev.function, reg_addr));
  105d7e:	41 0f b6 04 24       	movzbl (%r12),%eax
  105d83:	41 0f b6 4c 24 01    	movzbl 0x1(%r12),%ecx
  105d89:	41 0f b6 54 24 02    	movzbl 0x2(%r12),%edx
        return x << bits;
  105d8f:	c1 e0 10             	shl    $0x10,%eax
  105d92:	c1 e1 0b             	shl    $0xb,%ecx
  105d95:	c1 e2 08             	shl    $0x8,%edx
        | (reg_addr & 0xfcu);
  105d98:	09 ca                	or     %ecx,%edx
  105d9a:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  105d9e:	80 e1 fc             	and    $0xfc,%cl
  105da1:	0f b6 f1             	movzbl %cl,%esi
  105da4:	09 c6                	or     %eax,%esi
  105da6:	09 d6                	or     %edx,%esi
  105da8:	81 ce 00 00 00 80    	or     $0x80000000,%esi
    IoOut32(kConfigAddress, address);
  105dae:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105db3:	e8 b8 04 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  105db8:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105dbd:	e8 b5 04 00 00       	call   106277 <IoIn32>
      msg_data_addr = cap_addr + 12;
  105dc2:	45 8d 7e 0c          	lea    0xc(%r14),%r15d
  105dc6:	89 45 c0             	mov    %eax,-0x40(%rbp)
    WriteAddress(MakeAddress(dev.bus, dev.device, dev.function, reg_addr));
  105dc9:	41 0f b6 04 24       	movzbl (%r12),%eax
  105dce:	41 0f b6 4c 24 01    	movzbl 0x1(%r12),%ecx
  105dd4:	41 0f b6 54 24 02    	movzbl 0x2(%r12),%edx
        return x << bits;
  105dda:	c1 e0 10             	shl    $0x10,%eax
  105ddd:	c1 e1 0b             	shl    $0xb,%ecx
  105de0:	c1 e2 08             	shl    $0x8,%edx
        | (reg_addr & 0xfcu);
  105de3:	09 ca                	or     %ecx,%edx
  105de5:	44 89 f9             	mov    %r15d,%ecx
  105de8:	80 e1 fc             	and    $0xfc,%cl
  105deb:	0f b6 f1             	movzbl %cl,%esi
  105dee:	09 c6                	or     %eax,%esi
  105df0:	09 d6                	or     %edx,%esi
  105df2:	81 ce 00 00 00 80    	or     $0x80000000,%esi
    IoOut32(kConfigAddress, address);
  105df8:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105dfd:	e8 6e 04 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  105e02:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105e07:	e8 6b 04 00 00       	call   106277 <IoIn32>
  105e0c:	b8 00 00 00 00       	mov    $0x0,%eax
    if (msi_cap.header.bits.per_vector_mask_capable) {
  105e11:	f7 c3 00 00 00 01    	test   $0x1000000,%ebx
  105e17:	0f 84 8c 00 00 00    	je     105ea9 <_ZN3pci12ConfigureMSIERKNS_6DeviceEjjj+0x2a9>
      msi_cap.mask_bits = ReadConfReg(dev, msg_data_addr + 4);
  105e1d:	41 8d 47 04          	lea    0x4(%r15),%eax
    WriteAddress(MakeAddress(dev.bus, dev.device, dev.function, reg_addr));
  105e21:	41 0f b6 0c 24       	movzbl (%r12),%ecx
  105e26:	41 0f b6 54 24 01    	movzbl 0x1(%r12),%edx
  105e2c:	41 0f b6 7c 24 02    	movzbl 0x2(%r12),%edi
        return x << bits;
  105e32:	c1 e1 10             	shl    $0x10,%ecx
  105e35:	c1 e2 0b             	shl    $0xb,%edx
  105e38:	c1 e7 08             	shl    $0x8,%edi
        | (reg_addr & 0xfcu);
  105e3b:	09 d7                	or     %edx,%edi
  105e3d:	24 fc                	and    $0xfc,%al
  105e3f:	0f b6 f0             	movzbl %al,%esi
  105e42:	09 ce                	or     %ecx,%esi
  105e44:	09 fe                	or     %edi,%esi
  105e46:	81 ce 00 00 00 80    	or     $0x80000000,%esi
    IoOut32(kConfigAddress, address);
  105e4c:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105e51:	e8 1a 04 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  105e56:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105e5b:	e8 17 04 00 00       	call   106277 <IoIn32>
  105e60:	89 45 d4             	mov    %eax,-0x2c(%rbp)
      msi_cap.pending_bits = ReadConfReg(dev, msg_data_addr + 8);
  105e63:	41 80 c7 08          	add    $0x8,%r15b
    WriteAddress(MakeAddress(dev.bus, dev.device, dev.function, reg_addr));
  105e67:	41 0f b6 04 24       	movzbl (%r12),%eax
  105e6c:	41 0f b6 4c 24 01    	movzbl 0x1(%r12),%ecx
  105e72:	41 0f b6 54 24 02    	movzbl 0x2(%r12),%edx
        return x << bits;
  105e78:	c1 e0 10             	shl    $0x10,%eax
  105e7b:	c1 e1 0b             	shl    $0xb,%ecx
  105e7e:	c1 e2 08             	shl    $0x8,%edx
        | (reg_addr & 0xfcu);
  105e81:	09 ca                	or     %ecx,%edx
  105e83:	41 80 e7 fc          	and    $0xfc,%r15b
  105e87:	41 0f b6 f7          	movzbl %r15b,%esi
  105e8b:	09 c6                	or     %eax,%esi
  105e8d:	09 d6                	or     %edx,%esi
  105e8f:	81 ce 00 00 00 80    	or     $0x80000000,%esi
    IoOut32(kConfigAddress, address);
  105e95:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105e9a:	e8 d1 03 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  105e9f:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105ea4:	e8 ce 03 00 00       	call   106277 <IoIn32>
  105ea9:	89 45 c4             	mov    %eax,-0x3c(%rbp)
    if (msi_cap.header.bits.multi_msg_capable <= num_vector_exponent) {
  105eac:	89 d8                	mov    %ebx,%eax
  105eae:	c1 e8 11             	shr    $0x11,%eax
  105eb1:	83 e0 07             	and    $0x7,%eax
  105eb4:	44 39 e8             	cmp    %r13d,%eax
  105eb7:	76 44                	jbe    105efd <_ZN3pci12ConfigureMSIERKNS_6DeviceEjjj+0x2fd>
      msi_cap.header.bits.multi_msg_enable = num_vector_exponent;
  105eb9:	41 83 e5 07          	and    $0x7,%r13d
  105ebd:	41 c1 e5 14          	shl    $0x14,%r13d
  105ec1:	89 d8                	mov    %ebx,%eax
  105ec3:	25 ff ff 8f ff       	and    $0xff8fffff,%eax
  105ec8:	44 89 eb             	mov    %r13d,%ebx
  105ecb:	eb 39                	jmp    105f06 <_ZN3pci12ConfigureMSIERKNS_6DeviceEjjj+0x306>
  105ecd:	45 31 ff             	xor    %r15d,%r15d
      return ConfigureMSIRegister(dev, msi_cap_addr, msg_addr, msg_data, num_vector_exponent);
    } else if (msix_cap_addr) {
  105ed0:	31 c0                	xor    %eax,%eax
  105ed2:	45 84 ff             	test   %r15b,%r15b
  105ed5:	0f 94 c0             	sete   %al
  105ed8:	48 b9 00 00 00 00 32 	movabs $0x13200000000,%rcx
  105edf:	01 00 00 
  105ee2:	49 bf 00 00 00 00 b0 	movabs $0xb000000000,%r15
  105ee9:	00 00 00 
  105eec:	4c 0f 44 f9          	cmove  %rcx,%r15
  105ef0:	48 8d 04 c0          	lea    (%rax,%rax,8),%rax
  105ef4:	48 83 c0 0b          	add    $0xb,%rax
  105ef8:	e9 d7 01 00 00       	jmp    1060d4 <_ZN3pci12ConfigureMSIERKNS_6DeviceEjjj+0x4d4>
      msi_cap.header.bits.multi_msg_enable =
  105efd:	c1 e0 14             	shl    $0x14,%eax
  105f00:	81 e3 ff ff 8f ff    	and    $0xff8fffff,%ebx
  105f06:	09 c3                	or     %eax,%ebx
    msi_cap.header.bits.msi_enable = 1;
  105f08:	41 89 dd             	mov    %ebx,%r13d
  105f0b:	41 81 cd 00 00 01 00 	or     $0x10000,%r13d
    WriteAddress(MakeAddress(dev.bus, dev.device, dev.function, reg_addr));
  105f12:	41 0f b6 34 24       	movzbl (%r12),%esi
  105f17:	41 0f b6 44 24 01    	movzbl 0x1(%r12),%eax
  105f1d:	41 0f b6 4c 24 02    	movzbl 0x2(%r12),%ecx
        return x << bits;
  105f23:	c1 e6 10             	shl    $0x10,%esi
  105f26:	c1 e0 0b             	shl    $0xb,%eax
  105f29:	c1 e1 08             	shl    $0x8,%ecx
        | (reg_addr & 0xfcu);
  105f2c:	09 c1                	or     %eax,%ecx
  105f2e:	03 75 b8             	add    -0x48(%rbp),%esi
  105f31:	09 ce                	or     %ecx,%esi
  105f33:	81 ce 00 00 00 80    	or     $0x80000000,%esi
    IoOut32(kConfigAddress, address);
  105f39:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105f3e:	e8 2d 03 00 00       	call   106270 <IoOut32>
    IoOut32(kConfigData, value);
  105f43:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105f48:	44 89 ee             	mov    %r13d,%esi
  105f4b:	e8 20 03 00 00       	call   106270 <IoOut32>
    WriteAddress(MakeAddress(dev.bus, dev.device, dev.function, reg_addr));
  105f50:	41 0f b6 34 24       	movzbl (%r12),%esi
  105f55:	41 0f b6 44 24 01    	movzbl 0x1(%r12),%eax
  105f5b:	41 0f b6 4c 24 02    	movzbl 0x2(%r12),%ecx
        return x << bits;
  105f61:	c1 e6 10             	shl    $0x10,%esi
  105f64:	c1 e0 0b             	shl    $0xb,%eax
  105f67:	c1 e1 08             	shl    $0x8,%ecx
        | (reg_addr & 0xfcu);
  105f6a:	09 c1                	or     %eax,%ecx
  105f6c:	03 75 bc             	add    -0x44(%rbp),%esi
  105f6f:	09 ce                	or     %ecx,%esi
  105f71:	81 ce 00 00 00 80    	or     $0x80000000,%esi
    IoOut32(kConfigAddress, address);
  105f77:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105f7c:	e8 ef 02 00 00       	call   106270 <IoOut32>
    IoOut32(kConfigData, value);
  105f81:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105f86:	8b 75 b4             	mov    -0x4c(%rbp),%esi
  105f89:	e8 e2 02 00 00       	call   106270 <IoOut32>
    if (msi_cap.header.bits.addr_64_capable) {
  105f8e:	f7 c3 00 00 80 00    	test   $0x800000,%ebx
  105f94:	75 06                	jne    105f9c <_ZN3pci12ConfigureMSIERKNS_6DeviceEjjj+0x39c>
  105f96:	4c 8b 75 c8          	mov    -0x38(%rbp),%r14
  105f9a:	eb 4b                	jmp    105fe7 <_ZN3pci12ConfigureMSIERKNS_6DeviceEjjj+0x3e7>
    WriteAddress(MakeAddress(dev.bus, dev.device, dev.function, reg_addr));
  105f9c:	41 0f b6 04 24       	movzbl (%r12),%eax
  105fa1:	41 0f b6 4c 24 01    	movzbl 0x1(%r12),%ecx
  105fa7:	41 0f b6 54 24 02    	movzbl 0x2(%r12),%edx
        return x << bits;
  105fad:	c1 e0 10             	shl    $0x10,%eax
  105fb0:	c1 e1 0b             	shl    $0xb,%ecx
  105fb3:	c1 e2 08             	shl    $0x8,%edx
        | (reg_addr & 0xfcu);
  105fb6:	09 ca                	or     %ecx,%edx
  105fb8:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  105fbc:	80 e1 fc             	and    $0xfc,%cl
  105fbf:	0f b6 f1             	movzbl %cl,%esi
  105fc2:	09 c6                	or     %eax,%esi
  105fc4:	09 d6                	or     %edx,%esi
  105fc6:	81 ce 00 00 00 80    	or     $0x80000000,%esi
    IoOut32(kConfigAddress, address);
  105fcc:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  105fd1:	e8 9a 02 00 00       	call   106270 <IoOut32>
    IoOut32(kConfigData, value);
  105fd6:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  105fdb:	8b 75 c0             	mov    -0x40(%rbp),%esi
  105fde:	e8 8d 02 00 00       	call   106270 <IoOut32>
      msg_data_addr = cap_addr + 12;
  105fe3:	41 80 c6 0c          	add    $0xc,%r14b
  105fe7:	49 bf 00 00 00 00 a9 	movabs $0xa900000000,%r15
  105fee:	00 00 00 
    WriteAddress(MakeAddress(dev.bus, dev.device, dev.function, reg_addr));
  105ff1:	41 0f b6 04 24       	movzbl (%r12),%eax
  105ff6:	41 0f b6 4c 24 01    	movzbl 0x1(%r12),%ecx
  105ffc:	41 0f b6 54 24 02    	movzbl 0x2(%r12),%edx
        return x << bits;
  106002:	c1 e0 10             	shl    $0x10,%eax
  106005:	c1 e1 0b             	shl    $0xb,%ecx
  106008:	c1 e2 08             	shl    $0x8,%edx
        | (reg_addr & 0xfcu);
  10600b:	09 ca                	or     %ecx,%edx
  10600d:	44 89 f1             	mov    %r14d,%ecx
  106010:	80 e1 fc             	and    $0xfc,%cl
  106013:	0f b6 f1             	movzbl %cl,%esi
  106016:	09 c6                	or     %eax,%esi
  106018:	09 d6                	or     %edx,%esi
  10601a:	81 ce 00 00 00 80    	or     $0x80000000,%esi
    IoOut32(kConfigAddress, address);
  106020:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  106025:	e8 46 02 00 00       	call   106270 <IoOut32>
    IoOut32(kConfigData, value);
  10602a:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  10602f:	8b 75 b0             	mov    -0x50(%rbp),%esi
  106032:	e8 39 02 00 00       	call   106270 <IoOut32>
    if (msi_cap.header.bits.per_vector_mask_capable) {
  106037:	f7 c3 00 00 00 01    	test   $0x1000000,%ebx
  10603d:	0f 84 8f 00 00 00    	je     1060d2 <_ZN3pci12ConfigureMSIERKNS_6DeviceEjjj+0x4d2>
      WriteConfReg(dev, msg_data_addr + 4, msi_cap.mask_bits);
  106043:	41 8d 46 04          	lea    0x4(%r14),%eax
    WriteAddress(MakeAddress(dev.bus, dev.device, dev.function, reg_addr));
  106047:	41 0f b6 0c 24       	movzbl (%r12),%ecx
  10604c:	41 0f b6 54 24 01    	movzbl 0x1(%r12),%edx
  106052:	41 0f b6 7c 24 02    	movzbl 0x2(%r12),%edi
        return x << bits;
  106058:	c1 e1 10             	shl    $0x10,%ecx
  10605b:	c1 e2 0b             	shl    $0xb,%edx
  10605e:	c1 e7 08             	shl    $0x8,%edi
        | (reg_addr & 0xfcu);
  106061:	09 d7                	or     %edx,%edi
  106063:	24 fc                	and    $0xfc,%al
  106065:	0f b6 f0             	movzbl %al,%esi
  106068:	09 ce                	or     %ecx,%esi
  10606a:	09 fe                	or     %edi,%esi
  10606c:	81 ce 00 00 00 80    	or     $0x80000000,%esi
    IoOut32(kConfigAddress, address);
  106072:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  106077:	e8 f4 01 00 00       	call   106270 <IoOut32>
    IoOut32(kConfigData, value);
  10607c:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  106081:	8b 75 d4             	mov    -0x2c(%rbp),%esi
  106084:	e8 e7 01 00 00       	call   106270 <IoOut32>
      WriteConfReg(dev, msg_data_addr + 8, msi_cap.pending_bits);
  106089:	41 80 c6 08          	add    $0x8,%r14b
    WriteAddress(MakeAddress(dev.bus, dev.device, dev.function, reg_addr));
  10608d:	41 0f b6 04 24       	movzbl (%r12),%eax
  106092:	41 0f b6 4c 24 01    	movzbl 0x1(%r12),%ecx
  106098:	41 0f b6 54 24 02    	movzbl 0x2(%r12),%edx
        return x << bits;
  10609e:	c1 e0 10             	shl    $0x10,%eax
  1060a1:	c1 e1 0b             	shl    $0xb,%ecx
  1060a4:	c1 e2 08             	shl    $0x8,%edx
        | (reg_addr & 0xfcu);
  1060a7:	09 ca                	or     %ecx,%edx
  1060a9:	41 80 e6 fc          	and    $0xfc,%r14b
  1060ad:	41 0f b6 f6          	movzbl %r14b,%esi
  1060b1:	09 c6                	or     %eax,%esi
  1060b3:	09 d6                	or     %edx,%esi
  1060b5:	81 ce 00 00 00 80    	or     $0x80000000,%esi
    IoOut32(kConfigAddress, address);
  1060bb:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  1060c0:	e8 ab 01 00 00       	call   106270 <IoOut32>
    IoOut32(kConfigData, value);
  1060c5:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  1060ca:	8b 75 c4             	mov    -0x3c(%rbp),%esi
  1060cd:	e8 9e 01 00 00       	call   106270 <IoOut32>
  1060d2:	31 c0                	xor    %eax,%eax
      return ConfigureMSIXRegister(dev, msix_cap_addr, msg_addr, msg_data, num_vector_exponent);
    }
    return MAKE_ERROR(Error::kNoPCIMSI);
  }
  1060d4:	49 09 c7             	or     %rax,%r15
  1060d7:	ba c4 0b 10 00       	mov    $0x100bc4,%edx
  1060dc:	4c 89 f8             	mov    %r15,%rax
  1060df:	48 83 c4 28          	add    $0x28,%rsp
  1060e3:	5b                   	pop    %rbx
  1060e4:	41 5c                	pop    %r12
  1060e6:	41 5d                	pop    %r13
  1060e8:	41 5e                	pop    %r14
  1060ea:	41 5f                	pop    %r15
  1060ec:	5d                   	pop    %rbp
  1060ed:	c3                   	ret    
  1060ee:	66 90                	xchg   %ax,%ax

00000000001060f0 <_ZN3pci28ConfigureMSIFixedDestinationERKNS_6DeviceEhNS_14MSITriggerModeENS_15MSIDeliveryModeEhj>:

  Error ConfigureMSIFixedDestination(
      const Device& dev, uint8_t apic_id,
      MSITriggerMode trigger_mode, MSIDeliveryMode delivery_mode,
      uint8_t vector, unsigned int num_vector_exponent) {
  1060f0:	55                   	push   %rbp
  1060f1:	48 89 e5             	mov    %rsp,%rbp
    uint32_t msg_addr = 0xfee00000u | (apic_id << 12);
    uint32_t msg_data = (static_cast<uint32_t>(delivery_mode) << 8) | vector;
  1060f4:	c1 e1 08             	shl    $0x8,%ecx
  1060f7:	44 09 c1             	or     %r8d,%ecx
  1060fa:	89 c8                	mov    %ecx,%eax
  1060fc:	0d 00 c0 00 00       	or     $0xc000,%eax
    if (trigger_mode == MSITriggerMode::kLevel) {
  106101:	83 fa 01             	cmp    $0x1,%edx
  106104:	0f 45 c1             	cmovne %ecx,%eax
    uint32_t msg_addr = 0xfee00000u | (apic_id << 12);
  106107:	c1 e6 0c             	shl    $0xc,%esi
  10610a:	81 ce 00 00 e0 fe    	or     $0xfee00000,%esi
      msg_data |= 0xc000;
    }
    return ConfigureMSI(dev, msg_addr, msg_data, num_vector_exponent);
  106110:	89 c2                	mov    %eax,%edx
  106112:	44 89 c9             	mov    %r9d,%ecx
  106115:	5d                   	pop    %rbp
  106116:	e9 e5 fa ff ff       	jmp    105c00 <_ZN3pci12ConfigureMSIERKNS_6DeviceEjjj>
  10611b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000106120 <_ZN12_GLOBAL__N_112ScanFunctionEhhh>:
  Error ScanFunction(uint8_t bus, uint8_t device, uint8_t function) {
  106120:	55                   	push   %rbp
  106121:	48 89 e5             	mov    %rsp,%rbp
  106124:	41 57                	push   %r15
  106126:	41 56                	push   %r14
  106128:	41 55                	push   %r13
  10612a:	41 54                	push   %r12
  10612c:	53                   	push   %rbx
  10612d:	50                   	push   %rax
  10612e:	41 89 d6             	mov    %edx,%r14d
  106131:	41 89 f7             	mov    %esi,%r15d
  106134:	41 89 fc             	mov    %edi,%r12d
        return x << bits;
  106137:	89 f8                	mov    %edi,%eax
  106139:	c1 e0 10             	shl    $0x10,%eax
  10613c:	89 f1                	mov    %esi,%ecx
  10613e:	c1 e1 0b             	shl    $0xb,%ecx
        | (reg_addr & 0xfcu);
  106141:	09 c1                	or     %eax,%ecx
        return x << bits;
  106143:	89 d3                	mov    %edx,%ebx
  106145:	c1 e3 08             	shl    $0x8,%ebx
        | (reg_addr & 0xfcu);
  106148:	09 cb                	or     %ecx,%ebx
  10614a:	8d b3 08 00 00 80    	lea    -0x7ffffff8(%rbx),%esi
    IoOut32(kConfigAddress, address);
  106150:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  106155:	e8 16 01 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  10615a:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  10615f:	e8 13 01 00 00       	call   106277 <IoIn32>
  106164:	41 89 c5             	mov    %eax,%r13d
        | (reg_addr & 0xfcu);
  106167:	8d b3 0c 00 00 80    	lea    -0x7ffffff4(%rbx),%esi
    IoOut32(kConfigAddress, address);
  10616d:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  106172:	e8 f9 00 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  106177:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  10617c:	e8 f6 00 00 00       	call   106277 <IoIn32>
    if (num_device == devices.size()) {
  106181:	48 63 0d e8 16 11 00 	movslq 0x1116e8(%rip),%rcx        # 217870 <_ZN3pci10num_deviceE>
  106188:	41 b9 c4 0b 10 00    	mov    $0x100bc4,%r9d
  10618e:	48 83 f9 20          	cmp    $0x20,%rcx
  106192:	75 14                	jne    1061a8 <_ZN12_GLOBAL__N_112ScanFunctionEhhh+0x88>
  106194:	48 b9 00 00 00 00 1f 	movabs $0x1f00000000,%rcx
  10619b:	00 00 00 
  10619e:	b8 01 00 00 00       	mov    $0x1,%eax
  1061a3:	e9 a4 00 00 00       	jmp    10624c <_ZN12_GLOBAL__N_112ScanFunctionEhhh+0x12c>
  1061a8:	44 89 ea             	mov    %r13d,%edx
  1061ab:	44 89 ef             	mov    %r13d,%edi
  1061ae:	c1 ef 18             	shr    $0x18,%edi
  1061b1:	45 89 e8             	mov    %r13d,%r8d
  1061b4:	41 c1 e8 10          	shr    $0x10,%r8d
    return (ReadData() >> 16) & 0xffu;
  1061b8:	c1 e8 10             	shr    $0x10,%eax
    devices[num_device] = device;
  1061bb:	48 8d 34 cd 00 00 00 	lea    0x0(,%rcx,8),%rsi
  1061c2:	00 
  1061c3:	48 29 ce             	sub    %rcx,%rsi
  1061c6:	44 88 a6 74 78 21 00 	mov    %r12b,0x217874(%rsi)
  1061cd:	44 88 be 75 78 21 00 	mov    %r15b,0x217875(%rsi)
  1061d4:	44 88 b6 76 78 21 00 	mov    %r14b,0x217876(%rsi)
  1061db:	88 86 77 78 21 00    	mov    %al,0x217877(%rsi)
  1061e1:	40 88 be 78 78 21 00 	mov    %dil,0x217878(%rsi)
  1061e8:	44 88 86 79 78 21 00 	mov    %r8b,0x217879(%rsi)
  1061ef:	88 b6 7a 78 21 00    	mov    %dh,0x21787a(%rsi)
    ++num_device;
  1061f5:	8d 41 01             	lea    0x1(%rcx),%eax
  1061f8:	89 05 72 16 11 00    	mov    %eax,0x111672(%rip)        # 217870 <_ZN3pci10num_deviceE>
  1061fe:	31 c0                	xor    %eax,%eax
  106200:	48 b9 00 00 00 00 3b 	movabs $0x3b00000000,%rcx
  106207:	00 00 00 
    bool Match(uint8_t b) { return b == base; }
  10620a:	40 80 ff 06          	cmp    $0x6,%dil
    bool Match(uint8_t b, uint8_t s) { return Match(b) && s == sub; }
  10620e:	75 3c                	jne    10624c <_ZN12_GLOBAL__N_112ScanFunctionEhhh+0x12c>
  106210:	41 80 f8 04          	cmp    $0x4,%r8b
  106214:	75 36                	jne    10624c <_ZN12_GLOBAL__N_112ScanFunctionEhhh+0x12c>
        | (reg_addr & 0xfcu);
  106216:	81 cb 18 00 00 80    	or     $0x80000018,%ebx
    IoOut32(kConfigAddress, address);
  10621c:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  106221:	89 de                	mov    %ebx,%esi
  106223:	e8 48 00 00 00       	call   106270 <IoOut32>
    return IoIn32(kConfigData);
  106228:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  10622d:	e8 45 00 00 00       	call   106277 <IoIn32>
      return ScanBus(secondary_bus);
  106232:	0f b6 fc             	movzbl %ah,%edi
  106235:	e8 56 f5 ff ff       	call   105790 <_ZN12_GLOBAL__N_17ScanBusEh>
  10623a:	49 89 d1             	mov    %rdx,%r9
  10623d:	48 b9 00 00 00 00 ff 	movabs $0xffffffff00000000,%rcx
  106244:	ff ff ff 
  }
  106247:	48 21 c1             	and    %rax,%rcx
  10624a:	89 c0                	mov    %eax,%eax
  10624c:	48 09 c8             	or     %rcx,%rax
  10624f:	4c 89 ca             	mov    %r9,%rdx
  106252:	48 83 c4 08          	add    $0x8,%rsp
  106256:	5b                   	pop    %rbx
  106257:	41 5c                	pop    %r12
  106259:	41 5d                	pop    %r13
  10625b:	41 5e                	pop    %r14
  10625d:	41 5f                	pop    %r15
  10625f:	5d                   	pop    %rbp
  106260:	c3                   	ret    
  106261:	cc                   	int3   
  106262:	cc                   	int3   
  106263:	cc                   	int3   
  106264:	cc                   	int3   
  106265:	cc                   	int3   
  106266:	cc                   	int3   
  106267:	cc                   	int3   
  106268:	cc                   	int3   
  106269:	cc                   	int3   
  10626a:	cc                   	int3   
  10626b:	cc                   	int3   
  10626c:	cc                   	int3   
  10626d:	cc                   	int3   
  10626e:	cc                   	int3   
  10626f:	cc                   	int3   

0000000000106270 <IoOut32>:
  106270:	66 89 fa             	mov    %di,%dx
  106273:	89 f0                	mov    %esi,%eax
  106275:	ef                   	out    %eax,(%dx)
  106276:	c3                   	ret    

0000000000106277 <IoIn32>:
  106277:	66 89 fa             	mov    %di,%dx
  10627a:	ed                   	in     (%dx),%eax
  10627b:	c3                   	ret    

000000000010627c <GetCS>:
  10627c:	31 c0                	xor    %eax,%eax
  10627e:	66 8c c8             	mov    %cs,%ax
  106281:	c3                   	ret    

0000000000106282 <LoadIDT>:
  106282:	55                   	push   %rbp
  106283:	48 89 e5             	mov    %rsp,%rbp
  106286:	48 83 ec 0a          	sub    $0xa,%rsp
  10628a:	66 89 3c 24          	mov    %di,(%rsp)
  10628e:	48 89 74 24 02       	mov    %rsi,0x2(%rsp)
  106293:	0f 01 1c 24          	lidt   (%rsp)
  106297:	48 89 ec             	mov    %rbp,%rsp
  10629a:	5d                   	pop    %rbp
  10629b:	c3                   	ret    

000000000010629c <LoadGDT>:
  10629c:	55                   	push   %rbp
  10629d:	48 89 e5             	mov    %rsp,%rbp
  1062a0:	48 83 ec 0a          	sub    $0xa,%rsp
  1062a4:	66 89 3c 24          	mov    %di,(%rsp)
  1062a8:	48 89 74 24 02       	mov    %rsi,0x2(%rsp)
  1062ad:	0f 01 14 24          	lgdt   (%rsp)
  1062b1:	48 89 ec             	mov    %rbp,%rsp
  1062b4:	5d                   	pop    %rbp
  1062b5:	c3                   	ret    

00000000001062b6 <SetCSSS>:
  1062b6:	55                   	push   %rbp
  1062b7:	48 89 e5             	mov    %rsp,%rbp
  1062ba:	8e d6                	mov    %esi,%ss
  1062bc:	48 b8 ca 62 10 00 00 	movabs $0x1062ca,%rax
  1062c3:	00 00 00 
  1062c6:	57                   	push   %rdi
  1062c7:	50                   	push   %rax
  1062c8:	48 cb                	lretq  

00000000001062ca <SetCSSS.next>:
  1062ca:	48 89 ec             	mov    %rbp,%rsp
  1062cd:	5d                   	pop    %rbp
  1062ce:	c3                   	ret    

00000000001062cf <SetDSAll>:
  1062cf:	8e df                	mov    %edi,%ds
  1062d1:	8e c7                	mov    %edi,%es
  1062d3:	8e e7                	mov    %edi,%fs
  1062d5:	8e ef                	mov    %edi,%gs
  1062d7:	c3                   	ret    

00000000001062d8 <SetCR3>:
  1062d8:	0f 22 df             	mov    %rdi,%cr3
  1062db:	c3                   	ret    

00000000001062dc <KernelMain>:
  1062dc:	48 bc 70 78 21 00 00 	movabs $0x217870,%rsp
  1062e3:	00 00 00 
  1062e6:	e8 45 df ff ff       	call   104230 <KernelMainNewStack>

00000000001062eb <KernelMain.fin>:
  1062eb:	f4                   	hlt    
  1062ec:	eb fd                	jmp    1062eb <KernelMain.fin>
  1062ee:	cc                   	int3   
  1062ef:	cc                   	int3   

00000000001062f0 <_ZSt15get_new_handlerv>:
#include <new>
#include <cerrno>

std::new_handler std::get_new_handler() noexcept {
  1062f0:	55                   	push   %rbp
  1062f1:	48 89 e5             	mov    %rsp,%rbp
  return nullptr;
  1062f4:	31 c0                	xor    %eax,%eax
  1062f6:	5d                   	pop    %rbp
  1062f7:	c3                   	ret    
  1062f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  1062ff:	00 

0000000000106300 <posix_memalign>:
}

extern "C" int posix_memalign(void**, size_t, size_t) {
  106300:	55                   	push   %rbp
  106301:	48 89 e5             	mov    %rsp,%rbp
  return ENOMEM;
  106304:	b8 0c 00 00 00       	mov    $0xc,%eax
  106309:	5d                   	pop    %rbp
  10630a:	c3                   	ret    
  10630b:	cc                   	int3   
  10630c:	cc                   	int3   
  10630d:	cc                   	int3   
  10630e:	cc                   	int3   
  10630f:	cc                   	int3   

0000000000106310 <_Z11SetLogLevel8LogLevel>:
  LogLevel log_level = kWarn;
}

extern Console* console;

void SetLogLevel(LogLevel level) {
  106310:	55                   	push   %rbp
  106311:	48 89 e5             	mov    %rsp,%rbp
  log_level = level;
  106314:	89 3d c6 f8 00 00    	mov    %edi,0xf8c6(%rip)        # 115be0 <_ZN12_GLOBAL__N_19log_levelE>
}
  10631a:	5d                   	pop    %rbp
  10631b:	c3                   	ret    
  10631c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000106320 <_Z3Log8LogLevelPKcz>:

int Log(LogLevel level, const char* format, ...) {
  106320:	55                   	push   %rbp
  106321:	48 89 e5             	mov    %rsp,%rbp
  106324:	41 56                	push   %r14
  106326:	53                   	push   %rbx
  106327:	48 81 ec d0 04 00 00 	sub    $0x4d0,%rsp
  10632e:	84 c0                	test   %al,%al
  106330:	74 29                	je     10635b <_Z3Log8LogLevelPKcz+0x3b>
  106332:	0f 29 85 50 ff ff ff 	movaps %xmm0,-0xb0(%rbp)
  106339:	0f 29 8d 60 ff ff ff 	movaps %xmm1,-0xa0(%rbp)
  106340:	0f 29 95 70 ff ff ff 	movaps %xmm2,-0x90(%rbp)
  106347:	0f 29 5d 80          	movaps %xmm3,-0x80(%rbp)
  10634b:	0f 29 65 90          	movaps %xmm4,-0x70(%rbp)
  10634f:	0f 29 6d a0          	movaps %xmm5,-0x60(%rbp)
  106353:	0f 29 75 b0          	movaps %xmm6,-0x50(%rbp)
  106357:	0f 29 7d c0          	movaps %xmm7,-0x40(%rbp)
  10635b:	48 89 95 30 ff ff ff 	mov    %rdx,-0xd0(%rbp)
  106362:	48 89 8d 38 ff ff ff 	mov    %rcx,-0xc8(%rbp)
  106369:	4c 89 85 40 ff ff ff 	mov    %r8,-0xc0(%rbp)
  106370:	4c 89 8d 48 ff ff ff 	mov    %r9,-0xb8(%rbp)
  106377:	31 db                	xor    %ebx,%ebx
  if (level > log_level) {
  106379:	39 3d 61 f8 00 00    	cmp    %edi,0xf861(%rip)        # 115be0 <_ZN12_GLOBAL__N_19log_levelE>
  10637f:	7c 45                	jl     1063c6 <_Z3Log8LogLevelPKcz+0xa6>
  106381:	48 b8 10 00 00 00 30 	movabs $0x3000000010,%rax
  106388:	00 00 00 

  va_list ap;
  int result;
  char s[1024];

  va_start(ap, format);
  10638b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  10638f:	48 8d 45 10          	lea    0x10(%rbp),%rax
  106393:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  106397:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  10639e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  1063a2:	4c 8d b5 20 fb ff ff 	lea    -0x4e0(%rbp),%r14
  1063a9:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  result = vsprintf(s, format, ap);
  1063ad:	4c 89 f7             	mov    %r14,%rdi
  1063b0:	e8 3b 67 00 00       	call   10caf0 <vsprintf>
  1063b5:	89 c3                	mov    %eax,%ebx
  va_end(ap);

  console->PutString(s);
  1063b7:	48 8b 3d 72 14 01 00 	mov    0x11472(%rip),%rdi        # 117830 <console>
  1063be:	4c 89 f6             	mov    %r14,%rsi
  1063c1:	e8 da ee ff ff       	call   1052a0 <_ZN7Console9PutStringEPKc>
  return result;
}
  1063c6:	89 d8                	mov    %ebx,%eax
  1063c8:	48 81 c4 d0 04 00 00 	add    $0x4d0,%rsp
  1063cf:	5b                   	pop    %rbx
  1063d0:	41 5e                	pop    %r14
  1063d2:	5d                   	pop    %rbp
  1063d3:	c3                   	ret    
  1063d4:	cc                   	int3   
  1063d5:	cc                   	int3   
  1063d6:	cc                   	int3   
  1063d7:	cc                   	int3   
  1063d8:	cc                   	int3   
  1063d9:	cc                   	int3   
  1063da:	cc                   	int3   
  1063db:	cc                   	int3   
  1063dc:	cc                   	int3   
  1063dd:	cc                   	int3   
  1063de:	cc                   	int3   
  1063df:	cc                   	int3   

00000000001063e0 <_Z11SetIDTEntryR19InterruptDescriptor28InterruptDescriptorAttributemt>:
std::array<InterruptDescriptor, 256> idt;

void SetIDTEntry(InterruptDescriptor& desc,
                 InterruptDescriptorAttribute attr,
                 uint64_t offset,
                 uint16_t segment_selector) {
  1063e0:	55                   	push   %rbp
  1063e1:	48 89 e5             	mov    %rsp,%rbp
  desc.attr = attr;
  1063e4:	66 89 77 04          	mov    %si,0x4(%rdi)
  desc.offset_low = offset & 0xffffu;
  1063e8:	66 89 17             	mov    %dx,(%rdi)
  desc.offset_middle = (offset >> 16) & 0xffffu;
  1063eb:	48 89 d0             	mov    %rdx,%rax
  1063ee:	48 c1 e8 10          	shr    $0x10,%rax
  1063f2:	66 89 47 06          	mov    %ax,0x6(%rdi)
  desc.offset_high = offset >> 32;
  1063f6:	48 c1 ea 20          	shr    $0x20,%rdx
  1063fa:	89 57 08             	mov    %edx,0x8(%rdi)
  desc.segment_selector = segment_selector;
  1063fd:	66 89 4f 02          	mov    %cx,0x2(%rdi)
}
  106401:	5d                   	pop    %rbp
  106402:	c3                   	ret    
  106403:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10640a:	00 00 00 
  10640d:	0f 1f 00             	nopl   (%rax)

0000000000106410 <_Z20NotifyEndOfInterruptv>:

void NotifyEndOfInterrupt() {
  106410:	55                   	push   %rbp
  106411:	48 89 e5             	mov    %rsp,%rbp
  106414:	50                   	push   %rax
  106415:	b8 b0 00 e0 fe       	mov    $0xfee000b0,%eax
  volatile auto end_of_interrupt = reinterpret_cast<uint32_t*>(0xfee000b0);
  10641a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  *end_of_interrupt = 0;
  10641e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  106422:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
}
  106428:	48 83 c4 08          	add    $0x8,%rsp
  10642c:	5d                   	pop    %rbp
  10642d:	c3                   	ret    
  10642e:	cc                   	int3   
  10642f:	cc                   	int3   

0000000000106430 <_Z14SetCodeSegmentR17SegmentDescriptor14DescriptorTypejjj>:
// #@@range_begin(setup_segm_function)
void SetCodeSegment(SegmentDescriptor& desc,
                    DescriptorType type,
                    unsigned int descriptor_privilege_level,
                    uint32_t base,
                    uint32_t limit) {
  106430:	55                   	push   %rbp
  106431:	48 89 e5             	mov    %rsp,%rbp
  desc.data = 0;

  desc.bits.base_low = base & 0xffffu;
  106434:	41 89 ca             	mov    %ecx,%r10d
  106437:	41 c1 e2 10          	shl    $0x10,%r10d
  desc.bits.base_middle = (base >> 16) & 0xffu;
  10643b:	89 c8                	mov    %ecx,%eax
  10643d:	c1 e8 10             	shr    $0x10,%eax
  106440:	44 0f b6 c8          	movzbl %al,%r9d
  106444:	49 c1 e1 20          	shl    $0x20,%r9
  desc.bits.base_high = (base >> 24) & 0xffu;
  106448:	c1 e9 18             	shr    $0x18,%ecx
  10644b:	48 c1 e1 38          	shl    $0x38,%rcx

  desc.bits.limit_low = limit & 0xffffu;
  desc.bits.limit_high = (limit >> 16) & 0xfu;
  10644f:	45 0f b7 d8          	movzwl %r8w,%r11d
  106453:	44 89 c0             	mov    %r8d,%eax
  106456:	c1 e8 10             	shr    $0x10,%eax
  106459:	83 e0 0f             	and    $0xf,%eax
  10645c:	48 c1 e0 30          	shl    $0x30,%rax

  desc.bits.type = type;
  106460:	83 e6 0f             	and    $0xf,%esi
  106463:	48 c1 e6 28          	shl    $0x28,%rsi
  desc.bits.base_high = (base >> 24) & 0xffu;
  106467:	4c 09 d6             	or     %r10,%rsi
  desc.bits.system_segment = 1; // 1: code & data segment
  desc.bits.descriptor_privilege_level = descriptor_privilege_level;
  10646a:	83 e2 03             	and    $0x3,%edx
  10646d:	48 c1 e2 2d          	shl    $0x2d,%rdx
  desc.bits.limit_high = (limit >> 16) & 0xfu;
  106471:	48 09 f2             	or     %rsi,%rdx
  desc.bits.present = 1;
  desc.bits.available = 0;
  desc.bits.long_mode = 1;
  desc.bits.default_operation_size = 0; // should be 0 when long_mode == 1
  desc.bits.granularity = 1;
  106474:	48 09 ca             	or     %rcx,%rdx
  106477:	4c 09 da             	or     %r11,%rdx
  10647a:	4c 09 ca             	or     %r9,%rdx
  10647d:	48 b9 00 00 00 00 00 	movabs $0xa0900000000000,%rcx
  106484:	90 a0 00 
  106487:	48 09 c1             	or     %rax,%rcx
  10648a:	48 09 d1             	or     %rdx,%rcx
  10648d:	48 89 0f             	mov    %rcx,(%rdi)
}
  106490:	5d                   	pop    %rbp
  106491:	c3                   	ret    
  106492:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  106499:	00 00 00 
  10649c:	0f 1f 40 00          	nopl   0x0(%rax)

00000000001064a0 <_Z14SetDataSegmentR17SegmentDescriptor14DescriptorTypejjj>:

void SetDataSegment(SegmentDescriptor& desc,
                    DescriptorType type,
                    unsigned int descriptor_privilege_level,
                    uint32_t base,
                    uint32_t limit) {
  1064a0:	55                   	push   %rbp
  1064a1:	48 89 e5             	mov    %rsp,%rbp
  desc.bits.base_low = base & 0xffffu;
  1064a4:	41 89 c9             	mov    %ecx,%r9d
  1064a7:	41 c1 e1 10          	shl    $0x10,%r9d
  desc.bits.base_middle = (base >> 16) & 0xffu;
  1064ab:	89 c8                	mov    %ecx,%eax
  1064ad:	c1 e8 10             	shr    $0x10,%eax
  1064b0:	44 0f b6 d0          	movzbl %al,%r10d
  1064b4:	49 c1 e2 20          	shl    $0x20,%r10
  desc.bits.base_high = (base >> 24) & 0xffu;
  1064b8:	c1 e9 18             	shr    $0x18,%ecx
  1064bb:	48 c1 e1 38          	shl    $0x38,%rcx
  SetCodeSegment(desc, type, descriptor_privilege_level, base, limit);
  desc.bits.long_mode = 0;
  desc.bits.default_operation_size = 1; // 32-bit stack segment
  1064bf:	45 0f b7 d8          	movzwl %r8w,%r11d
  desc.bits.limit_high = (limit >> 16) & 0xfu;
  1064c3:	44 89 c0             	mov    %r8d,%eax
  1064c6:	c1 e8 10             	shr    $0x10,%eax
  1064c9:	83 e0 0f             	and    $0xf,%eax
  1064cc:	48 c1 e0 30          	shl    $0x30,%rax
  desc.bits.type = type;
  1064d0:	83 e6 0f             	and    $0xf,%esi
  1064d3:	48 c1 e6 28          	shl    $0x28,%rsi
  desc.bits.limit_high = (limit >> 16) & 0xfu;
  1064d7:	4c 09 ce             	or     %r9,%rsi
  desc.bits.descriptor_privilege_level = descriptor_privilege_level;
  1064da:	83 e2 03             	and    $0x3,%edx
  1064dd:	48 c1 e2 2d          	shl    $0x2d,%rdx
  desc.bits.granularity = 1;
  1064e1:	48 09 f2             	or     %rsi,%rdx
  desc.bits.default_operation_size = 1; // 32-bit stack segment
  1064e4:	48 09 ca             	or     %rcx,%rdx
  1064e7:	49 09 d3             	or     %rdx,%r11
  1064ea:	4d 09 d3             	or     %r10,%r11
  1064ed:	48 b9 00 00 00 00 00 	movabs $0xc0900000000000,%rcx
  1064f4:	90 c0 00 
  1064f7:	48 09 c1             	or     %rax,%rcx
  1064fa:	4c 09 d9             	or     %r11,%rcx
  1064fd:	48 89 0f             	mov    %rcx,(%rdi)
}
  106500:	5d                   	pop    %rbp
  106501:	c3                   	ret    
  106502:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  106509:	00 00 00 
  10650c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000106510 <_Z13SetupSegmentsv>:

void SetupSegments() {
  106510:	55                   	push   %rbp
  106511:	48 89 e5             	mov    %rsp,%rbp
  gdt[0].data = 0;
  106514:	0f 28 05 65 9c ff ff 	movaps -0x639b(%rip),%xmm0        # 100180 <__dso_handle+0x180>
  10651b:	0f 29 05 3e 24 11 00 	movaps %xmm0,0x11243e(%rip)        # 218960 <_ZN12_GLOBAL__N_13gdtE>
  106522:	48 b8 ff ff 00 00 00 	movabs $0xcf92000000ffff,%rax
  106529:	92 cf 00 
  desc.bits.default_operation_size = 1; // 32-bit stack segment
  10652c:	48 89 05 3d 24 11 00 	mov    %rax,0x11243d(%rip)        # 218970 <_ZN12_GLOBAL__N_13gdtE+0x10>
  SetCodeSegment(gdt[1], DescriptorType::kExecuteRead, 0, 0, 0xfffff);
  SetDataSegment(gdt[2], DescriptorType::kReadWrite, 0, 0, 0xfffff);
  LoadGDT(sizeof(gdt) - 1, reinterpret_cast<uintptr_t>(&gdt[0]));
  106533:	be 60 89 21 00       	mov    $0x218960,%esi
  106538:	bf 17 00 00 00       	mov    $0x17,%edi
  10653d:	5d                   	pop    %rbp
  10653e:	e9 59 fd ff ff       	jmp    10629c <LoadGDT>
  106543:	cc                   	int3   
  106544:	cc                   	int3   
  106545:	cc                   	int3   
  106546:	cc                   	int3   
  106547:	cc                   	int3   
  106548:	cc                   	int3   
  106549:	cc                   	int3   
  10654a:	cc                   	int3   
  10654b:	cc                   	int3   
  10654c:	cc                   	int3   
  10654d:	cc                   	int3   
  10654e:	cc                   	int3   
  10654f:	cc                   	int3   

0000000000106550 <_Z22SetupIdentityPageTablev>:
  alignas(kPageSize4K) std::array<uint64_t, 512> pdp_table;
  alignas(kPageSize4K)
    std::array<std::array<uint64_t, 512>, kPageDirectoryCount> page_directory;
}

void SetupIdentityPageTable() {
  106550:	55                   	push   %rbp
  106551:	48 89 e5             	mov    %rsp,%rbp
  pml4_table[0] = reinterpret_cast<uint64_t>(&pdp_table[0]) | 0x003;
  106554:	b8 00 90 21 00       	mov    $0x219000,%eax
  106559:	48 83 c8 03          	or     $0x3,%rax
  10655d:	48 89 05 9c 3a 11 00 	mov    %rax,0x113a9c(%rip)        # 21a000 <_ZN12_GLOBAL__N_110pml4_tableE>
  106564:	b8 10 b0 21 00       	mov    $0x21b010,%eax
  106569:	31 c9                	xor    %ecx,%ecx
  10656b:	66 0f 6f 05 ed 9b ff 	movdqa -0x6413(%rip),%xmm0        # 100160 <__dso_handle+0x160>
  106572:	ff 
  106573:	66 0f 6f 0d f5 9b ff 	movdqa -0x640b(%rip),%xmm1        # 100170 <__dso_handle+0x170>
  10657a:	ff 
  10657b:	66 0f 6f 15 3d 9c ff 	movdqa -0x63c3(%rip),%xmm2        # 1001c0 <__dso_handle+0x1c0>
  106582:	ff 
  106583:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10658a:	00 00 00 
  10658d:	0f 1f 00             	nopl   (%rax)
    reference operator[](size_type __n)             {return __elems_[__n];}
  106590:	48 89 ca             	mov    %rcx,%rdx
  106593:	48 c1 e2 0c          	shl    $0xc,%rdx
  106597:	48 8d 92 00 b0 21 00 	lea    0x21b000(%rdx),%rdx
  for (int i_pdpt = 0; i_pdpt < page_directory.size(); ++i_pdpt) {
    pdp_table[i_pdpt] = reinterpret_cast<uint64_t>(&page_directory[i_pdpt]) | 0x003;
  10659e:	48 83 ca 03          	or     $0x3,%rdx
  1065a2:	48 89 14 cd 00 90 21 	mov    %rdx,0x219000(,%rcx,8)
  1065a9:	00 
  1065aa:	48 89 ca             	mov    %rcx,%rdx
  1065ad:	48 c1 e2 1e          	shl    $0x1e,%rdx
    for (int i_pd = 0; i_pd < 512; ++i_pd) {
  1065b1:	66 48 0f 6e d9       	movq   %rcx,%xmm3
  1065b6:	66 0f 70 db 44       	pshufd $0x44,%xmm3,%xmm3
  1065bb:	66 0f 73 f3 1e       	psllq  $0x1e,%xmm3
  1065c0:	48 81 ca 00 00 40 00 	or     $0x400000,%rdx
  1065c7:	66 48 0f 6e e2       	movq   %rdx,%xmm4
  1065cc:	66 0f 70 e4 44       	pshufd $0x44,%xmm4,%xmm4
  1065d1:	31 d2                	xor    %edx,%edx
  1065d3:	66 0f 6f e8          	movdqa %xmm0,%xmm5
  1065d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  1065de:	00 00 
      page_directory[i_pdpt][i_pd] = i_pdpt * kPageSize1G + i_pd * kPageSize2M | 0x083;
  1065e0:	66 0f 6f f5          	movdqa %xmm5,%xmm6
  1065e4:	66 0f 73 f6 15       	psllq  $0x15,%xmm6
  1065e9:	66 0f 6f fc          	movdqa %xmm4,%xmm7
  1065ed:	66 0f d4 fe          	paddq  %xmm6,%xmm7
  1065f1:	66 0f d4 f3          	paddq  %xmm3,%xmm6
  1065f5:	66 0f eb f1          	por    %xmm1,%xmm6
  1065f9:	66 0f eb f9          	por    %xmm1,%xmm7
  1065fd:	66 0f 7f 74 d0 f0    	movdqa %xmm6,-0x10(%rax,%rdx,8)
  106603:	66 0f 7f 3c d0       	movdqa %xmm7,(%rax,%rdx,8)
    for (int i_pd = 0; i_pd < 512; ++i_pd) {
  106608:	48 83 c2 04          	add    $0x4,%rdx
  10660c:	66 0f d4 ea          	paddq  %xmm2,%xmm5
  106610:	48 81 fa 00 02 00 00 	cmp    $0x200,%rdx
  106617:	75 c7                	jne    1065e0 <_Z22SetupIdentityPageTablev+0x90>
  for (int i_pdpt = 0; i_pdpt < page_directory.size(); ++i_pdpt) {
  106619:	48 83 c1 01          	add    $0x1,%rcx
  10661d:	48 05 00 10 00 00    	add    $0x1000,%rax
  106623:	48 83 f9 40          	cmp    $0x40,%rcx
  106627:	0f 85 63 ff ff ff    	jne    106590 <_Z22SetupIdentityPageTablev+0x40>
    }
  }

  SetCR3(reinterpret_cast<uint64_t>(&pml4_table[0]));
  10662d:	bf 00 a0 21 00       	mov    $0x21a000,%edi
  106632:	5d                   	pop    %rbp
  106633:	e9 a0 fc ff ff       	jmp    1062d8 <SetCR3>
  106638:	cc                   	int3   
  106639:	cc                   	int3   
  10663a:	cc                   	int3   
  10663b:	cc                   	int3   
  10663c:	cc                   	int3   
  10663d:	cc                   	int3   
  10663e:	cc                   	int3   
  10663f:	cc                   	int3   

0000000000106640 <_ZN3usb8AllocMemEmjj>:

namespace usb {
  alignas(64) uint8_t memory_pool[kMemoryPoolSize];
  uintptr_t alloc_ptr = reinterpret_cast<uintptr_t>(memory_pool);

  void* AllocMem(size_t size, unsigned int alignment, unsigned int boundary) {
  106640:	55                   	push   %rbp
  106641:	48 89 e5             	mov    %rsp,%rbp
    if (alignment > 0) {
  106644:	85 f6                	test   %esi,%esi
  106646:	74 20                	je     106668 <_ZN3usb8AllocMemEmjj+0x28>
      alloc_ptr = Ceil(alloc_ptr, alignment);
  106648:	48 8b 05 99 f5 00 00 	mov    0xf599(%rip),%rax        # 115be8 <_ZN3usb9alloc_ptrE>
    return (value + alignment - 1) & ~static_cast<T>(alignment - 1);
  10664f:	89 f1                	mov    %esi,%ecx
  106651:	48 01 c8             	add    %rcx,%rax
  106654:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
  106658:	83 c6 ff             	add    $0xffffffff,%esi
  10665b:	48 f7 d6             	not    %rsi
  10665e:	48 21 c6             	and    %rax,%rsi
      alloc_ptr = Ceil(alloc_ptr, alignment);
  106661:	48 89 35 80 f5 00 00 	mov    %rsi,0xf580(%rip)        # 115be8 <_ZN3usb9alloc_ptrE>
  106668:	48 8b 05 79 f5 00 00 	mov    0xf579(%rip),%rax        # 115be8 <_ZN3usb9alloc_ptrE>
    }
    if (boundary > 0) {
  10666f:	85 d2                	test   %edx,%edx
  106671:	74 25                	je     106698 <_ZN3usb8AllocMemEmjj+0x58>
    return (value + alignment - 1) & ~static_cast<T>(alignment - 1);
  106673:	89 d1                	mov    %edx,%ecx
  106675:	48 01 c1             	add    %rax,%rcx
  106678:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
  10667c:	83 c2 ff             	add    $0xffffffff,%edx
  10667f:	48 f7 d2             	not    %rdx
  106682:	48 21 ca             	and    %rcx,%rdx
      auto next_boundary = Ceil(alloc_ptr, boundary);
      if (next_boundary < alloc_ptr + size) {
  106685:	48 8d 0c 38          	lea    (%rax,%rdi,1),%rcx
  106689:	48 39 ca             	cmp    %rcx,%rdx
  10668c:	73 0a                	jae    106698 <_ZN3usb8AllocMemEmjj+0x58>
        alloc_ptr = next_boundary;
  10668e:	48 89 15 53 f5 00 00 	mov    %rdx,0xf553(%rip)        # 115be8 <_ZN3usb9alloc_ptrE>
      }
    }

    if (reinterpret_cast<uintptr_t>(memory_pool) + kMemoryPoolSize
        < alloc_ptr + size) {
  106695:	48 89 d0             	mov    %rdx,%rax
  106698:	48 01 c7             	add    %rax,%rdi
  10669b:	b9 00 b0 27 00       	mov    $0x27b000,%ecx
  1066a0:	48 39 cf             	cmp    %rcx,%rdi
    if (reinterpret_cast<uintptr_t>(memory_pool) + kMemoryPoolSize
  1066a3:	76 04                	jbe    1066a9 <_ZN3usb8AllocMemEmjj+0x69>
  1066a5:	31 c0                	xor    %eax,%eax
    }

    auto p = alloc_ptr;
    alloc_ptr += size;
    return reinterpret_cast<void*>(p);
  }
  1066a7:	5d                   	pop    %rbp
  1066a8:	c3                   	ret    
    alloc_ptr += size;
  1066a9:	48 89 3d 38 f5 00 00 	mov    %rdi,0xf538(%rip)        # 115be8 <_ZN3usb9alloc_ptrE>
  }
  1066b0:	5d                   	pop    %rbp
  1066b1:	c3                   	ret    
  1066b2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1066b9:	00 00 00 
  1066bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000001066c0 <_ZN3usb7FreeMemEPv>:

  void FreeMem(void* p) {}
  1066c0:	55                   	push   %rbp
  1066c1:	48 89 e5             	mov    %rsp,%rbp
  1066c4:	5d                   	pop    %rbp
  1066c5:	c3                   	ret    
  1066c6:	cc                   	int3   
  1066c7:	cc                   	int3   
  1066c8:	cc                   	int3   
  1066c9:	cc                   	int3   
  1066ca:	cc                   	int3   
  1066cb:	cc                   	int3   
  1066cc:	cc                   	int3   
  1066cd:	cc                   	int3   
  1066ce:	cc                   	int3   
  1066cf:	cc                   	int3   

00000000001066d0 <_ZN3usb6DeviceD1Ev>:
    Log(level, "\n");
  }
}

namespace usb {
  Device::~Device() {
  1066d0:	55                   	push   %rbp
  1066d1:	48 89 e5             	mov    %rsp,%rbp
  }
  1066d4:	5d                   	pop    %rbp
  1066d5:	c3                   	ret    
  1066d6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1066dd:	00 00 00 

00000000001066e0 <_ZN3usb6DeviceD0Ev>:
  Device::~Device() {
  1066e0:	55                   	push   %rbp
  1066e1:	48 89 e5             	mov    %rsp,%rbp
  1066e4:	5d                   	pop    %rbp
  1066e5:	e9 46 d3 00 00       	jmp    113a30 <_ZdlPv>
  1066ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000001066f0 <_ZN3usb6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE>:

  Error Device::ControlIn(EndpointID ep_id, SetupData setup_data,
                          void* buf, int len, ClassDriver* issuer) {
  1066f0:	55                   	push   %rbp
  1066f1:	48 89 e5             	mov    %rsp,%rbp
    if (issuer) {
  1066f4:	4d 85 c9             	test   %r9,%r9
  1066f7:	74 6e                	je     106767 <_ZN3usb6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x77>
    using __base::__base;

    _LIBCPP_INLINE_VISIBILITY
    constexpr bool has_value() const noexcept
    {
        return this->__engaged_;
  1066f9:	80 bf a0 02 00 00 00 	cmpb   $0x0,0x2a0(%rdi)
      return std::nullopt;
    }

    void Put(const K& key, const V& value) {
      for (int i = 0; i < table_.size(); ++i) {
        if (!table_[i].first) {
  106700:	74 29                	je     10672b <_ZN3usb6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x3b>
  106702:	80 bf b8 02 00 00 00 	cmpb   $0x0,0x2b8(%rdi)
  106709:	74 2b                	je     106736 <_ZN3usb6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x46>
  10670b:	80 bf d0 02 00 00 00 	cmpb   $0x0,0x2d0(%rdi)
  106712:	74 30                	je     106744 <_ZN3usb6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x54>
  106714:	80 bf e8 02 00 00 00 	cmpb   $0x0,0x2e8(%rdi)
  10671b:	75 4a                	jne    106767 <_ZN3usb6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x77>
  10671d:	48 8d 87 e8 02 00 00 	lea    0x2e8(%rdi),%rax
  106724:	b9 03 00 00 00       	mov    $0x3,%ecx
  106729:	eb 25                	jmp    106750 <_ZN3usb6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x60>
  10672b:	48 8d 87 a0 02 00 00 	lea    0x2a0(%rdi),%rax
  106732:	31 c9                	xor    %ecx,%ecx
  106734:	eb 1a                	jmp    106750 <_ZN3usb6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x60>
  106736:	48 8d 87 b8 02 00 00 	lea    0x2b8(%rdi),%rax
  10673d:	b9 01 00 00 00       	mov    $0x1,%ecx
  106742:	eb 0c                	jmp    106750 <_ZN3usb6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x60>
  106744:	48 8d 87 d0 02 00 00 	lea    0x2d0(%rdi),%rax
  10674b:	b9 02 00 00 00       	mov    $0x2,%ecx
  106750:	48 8d 0c 49          	lea    (%rcx,%rcx,2),%rcx
  106754:	48 89 94 cf 98 02 00 	mov    %rdx,0x298(%rdi,%rcx,8)
  10675b:	00 
    _LIBCPP_INLINE_VISIBILITY
    void __construct(_Args&&... __args)
    {
        _LIBCPP_ASSERT(!has_value(), "__construct called for engaged __optional_storage");
        ::new((void*)_VSTD::addressof(this->__val_)) value_type(_VSTD::forward<_Args>(__args)...);
        this->__engaged_ = true;
  10675c:	c6 00 01             	movb   $0x1,(%rax)
          table_[i].first = key;
          table_[i].second = value;
  10675f:	4c 89 8c cf a8 02 00 	mov    %r9,0x2a8(%rdi,%rcx,8)
  106766:	00 
  106767:	48 b8 00 00 00 00 70 	movabs $0x7000000000,%rax
  10676e:	00 00 00 
      event_waiters_.Put(setup_data, issuer);
    }
    return MAKE_ERROR(Error::kSuccess);
  106771:	ba f4 09 10 00       	mov    $0x1009f4,%edx
  106776:	5d                   	pop    %rbp
  106777:	c3                   	ret    
  106778:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10677f:	00 

0000000000106780 <_ZN3usb6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE>:
  }

  Error Device::ControlOut(EndpointID ep_id, SetupData setup_data,
                           const void* buf, int len, ClassDriver* issuer) {
  106780:	55                   	push   %rbp
  106781:	48 89 e5             	mov    %rsp,%rbp
    if (issuer) {
  106784:	4d 85 c9             	test   %r9,%r9
  106787:	74 6e                	je     1067f7 <_ZN3usb6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x77>
        return this->__engaged_;
  106789:	80 bf a0 02 00 00 00 	cmpb   $0x0,0x2a0(%rdi)
        if (!table_[i].first) {
  106790:	74 29                	je     1067bb <_ZN3usb6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x3b>
  106792:	80 bf b8 02 00 00 00 	cmpb   $0x0,0x2b8(%rdi)
  106799:	74 2b                	je     1067c6 <_ZN3usb6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x46>
  10679b:	80 bf d0 02 00 00 00 	cmpb   $0x0,0x2d0(%rdi)
  1067a2:	74 30                	je     1067d4 <_ZN3usb6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x54>
  1067a4:	80 bf e8 02 00 00 00 	cmpb   $0x0,0x2e8(%rdi)
  1067ab:	75 4a                	jne    1067f7 <_ZN3usb6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x77>
  1067ad:	48 8d 87 e8 02 00 00 	lea    0x2e8(%rdi),%rax
  1067b4:	b9 03 00 00 00       	mov    $0x3,%ecx
  1067b9:	eb 25                	jmp    1067e0 <_ZN3usb6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x60>
  1067bb:	48 8d 87 a0 02 00 00 	lea    0x2a0(%rdi),%rax
  1067c2:	31 c9                	xor    %ecx,%ecx
  1067c4:	eb 1a                	jmp    1067e0 <_ZN3usb6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x60>
  1067c6:	48 8d 87 b8 02 00 00 	lea    0x2b8(%rdi),%rax
  1067cd:	b9 01 00 00 00       	mov    $0x1,%ecx
  1067d2:	eb 0c                	jmp    1067e0 <_ZN3usb6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x60>
  1067d4:	48 8d 87 d0 02 00 00 	lea    0x2d0(%rdi),%rax
  1067db:	b9 02 00 00 00       	mov    $0x2,%ecx
  1067e0:	48 8d 0c 49          	lea    (%rcx,%rcx,2),%rcx
  1067e4:	48 89 94 cf 98 02 00 	mov    %rdx,0x298(%rdi,%rcx,8)
  1067eb:	00 
        this->__engaged_ = true;
  1067ec:	c6 00 01             	movb   $0x1,(%rax)
          table_[i].second = value;
  1067ef:	4c 89 8c cf a8 02 00 	mov    %r9,0x2a8(%rdi,%rcx,8)
  1067f6:	00 
  1067f7:	48 b8 00 00 00 00 78 	movabs $0x7800000000,%rax
  1067fe:	00 00 00 
      event_waiters_.Put(setup_data, issuer);
    }
    return MAKE_ERROR(Error::kSuccess);
  106801:	ba f4 09 10 00       	mov    $0x1009f4,%edx
  106806:	5d                   	pop    %rbp
  106807:	c3                   	ret    
  106808:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10680f:	00 

0000000000106810 <_ZN3usb6Device11InterruptInENS_10EndpointIDEPvi>:
  }

  Error Device::InterruptIn(EndpointID ep_id, void* buf, int len) {
  106810:	55                   	push   %rbp
  106811:	48 89 e5             	mov    %rsp,%rbp
  106814:	48 b8 00 00 00 00 7c 	movabs $0x7c00000000,%rax
  10681b:	00 00 00 
    return MAKE_ERROR(Error::kSuccess);
  10681e:	ba f4 09 10 00       	mov    $0x1009f4,%edx
  106823:	5d                   	pop    %rbp
  106824:	c3                   	ret    
  106825:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10682c:	00 00 00 
  10682f:	90                   	nop

0000000000106830 <_ZN3usb6Device12InterruptOutENS_10EndpointIDEPvi>:
  }

  Error Device::InterruptOut(EndpointID ep_id, void* buf, int len) {
  106830:	55                   	push   %rbp
  106831:	48 89 e5             	mov    %rsp,%rbp
  106834:	48 b8 00 00 00 00 80 	movabs $0x8000000000,%rax
  10683b:	00 00 00 
    return MAKE_ERROR(Error::kSuccess);
  10683e:	ba f4 09 10 00       	mov    $0x1009f4,%edx
  106843:	5d                   	pop    %rbp
  106844:	c3                   	ret    
  106845:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10684c:	00 00 00 
  10684f:	90                   	nop

0000000000106850 <_ZN3usb6Device15StartInitializeEv>:
  }

  Error Device::StartInitialize() {
  106850:	55                   	push   %rbp
  106851:	48 89 e5             	mov    %rsp,%rbp
  106854:	48 83 ec 10          	sub    $0x10,%rsp
    is_initialized_ = false;
  106858:	c6 87 8a 01 00 00 00 	movb   $0x0,0x18a(%rdi)
    initialize_phase_ = 1;
  10685f:	c7 87 8c 01 00 00 01 	movl   $0x1,0x18c(%rdi)
  106866:	00 00 00 
    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 const_reference front() const {return __elems_[0];}
    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 reference back()              {return __elems_[_Size - 1];}
    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 const_reference back() const  {return __elems_[_Size - 1];}

    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
    value_type* data() _NOEXCEPT {return __elems_;}
  106869:	48 8d 8f 88 00 00 00 	lea    0x88(%rdi),%rcx
  };

  class EndpointID {
   public:
    constexpr EndpointID() : addr_{0} {}
    constexpr EndpointID(const EndpointID& ep_id) : addr_{ep_id.addr_} {}
  106870:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
    setup_data.request_type.bits.recipient = request_type::kDevice;
    setup_data.request = request::kGetDescriptor;
    setup_data.value = (static_cast<uint16_t>(desc_type) << 8) | desc_index;
    setup_data.index = 0;
    setup_data.length = len;
    return dev.ControlIn(ep_id, setup_data, buf, len, nullptr);
  106877:	48 8b 07             	mov    (%rdi),%rax
  10687a:	48 8d 75 f8          	lea    -0x8(%rbp),%rsi
  10687e:	48 ba 80 06 00 01 00 	movabs $0x100000001000680,%rdx
  106885:	00 00 01 
  106888:	41 b8 00 01 00 00    	mov    $0x100,%r8d
  10688e:	45 31 c9             	xor    %r9d,%r9d
  106891:	ff 50 10             	call   *0x10(%rax)
    return GetDescriptor(*this, kDefaultControlPipeID, DeviceDescriptor::kType, 0,
  106894:	48 83 c4 10          	add    $0x10,%rsp
  106898:	5d                   	pop    %rbp
  106899:	c3                   	ret    
  10689a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000001068a0 <_ZN3usb13GetDescriptorERNS_6DeviceENS_10EndpointIDEhhPvib>:
                      void* buf, int len, bool debug) {
  1068a0:	55                   	push   %rbp
  1068a1:	48 89 e5             	mov    %rsp,%rbp
  1068a4:	48 83 ec 10          	sub    $0x10,%rsp
    setup_data.value = (static_cast<uint16_t>(desc_type) << 8) | desc_index;
  1068a8:	89 d0                	mov    %edx,%eax
  1068aa:	89 c9                	mov    %ecx,%ecx
  1068ac:	8b 16                	mov    (%rsi),%edx
  1068ae:	89 55 f8             	mov    %edx,-0x8(%rbp)
    return dev.ControlIn(ep_id, setup_data, buf, len, nullptr);
  1068b1:	4c 89 ca             	mov    %r9,%rdx
  1068b4:	48 c1 e2 30          	shl    $0x30,%rdx
  1068b8:	48 c1 e0 18          	shl    $0x18,%rax
  1068bc:	48 c1 e1 10          	shl    $0x10,%rcx
  1068c0:	48 09 c1             	or     %rax,%rcx
  1068c3:	48 01 ca             	add    %rcx,%rdx
  1068c6:	48 81 c2 80 06 00 00 	add    $0x680,%rdx
  1068cd:	48 8b 07             	mov    (%rdi),%rax
  1068d0:	48 8d 75 f8          	lea    -0x8(%rbp),%rsi
  1068d4:	4c 89 c1             	mov    %r8,%rcx
  1068d7:	45 89 c8             	mov    %r9d,%r8d
  1068da:	45 31 c9             	xor    %r9d,%r9d
  1068dd:	ff 50 10             	call   *0x10(%rax)
  }
  1068e0:	48 83 c4 10          	add    $0x10,%rsp
  1068e4:	5d                   	pop    %rbp
  1068e5:	c3                   	ret    
  1068e6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1068ed:	00 00 00 

00000000001068f0 <_ZN3usb6Device21OnEndpointsConfiguredEv>:
  Error Device::OnEndpointsConfigured() {
  1068f0:	55                   	push   %rbp
  1068f1:	48 89 e5             	mov    %rsp,%rbp
  1068f4:	41 57                	push   %r15
  1068f6:	41 56                	push   %r14
  1068f8:	53                   	push   %rbx
  1068f9:	50                   	push   %rax
  1068fa:	49 89 ff             	mov    %rdi,%r15
    for (auto class_driver : class_drivers_) {
  1068fd:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
      if (class_driver != nullptr) {
  106901:	48 85 ff             	test   %rdi,%rdi
  106904:	74 0e                	je     106914 <_ZN3usb6Device21OnEndpointsConfiguredEv+0x24>
        if (auto err = class_driver->OnEndpointsConfigured()) {
  106906:	48 8b 07             	mov    (%rdi),%rax
  106909:	ff 50 20             	call   *0x20(%rax)
  10690c:	85 c0                	test   %eax,%eax
  10690e:	0f 85 54 01 00 00    	jne    106a68 <_ZN3usb6Device21OnEndpointsConfiguredEv+0x178>
    for (auto class_driver : class_drivers_) {
  106914:	49 8b 7f 10          	mov    0x10(%r15),%rdi
      if (class_driver != nullptr) {
  106918:	48 85 ff             	test   %rdi,%rdi
  10691b:	74 0e                	je     10692b <_ZN3usb6Device21OnEndpointsConfiguredEv+0x3b>
        if (auto err = class_driver->OnEndpointsConfigured()) {
  10691d:	48 8b 07             	mov    (%rdi),%rax
  106920:	ff 50 20             	call   *0x20(%rax)
  106923:	85 c0                	test   %eax,%eax
  106925:	0f 85 3d 01 00 00    	jne    106a68 <_ZN3usb6Device21OnEndpointsConfiguredEv+0x178>
    for (auto class_driver : class_drivers_) {
  10692b:	49 8b 7f 18          	mov    0x18(%r15),%rdi
      if (class_driver != nullptr) {
  10692f:	48 85 ff             	test   %rdi,%rdi
  106932:	74 0e                	je     106942 <_ZN3usb6Device21OnEndpointsConfiguredEv+0x52>
        if (auto err = class_driver->OnEndpointsConfigured()) {
  106934:	48 8b 07             	mov    (%rdi),%rax
  106937:	ff 50 20             	call   *0x20(%rax)
  10693a:	85 c0                	test   %eax,%eax
  10693c:	0f 85 26 01 00 00    	jne    106a68 <_ZN3usb6Device21OnEndpointsConfiguredEv+0x178>
    for (auto class_driver : class_drivers_) {
  106942:	49 8b 7f 20          	mov    0x20(%r15),%rdi
      if (class_driver != nullptr) {
  106946:	48 85 ff             	test   %rdi,%rdi
  106949:	74 0e                	je     106959 <_ZN3usb6Device21OnEndpointsConfiguredEv+0x69>
        if (auto err = class_driver->OnEndpointsConfigured()) {
  10694b:	48 8b 07             	mov    (%rdi),%rax
  10694e:	ff 50 20             	call   *0x20(%rax)
  106951:	85 c0                	test   %eax,%eax
  106953:	0f 85 0f 01 00 00    	jne    106a68 <_ZN3usb6Device21OnEndpointsConfiguredEv+0x178>
    for (auto class_driver : class_drivers_) {
  106959:	49 8b 7f 28          	mov    0x28(%r15),%rdi
      if (class_driver != nullptr) {
  10695d:	48 85 ff             	test   %rdi,%rdi
  106960:	74 0e                	je     106970 <_ZN3usb6Device21OnEndpointsConfiguredEv+0x80>
        if (auto err = class_driver->OnEndpointsConfigured()) {
  106962:	48 8b 07             	mov    (%rdi),%rax
  106965:	ff 50 20             	call   *0x20(%rax)
  106968:	85 c0                	test   %eax,%eax
  10696a:	0f 85 f8 00 00 00    	jne    106a68 <_ZN3usb6Device21OnEndpointsConfiguredEv+0x178>
    for (auto class_driver : class_drivers_) {
  106970:	49 8b 7f 30          	mov    0x30(%r15),%rdi
      if (class_driver != nullptr) {
  106974:	48 85 ff             	test   %rdi,%rdi
  106977:	74 0e                	je     106987 <_ZN3usb6Device21OnEndpointsConfiguredEv+0x97>
        if (auto err = class_driver->OnEndpointsConfigured()) {
  106979:	48 8b 07             	mov    (%rdi),%rax
  10697c:	ff 50 20             	call   *0x20(%rax)
  10697f:	85 c0                	test   %eax,%eax
  106981:	0f 85 e1 00 00 00    	jne    106a68 <_ZN3usb6Device21OnEndpointsConfiguredEv+0x178>
    for (auto class_driver : class_drivers_) {
  106987:	49 8b 7f 38          	mov    0x38(%r15),%rdi
      if (class_driver != nullptr) {
  10698b:	48 85 ff             	test   %rdi,%rdi
  10698e:	74 0e                	je     10699e <_ZN3usb6Device21OnEndpointsConfiguredEv+0xae>
        if (auto err = class_driver->OnEndpointsConfigured()) {
  106990:	48 8b 07             	mov    (%rdi),%rax
  106993:	ff 50 20             	call   *0x20(%rax)
  106996:	85 c0                	test   %eax,%eax
  106998:	0f 85 ca 00 00 00    	jne    106a68 <_ZN3usb6Device21OnEndpointsConfiguredEv+0x178>
    for (auto class_driver : class_drivers_) {
  10699e:	49 8b 7f 40          	mov    0x40(%r15),%rdi
      if (class_driver != nullptr) {
  1069a2:	48 85 ff             	test   %rdi,%rdi
  1069a5:	74 0e                	je     1069b5 <_ZN3usb6Device21OnEndpointsConfiguredEv+0xc5>
        if (auto err = class_driver->OnEndpointsConfigured()) {
  1069a7:	48 8b 07             	mov    (%rdi),%rax
  1069aa:	ff 50 20             	call   *0x20(%rax)
  1069ad:	85 c0                	test   %eax,%eax
  1069af:	0f 85 b3 00 00 00    	jne    106a68 <_ZN3usb6Device21OnEndpointsConfiguredEv+0x178>
    for (auto class_driver : class_drivers_) {
  1069b5:	49 8b 7f 48          	mov    0x48(%r15),%rdi
      if (class_driver != nullptr) {
  1069b9:	48 85 ff             	test   %rdi,%rdi
  1069bc:	74 0e                	je     1069cc <_ZN3usb6Device21OnEndpointsConfiguredEv+0xdc>
        if (auto err = class_driver->OnEndpointsConfigured()) {
  1069be:	48 8b 07             	mov    (%rdi),%rax
  1069c1:	ff 50 20             	call   *0x20(%rax)
  1069c4:	85 c0                	test   %eax,%eax
  1069c6:	0f 85 9c 00 00 00    	jne    106a68 <_ZN3usb6Device21OnEndpointsConfiguredEv+0x178>
    for (auto class_driver : class_drivers_) {
  1069cc:	49 8b 7f 50          	mov    0x50(%r15),%rdi
      if (class_driver != nullptr) {
  1069d0:	48 85 ff             	test   %rdi,%rdi
  1069d3:	74 0e                	je     1069e3 <_ZN3usb6Device21OnEndpointsConfiguredEv+0xf3>
        if (auto err = class_driver->OnEndpointsConfigured()) {
  1069d5:	48 8b 07             	mov    (%rdi),%rax
  1069d8:	ff 50 20             	call   *0x20(%rax)
  1069db:	85 c0                	test   %eax,%eax
  1069dd:	0f 85 85 00 00 00    	jne    106a68 <_ZN3usb6Device21OnEndpointsConfiguredEv+0x178>
    for (auto class_driver : class_drivers_) {
  1069e3:	49 8b 7f 58          	mov    0x58(%r15),%rdi
      if (class_driver != nullptr) {
  1069e7:	48 85 ff             	test   %rdi,%rdi
  1069ea:	74 0a                	je     1069f6 <_ZN3usb6Device21OnEndpointsConfiguredEv+0x106>
        if (auto err = class_driver->OnEndpointsConfigured()) {
  1069ec:	48 8b 07             	mov    (%rdi),%rax
  1069ef:	ff 50 20             	call   *0x20(%rax)
  1069f2:	85 c0                	test   %eax,%eax
  1069f4:	75 72                	jne    106a68 <_ZN3usb6Device21OnEndpointsConfiguredEv+0x178>
    for (auto class_driver : class_drivers_) {
  1069f6:	49 8b 7f 60          	mov    0x60(%r15),%rdi
      if (class_driver != nullptr) {
  1069fa:	48 85 ff             	test   %rdi,%rdi
  1069fd:	74 0a                	je     106a09 <_ZN3usb6Device21OnEndpointsConfiguredEv+0x119>
        if (auto err = class_driver->OnEndpointsConfigured()) {
  1069ff:	48 8b 07             	mov    (%rdi),%rax
  106a02:	ff 50 20             	call   *0x20(%rax)
  106a05:	85 c0                	test   %eax,%eax
  106a07:	75 5f                	jne    106a68 <_ZN3usb6Device21OnEndpointsConfiguredEv+0x178>
    for (auto class_driver : class_drivers_) {
  106a09:	49 8b 7f 68          	mov    0x68(%r15),%rdi
      if (class_driver != nullptr) {
  106a0d:	48 85 ff             	test   %rdi,%rdi
  106a10:	74 0a                	je     106a1c <_ZN3usb6Device21OnEndpointsConfiguredEv+0x12c>
        if (auto err = class_driver->OnEndpointsConfigured()) {
  106a12:	48 8b 07             	mov    (%rdi),%rax
  106a15:	ff 50 20             	call   *0x20(%rax)
  106a18:	85 c0                	test   %eax,%eax
  106a1a:	75 4c                	jne    106a68 <_ZN3usb6Device21OnEndpointsConfiguredEv+0x178>
    for (auto class_driver : class_drivers_) {
  106a1c:	49 8b 7f 70          	mov    0x70(%r15),%rdi
      if (class_driver != nullptr) {
  106a20:	48 85 ff             	test   %rdi,%rdi
  106a23:	74 0a                	je     106a2f <_ZN3usb6Device21OnEndpointsConfiguredEv+0x13f>
        if (auto err = class_driver->OnEndpointsConfigured()) {
  106a25:	48 8b 07             	mov    (%rdi),%rax
  106a28:	ff 50 20             	call   *0x20(%rax)
  106a2b:	85 c0                	test   %eax,%eax
  106a2d:	75 39                	jne    106a68 <_ZN3usb6Device21OnEndpointsConfiguredEv+0x178>
    for (auto class_driver : class_drivers_) {
  106a2f:	49 8b 7f 78          	mov    0x78(%r15),%rdi
      if (class_driver != nullptr) {
  106a33:	48 85 ff             	test   %rdi,%rdi
  106a36:	74 0a                	je     106a42 <_ZN3usb6Device21OnEndpointsConfiguredEv+0x152>
        if (auto err = class_driver->OnEndpointsConfigured()) {
  106a38:	48 8b 07             	mov    (%rdi),%rax
  106a3b:	ff 50 20             	call   *0x20(%rax)
  106a3e:	85 c0                	test   %eax,%eax
  106a40:	75 26                	jne    106a68 <_ZN3usb6Device21OnEndpointsConfiguredEv+0x178>
  106a42:	48 bb 00 00 00 00 92 	movabs $0x9200000000,%rbx
  106a49:	00 00 00 
    for (auto class_driver : class_drivers_) {
  106a4c:	49 8b bf 80 00 00 00 	mov    0x80(%r15),%rdi
  106a53:	41 be f4 09 10 00    	mov    $0x1009f4,%r14d
      if (class_driver != nullptr) {
  106a59:	48 85 ff             	test   %rdi,%rdi
  106a5c:	74 30                	je     106a8e <_ZN3usb6Device21OnEndpointsConfiguredEv+0x19e>
        if (auto err = class_driver->OnEndpointsConfigured()) {
  106a5e:	48 8b 07             	mov    (%rdi),%rax
  106a61:	ff 50 20             	call   *0x20(%rax)
  106a64:	85 c0                	test   %eax,%eax
  106a66:	74 26                	je     106a8e <_ZN3usb6Device21OnEndpointsConfiguredEv+0x19e>
  106a68:	49 89 d6             	mov    %rdx,%r14
  106a6b:	48 bb 00 00 00 00 ff 	movabs $0xffffffff00000000,%rbx
  106a72:	ff ff ff 
  }
  106a75:	48 21 c3             	and    %rax,%rbx
  106a78:	89 c0                	mov    %eax,%eax
  106a7a:	48 09 c3             	or     %rax,%rbx
  106a7d:	48 89 d8             	mov    %rbx,%rax
  106a80:	4c 89 f2             	mov    %r14,%rdx
  106a83:	48 83 c4 08          	add    $0x8,%rsp
  106a87:	5b                   	pop    %rbx
  106a88:	41 5e                	pop    %r14
  106a8a:	41 5f                	pop    %r15
  106a8c:	5d                   	pop    %rbp
  106a8d:	c3                   	ret    
  106a8e:	31 c0                	xor    %eax,%eax
  106a90:	eb e8                	jmp    106a7a <_ZN3usb6Device21OnEndpointsConfiguredEv+0x18a>
  106a92:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  106a99:	00 00 00 
  106a9c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000106aa0 <_ZN3usb6Device18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi>:
                                   const void* buf, int len) {
  106aa0:	55                   	push   %rbp
  106aa1:	48 89 e5             	mov    %rsp,%rbp
  106aa4:	41 57                	push   %r15
  106aa6:	41 56                	push   %r14
  106aa8:	41 55                	push   %r13
  106aaa:	41 54                	push   %r12
  106aac:	53                   	push   %rbx
  106aad:	48 83 ec 18          	sub    $0x18,%rsp
  106ab1:	45 89 c4             	mov    %r8d,%r12d
  106ab4:	49 89 cf             	mov    %rcx,%r15
  106ab7:	48 89 d3             	mov    %rdx,%rbx
  106aba:	49 89 f6             	mov    %rsi,%r14
  106abd:	49 89 fd             	mov    %rdi,%r13
  106ac0:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
        buf, len, setup_data.request_type.bits.direction);
  106ac4:	41 89 d8             	mov    %ebx,%r8d
  106ac7:	41 c1 e8 07          	shr    $0x7,%r8d
  106acb:	41 83 e0 01          	and    $0x1,%r8d
    Log(kDebug, "Device::OnControlCompleted: buf 0x%08x, len %d, dir %d\n",
  106acf:	be ed 04 10 00       	mov    $0x1004ed,%esi
  106ad4:	bf 07 00 00 00       	mov    $0x7,%edi
  106ad9:	48 89 ca             	mov    %rcx,%rdx
  106adc:	44 89 e1             	mov    %r12d,%ecx
  106adf:	31 c0                	xor    %eax,%eax
  106ae1:	e8 3a f8 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
    if (is_initialized_) {
  106ae6:	41 80 bd 8a 01 00 00 	cmpb   $0x0,0x18a(%r13)
  106aed:	00 
  106aee:	74 4d                	je     106b3d <_ZN3usb6Device18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi+0x9d>
      if (auto w = event_waiters_.Get(setup_data)) {
  106af0:	49 81 c5 98 02 00 00 	add    $0x298,%r13
  106af7:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  106afb:	4c 89 ef             	mov    %r13,%rdi
  106afe:	e8 0d 08 00 00       	call   107310 <_ZNK3usb8ArrayMapINS_9SetupDataEPNS_11ClassDriverELm4EE3GetERKS1_>
        return this->__engaged_;
  106b03:	84 d2                	test   %dl,%dl
  106b05:	0f 84 fe 00 00 00    	je     106c09 <_ZN3usb6Device18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi+0x169>
  106b0b:	41 8b 0e             	mov    (%r14),%ecx
  106b0e:	89 4d d0             	mov    %ecx,-0x30(%rbp)
        return w.value()->OnControlCompleted(ep_id, setup_data, buf, len);
  106b11:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  106b15:	48 8b 18             	mov    (%rax),%rbx
  106b18:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  106b1c:	48 89 c7             	mov    %rax,%rdi
  106b1f:	4c 89 f9             	mov    %r15,%rcx
  106b22:	45 89 e0             	mov    %r12d,%r8d
  106b25:	ff 53 28             	call   *0x28(%rbx)
  106b28:	49 89 d6             	mov    %rdx,%r14
  106b2b:	48 b9 00 00 00 00 ff 	movabs $0xffffffff00000000,%rcx
  106b32:	ff ff ff 
  }
  106b35:	48 21 c1             	and    %rax,%rcx
  106b38:	e9 9f 01 00 00       	jmp    106cdc <_ZN3usb6Device18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi+0x23c>
  106b3d:	48 c1 eb 08          	shr    $0x8,%rbx
    if (initialize_phase_ == 1) {
  106b41:	41 8b 85 8c 01 00 00 	mov    0x18c(%r13),%eax
  106b48:	41 be f4 09 10 00    	mov    $0x1009f4,%r14d
  106b4e:	83 f8 03             	cmp    $0x3,%eax
  106b51:	0f 84 cc 00 00 00    	je     106c23 <_ZN3usb6Device18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi+0x183>
  106b57:	83 f8 02             	cmp    $0x2,%eax
  106b5a:	0f 84 29 01 00 00    	je     106c89 <_ZN3usb6Device18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi+0x1e9>
  106b60:	83 f8 01             	cmp    $0x1,%eax
  106b63:	0f 85 53 01 00 00    	jne    106cbc <_ZN3usb6Device18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi+0x21c>
  106b69:	48 b9 00 00 00 00 a6 	movabs $0xa600000000,%rcx
  106b70:	00 00 00 
  106b73:	b8 11 00 00 00       	mov    $0x11,%eax
      if (setup_data.request == request::kGetDescriptor &&
  106b78:	80 fb 06             	cmp    $0x6,%bl
  106b7b:	0f 85 5b 01 00 00    	jne    106cdc <_ZN3usb6Device18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi+0x23c>
          DescriptorDynamicCast<DeviceDescriptor>(buf8)) {
  106b81:	4d 85 ff             	test   %r15,%r15
      if (setup_data.request == request::kGetDescriptor &&
  106b84:	0f 84 52 01 00 00    	je     106cdc <_ZN3usb6Device18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi+0x23c>
  106b8a:	41 80 7f 01 01       	cmpb   $0x1,0x1(%r15)
  106b8f:	0f 85 47 01 00 00    	jne    106cdc <_ZN3usb6Device18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi+0x23c>
    num_configurations_ = device_desc->num_configurations;
  106b95:	41 8a 47 11          	mov    0x11(%r15),%al
  106b99:	41 88 85 88 01 00 00 	mov    %al,0x188(%r13)
    config_index_ = 0;
  106ba0:	41 c6 85 89 01 00 00 	movb   $0x0,0x189(%r13)
  106ba7:	00 
    initialize_phase_ = 2;
  106ba8:	41 c7 85 8c 01 00 00 	movl   $0x2,0x18c(%r13)
  106baf:	02 00 00 00 
    Log(kDebug, "issuing GetDesc(Config): index=%d)\n", config_index_);
  106bb3:	be 6b 07 10 00       	mov    $0x10076b,%esi
  106bb8:	bf 07 00 00 00       	mov    $0x7,%edi
  106bbd:	31 d2                	xor    %edx,%edx
  106bbf:	31 c0                	xor    %eax,%eax
  106bc1:	e8 5a f7 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
                         ConfigurationDescriptor::kType, config_index_,
  106bc6:	41 0f b6 85 89 01 00 	movzbl 0x189(%r13),%eax
  106bcd:	00 
  106bce:	49 8d 8d 88 00 00 00 	lea    0x88(%r13),%rcx
  106bd5:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%rbp)
    return dev.ControlIn(ep_id, setup_data, buf, len, nullptr);
  106bdc:	48 c1 e0 10          	shl    $0x10,%rax
  106be0:	48 ba 80 06 00 02 00 	movabs $0x100000002000680,%rdx
  106be7:	00 00 01 
  106bea:	48 09 c2             	or     %rax,%rdx
  106bed:	49 8b 45 00          	mov    0x0(%r13),%rax
  106bf1:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
  106bf5:	4c 89 ef             	mov    %r13,%rdi
  106bf8:	41 b8 00 01 00 00    	mov    $0x100,%r8d
  106bfe:	45 31 c9             	xor    %r9d,%r9d
  106c01:	ff 50 10             	call   *0x10(%rax)
  106c04:	e9 1f ff ff ff       	jmp    106b28 <_ZN3usb6Device18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi+0x88>
  106c09:	41 be f4 09 10 00    	mov    $0x1009f4,%r14d
  106c0f:	48 b9 00 00 00 00 9d 	movabs $0x9d00000000,%rcx
  106c16:	00 00 00 
  106c19:	b8 13 00 00 00       	mov    $0x13,%eax
  106c1e:	e9 b9 00 00 00       	jmp    106cdc <_ZN3usb6Device18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi+0x23c>
      if (setup_data.request == request::kSetConfiguration) {
  106c23:	80 fb 09             	cmp    $0x9,%bl
  106c26:	0f 85 a1 00 00 00    	jne    106ccd <_ZN3usb6Device18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi+0x22d>
    for (int i = 0; i < num_ep_configs_; ++i) {
  106c2c:	41 83 bd 90 02 00 00 	cmpl   $0x0,0x290(%r13)
  106c33:	00 
  106c34:	7e 32                	jle    106c68 <_ZN3usb6Device18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi+0x1c8>
  106c36:	49 8d 9d 90 01 00 00 	lea    0x190(%r13),%rbx
  106c3d:	45 31 ff             	xor    %r15d,%r15d

    /** エンドポイントアドレス（0..31） */
    int Address() const { return addr_; }

    /** エンドポイント番号（0..15） */
    int Number() const { return addr_ >> 1; }
  106c40:	8b 03                	mov    (%rbx),%eax
  106c42:	d1 f8                	sar    %eax
      class_drivers_[ep_configs_[i].ep_id.Number()]->SetEndpoint(ep_configs_[i]);
  106c44:	48 98                	cltq   
  106c46:	49 8b 7c c5 08       	mov    0x8(%r13,%rax,8),%rdi
  106c4b:	48 8b 07             	mov    (%rdi),%rax
  106c4e:	48 89 de             	mov    %rbx,%rsi
  106c51:	ff 50 18             	call   *0x18(%rax)
    for (int i = 0; i < num_ep_configs_; ++i) {
  106c54:	49 83 c7 01          	add    $0x1,%r15
  106c58:	49 63 85 90 02 00 00 	movslq 0x290(%r13),%rax
  106c5f:	48 83 c3 10          	add    $0x10,%rbx
  106c63:	49 39 c7             	cmp    %rax,%r15
  106c66:	7c d8                	jl     106c40 <_ZN3usb6Device18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi+0x1a0>
    initialize_phase_ = 4;
  106c68:	41 c7 85 8c 01 00 00 	movl   $0x4,0x18c(%r13)
  106c6f:	04 00 00 00 
    is_initialized_ = true;
  106c73:	41 c6 85 8a 01 00 00 	movb   $0x1,0x18a(%r13)
  106c7a:	01 
  106c7b:	48 b9 00 00 00 00 fe 	movabs $0xfe00000000,%rcx
  106c82:	00 00 00 
  106c85:	31 c0                	xor    %eax,%eax
  106c87:	eb 53                	jmp    106cdc <_ZN3usb6Device18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi+0x23c>
  106c89:	48 b9 00 00 00 00 ac 	movabs $0xac00000000,%rcx
  106c90:	00 00 00 
  106c93:	b8 11 00 00 00       	mov    $0x11,%eax
      if (setup_data.request == request::kGetDescriptor &&
  106c98:	80 fb 06             	cmp    $0x6,%bl
  106c9b:	75 3f                	jne    106cdc <_ZN3usb6Device18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi+0x23c>
          DescriptorDynamicCast<ConfigurationDescriptor>(buf8)) {
  106c9d:	4d 85 ff             	test   %r15,%r15
      if (setup_data.request == request::kGetDescriptor &&
  106ca0:	74 3a                	je     106cdc <_ZN3usb6Device18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi+0x23c>
  106ca2:	41 80 7f 01 02       	cmpb   $0x2,0x1(%r15)
  106ca7:	75 33                	jne    106cdc <_ZN3usb6Device18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi+0x23c>
        return InitializePhase2(buf8, len);
  106ca9:	4c 89 ef             	mov    %r13,%rdi
  106cac:	4c 89 fe             	mov    %r15,%rsi
  106caf:	44 89 e2             	mov    %r12d,%edx
  106cb2:	e8 d9 00 00 00       	call   106d90 <_ZN3usb6Device16InitializePhase2EPKhi>
  106cb7:	e9 6c fe ff ff       	jmp    106b28 <_ZN3usb6Device18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi+0x88>
  106cbc:	48 b9 00 00 00 00 b4 	movabs $0xb400000000,%rcx
  106cc3:	00 00 00 
  106cc6:	b8 0b 00 00 00       	mov    $0xb,%eax
  106ccb:	eb 0f                	jmp    106cdc <_ZN3usb6Device18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi+0x23c>
  106ccd:	48 b9 00 00 00 00 b1 	movabs $0xb100000000,%rcx
  106cd4:	00 00 00 
  106cd7:	b8 11 00 00 00       	mov    $0x11,%eax
  }
  106cdc:	89 c0                	mov    %eax,%eax
  106cde:	48 09 c8             	or     %rcx,%rax
  106ce1:	4c 89 f2             	mov    %r14,%rdx
  106ce4:	48 83 c4 18          	add    $0x18,%rsp
  106ce8:	5b                   	pop    %rbx
  106ce9:	41 5c                	pop    %r12
  106ceb:	41 5d                	pop    %r13
  106ced:	41 5e                	pop    %r14
  106cef:	41 5f                	pop    %r15
  106cf1:	5d                   	pop    %rbp
  106cf2:	c3                   	ret    
  106cf3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  106cfa:	00 00 00 
  106cfd:	0f 1f 00             	nopl   (%rax)

0000000000106d00 <_ZN3usb6Device16InitializePhase1EPKhi>:
  Error Device::InitializePhase1(const uint8_t* buf, int len) {
  106d00:	55                   	push   %rbp
  106d01:	48 89 e5             	mov    %rsp,%rbp
  106d04:	53                   	push   %rbx
  106d05:	50                   	push   %rax
  106d06:	48 89 fb             	mov    %rdi,%rbx
  106d09:	31 c0                	xor    %eax,%eax
    return nullptr;
  }

  template <class T>
  const T* DescriptorDynamicCast(const uint8_t* desc_data) {
    if (desc_data[1] == T::kType) {
  106d0b:	80 7e 01 01          	cmpb   $0x1,0x1(%rsi)
  106d0f:	48 0f 45 f0          	cmovne %rax,%rsi
    num_configurations_ = device_desc->num_configurations;
  106d13:	8a 46 11             	mov    0x11(%rsi),%al
  106d16:	88 87 88 01 00 00    	mov    %al,0x188(%rdi)
    config_index_ = 0;
  106d1c:	c6 87 89 01 00 00 00 	movb   $0x0,0x189(%rdi)
    initialize_phase_ = 2;
  106d23:	c7 87 8c 01 00 00 02 	movl   $0x2,0x18c(%rdi)
  106d2a:	00 00 00 
    Log(kDebug, "issuing GetDesc(Config): index=%d)\n", config_index_);
  106d2d:	be 6b 07 10 00       	mov    $0x10076b,%esi
  106d32:	bf 07 00 00 00       	mov    $0x7,%edi
  106d37:	31 d2                	xor    %edx,%edx
  106d39:	31 c0                	xor    %eax,%eax
  106d3b:	e8 e0 f5 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
                         ConfigurationDescriptor::kType, config_index_,
  106d40:	0f b6 83 89 01 00 00 	movzbl 0x189(%rbx),%eax
  106d47:	48 8d 8b 88 00 00 00 	lea    0x88(%rbx),%rcx
    constexpr EndpointID(const EndpointID& ep_id) : addr_{ep_id.addr_} {}
  106d4e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%rbp)
    return dev.ControlIn(ep_id, setup_data, buf, len, nullptr);
  106d55:	48 c1 e0 10          	shl    $0x10,%rax
  106d59:	48 ba 80 06 00 02 00 	movabs $0x100000002000680,%rdx
  106d60:	00 00 01 
  106d63:	48 09 c2             	or     %rax,%rdx
  106d66:	48 8b 03             	mov    (%rbx),%rax
  106d69:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  106d6d:	48 89 df             	mov    %rbx,%rdi
  106d70:	41 b8 00 01 00 00    	mov    $0x100,%r8d
  106d76:	45 31 c9             	xor    %r9d,%r9d
  106d79:	ff 50 10             	call   *0x10(%rax)
  }
  106d7c:	48 83 c4 08          	add    $0x8,%rsp
  106d80:	5b                   	pop    %rbx
  106d81:	5d                   	pop    %rbp
  106d82:	c3                   	ret    
  106d83:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  106d8a:	00 00 00 
  106d8d:	0f 1f 00             	nopl   (%rax)

0000000000106d90 <_ZN3usb6Device16InitializePhase2EPKhi>:
  Error Device::InitializePhase2(const uint8_t* buf, int len) {
  106d90:	55                   	push   %rbp
  106d91:	48 89 e5             	mov    %rsp,%rbp
  106d94:	41 57                	push   %r15
  106d96:	41 56                	push   %r14
  106d98:	41 55                	push   %r13
  106d9a:	41 54                	push   %r12
  106d9c:	53                   	push   %rbx
  106d9d:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  106da4:	80 7e 01 02          	cmpb   $0x2,0x1(%rsi)
  106da8:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
  106dac:	b9 f4 09 10 00       	mov    $0x1009f4,%ecx
  106db1:	48 bf 00 00 00 00 cd 	movabs $0xcd00000000,%rdi
  106db8:	00 00 00 
  106dbb:	41 bf 0c 00 00 00    	mov    $0xc,%r15d
    if (conf_desc == nullptr) {
  106dc1:	0f 85 cb 01 00 00    	jne    106f92 <_ZN3usb6Device16InitializePhase2EPKhi+0x202>
  106dc7:	48 85 f6             	test   %rsi,%rsi
  106dca:	0f 84 c2 01 00 00    	je     106f92 <_ZN3usb6Device16InitializePhase2EPKhi+0x202>
  106dd0:	4c 63 ea             	movslq %edx,%r13
  106dd3:	49 01 f5             	add    %rsi,%r13
  106dd6:	45 31 ff             	xor    %r15d,%r15d
  106dd9:	bb 10 b4 27 00       	mov    $0x27b410,%ebx
  106dde:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  106de2:	49 89 f6             	mov    %rsi,%r14
  106de5:	eb 19                	jmp    106e00 <_ZN3usb6Device16InitializePhase2EPKhi+0x70>
            __f_->destroy();
  106de7:	48 8b 07             	mov    (%rdi),%rax
  106dea:	ff 50 20             	call   *0x20(%rax)
  106ded:	bb 10 b4 27 00       	mov    $0x27b410,%ebx
      if (class_driver == nullptr) {
  106df2:	4d 85 e4             	test   %r12,%r12
  106df5:	0f 85 b2 01 00 00    	jne    106fad <_ZN3usb6Device16InitializePhase2EPKhi+0x21d>
  106dfb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      p_ += p_[0];
  106e00:	4c 89 f0             	mov    %r14,%rax
  106e03:	45 0f b6 36          	movzbl (%r14),%r14d
  106e07:	49 01 c6             	add    %rax,%r14
      if (p_ < desc_buf_ + desc_buf_len_) {
  106e0a:	4d 39 ee             	cmp    %r13,%r14
      while (auto n = Next()) {
  106e0d:	0f 83 70 01 00 00    	jae    106f83 <_ZN3usb6Device16InitializePhase2EPKhi+0x1f3>
  106e13:	41 80 7e 01 04       	cmpb   $0x4,0x1(%r14)
  106e18:	75 e6                	jne    106e00 <_ZN3usb6Device16InitializePhase2EPKhi+0x70>
        if_desc.interface_class,
  106e1a:	41 0f b6 56 05       	movzbl 0x5(%r14),%edx
        if_desc.interface_sub_class,
  106e1f:	41 0f b6 4e 06       	movzbl 0x6(%r14),%ecx
        if_desc.interface_protocol);
  106e24:	45 0f b6 46 07       	movzbl 0x7(%r14),%r8d
    Log(level, "Interface Descriptor: class=%d, sub=%d, protocol=%d\n",
  106e29:	be b2 0a 10 00       	mov    $0x100ab2,%esi
  106e2e:	bf 07 00 00 00       	mov    $0x7,%edi
  106e33:	31 c0                	xor    %eax,%eax
  106e35:	e8 e6 f4 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
    if (if_desc.interface_class == 3 &&
  106e3a:	41 80 7e 05 03       	cmpb   $0x3,0x5(%r14)
  106e3f:	75 bf                	jne    106e00 <_ZN3usb6Device16InitializePhase2EPKhi+0x70>
        if_desc.interface_sub_class == 1) {  // HID boot interface
  106e41:	41 80 7e 06 01       	cmpb   $0x1,0x6(%r14)
    if (if_desc.interface_class == 3 &&
  106e46:	75 b8                	jne    106e00 <_ZN3usb6Device16InitializePhase2EPKhi+0x70>
      if (if_desc.interface_protocol == 1) {  // keyboard
  106e48:	41 0f b6 46 07       	movzbl 0x7(%r14),%eax
  106e4d:	3c 02                	cmp    $0x2,%al
  106e4f:	74 43                	je     106e94 <_ZN3usb6Device16InitializePhase2EPKhi+0x104>
  106e51:	3c 01                	cmp    $0x1,%al
  106e53:	75 ab                	jne    106e00 <_ZN3usb6Device16InitializePhase2EPKhi+0x70>
        auto keyboard_driver = new usb::HIDKeyboardDriver{dev, if_desc.interface_number};
  106e55:	bf 00 09 00 00       	mov    $0x900,%edi
  106e5a:	e8 e1 39 00 00       	call   10a840 <_ZN3usb17HIDKeyboardDrivernwEm>
  106e5f:	41 0f b6 56 02       	movzbl 0x2(%r14),%edx
  106e64:	49 89 c4             	mov    %rax,%r12
  106e67:	48 89 c7             	mov    %rax,%rdi
  106e6a:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  106e6e:	e8 4d 37 00 00       	call   10a5c0 <_ZN3usb17HIDKeyboardDriverC1EPNS_6DeviceEi>
    _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT { return __f_ != 0; }
  106e73:	48 8b 3d b6 45 17 00 	mov    0x1745b6(%rip),%rdi        # 27b430 <_ZN3usb17HIDKeyboardDriver16default_observerE+0x20>
  106e7a:	48 85 ff             	test   %rdi,%rdi
        if (usb::HIDKeyboardDriver::default_observer) {
  106e7d:	0f 84 6f ff ff ff    	je     106df2 <_ZN3usb6Device16InitializePhase2EPKhi+0x62>
        else if ((void*)__f.__f_ == &__f.__buf_)
  106e83:	48 39 df             	cmp    %rbx,%rdi
  106e86:	74 5d                	je     106ee5 <_ZN3usb6Device16InitializePhase2EPKhi+0x155>
            __f_ = __f.__f_->__clone();
  106e88:	48 8b 07             	mov    (%rdi),%rax
  106e8b:	ff 50 10             	call   *0x10(%rax)
  106e8e:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  106e92:	eb 68                	jmp    106efc <_ZN3usb6Device16InitializePhase2EPKhi+0x16c>
        auto mouse_driver = new usb::HIDMouseDriver{dev, if_desc.interface_number};
  106e94:	bf 00 09 00 00       	mov    $0x900,%edi
  106e99:	e8 e2 3e 00 00       	call   10ad80 <_ZN3usb14HIDMouseDrivernwEm>
  106e9e:	41 0f b6 56 02       	movzbl 0x2(%r14),%edx
  106ea3:	49 89 c4             	mov    %rax,%r12
  106ea6:	48 89 c7             	mov    %rax,%rdi
  106ea9:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  106ead:	e8 3e 3d 00 00       	call   10abf0 <_ZN3usb14HIDMouseDriverC1EPNS_6DeviceEi>
    _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT { return __f_ != 0; }
  106eb2:	48 8b 3d a7 45 17 00 	mov    0x1745a7(%rip),%rdi        # 27b460 <_ZN3usb14HIDMouseDriver16default_observerE+0x20>
  106eb9:	48 85 ff             	test   %rdi,%rdi
        if (usb::HIDMouseDriver::default_observer) {
  106ebc:	0f 84 30 ff ff ff    	je     106df2 <_ZN3usb6Device16InitializePhase2EPKhi+0x62>
        else if ((void*)__f.__f_ == &__f.__buf_)
  106ec2:	b8 40 b4 27 00       	mov    $0x27b440,%eax
  106ec7:	48 39 c7             	cmp    %rax,%rdi
  106eca:	74 5d                	je     106f29 <_ZN3usb6Device16InitializePhase2EPKhi+0x199>
            __f_ = __f.__f_->__clone();
  106ecc:	48 8b 07             	mov    (%rdi),%rax
  106ecf:	ff 50 10             	call   *0x10(%rax)
  106ed2:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  106ed9:	4c 89 e7             	mov    %r12,%rdi
  106edc:	48 8d 9d 50 ff ff ff 	lea    -0xb0(%rbp),%rbx
  106ee3:	eb 67                	jmp    106f4c <_ZN3usb6Device16InitializePhase2EPKhi+0x1bc>
  106ee5:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
            __f_ = __as_base(&__buf_);
  106ee9:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
            __f.__f_->__clone(__f_);
  106eed:	48 8b 05 1c 45 17 00 	mov    0x17451c(%rip),%rax        # 27b410 <_ZN3usb17HIDKeyboardDriver16default_observerE>
  106ef4:	bf 10 b4 27 00       	mov    $0x27b410,%edi
  106ef9:	ff 50 18             	call   *0x18(%rax)
  106efc:	4c 89 e7             	mov    %r12,%rdi
          keyboard_driver->SubscribeKeyPush(usb::HIDKeyboardDriver::default_observer);
  106eff:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
  106f03:	e8 68 39 00 00       	call   10a870 <_ZN3usb17HIDKeyboardDriver16SubscribeKeyPushENSt3__18functionIFvhEEE>
        if ((void*)__f_ == &__buf_)
  106f08:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  106f0c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  106f10:	48 39 f8             	cmp    %rdi,%rax
  106f13:	74 63                	je     106f78 <_ZN3usb6Device16InitializePhase2EPKhi+0x1e8>
        else if (__f_)
  106f15:	48 85 ff             	test   %rdi,%rdi
  106f18:	0f 84 d4 fe ff ff    	je     106df2 <_ZN3usb6Device16InitializePhase2EPKhi+0x62>
            __f_->destroy_deallocate();
  106f1e:	48 8b 07             	mov    (%rdi),%rax
  106f21:	ff 50 28             	call   *0x28(%rax)
  106f24:	e9 c9 fe ff ff       	jmp    106df2 <_ZN3usb6Device16InitializePhase2EPKhi+0x62>
  106f29:	48 8d 9d 50 ff ff ff 	lea    -0xb0(%rbp),%rbx
            __f_ = __as_base(&__buf_);
  106f30:	48 89 9d 70 ff ff ff 	mov    %rbx,-0x90(%rbp)
            __f.__f_->__clone(__f_);
  106f37:	48 8b 05 02 45 17 00 	mov    0x174502(%rip),%rax        # 27b440 <_ZN3usb14HIDMouseDriver16default_observerE>
  106f3e:	bf 40 b4 27 00       	mov    $0x27b440,%edi
  106f43:	48 89 de             	mov    %rbx,%rsi
  106f46:	ff 50 18             	call   *0x18(%rax)
  106f49:	4c 89 e7             	mov    %r12,%rdi
          mouse_driver->SubscribeMouseMove(usb::HIDMouseDriver::default_observer);
  106f4c:	48 89 de             	mov    %rbx,%rsi
  106f4f:	e8 5c 3e 00 00       	call   10adb0 <_ZN3usb14HIDMouseDriver18SubscribeMouseMoveENSt3__18functionIFvaaEEE>
        if ((void*)__f_ == &__buf_)
  106f54:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
  106f5b:	48 39 fb             	cmp    %rdi,%rbx
  106f5e:	0f 84 83 fe ff ff    	je     106de7 <_ZN3usb6Device16InitializePhase2EPKhi+0x57>
        else if (__f_)
  106f64:	48 85 ff             	test   %rdi,%rdi
  106f67:	0f 84 80 fe ff ff    	je     106ded <_ZN3usb6Device16InitializePhase2EPKhi+0x5d>
            __f_->destroy_deallocate();
  106f6d:	48 8b 07             	mov    (%rdi),%rax
  106f70:	ff 50 28             	call   *0x28(%rax)
  106f73:	e9 75 fe ff ff       	jmp    106ded <_ZN3usb6Device16InitializePhase2EPKhi+0x5d>
            __f_->destroy();
  106f78:	48 8b 07             	mov    (%rdi),%rax
  106f7b:	ff 50 20             	call   *0x20(%rax)
  106f7e:	e9 6f fe ff ff       	jmp    106df2 <_ZN3usb6Device16InitializePhase2EPKhi+0x62>
  106f83:	b9 f4 09 10 00       	mov    $0x1009f4,%ecx
  106f88:	48 bf 00 00 00 00 ef 	movabs $0xef00000000,%rdi
  106f8f:	00 00 00 
  }
  106f92:	49 09 ff             	or     %rdi,%r15
  106f95:	4c 89 f8             	mov    %r15,%rax
  106f98:	48 89 ca             	mov    %rcx,%rdx
  106f9b:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  106fa2:	5b                   	pop    %rbx
  106fa3:	41 5c                	pop    %r12
  106fa5:	41 5d                	pop    %r13
  106fa7:	41 5e                	pop    %r14
  106fa9:	41 5f                	pop    %r15
  106fab:	5d                   	pop    %rbp
  106fac:	c3                   	ret    
  106fad:	4c 89 65 b8          	mov    %r12,-0x48(%rbp)
  106fb1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
      num_ep_configs_ = 0;
  106fb5:	c7 80 90 02 00 00 00 	movl   $0x0,0x290(%rax)
  106fbc:	00 00 00 
      while (num_ep_configs_ < if_desc->num_endpoints) {
  106fbf:	41 80 7e 04 00       	cmpb   $0x0,0x4(%r14)
  106fc4:	0f 84 83 01 00 00    	je     10714d <_ZN3usb6Device16InitializePhase2EPKhi+0x3bd>
  106fca:	31 c0                	xor    %eax,%eax
  106fcc:	4c 89 f2             	mov    %r14,%rdx
  106fcf:	eb 2c                	jmp    106ffd <_ZN3usb6Device16InitializePhase2EPKhi+0x26d>
    Log(level, "\n");
  106fd1:	be 59 0b 10 00       	mov    $0x100b59,%esi
  106fd6:	bf 07 00 00 00       	mov    $0x7,%edi
  106fdb:	31 c0                	xor    %eax,%eax
  106fdd:	e8 3e f3 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
  106fe2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
      while (num_ep_configs_ < if_desc->num_endpoints) {
  106fe6:	8b 80 90 02 00 00    	mov    0x290(%rax),%eax
  106fec:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  106ff0:	41 0f b6 4e 04       	movzbl 0x4(%r14),%ecx
  106ff5:	39 c8                	cmp    %ecx,%eax
  106ff7:	0f 8d 50 01 00 00    	jge    10714d <_ZN3usb6Device16InitializePhase2EPKhi+0x3bd>
  106ffd:	48 89 d1             	mov    %rdx,%rcx
      p_ += p_[0];
  107000:	0f b6 12             	movzbl (%rdx),%edx
  107003:	48 01 ca             	add    %rcx,%rdx
      if (p_ < desc_buf_ + desc_buf_len_) {
  107006:	4c 39 ea             	cmp    %r13,%rdx
  107009:	41 bf 00 00 00 00    	mov    $0x0,%r15d
  10700f:	4c 0f 42 fa          	cmovb  %rdx,%r15
  107013:	41 8a 4f 01          	mov    0x1(%r15),%cl
  107017:	80 f9 05             	cmp    $0x5,%cl
        if (auto ep_desc = DescriptorDynamicCast<EndpointDescriptor>(desc)) {
  10701a:	0f 85 a0 00 00 00    	jne    1070c0 <_ZN3usb6Device16InitializePhase2EPKhi+0x330>
  107020:	4d 85 ff             	test   %r15,%r15
  107023:	0f 84 97 00 00 00    	je     1070c0 <_ZN3usb6Device16InitializePhase2EPKhi+0x330>
      ep_desc.endpoint_address.bits.number,
  107029:	41 0f b6 47 02       	movzbl 0x2(%r15),%eax
    constexpr EndpointID(int ep_num, bool dir_in) : addr_{ep_num << 1 | dir_in} {}
  10702e:	89 c1                	mov    %eax,%ecx
  107030:	83 e1 0f             	and    $0xf,%ecx
  107033:	48 c1 e8 07          	shr    $0x7,%rax
  107037:	8d 1c 48             	lea    (%rax,%rcx,2),%ebx
    conf.ep_type = static_cast<usb::EndpointType>(ep_desc.attributes.bits.transfer_type);
  10703a:	45 0f b6 67 03       	movzbl 0x3(%r15),%r12d
  10703f:	41 83 e4 03          	and    $0x3,%r12d
    conf.max_packet_size = ep_desc.max_packet_size;
  107043:	45 0f b7 47 04       	movzwl 0x4(%r15),%r8d
  107048:	44 89 45 c4          	mov    %r8d,-0x3c(%rbp)
    conf.interval = ep_desc.interval;
  10704c:	45 0f b6 7f 06       	movzbl 0x6(%r15),%r15d
    Log(level, "EndpointConf: ep_id=%d, ep_type=%d"
  107051:	be cc 0b 10 00       	mov    $0x100bcc,%esi
  107056:	bf 07 00 00 00       	mov    $0x7,%edi
  10705b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  10705f:	89 da                	mov    %ebx,%edx
  107061:	44 89 e1             	mov    %r12d,%ecx
  107064:	45 89 f9             	mov    %r15d,%r9d
  107067:	31 c0                	xor    %eax,%eax
  107069:	e8 b2 f2 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
  10706e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
          ep_configs_[num_ep_configs_] = conf;
  107072:	48 63 8a 90 02 00 00 	movslq 0x290(%rdx),%rcx
          ++num_ep_configs_;
  107079:	8d 41 01             	lea    0x1(%rcx),%eax
      addr_ = rhs.addr_;
  10707c:	48 c1 e1 04          	shl    $0x4,%rcx
  107080:	89 9c 0a 90 01 00 00 	mov    %ebx,0x190(%rdx,%rcx,1)
    int addr_;
  };

  constexpr EndpointID kDefaultControlPipeID{0, true};

  struct EndpointConfig {
  107087:	44 89 a4 0a 94 01 00 	mov    %r12d,0x194(%rdx,%rcx,1)
  10708e:	00 
  10708f:	8b 75 c4             	mov    -0x3c(%rbp),%esi
  107092:	89 b4 0a 98 01 00 00 	mov    %esi,0x198(%rdx,%rcx,1)
  107099:	44 89 bc 0a 9c 01 00 	mov    %r15d,0x19c(%rdx,%rcx,1)
  1070a0:	00 
  1070a1:	89 82 90 02 00 00    	mov    %eax,0x290(%rdx)
    int Number() const { return addr_ >> 1; }
  1070a7:	83 e3 fe             	and    $0xfffffffe,%ebx
  1070aa:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
          class_drivers_[conf.ep_id.Number()] = class_driver;
  1070ae:	48 89 4c 9a 08       	mov    %rcx,0x8(%rdx,%rbx,4)
  1070b3:	e9 34 ff ff ff       	jmp    106fec <_ZN3usb6Device16InitializePhase2EPKhi+0x25c>
  1070b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  1070bf:	00 
  1070c0:	80 f9 21             	cmp    $0x21,%cl
        } else if (auto hid_desc = DescriptorDynamicCast<HIDDescriptor>(desc)) {
  1070c3:	0f 85 27 ff ff ff    	jne    106ff0 <_ZN3usb6Device16InitializePhase2EPKhi+0x260>
  1070c9:	4d 85 ff             	test   %r15,%r15
  1070cc:	0f 84 1e ff ff ff    	je     106ff0 <_ZN3usb6Device16InitializePhase2EPKhi+0x260>
  1070d2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
        hid_desc.hid_release,
  1070d6:	41 0f b7 57 02       	movzwl 0x2(%r15),%edx
        hid_desc.num_descriptors);
  1070db:	41 0f b6 4f 05       	movzbl 0x5(%r15),%ecx
    Log(level, "HID Descriptor: release=0x%02x, num_desc=%d",
  1070e0:	be 6e 0e 10 00       	mov    $0x100e6e,%esi
  1070e5:	bf 07 00 00 00       	mov    $0x7,%edi
  1070ea:	31 c0                	xor    %eax,%eax
  1070ec:	e8 2f f2 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
    for (int i = 0; i < hid_desc.num_descriptors; ++i) {
  1070f1:	41 8a 47 05          	mov    0x5(%r15),%al
  1070f5:	84 c0                	test   %al,%al
  1070f7:	0f 84 d4 fe ff ff    	je     106fd1 <_ZN3usb6Device16InitializePhase2EPKhi+0x241>
  1070fd:	4d 8d 67 06          	lea    0x6(%r15),%r12
  107101:	31 db                	xor    %ebx,%ebx
  107103:	eb 39                	jmp    10713e <_ZN3usb6Device16InitializePhase2EPKhi+0x3ae>
  107105:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10710c:	00 00 00 
  10710f:	90                   	nop
          hid_desc.GetClassDescriptor(i)->descriptor_type,
  107110:	0f b6 10             	movzbl (%rax),%edx
          hid_desc.GetClassDescriptor(i)->descriptor_length);
  107113:	0f b7 48 01          	movzwl 0x1(%rax),%ecx
      Log(level, ", desc_type=%d, len=%d",
  107117:	be 7c 08 10 00       	mov    $0x10087c,%esi
  10711c:	bf 07 00 00 00       	mov    $0x7,%edi
  107121:	31 c0                	xor    %eax,%eax
  107123:	e8 f8 f1 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
    for (int i = 0; i < hid_desc.num_descriptors; ++i) {
  107128:	48 83 c3 01          	add    $0x1,%rbx
  10712c:	41 0f b6 47 05       	movzbl 0x5(%r15),%eax
  107131:	49 83 c4 03          	add    $0x3,%r12
  107135:	48 39 c3             	cmp    %rax,%rbx
  107138:	0f 83 93 fe ff ff    	jae    106fd1 <_ZN3usb6Device16InitializePhase2EPKhi+0x241>
      if (index >= num_descriptors) {
  10713e:	0f b6 c8             	movzbl %al,%ecx
  107141:	4c 89 e0             	mov    %r12,%rax
  107144:	48 39 cb             	cmp    %rcx,%rbx
  107147:	72 c7                	jb     107110 <_ZN3usb6Device16InitializePhase2EPKhi+0x380>
  107149:	31 c0                	xor    %eax,%eax
  10714b:	eb c3                	jmp    107110 <_ZN3usb6Device16InitializePhase2EPKhi+0x380>
  10714d:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
    initialize_phase_ = 3;
  107151:	c7 83 8c 01 00 00 03 	movl   $0x3,0x18c(%rbx)
  107158:	00 00 00 
  10715b:	4c 8b 75 b0          	mov    -0x50(%rbp),%r14
        conf_desc->configuration_value);
  10715f:	41 0f b6 56 05       	movzbl 0x5(%r14),%edx
    Log(kDebug, "issuing SetConfiguration: conf_val=%d\n",
  107164:	be 6e 02 10 00       	mov    $0x10026e,%esi
  107169:	bf 07 00 00 00       	mov    $0x7,%edi
  10716e:	31 c0                	xor    %eax,%eax
  107170:	e8 ab f1 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
                            conf_desc->configuration_value, true);
  107175:	41 0f b6 56 05       	movzbl 0x5(%r14),%edx
    constexpr EndpointID(const EndpointID& ep_id) : addr_{ep_id.addr_} {}
  10717a:	c7 45 80 01 00 00 00 	movl   $0x1,-0x80(%rbp)
    setup_data.request_type.bits.recipient = request_type::kDevice;
    setup_data.request = request::kSetConfiguration;
    setup_data.value = config_value;
    setup_data.index = 0;
    setup_data.length = 0;
    return dev.ControlOut(ep_id, setup_data, nullptr, 0, nullptr);
  107181:	48 c1 e2 10          	shl    $0x10,%rdx
  107185:	48 81 ca 00 09 00 00 	or     $0x900,%rdx
  10718c:	48 8b 03             	mov    (%rbx),%rax
  10718f:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
  107193:	48 89 df             	mov    %rbx,%rdi
  107196:	31 c9                	xor    %ecx,%ecx
  107198:	45 31 c0             	xor    %r8d,%r8d
  10719b:	45 31 c9             	xor    %r9d,%r9d
  10719e:	ff 50 18             	call   *0x18(%rax)
  1071a1:	48 89 d1             	mov    %rdx,%rcx
  1071a4:	48 bf 00 00 00 00 ff 	movabs $0xffffffff00000000,%rdi
  1071ab:	ff ff ff 
  }
  1071ae:	48 21 c7             	and    %rax,%rdi
    return SetConfiguration(*this, kDefaultControlPipeID,
  1071b1:	41 89 c7             	mov    %eax,%r15d
  1071b4:	e9 d9 fd ff ff       	jmp    106f92 <_ZN3usb6Device16InitializePhase2EPKhi+0x202>
  1071b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000001071c0 <_ZN3usb6Device16InitializePhase3Eh>:
  Error Device::InitializePhase3(uint8_t config_value) {
  1071c0:	55                   	push   %rbp
  1071c1:	48 89 e5             	mov    %rsp,%rbp
  1071c4:	41 57                	push   %r15
  1071c6:	41 56                	push   %r14
  1071c8:	53                   	push   %rbx
  1071c9:	50                   	push   %rax
  1071ca:	49 89 fe             	mov    %rdi,%r14
    for (int i = 0; i < num_ep_configs_; ++i) {
  1071cd:	83 bf 90 02 00 00 00 	cmpl   $0x0,0x290(%rdi)
  1071d4:	7e 32                	jle    107208 <_ZN3usb6Device16InitializePhase3Eh+0x48>
  1071d6:	49 8d 9e 90 01 00 00 	lea    0x190(%r14),%rbx
  1071dd:	45 31 ff             	xor    %r15d,%r15d
    int Number() const { return addr_ >> 1; }
  1071e0:	8b 03                	mov    (%rbx),%eax
  1071e2:	d1 f8                	sar    %eax
      class_drivers_[ep_configs_[i].ep_id.Number()]->SetEndpoint(ep_configs_[i]);
  1071e4:	48 98                	cltq   
  1071e6:	49 8b 7c c6 08       	mov    0x8(%r14,%rax,8),%rdi
  1071eb:	48 8b 07             	mov    (%rdi),%rax
  1071ee:	48 89 de             	mov    %rbx,%rsi
  1071f1:	ff 50 18             	call   *0x18(%rax)
    for (int i = 0; i < num_ep_configs_; ++i) {
  1071f4:	49 83 c7 01          	add    $0x1,%r15
  1071f8:	49 63 86 90 02 00 00 	movslq 0x290(%r14),%rax
  1071ff:	48 83 c3 10          	add    $0x10,%rbx
  107203:	49 39 c7             	cmp    %rax,%r15
  107206:	7c d8                	jl     1071e0 <_ZN3usb6Device16InitializePhase3Eh+0x20>
    initialize_phase_ = 4;
  107208:	41 c7 86 8c 01 00 00 	movl   $0x4,0x18c(%r14)
  10720f:	04 00 00 00 
    is_initialized_ = true;
  107213:	41 c6 86 8a 01 00 00 	movb   $0x1,0x18a(%r14)
  10721a:	01 
  10721b:	48 b8 00 00 00 00 fe 	movabs $0xfe00000000,%rax
  107222:	00 00 00 
    return MAKE_ERROR(Error::kSuccess);
  107225:	ba f4 09 10 00       	mov    $0x1009f4,%edx
  10722a:	48 83 c4 08          	add    $0x8,%rsp
  10722e:	5b                   	pop    %rbx
  10722f:	41 5e                	pop    %r14
  107231:	41 5f                	pop    %r15
  107233:	5d                   	pop    %rbp
  107234:	c3                   	ret    
  107235:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10723c:	00 00 00 
  10723f:	90                   	nop

0000000000107240 <_ZN3usb6Device20OnInterruptCompletedENS_10EndpointIDEPKvi>:
  Error Device::OnInterruptCompleted(EndpointID ep_id, const void* buf, int len) {
  107240:	55                   	push   %rbp
  107241:	48 89 e5             	mov    %rsp,%rbp
  107244:	41 57                	push   %r15
  107246:	41 56                	push   %r14
  107248:	41 54                	push   %r12
  10724a:	53                   	push   %rbx
  10724b:	48 83 ec 10          	sub    $0x10,%rsp
  10724f:	41 89 ce             	mov    %ecx,%r14d
  107252:	49 89 d7             	mov    %rdx,%r15
  107255:	48 89 f3             	mov    %rsi,%rbx
  107258:	49 89 fc             	mov    %rdi,%r12
    int Address() const { return addr_; }
  10725b:	8b 16                	mov    (%rsi),%edx
    Log(kDebug, "Device::OnInterruptCompleted: ep addr %d\n", ep_id.Address());
  10725d:	be 37 04 10 00       	mov    $0x100437,%esi
  107262:	bf 07 00 00 00       	mov    $0x7,%edi
  107267:	31 c0                	xor    %eax,%eax
  107269:	e8 b2 f0 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
    int Number() const { return addr_ >> 1; }
  10726e:	8b 03                	mov    (%rbx),%eax
  107270:	89 c1                	mov    %eax,%ecx
  107272:	d1 f9                	sar    %ecx
    if (auto w = class_drivers_[ep_id.Number()]) {
  107274:	48 63 c9             	movslq %ecx,%rcx
  107277:	49 8b 7c cc 08       	mov    0x8(%r12,%rcx,8),%rdi
  10727c:	48 85 ff             	test   %rdi,%rdi
  10727f:	74 27                	je     1072a8 <_ZN3usb6Device20OnInterruptCompletedENS_10EndpointIDEPKvi+0x68>
    constexpr EndpointID(const EndpointID& ep_id) : addr_{ep_id.addr_} {}
  107281:	89 45 d8             	mov    %eax,-0x28(%rbp)
      return w->OnInterruptCompleted(ep_id, buf, len);
  107284:	48 8b 07             	mov    (%rdi),%rax
  107287:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  10728b:	4c 89 fa             	mov    %r15,%rdx
  10728e:	44 89 f1             	mov    %r14d,%ecx
  107291:	ff 50 30             	call   *0x30(%rax)
  107294:	48 89 c1             	mov    %rax,%rcx
  107297:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  10729e:	ff ff ff 
  }
  1072a1:	48 21 c8             	and    %rcx,%rax
  1072a4:	89 c9                	mov    %ecx,%ecx
  1072a6:	eb 14                	jmp    1072bc <_ZN3usb6Device20OnInterruptCompletedENS_10EndpointIDEPKvi+0x7c>
  1072a8:	b9 13 00 00 00       	mov    $0x13,%ecx
  1072ad:	48 b8 00 00 00 00 bc 	movabs $0xbc00000000,%rax
  1072b4:	00 00 00 
  1072b7:	ba f4 09 10 00       	mov    $0x1009f4,%edx
  1072bc:	48 09 c8             	or     %rcx,%rax
  1072bf:	48 83 c4 10          	add    $0x10,%rsp
  1072c3:	5b                   	pop    %rbx
  1072c4:	41 5c                	pop    %r12
  1072c6:	41 5e                	pop    %r14
  1072c8:	41 5f                	pop    %r15
  1072ca:	5d                   	pop    %rbp
  1072cb:	c3                   	ret    
  1072cc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000001072d0 <_ZN3usb16SetConfigurationERNS_6DeviceENS_10EndpointIDEhb>:
                         uint8_t config_value, bool debug) {
  1072d0:	55                   	push   %rbp
  1072d1:	48 89 e5             	mov    %rsp,%rbp
  1072d4:	48 83 ec 10          	sub    $0x10,%rsp
  1072d8:	8b 06                	mov    (%rsi),%eax
  1072da:	89 45 f8             	mov    %eax,-0x8(%rbp)
    return dev.ControlOut(ep_id, setup_data, nullptr, 0, nullptr);
  1072dd:	89 d2                	mov    %edx,%edx
  1072df:	48 c1 e2 10          	shl    $0x10,%rdx
  1072e3:	48 81 ca 00 09 00 00 	or     $0x900,%rdx
  1072ea:	48 8b 07             	mov    (%rdi),%rax
  1072ed:	48 8d 75 f8          	lea    -0x8(%rbp),%rsi
  1072f1:	31 c9                	xor    %ecx,%ecx
  1072f3:	45 31 c0             	xor    %r8d,%r8d
  1072f6:	45 31 c9             	xor    %r9d,%r9d
  1072f9:	ff 50 18             	call   *0x18(%rax)
  }
  1072fc:	48 83 c4 10          	add    $0x10,%rsp
  107300:	5d                   	pop    %rbp
  107301:	c3                   	ret    
  107302:	cc                   	int3   
  107303:	cc                   	int3   
  107304:	cc                   	int3   
  107305:	cc                   	int3   
  107306:	cc                   	int3   
  107307:	cc                   	int3   
  107308:	cc                   	int3   
  107309:	cc                   	int3   
  10730a:	cc                   	int3   
  10730b:	cc                   	int3   
  10730c:	cc                   	int3   
  10730d:	cc                   	int3   
  10730e:	cc                   	int3   
  10730f:	cc                   	int3   

0000000000107310 <_ZNK3usb8ArrayMapINS_9SetupDataEPNS_11ClassDriverELm4EE3GetERKS1_>:
     std::optional<V> Get(const K& key) const {
  107310:	55                   	push   %rbp
  107311:	48 89 e5             	mov    %rsp,%rbp
  107314:	48 8b 36             	mov    (%rsi),%rsi
  107317:	49 89 f2             	mov    %rsi,%r10
  10731a:	49 c1 ea 30          	shr    $0x30,%r10
  10731e:	80 7f 08 00          	cmpb   $0x0,0x8(%rdi)
        if (auto opt_k = table_[i].first; opt_k && opt_k.value() == key) {
  107322:	74 0d                	je     107331 <_ZNK3usb8ArrayMapINS_9SetupDataEPNS_11ClassDriverELm4EE3GetERKS1_+0x21>
  107324:	48 8b 07             	mov    (%rdi),%rax
    uint16_t length;
  } __attribute__((packed));

  inline bool operator ==(SetupData lhs, SetupData rhs) {
    return
      lhs.request_type.data == rhs.request_type.data &&
  107327:	48 89 f2             	mov    %rsi,%rdx
  10732a:	48 31 c2             	xor    %rax,%rdx
  10732d:	85 d2                	test   %edx,%edx
  10732f:	74 3f                	je     107370 <_ZNK3usb8ArrayMapINS_9SetupDataEPNS_11ClassDriverELm4EE3GetERKS1_+0x60>
  107331:	80 7f 20 00          	cmpb   $0x0,0x20(%rdi)
  107335:	74 0e                	je     107345 <_ZNK3usb8ArrayMapINS_9SetupDataEPNS_11ClassDriverELm4EE3GetERKS1_+0x35>
  107337:	48 8b 47 18          	mov    0x18(%rdi),%rax
  10733b:	48 89 f2             	mov    %rsi,%rdx
  10733e:	48 31 c2             	xor    %rax,%rdx
  107341:	85 d2                	test   %edx,%edx
  107343:	74 48                	je     10738d <_ZNK3usb8ArrayMapINS_9SetupDataEPNS_11ClassDriverELm4EE3GetERKS1_+0x7d>
  107345:	80 7f 38 00          	cmpb   $0x0,0x38(%rdi)
  107349:	74 0e                	je     107359 <_ZNK3usb8ArrayMapINS_9SetupDataEPNS_11ClassDriverELm4EE3GetERKS1_+0x49>
  10734b:	48 8b 47 30          	mov    0x30(%rdi),%rax
  10734f:	48 89 f2             	mov    %rsi,%rdx
  107352:	48 31 c2             	xor    %rax,%rdx
  107355:	85 d2                	test   %edx,%edx
  107357:	74 54                	je     1073ad <_ZNK3usb8ArrayMapINS_9SetupDataEPNS_11ClassDriverELm4EE3GetERKS1_+0x9d>
  107359:	80 7f 50 00          	cmpb   $0x0,0x50(%rdi)
  10735d:	74 0b                	je     10736a <_ZNK3usb8ArrayMapINS_9SetupDataEPNS_11ClassDriverELm4EE3GetERKS1_+0x5a>
  10735f:	4c 8b 4f 48          	mov    0x48(%rdi),%r9
  107363:	4c 31 ce             	xor    %r9,%rsi
  107366:	85 f6                	test   %esi,%esi
  107368:	74 63                	je     1073cd <_ZNK3usb8ArrayMapINS_9SetupDataEPNS_11ClassDriverELm4EE3GetERKS1_+0xbd>
  10736a:	31 c0                	xor    %eax,%eax
  10736c:	31 d2                	xor    %edx,%edx
    }
  10736e:	5d                   	pop    %rbp
  10736f:	c3                   	ret    
  107370:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
  107377:	ff 00 00 
      lhs.request == rhs.request &&
      lhs.value == rhs.value &&
      lhs.index == rhs.index &&
  10737a:	48 85 ca             	test   %rcx,%rdx
        if (auto opt_k = table_[i].first; opt_k && opt_k.value() == key) {
  10737d:	75 b2                	jne    107331 <_ZNK3usb8ArrayMapINS_9SetupDataEPNS_11ClassDriverELm4EE3GetERKS1_+0x21>
  10737f:	48 c1 e8 30          	shr    $0x30,%rax
  107383:	44 39 d0             	cmp    %r10d,%eax
  107386:	75 a9                	jne    107331 <_ZNK3usb8ArrayMapINS_9SetupDataEPNS_11ClassDriverELm4EE3GetERKS1_+0x21>
  107388:	45 31 c0             	xor    %r8d,%r8d
  10738b:	eb 69                	jmp    1073f6 <_ZNK3usb8ArrayMapINS_9SetupDataEPNS_11ClassDriverELm4EE3GetERKS1_+0xe6>
  10738d:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
  107394:	ff 00 00 
  107397:	48 85 ca             	test   %rcx,%rdx
  10739a:	75 a9                	jne    107345 <_ZNK3usb8ArrayMapINS_9SetupDataEPNS_11ClassDriverELm4EE3GetERKS1_+0x35>
  10739c:	48 c1 e8 30          	shr    $0x30,%rax
  1073a0:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  1073a6:	44 39 d0             	cmp    %r10d,%eax
  1073a9:	74 4b                	je     1073f6 <_ZNK3usb8ArrayMapINS_9SetupDataEPNS_11ClassDriverELm4EE3GetERKS1_+0xe6>
  1073ab:	eb 98                	jmp    107345 <_ZNK3usb8ArrayMapINS_9SetupDataEPNS_11ClassDriverELm4EE3GetERKS1_+0x35>
  1073ad:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
  1073b4:	ff 00 00 
  1073b7:	48 85 ca             	test   %rcx,%rdx
  1073ba:	75 9d                	jne    107359 <_ZNK3usb8ArrayMapINS_9SetupDataEPNS_11ClassDriverELm4EE3GetERKS1_+0x49>
  1073bc:	48 c1 e8 30          	shr    $0x30,%rax
  1073c0:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  1073c6:	44 39 d0             	cmp    %r10d,%eax
  1073c9:	74 2b                	je     1073f6 <_ZNK3usb8ArrayMapINS_9SetupDataEPNS_11ClassDriverELm4EE3GetERKS1_+0xe6>
  1073cb:	eb 8c                	jmp    107359 <_ZNK3usb8ArrayMapINS_9SetupDataEPNS_11ClassDriverELm4EE3GetERKS1_+0x49>
  1073cd:	31 c0                	xor    %eax,%eax
  1073cf:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
  1073d6:	ff 00 00 
  1073d9:	ba 00 00 00 00       	mov    $0x0,%edx
  1073de:	48 85 ce             	test   %rcx,%rsi
  1073e1:	75 8b                	jne    10736e <_ZNK3usb8ArrayMapINS_9SetupDataEPNS_11ClassDriverELm4EE3GetERKS1_+0x5e>
  1073e3:	49 c1 e9 30          	shr    $0x30,%r9
  1073e7:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  1073ed:	45 39 d1             	cmp    %r10d,%r9d
  1073f0:	0f 85 78 ff ff ff    	jne    10736e <_ZNK3usb8ArrayMapINS_9SetupDataEPNS_11ClassDriverELm4EE3GetERKS1_+0x5e>
          return table_[i].second;
  1073f6:	4b 8d 04 40          	lea    (%r8,%r8,2),%rax
        :  __val_(_VSTD::forward<_Args>(__args)...),
  1073fa:	48 8b 44 c7 10       	mov    0x10(%rdi,%rax,8),%rax
  1073ff:	b2 01                	mov    $0x1,%dl
    }
  107401:	5d                   	pop    %rbp
  107402:	c3                   	ret    
  107403:	cc                   	int3   
  107404:	cc                   	int3   
  107405:	cc                   	int3   
  107406:	cc                   	int3   
  107407:	cc                   	int3   
  107408:	cc                   	int3   
  107409:	cc                   	int3   
  10740a:	cc                   	int3   
  10740b:	cc                   	int3   
  10740c:	cc                   	int3   
  10740d:	cc                   	int3   
  10740e:	cc                   	int3   
  10740f:	cc                   	int3   

0000000000107410 <_ZN3usb4xhci4RingD1Ev>:

#include <cstring>
#include "usb/memory.hpp"

namespace usb::xhci {
  Ring::~Ring() {
  107410:	55                   	push   %rbp
  107411:	48 89 e5             	mov    %rsp,%rbp
    if (buf_ != nullptr) {
  107414:	48 8b 3f             	mov    (%rdi),%rdi
  107417:	48 85 ff             	test   %rdi,%rdi
  10741a:	74 06                	je     107422 <_ZN3usb4xhci4RingD1Ev+0x12>
      FreeMem(buf_);
  10741c:	5d                   	pop    %rbp
  10741d:	e9 9e f2 ff ff       	jmp    1066c0 <_ZN3usb7FreeMemEPv>
    }
  }
  107422:	5d                   	pop    %rbp
  107423:	c3                   	ret    
  107424:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10742b:	00 00 00 
  10742e:	66 90                	xchg   %ax,%ax

0000000000107430 <_ZN3usb4xhci4Ring10InitializeEm>:

  Error Ring::Initialize(size_t buf_size) {
  107430:	55                   	push   %rbp
  107431:	48 89 e5             	mov    %rsp,%rbp
  107434:	41 56                	push   %r14
  107436:	53                   	push   %rbx
  107437:	49 89 f6             	mov    %rsi,%r14
  10743a:	48 89 fb             	mov    %rdi,%rbx
    if (buf_ != nullptr) {
  10743d:	48 8b 3f             	mov    (%rdi),%rdi
  107440:	48 85 ff             	test   %rdi,%rdi
  107443:	74 05                	je     10744a <_ZN3usb4xhci4Ring10InitializeEm+0x1a>
      FreeMem(buf_);
  107445:	e8 76 f2 ff ff       	call   1066c0 <_ZN3usb7FreeMemEPv>
    }

    cycle_bit_ = true;
  10744a:	c6 43 10 01          	movb   $0x1,0x10(%rbx)
    write_index_ = 0;
  10744e:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  107455:	00 
    buf_size_ = buf_size;
  107456:	4c 89 73 08          	mov    %r14,0x8(%rbx)
  void* AllocMem(size_t size, unsigned int alignment, unsigned int boundary);

  template <class T>
  T* AllocArray(size_t num_obj, unsigned int alignment, unsigned int boundary) {
    return reinterpret_cast<T*>(
        AllocMem(sizeof(T) * num_obj, alignment, boundary));
  10745a:	49 c1 e6 04          	shl    $0x4,%r14
  10745e:	4c 89 f7             	mov    %r14,%rdi
  107461:	be 40 00 00 00       	mov    $0x40,%esi
  107466:	ba 00 00 01 00       	mov    $0x10000,%edx
  10746b:	e8 d0 f1 ff ff       	call   106640 <_ZN3usb8AllocMemEmjj>

    buf_ = AllocArray<TRB>(buf_size_, 64, 64 * 1024);
  107470:	48 89 03             	mov    %rax,(%rbx)
    if (buf_ == nullptr) {
  107473:	48 85 c0             	test   %rax,%rax
  107476:	74 20                	je     107498 <_ZN3usb4xhci4Ring10InitializeEm+0x68>
      return MAKE_ERROR(Error::kNoEnoughMemory);
    }
    memset(buf_, 0, buf_size_ * sizeof(TRB));
  107478:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  10747c:	48 c1 e2 04          	shl    $0x4,%rdx
  107480:	31 db                	xor    %ebx,%ebx
  107482:	48 89 c7             	mov    %rax,%rdi
  107485:	31 f6                	xor    %esi,%esi
  107487:	e8 14 43 00 00       	call   10b7a0 <memset>
  10748c:	48 b8 00 00 00 00 1c 	movabs $0x1c00000000,%rax
  107493:	00 00 00 
  107496:	eb 0f                	jmp    1074a7 <_ZN3usb4xhci4Ring10InitializeEm+0x77>
  107498:	bb 03 00 00 00       	mov    $0x3,%ebx
  10749d:	48 b8 00 00 00 00 18 	movabs $0x1800000000,%rax
  1074a4:	00 00 00 

    return MAKE_ERROR(Error::kSuccess);
  }
  1074a7:	48 09 d8             	or     %rbx,%rax
  1074aa:	ba 69 0d 10 00       	mov    $0x100d69,%edx
  1074af:	5b                   	pop    %rbx
  1074b0:	41 5e                	pop    %r14
  1074b2:	5d                   	pop    %rbp
  1074b3:	c3                   	ret    
  1074b4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1074bb:	00 00 00 
  1074be:	66 90                	xchg   %ax,%ax

00000000001074c0 <_ZN3usb4xhci4Ring10CopyToLastERKNSt3__15arrayIjLm4EEE>:

  void Ring::CopyToLast(const std::array<uint32_t, 4>& data) {
  1074c0:	55                   	push   %rbp
  1074c1:	48 89 e5             	mov    %rsp,%rbp
  1074c4:	48 8b 07             	mov    (%rdi),%rax
  1074c7:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
  1074cb:	48 c1 e1 04          	shl    $0x4,%rcx
    for (int i = 0; i < 3; ++i) {
      // data[0..2] must be written prior to data[3].
      buf_[write_index_].data[i] = data[i];
  1074cf:	8b 16                	mov    (%rsi),%edx
  1074d1:	89 14 08             	mov    %edx,(%rax,%rcx,1)
  1074d4:	8b 56 04             	mov    0x4(%rsi),%edx
  1074d7:	89 54 08 04          	mov    %edx,0x4(%rax,%rcx,1)
  1074db:	8b 56 08             	mov    0x8(%rsi),%edx
  1074de:	89 54 08 08          	mov    %edx,0x8(%rax,%rcx,1)
    }
    buf_[write_index_].data[3]
      = (data[3] & 0xfffffffeu) | static_cast<uint32_t>(cycle_bit_);
  1074e2:	8b 56 0c             	mov    0xc(%rsi),%edx
  1074e5:	83 e2 fe             	and    $0xfffffffe,%edx
  1074e8:	0f b6 77 10          	movzbl 0x10(%rdi),%esi
  1074ec:	09 d6                	or     %edx,%esi
  1074ee:	89 74 08 0c          	mov    %esi,0xc(%rax,%rcx,1)
  }
  1074f2:	5d                   	pop    %rbp
  1074f3:	c3                   	ret    
  1074f4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1074fb:	00 00 00 
  1074fe:	66 90                	xchg   %ax,%ax

0000000000107500 <_ZN3usb4xhci4Ring4PushERKNSt3__15arrayIjLm4EEE>:

  TRB* Ring::Push(const std::array<uint32_t, 4>& data) {
  107500:	55                   	push   %rbp
  107501:	48 89 e5             	mov    %rsp,%rbp
    auto trb_ptr = &buf_[write_index_];
  107504:	4c 8b 07             	mov    (%rdi),%r8
  107507:	4c 8b 4f 18          	mov    0x18(%rdi),%r9
  10750b:	4c 89 ca             	mov    %r9,%rdx
  10750e:	48 c1 e2 04          	shl    $0x4,%rdx
  107512:	49 8d 04 10          	lea    (%r8,%rdx,1),%rax
      buf_[write_index_].data[i] = data[i];
  107516:	8b 0e                	mov    (%rsi),%ecx
  107518:	41 89 0c 10          	mov    %ecx,(%r8,%rdx,1)
  10751c:	8b 4e 04             	mov    0x4(%rsi),%ecx
  10751f:	41 89 4c 10 04       	mov    %ecx,0x4(%r8,%rdx,1)
  107524:	8b 4e 08             	mov    0x8(%rsi),%ecx
  107527:	41 89 4c 10 08       	mov    %ecx,0x8(%r8,%rdx,1)
      = (data[3] & 0xfffffffeu) | static_cast<uint32_t>(cycle_bit_);
  10752c:	8b 4e 0c             	mov    0xc(%rsi),%ecx
  10752f:	83 e1 fe             	and    $0xfffffffe,%ecx
  107532:	0f b6 77 10          	movzbl 0x10(%rdi),%esi
  107536:	09 f1                	or     %esi,%ecx
  107538:	41 89 4c 10 0c       	mov    %ecx,0xc(%r8,%rdx,1)
    CopyToLast(data);

    ++write_index_;
  10753d:	49 83 c1 01          	add    $0x1,%r9
  107541:	4c 89 4f 18          	mov    %r9,0x18(%rdi)
    if (write_index_ == buf_size_ - 1) {
  107545:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  107549:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
  10754d:	49 39 c9             	cmp    %rcx,%r9
  107550:	75 40                	jne    107592 <_ZN3usb4xhci4Ring4PushERKNSt3__15arrayIjLm4EEE+0x92>
      LinkTRB link{buf_};
      link.bits.toggle_cycle = true;
  107552:	44 89 c1             	mov    %r8d,%ecx
  107555:	83 e1 f0             	and    $0xfffffff0,%ecx
  107558:	4c 89 c2             	mov    %r8,%rdx
  10755b:	48 c1 ea 20          	shr    $0x20,%rdx
  10755f:	49 c1 e1 04          	shl    $0x4,%r9
      buf_[write_index_].data[i] = data[i];
  107563:	43 89 0c 08          	mov    %ecx,(%r8,%r9,1)
  107567:	43 89 54 08 04       	mov    %edx,0x4(%r8,%r9,1)
  10756c:	43 c7 44 08 08 00 00 	movl   $0x0,0x8(%r8,%r9,1)
  107573:	00 00 
      = (data[3] & 0xfffffffeu) | static_cast<uint32_t>(cycle_bit_);
  107575:	89 f1                	mov    %esi,%ecx
  107577:	81 c9 02 18 00 00    	or     $0x1802,%ecx
  10757d:	43 89 4c 08 0c       	mov    %ecx,0xc(%r8,%r9,1)
      CopyToLast(link.data);

      write_index_ = 0;
  107582:	48 c7 47 18 00 00 00 	movq   $0x0,0x18(%rdi)
  107589:	00 
      cycle_bit_ = !cycle_bit_;
  10758a:	40 80 f6 01          	xor    $0x1,%sil
  10758e:	40 88 77 10          	mov    %sil,0x10(%rdi)
    }

    return trb_ptr;
  107592:	5d                   	pop    %rbp
  107593:	c3                   	ret    
  107594:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10759b:	00 00 00 
  10759e:	66 90                	xchg   %ax,%ax

00000000001075a0 <_ZN3usb4xhci9EventRing10InitializeEmPNS0_22InterrupterRegisterSetE>:
  }

  Error EventRing::Initialize(size_t buf_size,
                              InterrupterRegisterSet* interrupter) {
  1075a0:	55                   	push   %rbp
  1075a1:	48 89 e5             	mov    %rsp,%rbp
  1075a4:	41 57                	push   %r15
  1075a6:	41 56                	push   %r14
  1075a8:	53                   	push   %rbx
  1075a9:	50                   	push   %rax
  1075aa:	49 89 d6             	mov    %rdx,%r14
  1075ad:	48 89 f3             	mov    %rsi,%rbx
  1075b0:	49 89 ff             	mov    %rdi,%r15
    if (buf_ != nullptr) {
  1075b3:	48 8b 3f             	mov    (%rdi),%rdi
  1075b6:	48 85 ff             	test   %rdi,%rdi
  1075b9:	74 05                	je     1075c0 <_ZN3usb4xhci9EventRing10InitializeEmPNS0_22InterrupterRegisterSetE+0x20>
      FreeMem(buf_);
  1075bb:	e8 00 f1 ff ff       	call   1066c0 <_ZN3usb7FreeMemEPv>
    }

    cycle_bit_ = true;
  1075c0:	41 c6 47 10 01       	movb   $0x1,0x10(%r15)
    buf_size_ = buf_size;
  1075c5:	49 89 5f 08          	mov    %rbx,0x8(%r15)
    interrupter_ = interrupter;
  1075c9:	4d 89 77 20          	mov    %r14,0x20(%r15)
  1075cd:	48 c1 e3 04          	shl    $0x4,%rbx
  1075d1:	48 89 df             	mov    %rbx,%rdi
  1075d4:	be 40 00 00 00       	mov    $0x40,%esi
  1075d9:	ba 00 00 01 00       	mov    $0x10000,%edx
  1075de:	e8 5d f0 ff ff       	call   106640 <_ZN3usb8AllocMemEmjj>

    buf_ = AllocArray<TRB>(buf_size_, 64, 64 * 1024);
  1075e3:	49 89 07             	mov    %rax,(%r15)
  1075e6:	41 be 03 00 00 00    	mov    $0x3,%r14d
    if (buf_ == nullptr) {
  1075ec:	48 85 c0             	test   %rax,%rax
  1075ef:	0f 84 ad 00 00 00    	je     1076a2 <_ZN3usb4xhci9EventRing10InitializeEmPNS0_22InterrupterRegisterSetE+0x102>
      return MAKE_ERROR(Error::kNoEnoughMemory);
    }
    memset(buf_, 0, buf_size_ * sizeof(TRB));
  1075f5:	49 8b 57 08          	mov    0x8(%r15),%rdx
  1075f9:	48 c1 e2 04          	shl    $0x4,%rdx
  1075fd:	48 89 c7             	mov    %rax,%rdi
  107600:	31 f6                	xor    %esi,%esi
  107602:	e8 99 41 00 00       	call   10b7a0 <memset>
  107607:	bf 10 00 00 00       	mov    $0x10,%edi
  10760c:	be 40 00 00 00       	mov    $0x40,%esi
  107611:	ba 00 00 01 00       	mov    $0x10000,%edx
  107616:	e8 25 f0 ff ff       	call   106640 <_ZN3usb8AllocMemEmjj>

    erst_ = AllocArray<EventRingSegmentTableEntry>(1, 64, 64 * 1024);
  10761b:	49 89 47 18          	mov    %rax,0x18(%r15)
    if (erst_ == nullptr) {
  10761f:	48 85 c0             	test   %rax,%rax
  107622:	0f 84 86 00 00 00    	je     1076ae <_ZN3usb4xhci9EventRing10InitializeEmPNS0_22InterrupterRegisterSetE+0x10e>
  107628:	45 31 f6             	xor    %r14d,%r14d
      FreeMem(buf_);
      return MAKE_ERROR(Error::kNoEnoughMemory);
    }
    memset(erst_, 0, 1 * sizeof(EventRingSegmentTableEntry));
  10762b:	ba 10 00 00 00       	mov    $0x10,%edx
  107630:	48 89 c7             	mov    %rax,%rdi
  107633:	31 f6                	xor    %esi,%esi
  107635:	e8 66 41 00 00       	call   10b7a0 <memset>

    erst_[0].bits.ring_segment_base_address = reinterpret_cast<uint64_t>(buf_);
  10763a:	49 8b 07             	mov    (%r15),%rax
  10763d:	49 8b 4f 18          	mov    0x18(%r15),%rcx
  107641:	48 89 01             	mov    %rax,(%rcx)
    erst_[0].bits.ring_segment_size = buf_size_;
  107644:	41 0f b7 47 08       	movzwl 0x8(%r15),%eax
  107649:	49 8b 4f 18          	mov    0x18(%r15),%rcx
  10764d:	66 89 41 08          	mov    %ax,0x8(%rcx)

    ERSTSZ_Bitmap erstsz = interrupter_->ERSTSZ.Read();
  107651:	49 8b 47 20          	mov    0x20(%r15),%rax
  107655:	b9 00 00 ff ff       	mov    $0xffff0000,%ecx
      bits.event_ring_segment_table_size = value;
  10765a:	23 48 08             	and    0x8(%rax),%ecx
  10765d:	83 c9 01             	or     $0x1,%ecx
    return tmp;
  }

  void Write(const T& value) {
    for (size_t i = 0; i < len_; ++i) {
      value_.data[i] = value.data[i];
  107660:	89 48 08             	mov    %ecx,0x8(%rax)
    erstsz.SetSize(1);
    interrupter_->ERSTSZ.Write(erstsz);

    WriteDequeuePointer(&buf_[0]);
  107663:	49 8b 07             	mov    (%r15),%rax

    return MAKE_ERROR(Error::kSuccess);
  }

  void EventRing::WriteDequeuePointer(TRB* p) {
    auto erdp = interrupter_->ERDP.Read();
  107666:	49 8b 4f 20          	mov    0x20(%r15),%rcx
      tmp.data[i] = value_.data[i];
  10766a:	48 8b 51 18          	mov    0x18(%rcx),%rdx
    }

    void SetPointer(uint64_t value) {
      bits.event_ring_dequeue_pointer = value >> 4;
  10766e:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  107672:	83 e2 0f             	and    $0xf,%edx
  107675:	48 09 c2             	or     %rax,%rdx
      value_.data[i] = value.data[i];
  107678:	48 89 51 18          	mov    %rdx,0x18(%rcx)
    ERSTBA_Bitmap erstba = interrupter_->ERSTBA.Read();
  10767c:	49 8b 47 20          	mov    0x20(%r15),%rax
      tmp.data[i] = value_.data[i];
  107680:	48 8b 48 10          	mov    0x10(%rax),%rcx
    erstba.SetPointer(reinterpret_cast<uint64_t>(erst_));
  107684:	49 8b 57 18          	mov    0x18(%r15),%rdx
      bits.event_ring_segment_table_base_address = value >> 6;
  107688:	48 83 e2 c0          	and    $0xffffffffffffffc0,%rdx
  10768c:	83 e1 3f             	and    $0x3f,%ecx
  10768f:	48 09 d1             	or     %rdx,%rcx
      value_.data[i] = value.data[i];
  107692:	48 89 48 10          	mov    %rcx,0x10(%rax)
  107696:	48 b8 00 00 00 00 5d 	movabs $0x5d00000000,%rax
  10769d:	00 00 00 
  1076a0:	eb 1e                	jmp    1076c0 <_ZN3usb4xhci9EventRing10InitializeEmPNS0_22InterrupterRegisterSetE+0x120>
  1076a2:	48 b8 00 00 00 00 45 	movabs $0x4500000000,%rax
  1076a9:	00 00 00 
  1076ac:	eb 12                	jmp    1076c0 <_ZN3usb4xhci9EventRing10InitializeEmPNS0_22InterrupterRegisterSetE+0x120>
      FreeMem(buf_);
  1076ae:	49 8b 3f             	mov    (%r15),%rdi
  1076b1:	e8 0a f0 ff ff       	call   1066c0 <_ZN3usb7FreeMemEPv>
  1076b6:	48 b8 00 00 00 00 4c 	movabs $0x4c00000000,%rax
  1076bd:	00 00 00 
  }
  1076c0:	49 09 c6             	or     %rax,%r14
  1076c3:	ba 69 0d 10 00       	mov    $0x100d69,%edx
  1076c8:	4c 89 f0             	mov    %r14,%rax
  1076cb:	48 83 c4 08          	add    $0x8,%rsp
  1076cf:	5b                   	pop    %rbx
  1076d0:	41 5e                	pop    %r14
  1076d2:	41 5f                	pop    %r15
  1076d4:	5d                   	pop    %rbp
  1076d5:	c3                   	ret    
  1076d6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1076dd:	00 00 00 

00000000001076e0 <_ZN3usb4xhci9EventRing19WriteDequeuePointerEPNS0_3TRBE>:
  void EventRing::WriteDequeuePointer(TRB* p) {
  1076e0:	55                   	push   %rbp
  1076e1:	48 89 e5             	mov    %rsp,%rbp
    auto erdp = interrupter_->ERDP.Read();
  1076e4:	48 8b 47 20          	mov    0x20(%rdi),%rax
      tmp.data[i] = value_.data[i];
  1076e8:	48 8b 48 18          	mov    0x18(%rax),%rcx
      bits.event_ring_dequeue_pointer = value >> 4;
  1076ec:	48 83 e6 f0          	and    $0xfffffffffffffff0,%rsi
  1076f0:	83 e1 0f             	and    $0xf,%ecx
  1076f3:	48 09 f1             	or     %rsi,%rcx
      value_.data[i] = value.data[i];
  1076f6:	48 89 48 18          	mov    %rcx,0x18(%rax)
    erdp.SetPointer(reinterpret_cast<uint64_t>(p));
    interrupter_->ERDP.Write(erdp);
  }
  1076fa:	5d                   	pop    %rbp
  1076fb:	c3                   	ret    
  1076fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000107700 <_ZN3usb4xhci9EventRing3PopEv>:

  void EventRing::Pop() {
  107700:	55                   	push   %rbp
  107701:	48 89 e5             	mov    %rsp,%rbp
      return reinterpret_cast<TRB*>(interrupter_->ERDP.Read().Pointer());
  107704:	48 8b 47 20          	mov    0x20(%rdi),%rax
      tmp.data[i] = value_.data[i];
  107708:	48 8b 48 18          	mov    0x18(%rax),%rcx
      return bits.event_ring_dequeue_pointer << 4;
  10770c:	48 83 e1 f0          	and    $0xfffffffffffffff0,%rcx
    auto p = ReadDequeuePointer() + 1;
  107710:	48 83 c1 10          	add    $0x10,%rcx

    TRB* segment_begin
      = reinterpret_cast<TRB*>(erst_[0].bits.ring_segment_base_address);
  107714:	48 8b 77 18          	mov    0x18(%rdi),%rsi
  107718:	48 8b 16             	mov    (%rsi),%rdx
    TRB* segment_end = segment_begin + erst_[0].bits.ring_segment_size;
  10771b:	0f b7 76 08          	movzwl 0x8(%rsi),%esi
  10771f:	48 c1 e6 04          	shl    $0x4,%rsi
  107723:	48 01 d6             	add    %rdx,%rsi

    if (p == segment_end) {
  107726:	48 39 f1             	cmp    %rsi,%rcx
  107729:	75 07                	jne    107732 <_ZN3usb4xhci9EventRing3PopEv+0x32>
      p = segment_begin;
      cycle_bit_ = !cycle_bit_;
  10772b:	80 77 10 01          	xorb   $0x1,0x10(%rdi)
  10772f:	48 89 d1             	mov    %rdx,%rcx
  107732:	48 8b 50 18          	mov    0x18(%rax),%rdx
      bits.event_ring_dequeue_pointer = value >> 4;
  107736:	48 83 e1 f0          	and    $0xfffffffffffffff0,%rcx
  10773a:	83 e2 0f             	and    $0xf,%edx
  10773d:	48 09 ca             	or     %rcx,%rdx
      value_.data[i] = value.data[i];
  107740:	48 89 50 18          	mov    %rdx,0x18(%rax)
    }

    WriteDequeuePointer(p);
  }
  107744:	5d                   	pop    %rbp
  107745:	c3                   	ret    
  107746:	cc                   	int3   
  107747:	cc                   	int3   
  107748:	cc                   	int3   
  107749:	cc                   	int3   
  10774a:	cc                   	int3   
  10774b:	cc                   	int3   
  10774c:	cc                   	int3   
  10774d:	cc                   	int3   
  10774e:	cc                   	int3   
  10774f:	cc                   	int3   

0000000000107750 <_ZN3usb4xhci10ControllerC1Em>:
      : mmio_base_{mmio_base},
        cap_{reinterpret_cast<CapabilityRegisters*>(mmio_base)},
        op_{reinterpret_cast<OperationalRegisters*>(
            mmio_base + cap_->CAPLENGTH.Read())},
        max_ports_{static_cast<uint8_t>(
            cap_->HCSPARAMS1.Read().bits.max_ports)} {
  107750:	55                   	push   %rbp
  107751:	48 89 e5             	mov    %rsp,%rbp
      : mmio_base_{mmio_base},
  107754:	48 89 37             	mov    %rsi,(%rdi)
        cap_{reinterpret_cast<CapabilityRegisters*>(mmio_base)},
  107757:	48 89 77 08          	mov    %rsi,0x8(%rdi)
      tmp.data[i] = value_.data[i];
  10775b:	0f b6 06             	movzbl (%rsi),%eax
            mmio_base + cap_->CAPLENGTH.Read())},
  10775e:	48 01 f0             	add    %rsi,%rax
        op_{reinterpret_cast<OperationalRegisters*>(
  107761:	48 89 47 10          	mov    %rax,0x10(%rdi)
  107765:	8b 46 04             	mov    0x4(%rsi),%eax
            cap_->HCSPARAMS1.Read().bits.max_ports)} {
  107768:	c1 e8 18             	shr    $0x18,%eax
        max_ports_{static_cast<uint8_t>(
  10776b:	88 47 18             	mov    %al,0x18(%rdi)
    TRB* buf_ = nullptr;
  10776e:	0f 57 c0             	xorps  %xmm0,%xmm0
  107771:	0f 11 47 38          	movups %xmm0,0x38(%rdi)
  }
  107775:	5d                   	pop    %rbp
  107776:	c3                   	ret    
  107777:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10777e:	00 00 

0000000000107780 <_ZN3usb4xhci10Controller10InitializeEv>:

  Error Controller::Initialize() {
  107780:	55                   	push   %rbp
  107781:	48 89 e5             	mov    %rsp,%rbp
  107784:	41 57                	push   %r15
  107786:	41 56                	push   %r14
  107788:	41 55                	push   %r13
  10778a:	41 54                	push   %r12
  10778c:	53                   	push   %rbx
  10778d:	48 83 ec 18          	sub    $0x18,%rsp
  107791:	49 89 ff             	mov    %rdi,%r15
  107794:	49 bd 00 00 00 00 ff 	movabs $0xffffffff00000000,%r13
  10779b:	ff ff ff 
    if (auto err = devmgr_.Initialize(kDeviceSize)) {
  10779e:	48 8d 5f 20          	lea    0x20(%rdi),%rbx
  1077a2:	be 08 00 00 00       	mov    $0x8,%esi
  1077a7:	48 89 df             	mov    %rbx,%rdi
  1077aa:	e8 91 28 00 00       	call   10a040 <_ZN3usb4xhci13DeviceManager10InitializeEm>
  1077af:	85 c0                	test   %eax,%eax
  1077b1:	0f 85 1d 02 00 00    	jne    1079d4 <_ZN3usb4xhci10Controller10InitializeEv+0x254>
  1077b7:	48 89 5d d0          	mov    %rbx,-0x30(%rbp)
      return err;
    }

    RequestHCOwnership(mmio_base_, cap_->HCCPARAMS1.Read());
  1077bb:	49 8b 37             	mov    (%r15),%rsi
  1077be:	49 8b 47 08          	mov    0x8(%r15),%rax
  1077c2:	8b 50 10             	mov    0x10(%rax),%edx
  1077c5:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
    ExtendedRegisterList extregs{ mmio_base, hccp };
  1077c9:	e8 62 2b 00 00       	call   10a330 <_ZN3usb4xhci20ExtendedRegisterListC1EmNS0_17HCCPARAMS1_BitmapE>
      ValueType* reg_;
    };

    ExtendedRegisterList(uint64_t mmio_base, HCCPARAMS1_Bitmap hccp);

    Iterator begin() const { return first_; }
  1077ce:	48 8b 5d c0          	mov    -0x40(%rbp),%rbx
  1077d2:	48 89 5d c8          	mov    %rbx,-0x38(%rbp)
      bool operator!=(Iterator lhs) const { return reg_ != lhs.reg_; }
  1077d6:	48 85 db             	test   %rbx,%rbx
template <class _InputIterator, class _Predicate>
inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
_InputIterator
find_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
{
    for (; __first != __last; ++__first)
  1077d9:	74 72                	je     10784d <_ZN3usb4xhci10Controller10InitializeEv+0xcd>
  1077db:	4c 8d 65 c8          	lea    -0x38(%rbp),%r12
  1077df:	90                   	nop
  1077e0:	8b 03                	mov    (%rbx),%eax
        [](auto& reg) { return reg.Read().bits.capability_id == 1; });
  1077e2:	3c 01                	cmp    $0x1,%al
        if (__pred(*__first))
  1077e4:	74 13                	je     1077f9 <_ZN3usb4xhci10Controller10InitializeEv+0x79>
    for (; __first != __last; ++__first)
  1077e6:	4c 89 e7             	mov    %r12,%rdi
  1077e9:	e8 12 2b 00 00       	call   10a300 <_ZN3usb4xhci20ExtendedRegisterList8IteratorppEv>
  1077ee:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
  1077f2:	48 85 db             	test   %rbx,%rbx
  1077f5:	75 e9                	jne    1077e0 <_ZN3usb4xhci10Controller10InitializeEv+0x60>
  1077f7:	eb 54                	jmp    10784d <_ZN3usb4xhci10Controller10InitializeEv+0xcd>
  1077f9:	44 8b 33             	mov    (%rbx),%r14d
    if (r.bits.hc_os_owned_semaphore) {
  1077fc:	41 f7 c6 00 00 00 01 	test   $0x1000000,%r14d
  107803:	75 48                	jne    10784d <_ZN3usb4xhci10Controller10InitializeEv+0xcd>
    r.bits.hc_os_owned_semaphore = 1;
  107805:	41 81 ce 00 00 00 01 	or     $0x1000000,%r14d
    Log(kDebug, "waiting until OS owns xHC...\n");
  10780c:	be 0f 0d 10 00       	mov    $0x100d0f,%esi
  107811:	bf 07 00 00 00       	mov    $0x7,%edi
  107816:	31 c0                	xor    %eax,%eax
  107818:	e8 03 eb ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
      value_.data[i] = value.data[i];
  10781d:	44 89 33             	mov    %r14d,(%rbx)
  107820:	b8 00 00 01 01       	mov    $0x1010000,%eax
  107825:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10782c:	00 00 00 
  10782f:	90                   	nop
  107830:	8b 0b                	mov    (%rbx),%ecx
    } while (r.bits.hc_bios_owned_semaphore ||
  107832:	21 c1                	and    %eax,%ecx
  107834:	81 f9 00 00 00 01    	cmp    $0x1000000,%ecx
  10783a:	75 f4                	jne    107830 <_ZN3usb4xhci10Controller10InitializeEv+0xb0>
    Log(kDebug, "OS has owned xHC\n");
  10783c:	be 01 10 10 00       	mov    $0x101001,%esi
  107841:	bf 07 00 00 00       	mov    $0x7,%edi
  107846:	31 c0                	xor    %eax,%eax
  107848:	e8 d3 ea ff ff       	call   106320 <_Z3Log8LogLevelPKcz>

    auto usbcmd = op_->USBCMD.Read();
  10784d:	49 8b 47 10          	mov    0x10(%r15),%rax
      tmp.data[i] = value_.data[i];
  107851:	8b 08                	mov    (%rax),%ecx
  107853:	8b 50 04             	mov    0x4(%rax),%edx
    usbcmd.bits.interrupter_enable = false;
    usbcmd.bits.host_system_error_enable = false;
    usbcmd.bits.enable_wrap_event = false;
    // Host controller must be halted before resetting it.
    if (!op_->USBSTS.Read().bits.host_controller_halted) {
  107856:	83 e2 01             	and    $0x1,%edx
  107859:	81 ca f2 fb ff ff    	or     $0xfffffbf2,%edx
  10785f:	21 ca                	and    %ecx,%edx
      value_.data[i] = value.data[i];
  107861:	89 10                	mov    %edx,(%rax)
  107863:	49 8b 47 10          	mov    0x10(%r15),%rax
  107867:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10786e:	00 00 
      usbcmd.bits.run_stop = false;  // stop
    }

    op_->USBCMD.Write(usbcmd);
    while (!op_->USBSTS.Read().bits.host_controller_halted);
  107870:	f7 40 04 01 00 00 00 	testl  $0x1,0x4(%rax)
  107877:	74 f7                	je     107870 <_ZN3usb4xhci10Controller10InitializeEv+0xf0>
  107879:	83 08 02             	orl    $0x2,(%rax)
  10787c:	49 8b 47 10          	mov    0x10(%r15),%rax

    // Reset controller
    usbcmd = op_->USBCMD.Read();
    usbcmd.bits.host_controller_reset = true;
    op_->USBCMD.Write(usbcmd);
    while (op_->USBCMD.Read().bits.host_controller_reset);
  107880:	f7 00 02 00 00 00    	testl  $0x2,(%rax)
  107886:	75 f8                	jne    107880 <_ZN3usb4xhci10Controller10InitializeEv+0x100>
  107888:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10788f:	00 
    while (op_->USBSTS.Read().bits.controller_not_ready);
  107890:	f7 40 04 00 08 00 00 	testl  $0x800,0x4(%rax)
  107897:	75 f7                	jne    107890 <_ZN3usb4xhci10Controller10InitializeEv+0x110>

    Log(kDebug, "MaxSlots: %u\n", cap_->HCSPARAMS1.Read().bits.max_device_slots);
  107899:	49 8b 47 08          	mov    0x8(%r15),%rax
      tmp.data[i] = value_.data[i];
  10789d:	8b 40 04             	mov    0x4(%rax),%eax
  1078a0:	0f b6 d0             	movzbl %al,%edx
  1078a3:	be d3 07 10 00       	mov    $0x1007d3,%esi
  1078a8:	bf 07 00 00 00       	mov    $0x7,%edi
  1078ad:	31 c0                	xor    %eax,%eax
  1078af:	e8 6c ea ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
    // Set "Max Slots Enabled" field in CONFIG.
    auto config = op_->CONFIG.Read();
  1078b4:	49 8b 47 10          	mov    0x10(%r15),%rax
  1078b8:	b9 00 ff ff ff       	mov    $0xffffff00,%ecx
    config.bits.max_device_slots_enabled = kDeviceSize;
  1078bd:	23 48 38             	and    0x38(%rax),%ecx
  1078c0:	83 c9 08             	or     $0x8,%ecx
      value_.data[i] = value.data[i];
  1078c3:	89 48 38             	mov    %ecx,0x38(%rax)
    op_->CONFIG.Write(config);

    auto hcsparams2 = cap_->HCSPARAMS2.Read();
  1078c6:	49 8b 47 08          	mov    0x8(%r15),%rax
      tmp.data[i] = value_.data[i];
  1078ca:	8b 58 08             	mov    0x8(%rax),%ebx
    const uint16_t max_scratchpad_buffers =
      hcsparams2.bits.max_scratchpad_buffers_low
  1078cd:	48 89 d8             	mov    %rbx,%rax
  1078d0:	48 c1 e8 1b          	shr    $0x1b,%rax
      | (hcsparams2.bits.max_scratchpad_buffers_high << 5);
  1078d4:	48 c1 eb 10          	shr    $0x10,%rbx
  1078d8:	81 e3 e0 03 00 00    	and    $0x3e0,%ebx
  1078de:	48 09 c3             	or     %rax,%rbx
    if (max_scratchpad_buffers > 0) {
  1078e1:	85 db                	test   %ebx,%ebx
  1078e3:	0f 84 7e 00 00 00    	je     107967 <_ZN3usb4xhci10Controller10InitializeEv+0x1e7>
  1078e9:	48 89 df             	mov    %rbx,%rdi
  1078ec:	48 c1 e7 03          	shl    $0x3,%rdi
  1078f0:	be 40 00 00 00       	mov    $0x40,%esi
  1078f5:	ba 00 10 00 00       	mov    $0x1000,%edx
  1078fa:	e8 41 ed ff ff       	call   106640 <_ZN3usb8AllocMemEmjj>
  1078ff:	49 89 c4             	mov    %rax,%r12
      auto scratchpad_buf_arr = AllocArray<void*>(max_scratchpad_buffers, 64, 4096);
      for (int i = 0; i < max_scratchpad_buffers; ++i) {
  107902:	41 89 de             	mov    %ebx,%r14d
  107905:	31 db                	xor    %ebx,%ebx
  107907:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10790e:	00 00 
        scratchpad_buf_arr[i] = AllocMem(4096, 4096, 4096);
  107910:	bf 00 10 00 00       	mov    $0x1000,%edi
  107915:	be 00 10 00 00       	mov    $0x1000,%esi
  10791a:	ba 00 10 00 00       	mov    $0x1000,%edx
  10791f:	e8 1c ed ff ff       	call   106640 <_ZN3usb8AllocMemEmjj>
  107924:	49 89 04 dc          	mov    %rax,(%r12,%rbx,8)
        Log(kDebug, "scratchpad buffer array %d = %p\n",
  107928:	be 4d 02 10 00       	mov    $0x10024d,%esi
  10792d:	bf 07 00 00 00       	mov    $0x7,%edi
  107932:	89 da                	mov    %ebx,%edx
  107934:	48 89 c1             	mov    %rax,%rcx
  107937:	31 c0                	xor    %eax,%eax
  107939:	e8 e2 e9 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
      for (int i = 0; i < max_scratchpad_buffers; ++i) {
  10793e:	48 83 c3 01          	add    $0x1,%rbx
  107942:	49 39 de             	cmp    %rbx,%r14
  107945:	75 c9                	jne    107910 <_ZN3usb4xhci10Controller10InitializeEv+0x190>
  107947:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
            i, scratchpad_buf_arr[i]);
      }
      devmgr_.DeviceContexts()[0] = reinterpret_cast<DeviceContext*>(scratchpad_buf_arr);
  10794b:	e8 b0 27 00 00       	call   10a100 <_ZNK3usb4xhci13DeviceManager14DeviceContextsEv>
  107950:	4c 89 20             	mov    %r12,(%rax)
      Log(kInfo, "wrote scratchpad buffer array %p to dev ctx array 0\n",
  107953:	be 8c 03 10 00       	mov    $0x10038c,%esi
  107958:	bf 06 00 00 00       	mov    $0x6,%edi
  10795d:	4c 89 e2             	mov    %r12,%rdx
  107960:	31 c0                	xor    %eax,%eax
  107962:	e8 b9 e9 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
  107967:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
          scratchpad_buf_arr);
    }

    DCBAAP_Bitmap dcbaap{};
    dcbaap.SetPointer(reinterpret_cast<uint64_t>(devmgr_.DeviceContexts()));
  10796b:	e8 90 27 00 00       	call   10a100 <_ZNK3usb4xhci13DeviceManager14DeviceContextsEv>
      bits.device_context_base_address_array_pointer = value >> 6;
  107970:	83 e0 c0             	and    $0xffffffc0,%eax
    op_->DCBAAP.Write(dcbaap);
  107973:	49 8b 4f 10          	mov    0x10(%r15),%rcx
      value_.data[i] = value.data[i];
  107977:	48 89 41 30          	mov    %rax,0x30(%rcx)
      return {mmio_base_ + cap_->RTSOFF.Read().Offset() + 0x20u, 1024};
  10797b:	4d 8b 37             	mov    (%r15),%r14
  10797e:	49 8b 47 08          	mov    0x8(%r15),%rax
  107982:	8b 58 18             	mov    0x18(%rax),%ebx

    auto primary_interrupter = &InterrupterRegisterSets()[0];
    if (auto err = cr_.Initialize(32)) {
  107985:	49 8d 7f 38          	lea    0x38(%r15),%rdi
  107989:	be 20 00 00 00       	mov    $0x20,%esi
  10798e:	e8 9d fa ff ff       	call   107430 <_ZN3usb4xhci4Ring10InitializeEm>
  107993:	85 c0                	test   %eax,%eax
  107995:	75 3d                	jne    1079d4 <_ZN3usb4xhci10Controller10InitializeEv+0x254>
  107997:	83 e3 e0             	and    $0xffffffe0,%ebx
  10799a:	4c 01 f3             	add    %r14,%rbx
  10799d:	48 83 c3 20          	add    $0x20,%rbx
        return err;
    }
    if (auto err = RegisterCommandRing(&cr_, &op_->CRCR)) {
  1079a1:	49 8b 47 10          	mov    0x10(%r15),%rax
      tmp.data[i] = value_.data[i];
  1079a5:	48 8b 48 18          	mov    0x18(%rax),%rcx
    value.bits.command_stop = false;
  1079a9:	83 e1 38             	and    $0x38,%ecx
    TRB* Buffer() const { return buf_; }
  1079ac:	49 8b 57 38          	mov    0x38(%r15),%rdx
      bits.command_ring_pointer = value >> 6;
  1079b0:	48 83 e2 c0          	and    $0xffffffffffffffc0,%rdx
  1079b4:	48 01 d1             	add    %rdx,%rcx
  1079b7:	48 83 c1 01          	add    $0x1,%rcx
      value_.data[i] = value.data[i];
  1079bb:	48 89 48 18          	mov    %rcx,0x18(%rax)
        return err; }
    if (auto err = er_.Initialize(32, primary_interrupter)) {
  1079bf:	49 8d 7f 58          	lea    0x58(%r15),%rdi
  1079c3:	be 20 00 00 00       	mov    $0x20,%esi
  1079c8:	48 89 da             	mov    %rbx,%rdx
  1079cb:	e8 d0 fb ff ff       	call   1075a0 <_ZN3usb4xhci9EventRing10InitializeEmPNS0_22InterrupterRegisterSetE>
  1079d0:	85 c0                	test   %eax,%eax
  1079d2:	74 17                	je     1079eb <_ZN3usb4xhci10Controller10InitializeEv+0x26b>
  1079d4:	49 21 c5             	and    %rax,%r13
    usbcmd = op_->USBCMD.Read();
    usbcmd.bits.interrupter_enable = true;
    op_->USBCMD.Write(usbcmd);

    return MAKE_ERROR(Error::kSuccess);
  }
  1079d7:	89 c0                	mov    %eax,%eax
  1079d9:	4c 09 e8             	or     %r13,%rax
  1079dc:	48 83 c4 18          	add    $0x18,%rsp
  1079e0:	5b                   	pop    %rbx
  1079e1:	41 5c                	pop    %r12
  1079e3:	41 5d                	pop    %r13
  1079e5:	41 5e                	pop    %r14
  1079e7:	41 5f                	pop    %r15
  1079e9:	5d                   	pop    %rbp
  1079ea:	c3                   	ret    
  1079eb:	83 0b 03             	orl    $0x3,(%rbx)
    usbcmd = op_->USBCMD.Read();
  1079ee:	49 8b 47 10          	mov    0x10(%r15),%rax
  1079f2:	83 08 04             	orl    $0x4,(%rax)
  1079f5:	ba 4b 09 10 00       	mov    $0x10094b,%edx
  1079fa:	49 bd 00 00 00 00 8e 	movabs $0x18e00000000,%r13
  107a01:	01 00 00 
  107a04:	31 c0                	xor    %eax,%eax
  107a06:	eb cf                	jmp    1079d7 <_ZN3usb4xhci10Controller10InitializeEv+0x257>
  107a08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  107a0f:	00 

0000000000107a10 <_ZN3usb4xhci10Controller3RunEv>:

  Error Controller::Run() {
  107a10:	55                   	push   %rbp
  107a11:	48 89 e5             	mov    %rsp,%rbp
    // Run the controller
    auto usbcmd = op_->USBCMD.Read();
  107a14:	48 8b 47 10          	mov    0x10(%rdi),%rax
  107a18:	83 08 01             	orl    $0x1,(%rax)
    usbcmd.bits.run_stop = true;
    op_->USBCMD.Write(usbcmd);
    op_->USBCMD.Read();
  107a1b:	48 8b 47 10          	mov    0x10(%rdi),%rax
      tmp.data[i] = value_.data[i];
  107a1f:	8b 08                	mov    (%rax),%ecx
  107a21:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  107a28:	00 00 00 
  107a2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  107a30:	8b 48 04             	mov    0x4(%rax),%ecx

    while (op_->USBSTS.Read().bits.host_controller_halted);
  107a33:	f6 c1 01             	test   $0x1,%cl
  107a36:	75 f8                	jne    107a30 <_ZN3usb4xhci10Controller3RunEv+0x20>
  107a38:	48 b8 00 00 00 00 9a 	movabs $0x19a00000000,%rax
  107a3f:	01 00 00 

    return MAKE_ERROR(Error::kSuccess);
  }
  107a42:	ba 4b 09 10 00       	mov    $0x10094b,%edx
  107a47:	5d                   	pop    %rbp
  107a48:	c3                   	ret    
  107a49:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000107a50 <_ZN3usb4xhci10Controller18DoorbellRegisterAtEh>:

  DoorbellRegister* Controller::DoorbellRegisterAt(uint8_t index) {
  107a50:	55                   	push   %rbp
  107a51:	48 89 e5             	mov    %rsp,%rbp
    }

    DoorbellRegisterArray DoorbellRegisters() const {
      return {mmio_base_ + cap_->DBOFF.Read().Offset(), 256};
  107a54:	48 8b 47 08          	mov    0x8(%rdi),%rax
  107a58:	8b 40 14             	mov    0x14(%rax),%eax
    uint32_t Offset() const { return bits.doorbell_array_offset << 2; }
  107a5b:	83 e0 fc             	and    $0xfffffffc,%eax
  107a5e:	48 03 07             	add    (%rdi),%rax
    return &DoorbellRegisters()[index];
  107a61:	89 f1                	mov    %esi,%ecx
  Iterator begin() { return array_; }
  Iterator end() { return array_ + size_; }
  ConstIterator cbegin() const { return array_; }
  ConstIterator cend() const { return array_ + size_; }

  ValueType& operator [](size_t index) { return array_[index]; }
  107a63:	48 8d 04 88          	lea    (%rax,%rcx,4),%rax
  107a67:	5d                   	pop    %rbp
  107a68:	c3                   	ret    
  107a69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000107a70 <_ZN3usb4xhci13ConfigurePortERNS0_10ControllerERNS0_4PortE>:
  }

  Error ConfigurePort(Controller& xhc, Port& port) {
  107a70:	55                   	push   %rbp
  107a71:	48 89 e5             	mov    %rsp,%rbp
  107a74:	53                   	push   %rbx
  107a75:	50                   	push   %rax
  107a76:	48 89 f3             	mov    %rsi,%rbx
    if (port_config_phase[port.Number()] == ConfigPhase::kNotConnected) {
  107a79:	48 89 f7             	mov    %rsi,%rdi
  107a7c:	e8 2f 0d 00 00       	call   1087b0 <_ZNK3usb4xhci4Port6NumberEv>
  107a81:	0f b6 c0             	movzbl %al,%eax
  107a84:	83 3c 85 00 b0 27 00 	cmpl   $0x0,0x27b000(,%rax,4)
  107a8b:	00 
  107a8c:	74 13                	je     107aa1 <_ZN3usb4xhci13ConfigurePortERNS0_10ControllerERNS0_4PortE+0x31>
  107a8e:	48 b8 00 00 00 00 a5 	movabs $0x1a500000000,%rax
  107a95:	01 00 00 
  107a98:	ba 4b 09 10 00       	mov    $0x10094b,%edx
  107a9d:	31 c9                	xor    %ecx,%ecx
  107a9f:	eb 1a                	jmp    107abb <_ZN3usb4xhci13ConfigurePortERNS0_10ControllerERNS0_4PortE+0x4b>
      return ResetPort(xhc, port);
  107aa1:	48 89 df             	mov    %rbx,%rdi
  107aa4:	e8 27 00 00 00       	call   107ad0 <_ZN12_GLOBAL__N_19ResetPortERN3usb4xhci10ControllerERNS1_4PortE>
  107aa9:	48 89 c1             	mov    %rax,%rcx
  107aac:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  107ab3:	ff ff ff 
    }
    return MAKE_ERROR(Error::kSuccess);
  }
  107ab6:	48 21 c8             	and    %rcx,%rax
      return ResetPort(xhc, port);
  107ab9:	89 c9                	mov    %ecx,%ecx
  }
  107abb:	48 09 c8             	or     %rcx,%rax
  107abe:	48 83 c4 08          	add    $0x8,%rsp
  107ac2:	5b                   	pop    %rbx
  107ac3:	5d                   	pop    %rbp
  107ac4:	c3                   	ret    
  107ac5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  107acc:	00 00 00 
  107acf:	90                   	nop

0000000000107ad0 <_ZN12_GLOBAL__N_19ResetPortERN3usb4xhci10ControllerERNS1_4PortE>:
  Error ResetPort(Controller& xhc, Port& port) {
  107ad0:	55                   	push   %rbp
  107ad1:	48 89 e5             	mov    %rsp,%rbp
  107ad4:	41 57                	push   %r15
  107ad6:	41 56                	push   %r14
  107ad8:	53                   	push   %rbx
  107ad9:	50                   	push   %rax
  107ada:	49 89 fe             	mov    %rdi,%r14
    const bool is_connected = port.IsConnected();
  107add:	e8 de 0c 00 00       	call   1087c0 <_ZNK3usb4xhci4Port11IsConnectedEv>
  107ae2:	89 c3                	mov    %eax,%ebx
        is_connected ? "true" : "false");
  107ae4:	b8 2f 08 10 00       	mov    $0x10082f,%eax
  107ae9:	ba 31 05 10 00       	mov    $0x100531,%edx
  107aee:	84 db                	test   %bl,%bl
  107af0:	48 0f 45 d0          	cmovne %rax,%rdx
  107af4:	45 31 ff             	xor    %r15d,%r15d
    Log(kDebug, "ResetPort: port.IsConnected() = %s\n",
  107af7:	be aa 0d 10 00       	mov    $0x100daa,%esi
  107afc:	bf 07 00 00 00       	mov    $0x7,%edi
  107b01:	31 c0                	xor    %eax,%eax
  107b03:	e8 18 e8 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
        is_connected ? "true" : "false");
  107b08:	84 db                	test   %bl,%bl
    if (!is_connected) {
  107b0a:	74 2c                	je     107b38 <_ZN12_GLOBAL__N_19ResetPortERN3usb4xhci10ControllerERNS1_4PortE+0x68>
    if (addressing_port != 0) {
  107b0c:	8a 1d ee 38 17 00    	mov    0x1738ee(%rip),%bl        # 27b400 <_ZN12_GLOBAL__N_115addressing_portE>
  107b12:	4c 89 f7             	mov    %r14,%rdi
  107b15:	e8 96 0c 00 00       	call   1087b0 <_ZNK3usb4xhci4Port6NumberEv>
  107b1a:	0f b6 c0             	movzbl %al,%eax
  107b1d:	84 db                	test   %bl,%bl
  107b1f:	74 23                	je     107b44 <_ZN12_GLOBAL__N_19ResetPortERN3usb4xhci10ControllerERNS1_4PortE+0x74>
  107b21:	48 bb 00 00 00 00 6e 	movabs $0x6e00000000,%rbx
  107b28:	00 00 00 
      port_config_phase[port.Number()] = ConfigPhase::kWaitingAddressed;
  107b2b:	c7 04 85 00 b0 27 00 	movl   $0x1,0x27b000(,%rax,4)
  107b32:	01 00 00 00 
  107b36:	eb 4e                	jmp    107b86 <_ZN12_GLOBAL__N_19ResetPortERN3usb4xhci10ControllerERNS1_4PortE+0xb6>
  107b38:	48 bb 00 00 00 00 5f 	movabs $0x5f00000000,%rbx
  107b3f:	00 00 00 
  107b42:	eb 57                	jmp    107b9b <_ZN12_GLOBAL__N_19ResetPortERN3usb4xhci10ControllerERNS1_4PortE+0xcb>
      const auto port_phase = port_config_phase[port.Number()];
  107b44:	8b 04 85 00 b0 27 00 	mov    0x27b000(,%rax,4),%eax
      if (port_phase != ConfigPhase::kNotConnected &&
  107b4b:	83 f8 01             	cmp    $0x1,%eax
  107b4e:	77 3b                	ja     107b8b <_ZN12_GLOBAL__N_19ResetPortERN3usb4xhci10ControllerERNS1_4PortE+0xbb>
  107b50:	48 bb 00 00 00 00 6e 	movabs $0x6e00000000,%rbx
  107b57:	00 00 00 
      addressing_port = port.Number();
  107b5a:	4c 89 f7             	mov    %r14,%rdi
  107b5d:	e8 4e 0c 00 00       	call   1087b0 <_ZNK3usb4xhci4Port6NumberEv>
  107b62:	88 05 98 38 17 00    	mov    %al,0x173898(%rip)        # 27b400 <_ZN12_GLOBAL__N_115addressing_portE>
      port_config_phase[port.Number()] = ConfigPhase::kResettingPort;
  107b68:	4c 89 f7             	mov    %r14,%rdi
  107b6b:	e8 40 0c 00 00       	call   1087b0 <_ZNK3usb4xhci4Port6NumberEv>
  107b70:	0f b6 c0             	movzbl %al,%eax
  107b73:	c7 04 85 00 b0 27 00 	movl   $0x2,0x27b000(,%rax,4)
  107b7a:	02 00 00 00 
      port.Reset();
  107b7e:	4c 89 f7             	mov    %r14,%rdi
  107b81:	e8 ca 0c 00 00       	call   108850 <_ZN3usb4xhci4Port5ResetEv>
  107b86:	45 31 ff             	xor    %r15d,%r15d
  107b89:	eb 10                	jmp    107b9b <_ZN12_GLOBAL__N_19ResetPortERN3usb4xhci10ControllerERNS1_4PortE+0xcb>
  107b8b:	41 bf 11 00 00 00    	mov    $0x11,%r15d
  107b91:	48 bb 00 00 00 00 68 	movabs $0x6800000000,%rbx
  107b98:	00 00 00 
  }
  107b9b:	4c 09 fb             	or     %r15,%rbx
  107b9e:	ba 4b 09 10 00       	mov    $0x10094b,%edx
  107ba3:	48 89 d8             	mov    %rbx,%rax
  107ba6:	48 83 c4 08          	add    $0x8,%rsp
  107baa:	5b                   	pop    %rbx
  107bab:	41 5e                	pop    %r14
  107bad:	41 5f                	pop    %r15
  107baf:	5d                   	pop    %rbp
  107bb0:	c3                   	ret    
  107bb1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  107bb8:	00 00 00 
  107bbb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000107bc0 <_ZN3usb4xhci18ConfigureEndpointsERNS0_10ControllerERNS0_6DeviceE>:

  Error ConfigureEndpoints(Controller& xhc, Device& dev) {
  107bc0:	55                   	push   %rbp
  107bc1:	48 89 e5             	mov    %rsp,%rbp
  107bc4:	41 57                	push   %r15
  107bc6:	41 56                	push   %r14
  107bc8:	41 55                	push   %r13
  107bca:	41 54                	push   %r12
  107bcc:	53                   	push   %rbx
  107bcd:	48 83 ec 38          	sub    $0x38,%rsp
  107bd1:	48 89 f3             	mov    %rsi,%rbx
  107bd4:	49 89 fe             	mov    %rdi,%r14
    virtual Error InterruptOut(EndpointID ep_id, void* buf, int len);

    Error StartInitialize();
    bool IsInitialized() { return is_initialized_; }
    EndpointConfig* EndpointConfigs() { return ep_configs_.data(); }
    int NumEndpointConfigs() { return num_ep_configs_; }
  107bd7:	8b 86 90 02 00 00    	mov    0x290(%rsi),%eax
  107bdd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    Device(uint8_t slot_id, DoorbellRegister* dbreg);

    Error Initialize();

    DeviceContext* DeviceContext() { return &ctx_; }
    InputContext* InputContext() { return &input_ctx_; }
  107be1:	4c 8d be 00 07 00 00 	lea    0x700(%rsi),%r15
    const auto configs = dev.EndpointConfigs();
    const auto len = dev.NumEndpointConfigs();

    memset(&dev.InputContext()->input_control_context, 0, sizeof(InputControlContext));
  107be8:	ba 20 00 00 00       	mov    $0x20,%edx
  107bed:	4c 89 ff             	mov    %r15,%rdi
  107bf0:	31 f6                	xor    %esi,%esi
  107bf2:	e8 a9 3b 00 00       	call   10b7a0 <memset>
    memcpy(&dev.InputContext()->slot_context,
  107bf7:	48 8d bb 20 07 00 00 	lea    0x720(%rbx),%rdi
    DeviceContext* DeviceContext() { return &ctx_; }
  107bfe:	48 8d b3 00 03 00 00 	lea    0x300(%rbx),%rsi
  107c05:	ba 20 00 00 00       	mov    $0x20,%edx
  107c0a:	e8 f1 34 00 00       	call   10b100 <memcpy>
    /** @brief Enable the slot context.
     *
     * @return Pointer to the slot context enabled.
     */
    SlotContext* EnableSlotContext() {
      input_control_context.add_context_flags |= 1;
  107c0f:	80 8b 04 07 00 00 01 	orb    $0x1,0x704(%rbx)
           &dev.DeviceContext()->slot_context, sizeof(SlotContext));

    auto slot_ctx = dev.InputContext()->EnableSlotContext();
    slot_ctx->bits.context_entries = 31;
  107c16:	80 8b 23 07 00 00 f8 	orb    $0xf8,0x723(%rbx)
    const auto port_id{dev.DeviceContext()->slot_context.bits.root_hub_port_num};
  107c1d:	48 8b 83 00 03 00 00 	mov    0x300(%rbx),%rax
  107c24:	48 8b 8b 08 03 00 00 	mov    0x308(%rbx),%rcx
  107c2b:	48 0f a4 c1 10       	shld   $0x10,%rax,%rcx
  107c30:	48 c1 e8 30          	shr    $0x30,%rax
  107c34:	44 0f b6 e1          	movzbl %cl,%r12d
      return {reinterpret_cast<uintptr_t>(op_) + 0x400u, max_ports_};
  107c38:	49 8b 4e 10          	mov    0x10(%r14),%rcx
      return Port{port_num, PortRegisterSets()[port_num - 1]};
  107c3c:	4c 89 e2             	mov    %r12,%rdx
  107c3f:	48 c1 e2 04          	shl    $0x4,%rdx
  107c43:	48 01 d1             	add    %rdx,%rcx
  107c46:	48 81 c1 f0 03 00 00 	add    $0x3f0,%rcx
    const int port_speed{xhc.PortAt(port_id).Speed()};
  107c4d:	88 45 c0             	mov    %al,-0x40(%rbp)
  107c50:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  107c54:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
  107c58:	e8 d3 0b 00 00       	call   108830 <_ZNK3usb4xhci4Port5SpeedEv>
  107c5d:	89 c1                	mov    %eax,%ecx
  107c5f:	48 ba 00 00 00 00 b5 	movabs $0x1b500000000,%rdx
  107c66:	01 00 00 
  107c69:	b8 12 00 00 00       	mov    $0x12,%eax
    if (port_speed == 0 || port_speed > kSuperSpeedPlus) {
  107c6e:	85 c9                	test   %ecx,%ecx
  107c70:	0f 84 5a 02 00 00    	je     107ed0 <_ZN3usb4xhci18ConfigureEndpointsERNS0_10ControllerERNS0_6DeviceE+0x310>
  107c76:	83 f9 05             	cmp    $0x5,%ecx
  107c79:	0f 8f 51 02 00 00    	jg     107ed0 <_ZN3usb4xhci18ConfigureEndpointsERNS0_10ControllerERNS0_6DeviceE+0x310>
  107c7f:	4c 89 65 b8          	mov    %r12,-0x48(%rbp)
  107c83:	4c 89 7d b0          	mov    %r15,-0x50(%rbp)
  107c87:	4c 89 75 a8          	mov    %r14,-0x58(%rbp)
      return MAKE_ERROR(Error::kUnknownXHCISpeedID);
    }

    auto convert_interval{
      (port_speed == kFullSpeed || port_speed == kLowSpeed)
  107c8b:	83 c1 ff             	add    $0xffffffff,%ecx
  107c8e:	83 f9 02             	cmp    $0x2,%ecx
  107c91:	b8 70 87 10 00       	mov    $0x108770,%eax
  107c96:	41 be a0 87 10 00    	mov    $0x1087a0,%r14d
  107c9c:	4c 0f 42 f0          	cmovb  %rax,%r14
      }
      : [](EndpointType type, int interval) { // for HS, SS, SSP
        return interval - 1;
      }};

    for (int i = 0; i < len; ++i) {
  107ca0:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
  107ca4:	0f 8e c3 01 00 00    	jle    107e6d <_ZN3usb4xhci18ConfigureEndpointsERNS0_10ControllerERNS0_6DeviceE+0x2ad>
  107caa:	48 c1 65 d0 04       	shlq   $0x4,-0x30(%rbp)
  107caf:	45 31 ff             	xor    %r15d,%r15d
  107cb2:	e9 ed 00 00 00       	jmp    107da4 <_ZN3usb4xhci18ConfigureEndpointsERNS0_10ControllerERNS0_6DeviceE+0x1e4>
  107cb7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  107cbe:	00 00 
    bool IsIn() const { return addr_ & 1; }
  107cc0:	41 f6 c4 01          	test   $0x1,%r12b
        break;
      case EndpointType::kBulk:
        ep_ctx->bits.ep_type = configs[i].ep_id.IsIn() ? 6 : 2;
        break;
      case EndpointType::kInterrupt:
        ep_ctx->bits.ep_type = configs[i].ep_id.IsIn() ? 7 : 3;
  107cc4:	48 be 00 00 00 00 38 	movabs $0x3800000000,%rsi
  107ccb:	00 00 00 
  107cce:	48 b8 00 00 00 00 18 	movabs $0x1800000000,%rax
  107cd5:	00 00 00 
  107cd8:	48 0f 44 f0          	cmove  %rax,%rsi
  107cdc:	49 8b 45 08          	mov    0x8(%r13),%rax
  107ce0:	41 8b 4d 10          	mov    0x10(%r13),%ecx
  107ce4:	49 8b 55 00          	mov    0x0(%r13),%rdx
  107ce8:	48 bf ff ff ff ff c7 	movabs $0xffffffc7ffffffff,%rdi
  107cef:	ff ff ff 
  107cf2:	48 21 fa             	and    %rdi,%rdx
  107cf5:	48 09 f2             	or     %rsi,%rdx
  107cf8:	49 89 55 00          	mov    %rdx,0x0(%r13)
        break;
      }
      ep_ctx->bits.max_packet_size = configs[i].max_packet_size;
  107cfc:	48 be ff ff ff ff ff 	movabs $0xffffffffffff,%rsi
  107d03:	ff 00 00 
  107d06:	48 21 f2             	and    %rsi,%rdx
  107d09:	42 0f b7 b4 3b 98 01 	movzwl 0x198(%rbx,%r15,1),%esi
  107d10:	00 00 
  107d12:	48 c1 e6 30          	shl    $0x30,%rsi
  107d16:	48 09 d6             	or     %rdx,%rsi
  107d19:	49 89 45 08          	mov    %rax,0x8(%r13)
  107d1d:	41 89 4d 10          	mov    %ecx,0x10(%r13)
  107d21:	49 89 75 00          	mov    %rsi,0x0(%r13)
      ep_ctx->bits.interval = convert_interval(configs[i].ep_type, configs[i].interval);
  107d25:	42 8b bc 3b 94 01 00 	mov    0x194(%rbx,%r15,1),%edi
  107d2c:	00 
  107d2d:	42 8b b4 3b 9c 01 00 	mov    0x19c(%rbx,%r15,1),%esi
  107d34:	00 
  107d35:	41 ff d6             	call   *%r14
  107d38:	41 0f b7 4d 12       	movzwl 0x12(%r13),%ecx
  107d3d:	c1 e1 10             	shl    $0x10,%ecx
      ep_ctx->bits.average_trb_length = 1;
  107d40:	83 c9 01             	or     $0x1,%ecx
  107d43:	41 88 45 02          	mov    %al,0x2(%r13)
  107d47:	41 89 4d 10          	mov    %ecx,0x10(%r13)

      auto tr = dev.AllocTransferRing(ep_dci, 32);
  107d4b:	ba 20 00 00 00       	mov    $0x20,%edx
  107d50:	48 89 df             	mov    %rbx,%rdi
  107d53:	44 89 e6             	mov    %r12d,%esi
  107d56:	e8 05 0f 00 00       	call   108c60 <_ZN3usb4xhci6Device17AllocTransferRingENS0_18DeviceContextIndexEm>
  107d5b:	48 8b 00             	mov    (%rax),%rax
      bits.tr_dequeue_pointer = reinterpret_cast<uint64_t>(buffer) >> 4;
  107d5e:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  107d62:	49 8b 4d 08          	mov    0x8(%r13),%rcx
  107d66:	49 8b 55 00          	mov    0x0(%r13),%rdx
  107d6a:	48 be ff 80 ff ff f9 	movabs $0xfffffff9ffff80ff,%rsi
  107d71:	ff ff ff 
  107d74:	48 21 f2             	and    %rsi,%rdx
      ep_ctx->SetTransferRingBuffer(tr->Buffer());

      ep_ctx->bits.dequeue_cycle_state = 1;
      ep_ctx->bits.max_primary_streams = 0;
      ep_ctx->bits.mult = 0;
      ep_ctx->bits.error_count = 3;
  107d77:	48 be 00 00 00 00 06 	movabs $0x600000000,%rsi
  107d7e:	00 00 00 
  107d81:	48 09 f2             	or     %rsi,%rdx
  107d84:	83 e1 0e             	and    $0xe,%ecx
  107d87:	48 01 c8             	add    %rcx,%rax
  107d8a:	48 83 c0 01          	add    $0x1,%rax
  107d8e:	49 89 55 00          	mov    %rdx,0x0(%r13)
  107d92:	49 89 45 08          	mov    %rax,0x8(%r13)
    for (int i = 0; i < len; ++i) {
  107d96:	49 83 c7 10          	add    $0x10,%r15
  107d9a:	4c 39 7d d0          	cmp    %r15,-0x30(%rbp)
  107d9e:	0f 84 c9 00 00 00    	je     107e6d <_ZN3usb4xhci18ConfigureEndpointsERNS0_10ControllerERNS0_6DeviceE+0x2ad>
    constexpr EndpointID(const EndpointID& ep_id) : addr_{ep_id.addr_} {}
  107da4:	4e 63 a4 3b 90 01 00 	movslq 0x190(%rbx,%r15,1),%r12
  107dab:	00 
     *
     * @param dci Device Context Index (1 .. 31)
     * @return Pointer to the endpoint context enabled.
     */
    EndpointContext* EnableEndpoint(DeviceContextIndex dci) {
      input_control_context.add_context_flags |= 1u << dci.value;
  107dac:	b8 01 00 00 00       	mov    $0x1,%eax
  107db1:	44 89 e1             	mov    %r12d,%ecx
  107db4:	d3 e0                	shl    %cl,%eax
  107db6:	09 83 04 07 00 00    	or     %eax,0x704(%rbx)
      return &ep_contexts[dci.value - 1];
  107dbc:	4c 89 e0             	mov    %r12,%rax
  107dbf:	48 c1 e0 05          	shl    $0x5,%rax
  107dc3:	4c 8d 2c 18          	lea    (%rax,%rbx,1),%r13
  107dc7:	49 81 c5 20 07 00 00 	add    $0x720,%r13
      switch (configs[i].ep_type) {
  107dce:	42 8b 84 3b 94 01 00 	mov    0x194(%rbx,%r15,1),%eax
  107dd5:	00 
  107dd6:	48 83 f8 03          	cmp    $0x3,%rax
  107dda:	77 34                	ja     107e10 <_ZN3usb4xhci18ConfigureEndpointsERNS0_10ControllerERNS0_6DeviceE+0x250>
  107ddc:	ff 24 c5 e8 16 10 00 	jmp    *0x1016e8(,%rax,8)
        ep_ctx->bits.ep_type = 4;
  107de3:	49 8b 45 08          	mov    0x8(%r13),%rax
  107de7:	41 8b 4d 10          	mov    0x10(%r13),%ecx
  107deb:	49 8b 55 00          	mov    0x0(%r13),%rdx
  107def:	48 be ff ff ff ff c7 	movabs $0xffffffc7ffffffff,%rsi
  107df6:	ff ff ff 
  107df9:	48 21 f2             	and    %rsi,%rdx
  107dfc:	48 be 00 00 00 00 20 	movabs $0x2000000000,%rsi
  107e03:	00 00 00 
  107e06:	e9 ea fe ff ff       	jmp    107cf5 <_ZN3usb4xhci18ConfigureEndpointsERNS0_10ControllerERNS0_6DeviceE+0x135>
  107e0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      ep_ctx->bits.max_packet_size = configs[i].max_packet_size;
  107e10:	49 8b 55 00          	mov    0x0(%r13),%rdx
  107e14:	49 8b 45 08          	mov    0x8(%r13),%rax
  107e18:	41 8b 4d 10          	mov    0x10(%r13),%ecx
  107e1c:	e9 db fe ff ff       	jmp    107cfc <_ZN3usb4xhci18ConfigureEndpointsERNS0_10ControllerERNS0_6DeviceE+0x13c>
  107e21:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  107e28:	00 00 00 
  107e2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    bool IsIn() const { return addr_ & 1; }
  107e30:	41 f6 c4 01          	test   $0x1,%r12b
        ep_ctx->bits.ep_type = configs[i].ep_id.IsIn() ? 5 : 1;
  107e34:	48 be 00 00 00 00 28 	movabs $0x2800000000,%rsi
  107e3b:	00 00 00 
  107e3e:	48 b8 00 00 00 00 08 	movabs $0x800000000,%rax
  107e45:	00 00 00 
  107e48:	e9 8b fe ff ff       	jmp    107cd8 <_ZN3usb4xhci18ConfigureEndpointsERNS0_10ControllerERNS0_6DeviceE+0x118>
  107e4d:	0f 1f 00             	nopl   (%rax)
  107e50:	41 f6 c4 01          	test   $0x1,%r12b
        ep_ctx->bits.ep_type = configs[i].ep_id.IsIn() ? 6 : 2;
  107e54:	48 be 00 00 00 00 30 	movabs $0x3000000000,%rsi
  107e5b:	00 00 00 
  107e5e:	48 b8 00 00 00 00 10 	movabs $0x1000000000,%rax
  107e65:	00 00 00 
  107e68:	e9 6b fe ff ff       	jmp    107cd8 <_ZN3usb4xhci18ConfigureEndpointsERNS0_10ControllerERNS0_6DeviceE+0x118>
  107e6d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    }

    port_config_phase[port_id] = ConfigPhase::kConfiguringEndpoints;
  107e71:	c7 04 85 00 b0 27 00 	movl   $0x6,0x27b000(,%rax,4)
  107e78:	06 00 00 00 
      uint32_t slot_id : 8;
    } __attribute__((packed)) bits;

    ConfigureEndpointCommandTRB(const InputContext* input_context, uint8_t slot_id) {
      bits.trb_type = Type;
      bits.slot_id = slot_id;
  107e7c:	8b 83 20 0b 00 00    	mov    0xb20(%rbx),%eax
  107e82:	48 c1 e0 38          	shl    $0x38,%rax
  107e86:	48 b9 00 00 00 00 00 	movabs $0x300000000000,%rcx
  107e8d:	30 00 00 
    InputContext* Pointer() const {
      return reinterpret_cast<InputContext*>(bits.input_context_pointer << 4);
    }

    void SetPointer(const InputContext* p) {
      bits.input_context_pointer = reinterpret_cast<uint64_t>(p) >> 4;
  107e90:	48 09 c1             	or     %rax,%rcx
  107e93:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  107e97:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  107e9b:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  107e9f:	48 8b 5d a8          	mov    -0x58(%rbp),%rbx
    Ring* CommandRing() { return &cr_; }
  107ea3:	48 8d 7b 38          	lea    0x38(%rbx),%rdi
  107ea7:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
      return Push(trb.data);
  107eab:	e8 50 f6 ff ff       	call   107500 <_ZN3usb4xhci4Ring4PushERKNSt3__15arrayIjLm4EEE>
      return {mmio_base_ + cap_->DBOFF.Read().Offset(), 256};
  107eb0:	48 8b 03             	mov    (%rbx),%rax
  107eb3:	48 8b 4b 08          	mov    0x8(%rbx),%rcx
  107eb7:	8b 49 14             	mov    0x14(%rcx),%ecx
  107eba:	83 e1 fc             	and    $0xfffffffc,%ecx
      value_.data[i] = value.data[i];
  107ebd:	c7 04 08 00 00 00 00 	movl   $0x0,(%rax,%rcx,1)
  107ec4:	48 ba 00 00 00 00 e6 	movabs $0x1e600000000,%rdx
  107ecb:	01 00 00 
  107ece:	31 c0                	xor    %eax,%eax
    ConfigureEndpointCommandTRB cmd{dev.InputContext(), dev.SlotID()};
    xhc.CommandRing()->Push(cmd);
    xhc.DoorbellRegisterAt(0)->Ring(0);

    return MAKE_ERROR(Error::kSuccess);
  }
  107ed0:	48 09 d0             	or     %rdx,%rax
  107ed3:	ba 4b 09 10 00       	mov    $0x10094b,%edx
  107ed8:	48 83 c4 38          	add    $0x38,%rsp
  107edc:	5b                   	pop    %rbx
  107edd:	41 5c                	pop    %r12
  107edf:	41 5d                	pop    %r13
  107ee1:	41 5e                	pop    %r14
  107ee3:	41 5f                	pop    %r15
  107ee5:	5d                   	pop    %rbp
  107ee6:	c3                   	ret    
  107ee7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  107eee:	00 00 

0000000000107ef0 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE>:

  Error ProcessEvent(Controller& xhc) {
  107ef0:	55                   	push   %rbp
  107ef1:	48 89 e5             	mov    %rsp,%rbp
  107ef4:	41 57                	push   %r15
  107ef6:	41 56                	push   %r14
  107ef8:	41 55                	push   %r13
  107efa:	41 54                	push   %r12
  107efc:	53                   	push   %rbx
  107efd:	48 83 ec 48          	sub    $0x48,%rsp
      return reinterpret_cast<TRB*>(interrupter_->ERDP.Read().Pointer());
  107f01:	48 8b 47 78          	mov    0x78(%rdi),%rax
      tmp.data[i] = value_.data[i];
  107f05:	48 8b 48 18          	mov    0x18(%rax),%rcx
      return bits.event_ring_dequeue_pointer << 4;
  107f09:	48 83 e1 f0          	and    $0xfffffffffffffff0,%rcx
      return Front()->bits.cycle_bit == cycle_bit_;
  107f0d:	8b 49 0c             	mov    0xc(%rcx),%ecx
  107f10:	83 e1 01             	and    $0x1,%ecx
  107f13:	0f b6 57 68          	movzbl 0x68(%rdi),%edx
  107f17:	39 d1                	cmp    %edx,%ecx
    if (!xhc.PrimaryEventRing()->HasFront()) {
  107f19:	75 75                	jne    107f90 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0xa0>
  107f1b:	48 89 fb             	mov    %rdi,%rbx
  107f1e:	4c 8d 67 58          	lea    0x58(%rdi),%r12
  107f22:	4c 8b 70 18          	mov    0x18(%rax),%r14
  107f26:	49 83 e6 f0          	and    $0xfffffffffffffff0,%r14
  107f2a:	b8 00 fc 00 00       	mov    $0xfc00,%eax
   * @return  casted pointer if the source TRB's type is equal to the resulting
   *  type. nullptr otherwise.
   */
  template <class ToType, class FromType>
  ToType* TRBDynamicCast(FromType* trb) {
    if (ToType::Type == trb->bits.trb_type) {
  107f2f:	41 23 46 0c          	and    0xc(%r14),%eax
      return MAKE_ERROR(Error::kSuccess);
    }

    Error err = MAKE_ERROR(Error::kNotImplemented);
    auto event_trb = xhc.PrimaryEventRing()->Front();
    if (auto trb = TRBDynamicCast<TransferEventTRB>(event_trb)) {
  107f33:	4d 85 f6             	test   %r14,%r14
  107f36:	74 6f                	je     107fa7 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0xb7>
  107f38:	3d 00 80 00 00       	cmp    $0x8000,%eax
  107f3d:	75 68                	jne    107fa7 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0xb7>
    const uint8_t slot_id = trb.bits.slot_id;
  107f3f:	41 0f b6 76 0f       	movzbl 0xf(%r14),%esi
    DeviceManager* DeviceManager() { return &devmgr_; }
  107f44:	48 8d 7b 20          	lea    0x20(%rbx),%rdi
    auto dev = xhc.DeviceManager()->FindBySlot(slot_id);
  107f48:	e8 53 22 00 00       	call   10a1a0 <_ZNK3usb4xhci13DeviceManager10FindBySlotEh>
    if (dev == nullptr) {
  107f4d:	48 85 c0             	test   %rax,%rax
  107f50:	0f 84 9b 03 00 00    	je     1082f1 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x401>
  107f56:	49 89 c7             	mov    %rax,%r15
  107f59:	4c 89 65 d0          	mov    %r12,-0x30(%rbp)
  107f5d:	49 bc 00 00 00 00 ff 	movabs $0xffffffff00000000,%r12
  107f64:	ff ff ff 
    if (auto err = dev->OnTransferEventReceived(trb)) {
  107f67:	48 89 c7             	mov    %rax,%rdi
  107f6a:	4c 89 f6             	mov    %r14,%rsi
  107f6d:	e8 0e 1a 00 00       	call   109980 <_ZN3usb4xhci6Device23OnTransferEventReceivedERKNS0_16TransferEventTRBE>
  107f72:	49 89 c5             	mov    %rax,%r13
  107f75:	45 85 ed             	test   %r13d,%r13d
  107f78:	0f 84 8e 03 00 00    	je     10830c <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x41c>
  107f7e:	4d 21 ec             	and    %r13,%r12
  107f81:	4c 89 e1             	mov    %r12,%rcx
  107f84:	49 89 d7             	mov    %rdx,%r15
  107f87:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
  107f8b:	e9 ed 06 00 00       	jmp    10867d <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x78d>
  107f90:	48 b8 00 00 00 00 eb 	movabs $0x1eb00000000,%rax
  107f97:	01 00 00 
  107f9a:	41 bf 4b 09 10 00    	mov    $0x10094b,%r15d
  107fa0:	31 c9                	xor    %ecx,%ecx
  107fa2:	e9 e7 06 00 00       	jmp    10868e <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x79e>
    if (auto trb = TRBDynamicCast<TransferEventTRB>(event_trb)) {
  107fa7:	4d 85 f6             	test   %r14,%r14
      err = OnEvent(xhc, *trb);
    } else if (auto trb = TRBDynamicCast<PortStatusChangeEventTRB>(event_trb)) {
  107faa:	0f 84 85 00 00 00    	je     108035 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x145>
  107fb0:	3d 00 88 00 00       	cmp    $0x8800,%eax
  107fb5:	75 7e                	jne    108035 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x145>
    Log(kDebug, "PortStatusChangeEvent: port_id = %d\n", trb.bits.port_id);
  107fb7:	41 0f b6 56 03       	movzbl 0x3(%r14),%edx
  107fbc:	be f4 01 10 00       	mov    $0x1001f4,%esi
  107fc1:	bf 07 00 00 00       	mov    $0x7,%edi
  107fc6:	31 c0                	xor    %eax,%eax
  107fc8:	e8 53 e3 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
    auto port_id = trb.bits.port_id;
  107fcd:	49 8b 06             	mov    (%r14),%rax
  107fd0:	48 c1 e8 18          	shr    $0x18,%rax
  107fd4:	0f b6 c0             	movzbl %al,%eax
      return {reinterpret_cast<uintptr_t>(op_) + 0x400u, max_ports_};
  107fd7:	48 8b 4b 10          	mov    0x10(%rbx),%rcx
      return Port{port_num, PortRegisterSets()[port_num - 1]};
  107fdb:	48 89 c2             	mov    %rax,%rdx
  107fde:	48 c1 e2 04          	shl    $0x4,%rdx
  ValueType& operator [](size_t index) { return array_[index]; }
  107fe2:	48 01 d1             	add    %rdx,%rcx
  107fe5:	48 81 c1 f0 03 00 00 	add    $0x3f0,%rcx
    auto port = xhc.PortAt(port_id);
  107fec:	88 45 c0             	mov    %al,-0x40(%rbp)
  107fef:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
    switch (port_config_phase[port_id]) {
  107ff3:	8b 04 85 00 b0 27 00 	mov    0x27b000(,%rax,4),%eax
  107ffa:	41 bf 4b 09 10 00    	mov    $0x10094b,%r15d
  108000:	83 f8 02             	cmp    $0x2,%eax
  108003:	0f 84 53 03 00 00    	je     10835c <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x46c>
  108009:	85 c0                	test   %eax,%eax
  10800b:	0f 85 2a 04 00 00    	jne    10843b <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x54b>
  108011:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
      return ResetPort(xhc, port);
  108015:	e8 b6 fa ff ff       	call   107ad0 <_ZN12_GLOBAL__N_19ResetPortERN3usb4xhci10ControllerERNS1_4PortE>
  10801a:	49 89 d7             	mov    %rdx,%r15
  10801d:	48 b9 00 00 00 00 ff 	movabs $0xffffffff00000000,%rcx
  108024:	ff ff ff 
  }
  108027:	48 21 c1             	and    %rax,%rcx
      return ResetPort(xhc, port);
  10802a:	41 89 c5             	mov    %eax,%r13d
  }
  10802d:	49 09 cd             	or     %rcx,%r13
  108030:	e9 48 06 00 00       	jmp    10867d <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x78d>
  108035:	41 bf 4b 09 10 00    	mov    $0x10094b,%r15d
  10803b:	41 bd 0b 00 00 00    	mov    $0xb,%r13d
  108041:	48 b9 00 00 00 00 ee 	movabs $0x1ee00000000,%rcx
  108048:	01 00 00 
    if (auto trb = TRBDynamicCast<TransferEventTRB>(event_trb)) {
  10804b:	4d 85 f6             	test   %r14,%r14
      err = OnEvent(xhc, *trb);
    } else if (auto trb = TRBDynamicCast<CommandCompletionEventTRB>(event_trb)) {
  10804e:	0f 84 29 06 00 00    	je     10867d <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x78d>
  108054:	3d 00 84 00 00       	cmp    $0x8400,%eax
  108059:	0f 85 1e 06 00 00    	jne    10867d <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x78d>
  10805f:	49 89 dd             	mov    %rbx,%r13
  108062:	4c 89 65 d0          	mov    %r12,-0x30(%rbp)
      return reinterpret_cast<TRB*>(bits.command_trb_pointer << 4);
  108066:	49 8b 06             	mov    (%r14),%rax
  108069:	4d 8b 7e 08          	mov    0x8(%r14),%r15
  10806d:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
    const auto issuer_type = trb.Pointer()->bits.trb_type;
  108071:	8b 58 0c             	mov    0xc(%rax),%ebx
  108074:	c1 eb 0a             	shr    $0xa,%ebx
  108077:	83 e3 3f             	and    $0x3f,%ebx
    const auto slot_id = trb.bits.slot_id;
  10807a:	4d 89 fc             	mov    %r15,%r12
  10807d:	49 c1 ec 38          	shr    $0x38,%r12
        trb.bits.slot_id, kTRBTypeToName[issuer_type]);
  108081:	48 8b 0c dd e8 14 10 	mov    0x1014e8(,%rbx,8),%rcx
  108088:	00 
    Log(kDebug, "CommandCompletionEvent: slot_id = %d, issuer = %s\n",
  108089:	be 5d 09 10 00       	mov    $0x10095d,%esi
  10808e:	bf 07 00 00 00       	mov    $0x7,%edi
  108093:	44 89 e2             	mov    %r12d,%edx
  108096:	31 c0                	xor    %eax,%eax
  108098:	e8 83 e2 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
  10809d:	be 11 00 00 00       	mov    $0x11,%esi
    if (issuer_type == EnableSlotCommandTRB::Type) {
  1080a2:	83 fb 0c             	cmp    $0xc,%ebx
  1080a5:	0f 84 ba 03 00 00    	je     108465 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x575>
  1080ab:	83 fb 0b             	cmp    $0xb,%ebx
  1080ae:	0f 84 4b 04 00 00    	je     1084ff <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x60f>
  1080b4:	83 fb 09             	cmp    $0x9,%ebx
  1080b7:	0f 85 f7 04 00 00    	jne    1085b4 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x6c4>
      if (port_config_phase[addressing_port] != ConfigPhase::kEnablingSlot) {
  1080bd:	8a 1d 3d 33 17 00    	mov    0x17333d(%rip),%bl        # 27b400 <_ZN12_GLOBAL__N_115addressing_portE>
    Log(kDebug, "AddressDevice: port_id = %d, slot_id = %d\n", port_id, slot_id);
  1080c3:	0f b6 d3             	movzbl %bl,%edx
      if (port_config_phase[addressing_port] != ConfigPhase::kEnablingSlot) {
  1080c6:	8b 04 95 00 b0 27 00 	mov    0x27b000(,%rdx,4),%eax
  1080cd:	83 f8 03             	cmp    $0x3,%eax
  1080d0:	0f 85 ea 04 00 00    	jne    1085c0 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x6d0>
    Log(kDebug, "AddressDevice: port_id = %d, slot_id = %d\n", port_id, slot_id);
  1080d6:	be ce 0d 10 00       	mov    $0x100dce,%esi
  1080db:	bf 07 00 00 00       	mov    $0x7,%edi
  1080e0:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  1080e4:	44 89 e1             	mov    %r12d,%ecx
  1080e7:	31 c0                	xor    %eax,%eax
  1080e9:	e8 32 e2 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
  1080ee:	4d 89 ee             	mov    %r13,%r14
    DeviceManager* DeviceManager() { return &devmgr_; }
  1080f1:	49 83 c5 20          	add    $0x20,%r13
      return {mmio_base_ + cap_->DBOFF.Read().Offset(), 256};
  1080f5:	49 8b 46 08          	mov    0x8(%r14),%rax
  1080f9:	8b 40 14             	mov    0x14(%rax),%eax
    uint32_t Offset() const { return bits.doorbell_array_offset << 2; }
  1080fc:	83 e0 fc             	and    $0xfffffffc,%eax
  1080ff:	49 03 06             	add    (%r14),%rax
  108102:	4a 8d 14 a0          	lea    (%rax,%r12,4),%rdx
    xhc.DeviceManager()->AllocDevice(slot_id, xhc.DoorbellRegisterAt(slot_id));
  108106:	4c 89 ef             	mov    %r13,%rdi
  108109:	44 89 e6             	mov    %r12d,%esi
  10810c:	e8 af 20 00 00       	call   10a1c0 <_ZN3usb4xhci13DeviceManager11AllocDeviceEhPNS0_16DoorbellRegisterE>
  108111:	4c 89 6d 98          	mov    %r13,-0x68(%rbp)
    Device* dev = xhc.DeviceManager()->FindBySlot(slot_id);
  108115:	4c 89 ef             	mov    %r13,%rdi
  108118:	44 89 e6             	mov    %r12d,%esi
  10811b:	e8 80 20 00 00       	call   10a1a0 <_ZNK3usb4xhci13DeviceManager10FindBySlotEh>
    if (dev == nullptr) {
  108120:	48 85 c0             	test   %rax,%rax
  108123:	0f 84 f0 04 00 00    	je     108619 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x729>
    InputContext* InputContext() { return &input_ctx_; }
  108129:	48 89 c7             	mov    %rax,%rdi
  10812c:	48 81 c7 00 07 00 00 	add    $0x700,%rdi
  108133:	48 89 7d a0          	mov    %rdi,-0x60(%rbp)
    memset(&dev->InputContext()->input_control_context, 0,
  108137:	ba 20 00 00 00       	mov    $0x20,%edx
  10813c:	31 f6                	xor    %esi,%esi
  10813e:	4d 89 f5             	mov    %r14,%r13
  108141:	49 89 c6             	mov    %rax,%r14
  108144:	e8 57 36 00 00       	call   10b7a0 <memset>
      input_control_context.add_context_flags |= 1u << dci.value;
  108149:	41 80 8e 04 07 00 00 	orb    $0x3,0x704(%r14)
  108150:	03 
      return {reinterpret_cast<uintptr_t>(op_) + 0x400u, max_ports_};
  108151:	49 8b 45 10          	mov    0x10(%r13),%rax
  108155:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
      return Port{port_num, PortRegisterSets()[port_num - 1]};
  108159:	48 c1 e1 04          	shl    $0x4,%rcx
  10815d:	48 01 c8             	add    %rcx,%rax
  108160:	48 05 f0 03 00 00    	add    $0x3f0,%rax
    auto port = xhc.PortAt(port_id);
  108166:	88 5d b0             	mov    %bl,-0x50(%rbp)
  108169:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    ctx.bits.route_string = 0;
  10816d:	49 81 a6 20 07 00 00 	andq   $0xfffffffffff00000,0x720(%r14)
  108174:	00 00 f0 ff 
  108178:	48 8d 5d b0          	lea    -0x50(%rbp),%rbx
    ctx.bits.root_hub_port_num = port.Number();
  10817c:	48 89 df             	mov    %rbx,%rdi
  10817f:	e8 2c 06 00 00       	call   1087b0 <_ZNK3usb4xhci4Port6NumberEv>
  108184:	0f b6 c0             	movzbl %al,%eax
  108187:	48 c1 e0 30          	shl    $0x30,%rax
  10818b:	48 b9 ff ff ff 07 ff 	movabs $0xff00ffff07ffffff,%rcx
  108192:	ff 00 ff 
  108195:	49 23 8e 20 07 00 00 	and    0x720(%r14),%rcx
    ctx.bits.context_entries = 1;
  10819c:	48 01 c8             	add    %rcx,%rax
  10819f:	48 05 00 00 00 08    	add    $0x8000000,%rax
  1081a5:	49 89 86 20 07 00 00 	mov    %rax,0x720(%r14)
    ctx.bits.speed = port.Speed();
  1081ac:	48 89 df             	mov    %rbx,%rdi
  1081af:	e8 7c 06 00 00       	call   108830 <_ZNK3usb4xhci4Port5SpeedEv>
  1081b4:	83 e0 0f             	and    $0xf,%eax
  1081b7:	c1 e0 14             	shl    $0x14,%eax
  1081ba:	48 c7 c1 ff ff 0f ff 	mov    $0xffffffffff0fffff,%rcx
  1081c1:	49 23 8e 20 07 00 00 	and    0x720(%r14),%rcx
  1081c8:	48 09 c1             	or     %rax,%rcx
  1081cb:	49 89 8e 20 07 00 00 	mov    %rcx,0x720(%r14)
        *ep0_ctx, dev->AllocTransferRing(ep0_dci, 32),
  1081d2:	ba 20 00 00 00       	mov    $0x20,%edx
  1081d7:	4c 89 f7             	mov    %r14,%rdi
  1081da:	be 01 00 00 00       	mov    $0x1,%esi
  1081df:	e8 7c 0a 00 00       	call   108c60 <_ZN3usb4xhci6Device17AllocTransferRingENS0_18DeviceContextIndexEm>
        DetermineMaxPacketSizeForControlPipe(slot_ctx->bits.speed));
  1081e4:	41 8b 8e 20 07 00 00 	mov    0x720(%r14),%ecx
  1081eb:	c1 e9 14             	shr    $0x14,%ecx
  1081ee:	83 e1 0f             	and    $0xf,%ecx
    switch (slot_speed) {
  1081f1:	83 f9 03             	cmp    $0x3,%ecx
  1081f4:	ba 40 00 00 00       	mov    $0x40,%edx
  1081f9:	be 08 00 00 00       	mov    $0x8,%esi
  1081fe:	0f 44 f2             	cmove  %edx,%esi
  108201:	83 f9 04             	cmp    $0x4,%ecx
  108204:	b9 00 02 00 00       	mov    $0x200,%ecx
  108209:	0f 45 ce             	cmovne %esi,%ecx
  10820c:	48 ba ff ff ff ff c7 	movabs $0xc7ffffffff,%rdx
  108213:	00 00 00 
    ctx.bits.ep_type = 4; // Control Endpoint. Bidirectional.
  108216:	49 23 96 40 07 00 00 	and    0x740(%r14),%rdx
  10821d:	49 8b b6 48 07 00 00 	mov    0x748(%r14),%rsi
    ctx.bits.max_packet_size = max_packet_size;
  108224:	48 c1 e1 30          	shl    $0x30,%rcx
  108228:	48 09 d1             	or     %rdx,%rcx
  10822b:	48 ba 00 00 00 00 20 	movabs $0x2000000000,%rdx
  108232:	00 00 00 
  108235:	48 09 ca             	or     %rcx,%rdx
    ctx.bits.max_burst_size = 0;
  108238:	49 89 96 40 07 00 00 	mov    %rdx,0x740(%r14)
    TRB* Buffer() const { return buf_; }
  10823f:	48 8b 00             	mov    (%rax),%rax
      bits.tr_dequeue_pointer = reinterpret_cast<uint64_t>(buffer) >> 4;
  108242:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  108246:	48 b9 ff 80 00 ff e1 	movabs $0x24800e1ff0080ff,%rcx
  10824d:	00 48 02 
  108250:	48 21 d1             	and    %rdx,%rcx
  108253:	83 e6 0e             	and    $0xe,%esi
    ctx.bits.error_count = 3;
  108256:	48 01 f0             	add    %rsi,%rax
  108259:	48 83 c0 01          	add    $0x1,%rax
  10825d:	48 ba 00 00 00 00 06 	movabs $0x600000000,%rdx
  108264:	00 00 00 
  108267:	48 09 ca             	or     %rcx,%rdx
  10826a:	49 89 96 40 07 00 00 	mov    %rdx,0x740(%r14)
  108271:	49 89 86 48 07 00 00 	mov    %rax,0x748(%r14)
    xhc.DeviceManager()->LoadDCBAA(slot_id);
  108278:	41 0f b6 f4          	movzbl %r12b,%esi
  10827c:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  108280:	e8 db 1f 00 00       	call   10a260 <_ZN3usb4xhci13DeviceManager9LoadDCBAAEh>
  108285:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    port_config_phase[port_id] = ConfigPhase::kAddressingDevice;
  108289:	c7 04 85 00 b0 27 00 	movl   $0x4,0x27b000(,%rax,4)
  108290:	04 00 00 00 
  108294:	48 b8 00 00 00 00 00 	movabs $0xff00000000000000,%rax
  10829b:	00 00 ff 
      bits.slot_id = slot_id;
  10829e:	49 21 c7             	and    %rax,%r15
  1082a1:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
      bits.input_context_pointer = reinterpret_cast<uint64_t>(p) >> 4;
  1082a5:	48 83 e1 f0          	and    $0xfffffffffffffff0,%rcx
  1082a9:	48 b8 00 00 00 00 00 	movabs $0x2c0000000000,%rax
  1082b0:	2c 00 00 
  1082b3:	4c 09 f8             	or     %r15,%rax
  1082b6:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  1082ba:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    Ring* CommandRing() { return &cr_; }
  1082be:	49 8d 7d 38          	lea    0x38(%r13),%rdi
  1082c2:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
      return Push(trb.data);
  1082c6:	e8 35 f2 ff ff       	call   107500 <_ZN3usb4xhci4Ring4PushERKNSt3__15arrayIjLm4EEE>
  1082cb:	31 f6                	xor    %esi,%esi
      return {mmio_base_ + cap_->DBOFF.Read().Offset(), 256};
  1082cd:	49 8b 45 00          	mov    0x0(%r13),%rax
  1082d1:	49 8b 4d 08          	mov    0x8(%r13),%rcx
  1082d5:	8b 49 14             	mov    0x14(%rcx),%ecx
  1082d8:	83 e1 fc             	and    $0xfffffffc,%ecx
      value_.data[i] = value.data[i];
  1082db:	c7 04 08 00 00 00 00 	movl   $0x0,(%rax,%rcx,1)
  1082e2:	48 b8 00 00 00 00 a4 	movabs $0xa400000000,%rax
  1082e9:	00 00 00 
  1082ec:	e9 37 03 00 00       	jmp    108628 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x738>
  1082f1:	41 bd 06 00 00 00    	mov    $0x6,%r13d
  1082f7:	48 b9 00 00 00 00 d6 	movabs $0xd600000000,%rcx
  1082fe:	00 00 00 
  108301:	41 bf 4b 09 10 00    	mov    $0x10094b,%r15d
  108307:	e9 71 03 00 00       	jmp    10867d <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x78d>
  10830c:	48 b9 00 00 00 00 e1 	movabs $0xe100000000,%rcx
  108313:	00 00 00 
    bool IsInitialized() { return is_initialized_; }
  108316:	41 80 bf 8a 01 00 00 	cmpb   $0x0,0x18a(%r15)
  10831d:	00 
    if (dev->IsInitialized() &&
  10831e:	0f 84 2f 01 00 00    	je     108453 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x563>
    const auto port_id = dev->DeviceContext()->slot_context.bits.root_hub_port_num;
  108324:	41 0f b6 87 06 03 00 	movzbl 0x306(%r15),%eax
  10832b:	00 
        port_config_phase[port_id] == ConfigPhase::kInitializingDevice) {
  10832c:	8b 04 85 00 b0 27 00 	mov    0x27b000(,%rax,4),%eax
  108333:	83 f8 05             	cmp    $0x5,%eax
    if (dev->IsInitialized() &&
  108336:	0f 85 17 01 00 00    	jne    108453 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x563>
      return ConfigureEndpoints(xhc, *dev);
  10833c:	48 89 df             	mov    %rbx,%rdi
  10833f:	4c 89 fe             	mov    %r15,%rsi
  108342:	e8 79 f8 ff ff       	call   107bc0 <_ZN3usb4xhci18ConfigureEndpointsERNS0_10ControllerERNS0_6DeviceE>
  108347:	49 89 c5             	mov    %rax,%r13
  10834a:	49 89 d7             	mov    %rdx,%r15
  }
  10834d:	49 21 c4             	and    %rax,%r12
  108350:	4c 89 e1             	mov    %r12,%rcx
  108353:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
  108357:	e9 21 03 00 00       	jmp    10867d <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x78d>
  10835c:	48 89 5d d0          	mov    %rbx,-0x30(%rbp)
  108360:	48 8d 5d c0          	lea    -0x40(%rbp),%rbx
    const bool is_enabled = port.IsEnabled();
  108364:	48 89 df             	mov    %rbx,%rdi
  108367:	e8 64 04 00 00       	call   1087d0 <_ZNK3usb4xhci4Port9IsEnabledEv>
  10836c:	41 89 c7             	mov    %eax,%r15d
    const bool reset_completed = port.IsPortResetChanged();
  10836f:	48 89 df             	mov    %rbx,%rdi
  108372:	e8 99 04 00 00       	call   108810 <_ZNK3usb4xhci4Port18IsPortResetChangedEv>
  108377:	41 89 c6             	mov    %eax,%r14d
        is_enabled ? "true" : "false",
  10837a:	b8 2f 08 10 00       	mov    $0x10082f,%eax
  10837f:	45 84 ff             	test   %r15b,%r15b
  108382:	ba 31 05 10 00       	mov    $0x100531,%edx
  108387:	48 0f 45 d0          	cmovne %rax,%rdx
  10838b:	b9 31 05 10 00       	mov    $0x100531,%ecx
        reset_completed ? "true" : "false");
  108390:	45 84 f6             	test   %r14b,%r14b
  108393:	48 0f 45 c8          	cmovne %rax,%rcx
  108397:	45 31 ed             	xor    %r13d,%r13d
    Log(kDebug, "EnableSlot: port.IsEnabled() = %s, port.IsPortResetChanged() = %s\n",
  10839a:	be f7 06 10 00       	mov    $0x1006f7,%esi
  10839f:	bf 07 00 00 00       	mov    $0x7,%edi
  1083a4:	31 c0                	xor    %eax,%eax
  1083a6:	e8 75 df ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
  1083ab:	48 b9 00 00 00 00 81 	movabs $0x8100000000,%rcx
  1083b2:	00 00 00 
        is_enabled ? "true" : "false",
  1083b5:	45 84 ff             	test   %r15b,%r15b
    if (is_enabled && reset_completed) {
  1083b8:	74 73                	je     10842d <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x53d>
  1083ba:	45 84 f6             	test   %r14b,%r14b
  1083bd:	74 6e                	je     10842d <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x53d>

    void ClearConnectStatusChanged() const {
      CLEAR_STATUS_BIT(connect_status_change);
    }
    void ClearPortResetChange() const {
      CLEAR_STATUS_BIT(port_reset_change);
  1083bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1083c3:	49 89 ce             	mov    %rcx,%r14
  1083c6:	b9 e0 c3 01 0e       	mov    $0xe01c3e0,%ecx
  1083cb:	23 08                	and    (%rax),%ecx
  1083cd:	81 c9 00 00 20 00    	or     $0x200000,%ecx
  1083d3:	89 08                	mov    %ecx,(%rax)
  1083d5:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
      port_config_phase[port.Number()] = ConfigPhase::kEnablingSlot;
  1083d9:	e8 d2 03 00 00       	call   1087b0 <_ZNK3usb4xhci4Port6NumberEv>
  1083de:	0f b6 c0             	movzbl %al,%eax
  1083e1:	c7 04 85 00 b0 27 00 	movl   $0x3,0x27b000(,%rax,4)
  1083e8:	03 00 00 00 
  1083ec:	48 b8 00 00 00 00 00 	movabs $0x240000000000,%rax
  1083f3:	24 00 00 
      bits.trb_type = Type;
  1083f6:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  1083fa:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  108401:	00 
  108402:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
    Ring* CommandRing() { return &cr_; }
  108406:	48 8d 7b 38          	lea    0x38(%rbx),%rdi
  10840a:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
  10840e:	e8 ed f0 ff ff       	call   107500 <_ZN3usb4xhci4Ring4PushERKNSt3__15arrayIjLm4EEE>
      return {mmio_base_ + cap_->DBOFF.Read().Offset(), 256};
  108413:	48 8b 03             	mov    (%rbx),%rax
  108416:	48 8b 4b 08          	mov    0x8(%rbx),%rcx
  10841a:	8b 49 14             	mov    0x14(%rcx),%ecx
  10841d:	83 e1 fc             	and    $0xfffffffc,%ecx
  108420:	c7 04 08 00 00 00 00 	movl   $0x0,(%rax,%rcx,1)
  108427:	4c 89 f1             	mov    %r14,%rcx
  10842a:	45 31 ed             	xor    %r13d,%r13d
  10842d:	41 bf 4b 09 10 00    	mov    $0x10094b,%r15d
  }
  108433:	49 09 cd             	or     %rcx,%r13
  108436:	e9 42 02 00 00       	jmp    10867d <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x78d>
  10843b:	41 bd 11 00 00 00    	mov    $0x11,%r13d
  108441:	48 b9 00 00 00 00 ce 	movabs $0xce00000000,%rcx
  108448:	00 00 00 
  10844b:	49 09 cd             	or     %rcx,%r13
  10844e:	e9 2a 02 00 00       	jmp    10867d <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x78d>
  108453:	45 31 ed             	xor    %r13d,%r13d
  108456:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
  10845a:	41 bf 4b 09 10 00    	mov    $0x10094b,%r15d
  108460:	e9 18 02 00 00       	jmp    10867d <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x78d>
  108465:	4c 89 eb             	mov    %r13,%rbx
    DeviceManager* DeviceManager() { return &devmgr_; }
  108468:	48 83 c3 20          	add    $0x20,%rbx
      auto dev = xhc.DeviceManager()->FindBySlot(slot_id);
  10846c:	48 89 df             	mov    %rbx,%rdi
  10846f:	44 89 e6             	mov    %r12d,%esi
  108472:	e8 29 1d 00 00       	call   10a1a0 <_ZNK3usb4xhci13DeviceManager10FindBySlotEh>
      if (dev == nullptr) {
  108477:	48 85 c0             	test   %rax,%rax
  10847a:	0f 84 4c 01 00 00    	je     1085cc <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x6dc>
      auto port_id = dev->DeviceContext()->slot_context.bits.root_hub_port_num;
  108480:	48 8b 88 00 03 00 00 	mov    0x300(%rax),%rcx
  108487:	48 8b 80 08 03 00 00 	mov    0x308(%rax),%rax
  10848e:	48 0f a4 c8 10       	shld   $0x10,%rcx,%rax
  108493:	44 0f b6 f0          	movzbl %al,%r14d
      if (port_config_phase[port_id] != ConfigPhase::kConfiguringEndpoints) {
  108497:	42 8b 0c b5 00 b0 27 	mov    0x27b000(,%r14,4),%ecx
  10849e:	00 
  10849f:	83 f9 06             	cmp    $0x6,%ecx
  1084a2:	41 bf 4b 09 10 00    	mov    $0x10094b,%r15d
  1084a8:	0f 85 40 01 00 00    	jne    1085ee <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x6fe>
    Log(kDebug, "CompleteConfiguration: port_id = %d, slot_id = %d\n", port_id, slot_id);
  1084ae:	0f b6 d0             	movzbl %al,%edx
  1084b1:	be cf 02 10 00       	mov    $0x1002cf,%esi
  1084b6:	bf 07 00 00 00       	mov    $0x7,%edi
  1084bb:	44 89 e1             	mov    %r12d,%ecx
  1084be:	31 c0                	xor    %eax,%eax
  1084c0:	e8 5b de ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
    auto dev = xhc.DeviceManager()->FindBySlot(slot_id);
  1084c5:	41 0f b6 f4          	movzbl %r12b,%esi
  1084c9:	48 89 df             	mov    %rbx,%rdi
  1084cc:	e8 cf 1c 00 00       	call   10a1a0 <_ZNK3usb4xhci13DeviceManager10FindBySlotEh>
    if (dev == nullptr) {
  1084d1:	48 85 c0             	test   %rax,%rax
  1084d4:	0f 84 7a 01 00 00    	je     108654 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x764>
    dev->OnEndpointsConfigured();
  1084da:	48 89 c7             	mov    %rax,%rdi
  1084dd:	e8 0e e4 ff ff       	call   1068f0 <_ZN3usb6Device21OnEndpointsConfiguredEv>
    port_config_phase[port_id] = ConfigPhase::kConfigured;
  1084e2:	42 c7 04 b5 00 b0 27 	movl   $0x7,0x27b000(,%r14,4)
  1084e9:	00 07 00 00 00 
  1084ee:	48 b8 00 00 00 00 c0 	movabs $0xc000000000,%rax
  1084f5:	00 00 00 
  1084f8:	31 f6                	xor    %esi,%esi
  1084fa:	e9 64 01 00 00       	jmp    108663 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x773>
  1084ff:	4c 89 eb             	mov    %r13,%rbx
  108502:	49 83 c5 20          	add    $0x20,%r13
      auto dev = xhc.DeviceManager()->FindBySlot(slot_id);
  108506:	4c 89 ef             	mov    %r13,%rdi
  108509:	44 89 e6             	mov    %r12d,%esi
  10850c:	e8 8f 1c 00 00       	call   10a1a0 <_ZNK3usb4xhci13DeviceManager10FindBySlotEh>
      if (dev == nullptr) {
  108511:	48 85 c0             	test   %rax,%rax
  108514:	0f 84 c3 00 00 00    	je     1085dd <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x6ed>
      auto port_id = dev->DeviceContext()->slot_context.bits.root_hub_port_num;
  10851a:	48 8b 88 00 03 00 00 	mov    0x300(%rax),%rcx
  108521:	48 89 ca             	mov    %rcx,%rdx
  108524:	48 c1 ea 30          	shr    $0x30,%rdx
      if (port_id != addressing_port) {
  108528:	38 15 d2 2e 17 00    	cmp    %dl,0x172ed2(%rip)        # 27b400 <_ZN12_GLOBAL__N_115addressing_portE>
  10852e:	be 11 00 00 00       	mov    $0x11,%esi
  108533:	0f 85 d4 00 00 00    	jne    10860d <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x71d>
  108539:	4c 8b b8 08 03 00 00 	mov    0x308(%rax),%r15
  108540:	49 0f a4 cf 10       	shld   $0x10,%rcx,%r15
      auto port_id = dev->DeviceContext()->slot_context.bits.root_hub_port_num;
  108545:	45 0f b6 f7          	movzbl %r15b,%r14d
      if (port_config_phase[port_id] != ConfigPhase::kAddressingDevice) {
  108549:	42 8b 04 b5 00 b0 27 	mov    0x27b000(,%r14,4),%eax
  108550:	00 
  108551:	83 f8 04             	cmp    $0x4,%eax
  108554:	0f 85 da 00 00 00    	jne    108634 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x744>
      addressing_port = 0;
  10855a:	c6 05 9f 2e 17 00 00 	movb   $0x0,0x172e9f(%rip)        # 27b400 <_ZN12_GLOBAL__N_115addressing_portE>
  108561:	31 c0                	xor    %eax,%eax
        if (port_config_phase[i] == ConfigPhase::kWaitingAddressed) {
  108563:	8b 0c 85 00 b0 27 00 	mov    0x27b000(,%rax,4),%ecx
  10856a:	83 f9 01             	cmp    $0x1,%ecx
  10856d:	0f 84 40 01 00 00    	je     1086b3 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x7c3>
  108573:	8b 0c 85 04 b0 27 00 	mov    0x27b004(,%rax,4),%ecx
  10857a:	83 f9 01             	cmp    $0x1,%ecx
  10857d:	0f 84 20 01 00 00    	je     1086a3 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x7b3>
  108583:	8b 0c 85 08 b0 27 00 	mov    0x27b008(,%rax,4),%ecx
  10858a:	83 f9 01             	cmp    $0x1,%ecx
  10858d:	0f 84 16 01 00 00    	je     1086a9 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x7b9>
  108593:	8b 0c 85 0c b0 27 00 	mov    0x27b00c(,%rax,4),%ecx
  10859a:	83 f9 01             	cmp    $0x1,%ecx
  10859d:	0f 84 0c 01 00 00    	je     1086af <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x7bf>
      for (int i = 0; i < port_config_phase.size(); ++i) {
  1085a3:	48 83 c0 04          	add    $0x4,%rax
  1085a7:	48 3d 00 01 00 00    	cmp    $0x100,%rax
  1085ad:	75 b4                	jne    108563 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x673>
  1085af:	e9 46 01 00 00       	jmp    1086fa <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x80a>
  1085b4:	48 b8 00 00 00 00 19 	movabs $0x11900000000,%rax
  1085bb:	01 00 00 
  1085be:	eb 7e                	jmp    10863e <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x74e>
  1085c0:	48 b8 00 00 00 00 ec 	movabs $0xec00000000,%rax
  1085c7:	00 00 00 
  1085ca:	eb 72                	jmp    10863e <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x74e>
  1085cc:	be 06 00 00 00       	mov    $0x6,%esi
  1085d1:	48 b8 00 00 00 00 0e 	movabs $0x10e00000000,%rax
  1085d8:	01 00 00 
  1085db:	eb 61                	jmp    10863e <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x74e>
  1085dd:	be 06 00 00 00       	mov    $0x6,%esi
  1085e2:	48 b8 00 00 00 00 f3 	movabs $0xf300000000,%rax
  1085e9:	00 00 00 
  1085ec:	eb 50                	jmp    10863e <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x74e>
  1085ee:	48 b8 00 00 00 00 13 	movabs $0x11300000000,%rax
  1085f5:	01 00 00 
  1085f8:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
  1085fc:	48 b9 00 00 00 00 ff 	movabs $0xffffffff00000000,%rcx
  108603:	ff ff ff 
  108606:	be 11 00 00 00       	mov    $0x11,%esi
  10860b:	eb 67                	jmp    108674 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x784>
  10860d:	48 b8 00 00 00 00 f9 	movabs $0xf900000000,%rax
  108614:	00 00 00 
  108617:	eb 25                	jmp    10863e <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x74e>
  108619:	be 06 00 00 00       	mov    $0x6,%esi
  10861e:	48 b8 00 00 00 00 8b 	movabs $0x8b00000000,%rax
  108625:	00 00 00 
  108628:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
  10862c:	41 bf 4b 09 10 00    	mov    $0x10094b,%r15d
  108632:	eb 33                	jmp    108667 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x777>
  108634:	48 b8 00 00 00 00 fc 	movabs $0xfc00000000,%rax
  10863b:	00 00 00 
  10863e:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
  108642:	41 bf 4b 09 10 00    	mov    $0x10094b,%r15d
  108648:	48 b9 00 00 00 00 ff 	movabs $0xffffffff00000000,%rcx
  10864f:	ff ff ff 
  108652:	eb 20                	jmp    108674 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x784>
  108654:	be 06 00 00 00       	mov    $0x6,%esi
  108659:	48 b8 00 00 00 00 ba 	movabs $0xba00000000,%rax
  108660:	00 00 00 
  108663:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
  108667:	48 b9 00 00 00 00 ff 	movabs $0xffffffff00000000,%rcx
  10866e:	ff ff ff 
  108671:	48 09 c6             	or     %rax,%rsi
  }
  108674:	41 89 f5             	mov    %esi,%r13d
  108677:	49 09 c5             	or     %rax,%r13
      err = OnEvent(xhc, *trb);
    }
    xhc.PrimaryEventRing()->Pop();

    return err;
  10867a:	48 21 c1             	and    %rax,%rcx
    xhc.PrimaryEventRing()->Pop();
  10867d:	4c 89 e7             	mov    %r12,%rdi
  108680:	48 89 cb             	mov    %rcx,%rbx
  108683:	e8 78 f0 ff ff       	call   107700 <_ZN3usb4xhci9EventRing3PopEv>
  108688:	48 89 d8             	mov    %rbx,%rax
    return err;
  10868b:	44 89 e9             	mov    %r13d,%ecx
  }
  10868e:	48 09 c8             	or     %rcx,%rax
  108691:	4c 89 fa             	mov    %r15,%rdx
  108694:	48 83 c4 48          	add    $0x48,%rsp
  108698:	5b                   	pop    %rbx
  108699:	41 5c                	pop    %r12
  10869b:	41 5d                	pop    %r13
  10869d:	41 5e                	pop    %r14
  10869f:	41 5f                	pop    %r15
  1086a1:	5d                   	pop    %rbp
  1086a2:	c3                   	ret    
        if (port_config_phase[i] == ConfigPhase::kWaitingAddressed) {
  1086a3:	48 83 c0 01          	add    $0x1,%rax
  1086a7:	eb 0a                	jmp    1086b3 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x7c3>
  1086a9:	48 83 c0 02          	add    $0x2,%rax
  1086ad:	eb 04                	jmp    1086b3 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x7c3>
  1086af:	48 83 c0 03          	add    $0x3,%rax
      return {reinterpret_cast<uintptr_t>(op_) + 0x400u, max_ports_};
  1086b3:	48 8b 4b 10          	mov    0x10(%rbx),%rcx
      return Port{port_num, PortRegisterSets()[port_num - 1]};
  1086b7:	0f b6 c0             	movzbl %al,%eax
          auto port = xhc.PortAt(i);
  1086ba:	88 45 b0             	mov    %al,-0x50(%rbp)
  1086bd:	48 c1 e0 04          	shl    $0x4,%rax
  ValueType& operator [](size_t index) { return array_[index]; }
  1086c1:	48 01 c8             	add    %rcx,%rax
  1086c4:	48 05 f0 03 00 00    	add    $0x3f0,%rax
  1086ca:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  1086ce:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
          if (auto err = ResetPort(xhc, port); err) {
  1086d2:	e8 f9 f3 ff ff       	call   107ad0 <_ZN12_GLOBAL__N_19ResetPortERN3usb4xhci10ControllerERNS1_4PortE>
  1086d7:	48 89 c6             	mov    %rax,%rsi
  1086da:	85 f6                	test   %esi,%esi
  1086dc:	74 1c                	je     1086fa <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x80a>
  1086de:	48 89 f0             	mov    %rsi,%rax
  1086e1:	48 b9 00 00 00 00 ff 	movabs $0xffffffff00000000,%rcx
  1086e8:	ff ff ff 
  1086eb:	48 21 c8             	and    %rcx,%rax
  1086ee:	49 89 d7             	mov    %rdx,%r15
  1086f1:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
  1086f5:	e9 7a ff ff ff       	jmp    108674 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x784>
    Log(kDebug, "InitializeDevice: port_id = %d, slot_id = %d\n", port_id, slot_id);
  1086fa:	41 0f b6 d7          	movzbl %r15b,%edx
  1086fe:	be 34 08 10 00       	mov    $0x100834,%esi
  108703:	bf 07 00 00 00       	mov    $0x7,%edi
  108708:	44 89 e1             	mov    %r12d,%ecx
  10870b:	31 c0                	xor    %eax,%eax
  10870d:	e8 0e dc ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
    auto dev = xhc.DeviceManager()->FindBySlot(slot_id);
  108712:	41 0f b6 f4          	movzbl %r12b,%esi
  108716:	4c 89 ef             	mov    %r13,%rdi
  108719:	e8 82 1a 00 00       	call   10a1a0 <_ZNK3usb4xhci13DeviceManager10FindBySlotEh>
    if (dev == nullptr) {
  10871e:	48 85 c0             	test   %rax,%rax
  108721:	74 22                	je     108745 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x855>
    port_config_phase[port_id] = ConfigPhase::kInitializingDevice;
  108723:	42 c7 04 b5 00 b0 27 	movl   $0x5,0x27b000(,%r14,4)
  10872a:	00 05 00 00 00 
    dev->StartInitialize();
  10872f:	48 89 c7             	mov    %rax,%rdi
  108732:	e8 19 e1 ff ff       	call   106850 <_ZN3usb6Device15StartInitializeEv>
  108737:	48 b8 00 00 00 00 b2 	movabs $0xb200000000,%rax
  10873e:	00 00 00 
  108741:	31 f6                	xor    %esi,%esi
  108743:	eb 0f                	jmp    108754 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x864>
  108745:	be 06 00 00 00       	mov    $0x6,%esi
  10874a:	48 b8 00 00 00 00 ac 	movabs $0xac00000000,%rax
  108751:	00 00 00 
  108754:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
  108758:	41 bf 4b 09 10 00    	mov    $0x10094b,%r15d
  }
  10875e:	48 09 c6             	or     %rax,%rsi
  108761:	48 b9 00 00 00 00 ff 	movabs $0xffffffff00000000,%rcx
  108768:	ff ff ff 
  10876b:	e9 04 ff ff ff       	jmp    108674 <_ZN3usb4xhci12ProcessEventERNS0_10ControllerE+0x784>

0000000000108770 <_ZZN3usb4xhci18ConfigureEndpointsERNS0_10ControllerERNS0_6DeviceEEN3$_08__invokeENS_12EndpointTypeEi>:
      ? [](EndpointType type, int interval) { // for FS, LS
  108770:	89 f0                	mov    %esi,%eax
        if (type == EndpointType::kIsochronous) return interval + 2;
  108772:	83 ff 01             	cmp    $0x1,%edi
  108775:	75 04                	jne    10877b <_ZZN3usb4xhci18ConfigureEndpointsERNS0_10ControllerERNS0_6DeviceEEN3$_08__invokeENS_12EndpointTypeEi+0xb>
  108777:	83 c0 02             	add    $0x2,%eax
      ? [](EndpointType type, int interval) { // for FS, LS
  10877a:	c3                   	ret    
  10877b:	55                   	push   %rbp
  10877c:	48 89 e5             	mov    %rsp,%rbp
  10877f:	48 83 ec 04          	sub    $0x4,%rsp
  108783:	89 45 fc             	mov    %eax,-0x4(%rbp)
    if (value == 0) {
  108786:	85 c0                	test   %eax,%eax
  108788:	74 09                	je     108793 <_ZZN3usb4xhci18ConfigureEndpointsERNS0_10ControllerERNS0_6DeviceEEN3$_08__invokeENS_12EndpointTypeEi+0x23>
    __asm__("bsr %1, %0"
  10878a:	0f bd 45 fc          	bsr    -0x4(%rbp),%eax
  10878e:	83 c0 03             	add    $0x3,%eax
  108791:	eb 05                	jmp    108798 <_ZZN3usb4xhci18ConfigureEndpointsERNS0_10ControllerERNS0_6DeviceEEN3$_08__invokeENS_12EndpointTypeEi+0x28>
  108793:	b8 02 00 00 00       	mov    $0x2,%eax
  108798:	48 83 c4 04          	add    $0x4,%rsp
  10879c:	5d                   	pop    %rbp
      ? [](EndpointType type, int interval) { // for FS, LS
  10879d:	c3                   	ret    
  10879e:	66 90                	xchg   %ax,%ax

00000000001087a0 <_ZZN3usb4xhci18ConfigureEndpointsERNS0_10ControllerERNS0_6DeviceEEN3$_18__invokeENS_12EndpointTypeEi>:
      : [](EndpointType type, int interval) { // for HS, SS, SSP
  1087a0:	55                   	push   %rbp
  1087a1:	48 89 e5             	mov    %rsp,%rbp
        return interval - 1;
  1087a4:	8d 46 ff             	lea    -0x1(%rsi),%eax
      : [](EndpointType type, int interval) { // for HS, SS, SSP
  1087a7:	5d                   	pop    %rbp
  1087a8:	c3                   	ret    
  1087a9:	cc                   	int3   
  1087aa:	cc                   	int3   
  1087ab:	cc                   	int3   
  1087ac:	cc                   	int3   
  1087ad:	cc                   	int3   
  1087ae:	cc                   	int3   
  1087af:	cc                   	int3   

00000000001087b0 <_ZNK3usb4xhci4Port6NumberEv>:

#include "usb/xhci/xhci.hpp"
#include "usb/xhci/registers.hpp"

namespace usb::xhci {
  uint8_t Port::Number() const {
  1087b0:	55                   	push   %rbp
  1087b1:	48 89 e5             	mov    %rsp,%rbp
    return port_num_;
  1087b4:	8a 07                	mov    (%rdi),%al
  1087b6:	5d                   	pop    %rbp
  1087b7:	c3                   	ret    
  1087b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  1087bf:	00 

00000000001087c0 <_ZNK3usb4xhci4Port11IsConnectedEv>:
  }

  bool Port::IsConnected() const {
  1087c0:	55                   	push   %rbp
  1087c1:	48 89 e5             	mov    %rsp,%rbp
    return port_reg_set_.PORTSC.Read().bits.current_connect_status;
  1087c4:	48 8b 47 08          	mov    0x8(%rdi),%rax
      tmp.data[i] = value_.data[i];
  1087c8:	8b 00                	mov    (%rax),%eax
  1087ca:	24 01                	and    $0x1,%al
  1087cc:	5d                   	pop    %rbp
  1087cd:	c3                   	ret    
  1087ce:	66 90                	xchg   %ax,%ax

00000000001087d0 <_ZNK3usb4xhci4Port9IsEnabledEv>:
  }

  bool Port::IsEnabled() const {
  1087d0:	55                   	push   %rbp
  1087d1:	48 89 e5             	mov    %rsp,%rbp
    return port_reg_set_.PORTSC.Read().bits.port_enabled_disabled;
  1087d4:	48 8b 47 08          	mov    0x8(%rdi),%rax
  1087d8:	8b 00                	mov    (%rax),%eax
  1087da:	83 e0 02             	and    $0x2,%eax
  1087dd:	d1 e8                	shr    %eax
  1087df:	5d                   	pop    %rbp
  1087e0:	c3                   	ret    
  1087e1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1087e8:	00 00 00 
  1087eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000001087f0 <_ZNK3usb4xhci4Port22IsConnectStatusChangedEv>:
  }

  bool Port::IsConnectStatusChanged() const {
  1087f0:	55                   	push   %rbp
  1087f1:	48 89 e5             	mov    %rsp,%rbp
    return port_reg_set_.PORTSC.Read().bits.connect_status_change;
  1087f4:	48 8b 47 08          	mov    0x8(%rdi),%rax
  1087f8:	8b 00                	mov    (%rax),%eax
  1087fa:	c1 e8 11             	shr    $0x11,%eax
  1087fd:	83 e0 01             	and    $0x1,%eax
  108800:	5d                   	pop    %rbp
  108801:	c3                   	ret    
  108802:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  108809:	00 00 00 
  10880c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000108810 <_ZNK3usb4xhci4Port18IsPortResetChangedEv>:
  }

  bool Port::IsPortResetChanged() const {
  108810:	55                   	push   %rbp
  108811:	48 89 e5             	mov    %rsp,%rbp
    return port_reg_set_.PORTSC.Read().bits.port_reset_change;
  108814:	48 8b 47 08          	mov    0x8(%rdi),%rax
  108818:	8b 00                	mov    (%rax),%eax
  10881a:	c1 e8 15             	shr    $0x15,%eax
  10881d:	83 e0 01             	and    $0x1,%eax
  108820:	5d                   	pop    %rbp
  108821:	c3                   	ret    
  108822:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  108829:	00 00 00 
  10882c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000108830 <_ZNK3usb4xhci4Port5SpeedEv>:
  }

  int Port::Speed() const {
  108830:	55                   	push   %rbp
  108831:	48 89 e5             	mov    %rsp,%rbp
    return port_reg_set_.PORTSC.Read().bits.port_speed;
  108834:	48 8b 47 08          	mov    0x8(%rdi),%rax
  108838:	8b 00                	mov    (%rax),%eax
  10883a:	c1 e8 0a             	shr    $0xa,%eax
  10883d:	83 e0 0f             	and    $0xf,%eax
  108840:	5d                   	pop    %rbp
  108841:	c3                   	ret    
  108842:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  108849:	00 00 00 
  10884c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000108850 <_ZN3usb4xhci4Port5ResetEv>:
  }

  Error Port::Reset() {
  108850:	55                   	push   %rbp
  108851:	48 89 e5             	mov    %rsp,%rbp
    auto portsc = port_reg_set_.PORTSC.Read();
  108854:	48 8b 47 08          	mov    0x8(%rdi),%rax
  108858:	b9 e0 c3 00 0e       	mov    $0xe00c3e0,%ecx
    portsc.data[0] &= 0x0e00c3e0u;
  10885d:	23 08                	and    (%rax),%ecx
    portsc.data[0] |= 0x00020010u; // Write 1 to PR and CSC
  10885f:	81 c9 10 00 02 00    	or     $0x20010,%ecx
      value_.data[i] = value.data[i];
  108865:	89 08                	mov    %ecx,(%rax)
  108867:	48 8b 47 08          	mov    0x8(%rdi),%rax
  10886b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    port_reg_set_.PORTSC.Write(portsc);
    while (port_reg_set_.PORTSC.Read().bits.port_reset);
  108870:	f7 00 10 00 00 00    	testl  $0x10,(%rax)
  108876:	75 f8                	jne    108870 <_ZN3usb4xhci4Port5ResetEv+0x20>
  108878:	48 b8 00 00 00 00 25 	movabs $0x2500000000,%rax
  10887f:	00 00 00 
    return MAKE_ERROR(Error::kSuccess);
  }
  108882:	ba be 05 10 00       	mov    $0x1005be,%edx
  108887:	5d                   	pop    %rbp
  108888:	c3                   	ret    
  108889:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000108890 <_ZN3usb4xhci4Port10InitializeEv>:

  Device* Port::Initialize() {
  108890:	55                   	push   %rbp
  108891:	48 89 e5             	mov    %rsp,%rbp
    return nullptr;
  108894:	31 c0                	xor    %eax,%eax
  108896:	5d                   	pop    %rbp
  108897:	c3                   	ret    
  108898:	cc                   	int3   
  108899:	cc                   	int3   
  10889a:	cc                   	int3   
  10889b:	cc                   	int3   
  10889c:	cc                   	int3   
  10889d:	cc                   	int3   
  10889e:	cc                   	int3   
  10889f:	cc                   	int3   

00000000001088a0 <_ZN3usb4xhci6DeviceC1EhPNS0_16DoorbellRegisterE>:
  }
}

namespace usb::xhci {
  Device::Device(uint8_t slot_id, DoorbellRegister* dbreg)
      : slot_id_{slot_id}, dbreg_{dbreg} {
  1088a0:	55                   	push   %rbp
  1088a1:	48 89 e5             	mov    %rsp,%rbp
  1088a4:	53                   	push   %rbx
  1088a5:	50                   	push   %rax
  1088a6:	48 89 fb             	mov    %rdi,%rbx
    /** @brief エンドポイントに割り当て済みのクラスドライバ．
     *
     * 添字はエンドポイント番号（0 - 15）．
     * 添字 0 はどのクラスドライバからも使われないため，常に未使用．
     */
    std::array<ClassDriver*, 16> class_drivers_{};
  1088a9:	0f 57 c0             	xorps  %xmm0,%xmm0
  1088ac:	0f 11 47 78          	movups %xmm0,0x78(%rdi)
  1088b0:	0f 11 47 68          	movups %xmm0,0x68(%rdi)
  1088b4:	0f 11 47 58          	movups %xmm0,0x58(%rdi)
  1088b8:	0f 11 47 48          	movups %xmm0,0x48(%rdi)
  1088bc:	0f 11 47 38          	movups %xmm0,0x38(%rdi)
  1088c0:	0f 11 47 28          	movups %xmm0,0x28(%rdi)
  1088c4:	0f 11 47 18          	movups %xmm0,0x18(%rdi)
  1088c8:	0f 11 47 08          	movups %xmm0,0x8(%rdi)

    std::array<uint8_t, 256> buf_{};
  1088cc:	0f 11 87 88 00 00 00 	movups %xmm0,0x88(%rdi)
  1088d3:	0f 11 87 98 00 00 00 	movups %xmm0,0x98(%rdi)
  1088da:	0f 11 87 a8 00 00 00 	movups %xmm0,0xa8(%rdi)
  1088e1:	0f 11 87 b8 00 00 00 	movups %xmm0,0xb8(%rdi)
  1088e8:	0f 11 87 c8 00 00 00 	movups %xmm0,0xc8(%rdi)
  1088ef:	0f 11 87 d8 00 00 00 	movups %xmm0,0xd8(%rdi)
  1088f6:	0f 11 87 e8 00 00 00 	movups %xmm0,0xe8(%rdi)
  1088fd:	0f 11 87 f8 00 00 00 	movups %xmm0,0xf8(%rdi)
  108904:	0f 11 87 08 01 00 00 	movups %xmm0,0x108(%rdi)
  10890b:	0f 11 87 18 01 00 00 	movups %xmm0,0x118(%rdi)
  108912:	0f 11 87 28 01 00 00 	movups %xmm0,0x128(%rdi)
  108919:	0f 11 87 38 01 00 00 	movups %xmm0,0x138(%rdi)
  108920:	0f 11 87 48 01 00 00 	movups %xmm0,0x148(%rdi)
  108927:	0f 11 87 58 01 00 00 	movups %xmm0,0x158(%rdi)
  10892e:	0f 11 87 68 01 00 00 	movups %xmm0,0x168(%rdi)
  108935:	0f 11 87 78 01 00 00 	movups %xmm0,0x178(%rdi)

    Error OnDeviceDescriptorReceived(const uint8_t* buf, int len);
    Error OnConfigurationDescriptorReceived(const uint8_t* buf, int len);
    Error OnSetConfigurationCompleted(uint8_t config_value);

    bool is_initialized_ = false;
  10893c:	c6 87 8a 01 00 00 00 	movb   $0x0,0x18a(%rdi)
    int initialize_phase_ = 0;
  108943:	48 c7 87 8c 01 00 00 	movq   $0x0,0x18c(%rdi)
  10894a:	00 00 00 00 
    constexpr EndpointID() : addr_{0} {}
  10894e:	c7 87 a0 01 00 00 00 	movl   $0x0,0x1a0(%rdi)
  108955:	00 00 00 
  108958:	c7 87 b0 01 00 00 00 	movl   $0x0,0x1b0(%rdi)
  10895f:	00 00 00 
  108962:	c7 87 c0 01 00 00 00 	movl   $0x0,0x1c0(%rdi)
  108969:	00 00 00 
  10896c:	c7 87 d0 01 00 00 00 	movl   $0x0,0x1d0(%rdi)
  108973:	00 00 00 
  108976:	c7 87 e0 01 00 00 00 	movl   $0x0,0x1e0(%rdi)
  10897d:	00 00 00 
  108980:	c7 87 f0 01 00 00 00 	movl   $0x0,0x1f0(%rdi)
  108987:	00 00 00 
  10898a:	c7 87 00 02 00 00 00 	movl   $0x0,0x200(%rdi)
  108991:	00 00 00 
  108994:	c7 87 10 02 00 00 00 	movl   $0x0,0x210(%rdi)
  10899b:	00 00 00 
  10899e:	c7 87 20 02 00 00 00 	movl   $0x0,0x220(%rdi)
  1089a5:	00 00 00 
  1089a8:	c7 87 30 02 00 00 00 	movl   $0x0,0x230(%rdi)
  1089af:	00 00 00 
  1089b2:	c7 87 40 02 00 00 00 	movl   $0x0,0x240(%rdi)
  1089b9:	00 00 00 
  1089bc:	c7 87 50 02 00 00 00 	movl   $0x0,0x250(%rdi)
  1089c3:	00 00 00 
  1089c6:	c7 87 60 02 00 00 00 	movl   $0x0,0x260(%rdi)
  1089cd:	00 00 00 
  1089d0:	c7 87 70 02 00 00 00 	movl   $0x0,0x270(%rdi)
  1089d7:	00 00 00 
  1089da:	c7 87 80 02 00 00 00 	movl   $0x0,0x280(%rdi)
  1089e1:	00 00 00 
    Error InitializePhase4();

    /** OnControlCompleted の中で要求の発行元を特定するためのマップ構造．
     * ControlOut または ControlIn を発行したときに発行元が登録される．
     */
    ArrayMap<SetupData, ClassDriver*, 4> event_waiters_{};
  1089e4:	0f 11 87 98 02 00 00 	movups %xmm0,0x298(%rdi)
  1089eb:	0f 11 87 a8 02 00 00 	movups %xmm0,0x2a8(%rdi)
  1089f2:	0f 11 87 b8 02 00 00 	movups %xmm0,0x2b8(%rdi)
  1089f9:	0f 11 87 c8 02 00 00 	movups %xmm0,0x2c8(%rdi)
  108a00:	0f 11 87 d8 02 00 00 	movups %xmm0,0x2d8(%rdi)
  108a07:	0f 11 87 e8 02 00 00 	movups %xmm0,0x2e8(%rdi)
        :  __null_state_(),
  108a0e:	c6 87 98 02 00 00 00 	movb   $0x0,0x298(%rdi)
           __engaged_(false) {}
  108a15:	c6 87 a0 02 00 00 00 	movb   $0x0,0x2a0(%rdi)
            _CheckArgsDep<_Dummy>::template __enable_default<_T1, _T2>()
    > = false>
    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
    pair() _NOEXCEPT_(is_nothrow_default_constructible<first_type>::value &&
                      is_nothrow_default_constructible<second_type>::value)
        : first(), second() {}
  108a1c:	48 c7 87 a8 02 00 00 	movq   $0x0,0x2a8(%rdi)
  108a23:	00 00 00 00 
        :  __null_state_(),
  108a27:	c6 87 b0 02 00 00 00 	movb   $0x0,0x2b0(%rdi)
           __engaged_(false) {}
  108a2e:	c6 87 b8 02 00 00 00 	movb   $0x0,0x2b8(%rdi)
  108a35:	48 c7 87 c0 02 00 00 	movq   $0x0,0x2c0(%rdi)
  108a3c:	00 00 00 00 
        :  __null_state_(),
  108a40:	c6 87 c8 02 00 00 00 	movb   $0x0,0x2c8(%rdi)
           __engaged_(false) {}
  108a47:	c6 87 d0 02 00 00 00 	movb   $0x0,0x2d0(%rdi)
  108a4e:	48 c7 87 d8 02 00 00 	movq   $0x0,0x2d8(%rdi)
  108a55:	00 00 00 00 
        :  __null_state_(),
  108a59:	c6 87 e0 02 00 00 00 	movb   $0x0,0x2e0(%rdi)
           __engaged_(false) {}
  108a60:	c6 87 e8 02 00 00 00 	movb   $0x0,0x2e8(%rdi)
  108a67:	48 c7 07 18 17 10 00 	movq   $0x101718,(%rdi)
  108a6e:	40 88 b7 20 0b 00 00 	mov    %sil,0xb20(%rdi)
  108a75:	48 89 97 28 0b 00 00 	mov    %rdx,0xb28(%rdi)
    std::array<Ring*, 31> transfer_rings_; // index = dci - 1

    /** コントロール転送が完了した際に DataStageTRB や StatusStageTRB
     * から対応する SetupStageTRB を検索するためのマップ．
     */
    ArrayMap<const void*, const SetupStageTRB*, 16> setup_stage_map_{};
  108a7c:	48 81 c7 30 0c 00 00 	add    $0xc30,%rdi
  108a83:	ba 80 01 00 00       	mov    $0x180,%edx
  108a88:	31 f6                	xor    %esi,%esi
  108a8a:	e8 11 2d 00 00       	call   10b7a0 <memset>
        :  __null_state_(),
  108a8f:	c6 83 30 0c 00 00 00 	movb   $0x0,0xc30(%rbx)
           __engaged_(false) {}
  108a96:	c6 83 38 0c 00 00 00 	movb   $0x0,0xc38(%rbx)
  108a9d:	48 c7 83 40 0c 00 00 	movq   $0x0,0xc40(%rbx)
  108aa4:	00 00 00 00 
        :  __null_state_(),
  108aa8:	c6 83 48 0c 00 00 00 	movb   $0x0,0xc48(%rbx)
           __engaged_(false) {}
  108aaf:	c6 83 50 0c 00 00 00 	movb   $0x0,0xc50(%rbx)
  108ab6:	48 c7 83 58 0c 00 00 	movq   $0x0,0xc58(%rbx)
  108abd:	00 00 00 00 
        :  __null_state_(),
  108ac1:	c6 83 60 0c 00 00 00 	movb   $0x0,0xc60(%rbx)
           __engaged_(false) {}
  108ac8:	c6 83 68 0c 00 00 00 	movb   $0x0,0xc68(%rbx)
  108acf:	48 c7 83 70 0c 00 00 	movq   $0x0,0xc70(%rbx)
  108ad6:	00 00 00 00 
        :  __null_state_(),
  108ada:	c6 83 78 0c 00 00 00 	movb   $0x0,0xc78(%rbx)
           __engaged_(false) {}
  108ae1:	c6 83 80 0c 00 00 00 	movb   $0x0,0xc80(%rbx)
  108ae8:	48 c7 83 88 0c 00 00 	movq   $0x0,0xc88(%rbx)
  108aef:	00 00 00 00 
        :  __null_state_(),
  108af3:	c6 83 90 0c 00 00 00 	movb   $0x0,0xc90(%rbx)
           __engaged_(false) {}
  108afa:	c6 83 98 0c 00 00 00 	movb   $0x0,0xc98(%rbx)
  108b01:	48 c7 83 a0 0c 00 00 	movq   $0x0,0xca0(%rbx)
  108b08:	00 00 00 00 
        :  __null_state_(),
  108b0c:	c6 83 a8 0c 00 00 00 	movb   $0x0,0xca8(%rbx)
           __engaged_(false) {}
  108b13:	c6 83 b0 0c 00 00 00 	movb   $0x0,0xcb0(%rbx)
  108b1a:	48 c7 83 b8 0c 00 00 	movq   $0x0,0xcb8(%rbx)
  108b21:	00 00 00 00 
        :  __null_state_(),
  108b25:	c6 83 c0 0c 00 00 00 	movb   $0x0,0xcc0(%rbx)
           __engaged_(false) {}
  108b2c:	c6 83 c8 0c 00 00 00 	movb   $0x0,0xcc8(%rbx)
  108b33:	48 c7 83 d0 0c 00 00 	movq   $0x0,0xcd0(%rbx)
  108b3a:	00 00 00 00 
        :  __null_state_(),
  108b3e:	c6 83 d8 0c 00 00 00 	movb   $0x0,0xcd8(%rbx)
           __engaged_(false) {}
  108b45:	c6 83 e0 0c 00 00 00 	movb   $0x0,0xce0(%rbx)
  108b4c:	48 c7 83 e8 0c 00 00 	movq   $0x0,0xce8(%rbx)
  108b53:	00 00 00 00 
        :  __null_state_(),
  108b57:	c6 83 f0 0c 00 00 00 	movb   $0x0,0xcf0(%rbx)
           __engaged_(false) {}
  108b5e:	c6 83 f8 0c 00 00 00 	movb   $0x0,0xcf8(%rbx)
  108b65:	48 c7 83 00 0d 00 00 	movq   $0x0,0xd00(%rbx)
  108b6c:	00 00 00 00 
        :  __null_state_(),
  108b70:	c6 83 08 0d 00 00 00 	movb   $0x0,0xd08(%rbx)
           __engaged_(false) {}
  108b77:	c6 83 10 0d 00 00 00 	movb   $0x0,0xd10(%rbx)
  108b7e:	48 c7 83 18 0d 00 00 	movq   $0x0,0xd18(%rbx)
  108b85:	00 00 00 00 
        :  __null_state_(),
  108b89:	c6 83 20 0d 00 00 00 	movb   $0x0,0xd20(%rbx)
           __engaged_(false) {}
  108b90:	c6 83 28 0d 00 00 00 	movb   $0x0,0xd28(%rbx)
  108b97:	48 c7 83 30 0d 00 00 	movq   $0x0,0xd30(%rbx)
  108b9e:	00 00 00 00 
        :  __null_state_(),
  108ba2:	c6 83 38 0d 00 00 00 	movb   $0x0,0xd38(%rbx)
           __engaged_(false) {}
  108ba9:	c6 83 40 0d 00 00 00 	movb   $0x0,0xd40(%rbx)
  108bb0:	48 c7 83 48 0d 00 00 	movq   $0x0,0xd48(%rbx)
  108bb7:	00 00 00 00 
        :  __null_state_(),
  108bbb:	c6 83 50 0d 00 00 00 	movb   $0x0,0xd50(%rbx)
           __engaged_(false) {}
  108bc2:	c6 83 58 0d 00 00 00 	movb   $0x0,0xd58(%rbx)
  108bc9:	48 c7 83 60 0d 00 00 	movq   $0x0,0xd60(%rbx)
  108bd0:	00 00 00 00 
        :  __null_state_(),
  108bd4:	c6 83 68 0d 00 00 00 	movb   $0x0,0xd68(%rbx)
           __engaged_(false) {}
  108bdb:	c6 83 70 0d 00 00 00 	movb   $0x0,0xd70(%rbx)
  108be2:	48 c7 83 78 0d 00 00 	movq   $0x0,0xd78(%rbx)
  108be9:	00 00 00 00 
        :  __null_state_(),
  108bed:	c6 83 80 0d 00 00 00 	movb   $0x0,0xd80(%rbx)
           __engaged_(false) {}
  108bf4:	c6 83 88 0d 00 00 00 	movb   $0x0,0xd88(%rbx)
  108bfb:	48 c7 83 90 0d 00 00 	movq   $0x0,0xd90(%rbx)
  108c02:	00 00 00 00 
        :  __null_state_(),
  108c06:	c6 83 98 0d 00 00 00 	movb   $0x0,0xd98(%rbx)
           __engaged_(false) {}
  108c0d:	c6 83 a0 0d 00 00 00 	movb   $0x0,0xda0(%rbx)
  108c14:	48 c7 83 a8 0d 00 00 	movq   $0x0,0xda8(%rbx)
  108c1b:	00 00 00 00 
  }
  108c1f:	48 83 c4 08          	add    $0x8,%rsp
  108c23:	5b                   	pop    %rbx
  108c24:	5d                   	pop    %rbp
  108c25:	c3                   	ret    
  108c26:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  108c2d:	00 00 00 

0000000000108c30 <_ZN3usb4xhci6Device10InitializeEv>:

  Error Device::Initialize() {
  108c30:	55                   	push   %rbp
  108c31:	48 89 e5             	mov    %rsp,%rbp
    state_ = State::kBlank;
  108c34:	c7 87 30 0b 00 00 01 	movl   $0x1,0xb30(%rdi)
  108c3b:	00 00 00 
  108c3e:	48 b8 00 00 00 00 5a 	movabs $0x5a00000000,%rax
  108c45:	00 00 00 
    for (size_t i = 0; i < 31; ++i) {
      const DeviceContextIndex dci(i + 1);
      //on_transferred_callbacks_[i] = nullptr;
    }
    return MAKE_ERROR(Error::kSuccess);
  108c48:	ba 37 05 10 00       	mov    $0x100537,%edx
  108c4d:	5d                   	pop    %rbp
  108c4e:	c3                   	ret    
  108c4f:	90                   	nop

0000000000108c50 <_ZN3usb4xhci6Device23SelectForSlotAssignmentEv>:
  }

  void Device::SelectForSlotAssignment() {
  108c50:	55                   	push   %rbp
  108c51:	48 89 e5             	mov    %rsp,%rbp
    state_ = State::kSlotAssigning;
  108c54:	c7 87 30 0b 00 00 02 	movl   $0x2,0xb30(%rdi)
  108c5b:	00 00 00 
  }
  108c5e:	5d                   	pop    %rbp
  108c5f:	c3                   	ret    

0000000000108c60 <_ZN3usb4xhci6Device17AllocTransferRingENS0_18DeviceContextIndexEm>:

  Ring* Device::AllocTransferRing(DeviceContextIndex index, size_t buf_size) {
  108c60:	55                   	push   %rbp
  108c61:	48 89 e5             	mov    %rsp,%rbp
  108c64:	41 57                	push   %r15
  108c66:	41 56                	push   %r14
  108c68:	41 54                	push   %r12
  108c6a:	53                   	push   %rbx
  108c6b:	49 89 d7             	mov    %rdx,%r15
  108c6e:	41 89 f6             	mov    %esi,%r14d
  108c71:	49 89 fc             	mov    %rdi,%r12
  108c74:	bf 20 00 00 00       	mov    $0x20,%edi
  108c79:	be 40 00 00 00       	mov    $0x40,%esi
  108c7e:	ba 00 10 00 00       	mov    $0x1000,%edx
  108c83:	e8 b8 d9 ff ff       	call   106640 <_ZN3usb8AllocMemEmjj>
  108c88:	48 89 c3             	mov    %rax,%rbx
    int i = index.value - 1;
    auto tr = AllocArray<Ring>(1, 64, 4096);
    if (tr) {
  108c8b:	48 85 c0             	test   %rax,%rax
  108c8e:	74 0b                	je     108c9b <_ZN3usb4xhci6Device17AllocTransferRingENS0_18DeviceContextIndexEm+0x3b>
      tr->Initialize(buf_size);
  108c90:	48 89 df             	mov    %rbx,%rdi
  108c93:	4c 89 fe             	mov    %r15,%rsi
  108c96:	e8 95 e7 ff ff       	call   107430 <_ZN3usb4xhci4Ring10InitializeEm>
    }
    transfer_rings_[i] = tr;
  108c9b:	49 63 c6             	movslq %r14d,%rax
  108c9e:	49 89 9c c4 30 0b 00 	mov    %rbx,0xb30(%r12,%rax,8)
  108ca5:	00 
    return tr;
  108ca6:	48 89 d8             	mov    %rbx,%rax
  108ca9:	5b                   	pop    %rbx
  108caa:	41 5c                	pop    %r12
  108cac:	41 5e                	pop    %r14
  108cae:	41 5f                	pop    %r15
  108cb0:	5d                   	pop    %rbp
  108cb1:	c3                   	ret    
  108cb2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  108cb9:	00 00 00 
  108cbc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000108cc0 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE>:
  }

  Error Device::ControlIn(EndpointID ep_id, SetupData setup_data,
                          void* buf, int len, ClassDriver* issuer) {
  108cc0:	55                   	push   %rbp
  108cc1:	48 89 e5             	mov    %rsp,%rbp
  108cc4:	41 57                	push   %r15
  108cc6:	41 56                	push   %r14
  108cc8:	41 55                	push   %r13
  108cca:	41 54                	push   %r12
  108ccc:	53                   	push   %rbx
  108ccd:	48 83 ec 38          	sub    $0x38,%rsp
  108cd1:	45 89 c4             	mov    %r8d,%r12d
  108cd4:	49 89 cd             	mov    %rcx,%r13
  108cd7:	49 89 d6             	mov    %rdx,%r14
  108cda:	48 89 f3             	mov    %rsi,%rbx
  108cdd:	49 89 ff             	mov    %rdi,%r15
    constexpr EndpointID(const EndpointID& ep_id) : addr_{ep_id.addr_} {}
  108ce0:	8b 06                	mov    (%rsi),%eax
  108ce2:	89 45 b8             	mov    %eax,-0x48(%rbp)
  108ce5:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
    if (auto err = usb::Device::ControlIn(ep_id, setup_data, buf, len, issuer)) {
  108ce9:	e8 02 da ff ff       	call   1066f0 <_ZN3usb6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE>
  108cee:	85 c0                	test   %eax,%eax
  108cf0:	74 12                	je     108d04 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x44>
  108cf2:	48 b9 00 00 00 00 ff 	movabs $0xffffffff00000000,%rcx
  108cf9:	ff ff ff 
  108cfc:	48 21 c1             	and    %rax,%rcx
  108cff:	e9 63 05 00 00       	jmp    109267 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x5a7>
    int Address() const { return addr_; }
  108d04:	8b 13                	mov    (%rbx),%edx
      return err;
    }

    Log(kDebug, "Device::ControlIn: ep addr %d, buf 0x%08x, len %d\n",
  108d06:	be 90 09 10 00       	mov    $0x100990,%esi
  108d0b:	bf 07 00 00 00       	mov    $0x7,%edi
  108d10:	4c 89 e9             	mov    %r13,%rcx
  108d13:	45 89 e0             	mov    %r12d,%r8d
  108d16:	31 c0                	xor    %eax,%eax
  108d18:	e8 03 d6 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
    int Number() const { return addr_ >> 1; }
  108d1d:	48 63 1b             	movslq (%rbx),%rbx
  108d20:	ba 37 05 10 00       	mov    $0x100537,%edx
  108d25:	48 83 fb 1f          	cmp    $0x1f,%rbx
        ep_id.Address(), buf, len);
    if (ep_id.Number() < 0 || 15 < ep_id.Number()) {
  108d29:	76 14                	jbe    108d3f <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x7f>
  108d2b:	48 b9 00 00 00 00 74 	movabs $0x7400000000,%rcx
  108d32:	00 00 00 
  108d35:	b8 08 00 00 00       	mov    $0x8,%eax
  108d3a:	e9 28 05 00 00       	jmp    109267 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x5a7>
  108d3f:	4c 89 7d d0          	mov    %r15,-0x30(%rbp)
    }

    // control endpoint must be dir_in=true
    const DeviceContextIndex dci{ep_id};

    Ring* tr = transfer_rings_[dci.value - 1];
  108d43:	4d 8b bc df 30 0b 00 	mov    0xb30(%r15,%rbx,8),%r15
  108d4a:	00 

    if (tr == nullptr) {
  108d4b:	4d 85 ff             	test   %r15,%r15
  108d4e:	0f 84 78 01 00 00    	je     108ecc <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x20c>
  108d54:	48 b8 00 00 00 00 00 	movabs $0x100000000000,%rax
  108d5b:	10 00 00 
      bits.trb_type = Type;
  108d5e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  108d62:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  108d69:	00 
      return MAKE_ERROR(Error::kTransferRingNotSet);
    }

    auto status = StatusStageTRB{};

    if (buf) {
  108d6a:	4d 85 ed             	test   %r13,%r13
  108d6d:	0f 84 6d 01 00 00    	je     108ee0 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x220>
      auto setup_trb_position = TRBDynamicCast<SetupStageTRB>(tr->Push(
            MakeSetupStageTRB(setup_data, SetupStageTRB::kInDataStage)));
  108d73:	4c 89 75 c0          	mov    %r14,-0x40(%rbp)
  108d77:	48 b8 08 00 00 00 40 	movabs $0x3084000000008,%rax
  108d7e:	08 03 00 
  108d81:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  108d85:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  108d89:	4c 89 ff             	mov    %r15,%rdi
  108d8c:	e8 6f e7 ff ff       	call   107500 <_ZN3usb4xhci4Ring4PushERKNSt3__15arrayIjLm4EEE>
  108d91:	b9 00 fc 00 00       	mov    $0xfc00,%ecx
    if (ToType::Type == trb->bits.trb_type) {
  108d96:	23 48 0c             	and    0xc(%rax),%ecx
  108d99:	45 31 f6             	xor    %r14d,%r14d
  108d9c:	81 f9 00 08 00 00    	cmp    $0x800,%ecx
      auto setup_trb_position = TRBDynamicCast<SetupStageTRB>(tr->Push(
  108da2:	49 0f 45 c6          	cmovne %r14,%rax
  108da6:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    data.bits.trb_transfer_length = len;
  108daa:	41 81 e4 ff ff 01 00 	and    $0x1ffff,%r12d
      auto data = MakeDataStageTRB(buf, len, true);
  108db1:	4c 89 6d c0          	mov    %r13,-0x40(%rbp)
  108db5:	48 b8 00 00 00 00 20 	movabs $0x10c2000000000,%rax
  108dbc:	0c 01 00 
      data.bits.interrupt_on_completion = true;
  108dbf:	4c 09 e0             	or     %r12,%rax
  108dc2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  108dc6:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  108dca:	4c 89 ff             	mov    %r15,%rdi
  108dcd:	e8 2e e7 ff ff       	call   107500 <_ZN3usb4xhci4Ring4PushERKNSt3__15arrayIjLm4EEE>
  108dd2:	49 89 c4             	mov    %rax,%r12
  108dd5:	48 8d 75 a8          	lea    -0x58(%rbp),%rsi
  108dd9:	4c 89 ff             	mov    %r15,%rdi
  108ddc:	e8 1f e7 ff ff       	call   107500 <_ZN3usb4xhci4Ring4PushERKNSt3__15arrayIjLm4EEE>
  108de1:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
        return this->__engaged_;
  108de5:	80 be 38 0c 00 00 00 	cmpb   $0x0,0xc38(%rsi)
        if (!table_[i].first) {
  108dec:	0f 84 2d 02 00 00    	je     10901f <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x35f>
  108df2:	80 be 50 0c 00 00 00 	cmpb   $0x0,0xc50(%rsi)
  108df9:	ba 37 05 10 00       	mov    $0x100537,%edx
  108dfe:	0f 84 2c 02 00 00    	je     109030 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x370>
  108e04:	80 be 68 0c 00 00 00 	cmpb   $0x0,0xc68(%rsi)
  108e0b:	0f 84 3d 02 00 00    	je     10904e <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x38e>
  108e11:	80 be 80 0c 00 00 00 	cmpb   $0x0,0xc80(%rsi)
  108e18:	0f 84 54 02 00 00    	je     109072 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x3b2>
  108e1e:	80 be 98 0c 00 00 00 	cmpb   $0x0,0xc98(%rsi)
  108e25:	0f 84 6b 02 00 00    	je     109096 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x3d6>
  108e2b:	80 be b0 0c 00 00 00 	cmpb   $0x0,0xcb0(%rsi)
  108e32:	0f 84 82 02 00 00    	je     1090ba <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x3fa>
  108e38:	80 be c8 0c 00 00 00 	cmpb   $0x0,0xcc8(%rsi)
  108e3f:	0f 84 99 02 00 00    	je     1090de <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x41e>
  108e45:	80 be e0 0c 00 00 00 	cmpb   $0x0,0xce0(%rsi)
  108e4c:	0f 84 b0 02 00 00    	je     109102 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x442>
  108e52:	80 be f8 0c 00 00 00 	cmpb   $0x0,0xcf8(%rsi)
  108e59:	0f 84 c7 02 00 00    	je     109126 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x466>
  108e5f:	80 be 10 0d 00 00 00 	cmpb   $0x0,0xd10(%rsi)
  108e66:	0f 84 de 02 00 00    	je     10914a <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x48a>
  108e6c:	80 be 28 0d 00 00 00 	cmpb   $0x0,0xd28(%rsi)
  108e73:	0f 84 f5 02 00 00    	je     10916e <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x4ae>
  108e79:	80 be 40 0d 00 00 00 	cmpb   $0x0,0xd40(%rsi)
  108e80:	0f 84 09 03 00 00    	je     10918f <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x4cf>
  108e86:	80 be 58 0d 00 00 00 	cmpb   $0x0,0xd58(%rsi)
  108e8d:	0f 84 1d 03 00 00    	je     1091b0 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x4f0>
  108e93:	80 be 70 0d 00 00 00 	cmpb   $0x0,0xd70(%rsi)
  108e9a:	0f 84 2e 03 00 00    	je     1091ce <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x50e>
  108ea0:	80 be 88 0d 00 00 00 	cmpb   $0x0,0xd88(%rsi)
  108ea7:	0f 84 3f 03 00 00    	je     1091ec <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x52c>
  108ead:	80 be a0 0d 00 00 00 	cmpb   $0x0,0xda0(%rsi)
  108eb4:	0f 85 98 03 00 00    	jne    109252 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x592>
  108eba:	48 8d 86 a0 0d 00 00 	lea    0xda0(%rsi),%rax
  108ec1:	41 be 0f 00 00 00    	mov    $0xf,%r14d
  108ec7:	e9 2d 03 00 00       	jmp    1091f9 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x539>
  108ecc:	48 b9 00 00 00 00 7d 	movabs $0x7d00000000,%rcx
  108ed3:	00 00 00 
  108ed6:	b8 09 00 00 00       	mov    $0x9,%eax
  108edb:	e9 87 03 00 00       	jmp    109267 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x5a7>
      tr->Push(status);

      setup_stage_map_.Put(data_trb_position, setup_trb_position);
    } else {
      auto setup_trb_position = TRBDynamicCast<SetupStageTRB>(tr->Push(
            MakeSetupStageTRB(setup_data, SetupStageTRB::kNoDataStage)));
  108ee0:	4c 89 75 c0          	mov    %r14,-0x40(%rbp)
  108ee4:	48 b8 08 00 00 00 40 	movabs $0x84000000008,%rax
  108eeb:	08 00 00 
  108eee:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  108ef2:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  108ef6:	4c 89 ff             	mov    %r15,%rdi
  108ef9:	e8 02 e6 ff ff       	call   107500 <_ZN3usb4xhci4Ring4PushERKNSt3__15arrayIjLm4EEE>
  108efe:	49 89 c6             	mov    %rax,%r14
  108f01:	b8 00 fc 00 00       	mov    $0xfc00,%eax
  108f06:	41 23 46 0c          	and    0xc(%r14),%eax
  108f0a:	45 31 e4             	xor    %r12d,%r12d
  108f0d:	3d 00 08 00 00       	cmp    $0x800,%eax
      auto setup_trb_position = TRBDynamicCast<SetupStageTRB>(tr->Push(
  108f12:	4d 0f 45 f4          	cmovne %r12,%r14
  108f16:	48 b8 00 00 00 00 20 	movabs $0x1002000000000,%rax
  108f1d:	00 01 00 
      status.bits.direction = true;
      status.bits.interrupt_on_completion = true;
  108f20:	48 09 45 b0          	or     %rax,-0x50(%rbp)
  108f24:	48 8d 75 a8          	lea    -0x58(%rbp),%rsi
  108f28:	4c 89 ff             	mov    %r15,%rdi
  108f2b:	e8 d0 e5 ff ff       	call   107500 <_ZN3usb4xhci4Ring4PushERKNSt3__15arrayIjLm4EEE>
  108f30:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  108f34:	80 be 38 0c 00 00 00 	cmpb   $0x0,0xc38(%rsi)
  108f3b:	0f 84 01 01 00 00    	je     109042 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x382>
  108f41:	80 be 50 0c 00 00 00 	cmpb   $0x0,0xc50(%rsi)
  108f48:	0f 84 12 01 00 00    	je     109060 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x3a0>
  108f4e:	80 be 68 0c 00 00 00 	cmpb   $0x0,0xc68(%rsi)
  108f55:	0f 84 29 01 00 00    	je     109084 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x3c4>
  108f5b:	80 be 80 0c 00 00 00 	cmpb   $0x0,0xc80(%rsi)
  108f62:	0f 84 40 01 00 00    	je     1090a8 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x3e8>
  108f68:	80 be 98 0c 00 00 00 	cmpb   $0x0,0xc98(%rsi)
  108f6f:	0f 84 57 01 00 00    	je     1090cc <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x40c>
  108f75:	80 be b0 0c 00 00 00 	cmpb   $0x0,0xcb0(%rsi)
  108f7c:	0f 84 6e 01 00 00    	je     1090f0 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x430>
  108f82:	80 be c8 0c 00 00 00 	cmpb   $0x0,0xcc8(%rsi)
  108f89:	0f 84 85 01 00 00    	je     109114 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x454>
  108f8f:	80 be e0 0c 00 00 00 	cmpb   $0x0,0xce0(%rsi)
  108f96:	0f 84 9c 01 00 00    	je     109138 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x478>
  108f9c:	80 be f8 0c 00 00 00 	cmpb   $0x0,0xcf8(%rsi)
  108fa3:	0f 84 b3 01 00 00    	je     10915c <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x49c>
  108fa9:	80 be 10 0d 00 00 00 	cmpb   $0x0,0xd10(%rsi)
  108fb0:	0f 84 c7 01 00 00    	je     10917d <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x4bd>
  108fb6:	80 be 28 0d 00 00 00 	cmpb   $0x0,0xd28(%rsi)
  108fbd:	0f 84 db 01 00 00    	je     10919e <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x4de>
  108fc3:	80 be 40 0d 00 00 00 	cmpb   $0x0,0xd40(%rsi)
  108fca:	0f 84 ef 01 00 00    	je     1091bf <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x4ff>
  108fd0:	80 be 58 0d 00 00 00 	cmpb   $0x0,0xd58(%rsi)
  108fd7:	0f 84 00 02 00 00    	je     1091dd <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x51d>
  108fdd:	80 be 70 0d 00 00 00 	cmpb   $0x0,0xd70(%rsi)
  108fe4:	0f 84 2c 02 00 00    	je     109216 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x556>
  108fea:	80 be 88 0d 00 00 00 	cmpb   $0x0,0xd88(%rsi)
  108ff1:	0f 84 2e 02 00 00    	je     109225 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x565>
  108ff7:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  108ffb:	80 be a0 0d 00 00 00 	cmpb   $0x0,0xda0(%rsi)
  109002:	ba 37 05 10 00       	mov    $0x100537,%edx
  109007:	0f 85 45 02 00 00    	jne    109252 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x592>
  10900d:	48 8d 8e a0 0d 00 00 	lea    0xda0(%rsi),%rcx
  109014:	41 bc 0f 00 00 00    	mov    $0xf,%r12d
  10901a:	e9 17 02 00 00       	jmp    109236 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x576>
  10901f:	48 8d 86 38 0c 00 00 	lea    0xc38(%rsi),%rax
  109026:	ba 37 05 10 00       	mov    $0x100537,%edx
  10902b:	e9 c9 01 00 00       	jmp    1091f9 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x539>
  109030:	48 8d 86 50 0c 00 00 	lea    0xc50(%rsi),%rax
  109037:	41 be 01 00 00 00    	mov    $0x1,%r14d
  10903d:	e9 b7 01 00 00       	jmp    1091f9 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x539>
  109042:	48 8d 8e 38 0c 00 00 	lea    0xc38(%rsi),%rcx
  109049:	e9 e8 01 00 00       	jmp    109236 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x576>
  10904e:	48 8d 86 68 0c 00 00 	lea    0xc68(%rsi),%rax
  109055:	41 be 02 00 00 00    	mov    $0x2,%r14d
  10905b:	e9 99 01 00 00       	jmp    1091f9 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x539>
  109060:	48 8d 8e 50 0c 00 00 	lea    0xc50(%rsi),%rcx
  109067:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  10906d:	e9 c4 01 00 00       	jmp    109236 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x576>
  109072:	48 8d 86 80 0c 00 00 	lea    0xc80(%rsi),%rax
  109079:	41 be 03 00 00 00    	mov    $0x3,%r14d
  10907f:	e9 75 01 00 00       	jmp    1091f9 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x539>
  109084:	48 8d 8e 68 0c 00 00 	lea    0xc68(%rsi),%rcx
  10908b:	41 bc 02 00 00 00    	mov    $0x2,%r12d
  109091:	e9 a0 01 00 00       	jmp    109236 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x576>
  109096:	48 8d 86 98 0c 00 00 	lea    0xc98(%rsi),%rax
  10909d:	41 be 04 00 00 00    	mov    $0x4,%r14d
  1090a3:	e9 51 01 00 00       	jmp    1091f9 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x539>
  1090a8:	48 8d 8e 80 0c 00 00 	lea    0xc80(%rsi),%rcx
  1090af:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  1090b5:	e9 7c 01 00 00       	jmp    109236 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x576>
  1090ba:	48 8d 86 b0 0c 00 00 	lea    0xcb0(%rsi),%rax
  1090c1:	41 be 05 00 00 00    	mov    $0x5,%r14d
  1090c7:	e9 2d 01 00 00       	jmp    1091f9 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x539>
  1090cc:	48 8d 8e 98 0c 00 00 	lea    0xc98(%rsi),%rcx
  1090d3:	41 bc 04 00 00 00    	mov    $0x4,%r12d
  1090d9:	e9 58 01 00 00       	jmp    109236 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x576>
  1090de:	48 8d 86 c8 0c 00 00 	lea    0xcc8(%rsi),%rax
  1090e5:	41 be 06 00 00 00    	mov    $0x6,%r14d
  1090eb:	e9 09 01 00 00       	jmp    1091f9 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x539>
  1090f0:	48 8d 8e b0 0c 00 00 	lea    0xcb0(%rsi),%rcx
  1090f7:	41 bc 05 00 00 00    	mov    $0x5,%r12d
  1090fd:	e9 34 01 00 00       	jmp    109236 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x576>
  109102:	48 8d 86 e0 0c 00 00 	lea    0xce0(%rsi),%rax
  109109:	41 be 07 00 00 00    	mov    $0x7,%r14d
  10910f:	e9 e5 00 00 00       	jmp    1091f9 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x539>
  109114:	48 8d 8e c8 0c 00 00 	lea    0xcc8(%rsi),%rcx
  10911b:	41 bc 06 00 00 00    	mov    $0x6,%r12d
  109121:	e9 10 01 00 00       	jmp    109236 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x576>
  109126:	48 8d 86 f8 0c 00 00 	lea    0xcf8(%rsi),%rax
  10912d:	41 be 08 00 00 00    	mov    $0x8,%r14d
  109133:	e9 c1 00 00 00       	jmp    1091f9 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x539>
  109138:	48 8d 8e e0 0c 00 00 	lea    0xce0(%rsi),%rcx
  10913f:	41 bc 07 00 00 00    	mov    $0x7,%r12d
  109145:	e9 ec 00 00 00       	jmp    109236 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x576>
  10914a:	48 8d 86 10 0d 00 00 	lea    0xd10(%rsi),%rax
  109151:	41 be 09 00 00 00    	mov    $0x9,%r14d
  109157:	e9 9d 00 00 00       	jmp    1091f9 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x539>
  10915c:	48 8d 8e f8 0c 00 00 	lea    0xcf8(%rsi),%rcx
  109163:	41 bc 08 00 00 00    	mov    $0x8,%r12d
  109169:	e9 c8 00 00 00       	jmp    109236 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x576>
  10916e:	48 8d 86 28 0d 00 00 	lea    0xd28(%rsi),%rax
  109175:	41 be 0a 00 00 00    	mov    $0xa,%r14d
  10917b:	eb 7c                	jmp    1091f9 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x539>
  10917d:	48 8d 8e 10 0d 00 00 	lea    0xd10(%rsi),%rcx
  109184:	41 bc 09 00 00 00    	mov    $0x9,%r12d
  10918a:	e9 a7 00 00 00       	jmp    109236 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x576>
  10918f:	48 8d 86 40 0d 00 00 	lea    0xd40(%rsi),%rax
  109196:	41 be 0b 00 00 00    	mov    $0xb,%r14d
  10919c:	eb 5b                	jmp    1091f9 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x539>
  10919e:	48 8d 8e 28 0d 00 00 	lea    0xd28(%rsi),%rcx
  1091a5:	41 bc 0a 00 00 00    	mov    $0xa,%r12d
  1091ab:	e9 86 00 00 00       	jmp    109236 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x576>
  1091b0:	48 8d 86 58 0d 00 00 	lea    0xd58(%rsi),%rax
  1091b7:	41 be 0c 00 00 00    	mov    $0xc,%r14d
  1091bd:	eb 3a                	jmp    1091f9 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x539>
  1091bf:	48 8d 8e 40 0d 00 00 	lea    0xd40(%rsi),%rcx
  1091c6:	41 bc 0b 00 00 00    	mov    $0xb,%r12d
  1091cc:	eb 68                	jmp    109236 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x576>
  1091ce:	48 8d 86 70 0d 00 00 	lea    0xd70(%rsi),%rax
  1091d5:	41 be 0d 00 00 00    	mov    $0xd,%r14d
  1091db:	eb 1c                	jmp    1091f9 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x539>
  1091dd:	48 8d 8e 58 0d 00 00 	lea    0xd58(%rsi),%rcx
  1091e4:	41 bc 0c 00 00 00    	mov    $0xc,%r12d
  1091ea:	eb 4a                	jmp    109236 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x576>
  1091ec:	48 8d 86 88 0d 00 00 	lea    0xd88(%rsi),%rax
  1091f3:	41 be 0e 00 00 00    	mov    $0xe,%r14d
    reference operator[](size_type __n)             {return __elems_[__n];}
  1091f9:	4b 8d 0c 76          	lea    (%r14,%r14,2),%rcx
  1091fd:	4c 89 a4 ce 30 0c 00 	mov    %r12,0xc30(%rsi,%rcx,8)
  109204:	00 
        this->__engaged_ = true;
  109205:	c6 00 01             	movb   $0x1,(%rax)
  109208:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
          table_[i].second = value;
  10920c:	48 89 84 ce 40 0c 00 	mov    %rax,0xc40(%rsi,%rcx,8)
  109213:	00 
  109214:	eb 3c                	jmp    109252 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x592>
  109216:	48 8d 8e 70 0d 00 00 	lea    0xd70(%rsi),%rcx
  10921d:	41 bc 0d 00 00 00    	mov    $0xd,%r12d
  109223:	eb 11                	jmp    109236 <_ZN3usb4xhci6Device9ControlInENS_10EndpointIDENS_9SetupDataEPviPNS_11ClassDriverE+0x576>
  109225:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  109229:	48 8d 8e 88 0d 00 00 	lea    0xd88(%rsi),%rcx
  109230:	41 bc 0e 00 00 00    	mov    $0xe,%r12d
  109236:	4b 8d 14 64          	lea    (%r12,%r12,2),%rdx
  10923a:	48 89 84 d6 30 0c 00 	mov    %rax,0xc30(%rsi,%rdx,8)
  109241:	00 
  109242:	c6 01 01             	movb   $0x1,(%rcx)
  109245:	4c 89 b4 d6 40 0c 00 	mov    %r14,0xc40(%rsi,%rdx,8)
  10924c:	00 
  10924d:	ba 37 05 10 00       	mov    $0x100537,%edx
      auto status_trb_position = tr->Push(status);

      setup_stage_map_.Put(status_trb_position, setup_trb_position);
    }

    dbreg_->Ring(dci.value);
  109252:	48 8b 86 28 0b 00 00 	mov    0xb28(%rsi),%rax
  109259:	89 18                	mov    %ebx,(%rax)
  10925b:	48 b9 00 00 00 00 97 	movabs $0x9700000000,%rcx
  109262:	00 00 00 
  109265:	31 c0                	xor    %eax,%eax

    return MAKE_ERROR(Error::kSuccess);
  }
  109267:	89 c0                	mov    %eax,%eax
  109269:	48 09 c8             	or     %rcx,%rax
  10926c:	48 83 c4 38          	add    $0x38,%rsp
  109270:	5b                   	pop    %rbx
  109271:	41 5c                	pop    %r12
  109273:	41 5d                	pop    %r13
  109275:	41 5e                	pop    %r14
  109277:	41 5f                	pop    %r15
  109279:	5d                   	pop    %rbp
  10927a:	c3                   	ret    
  10927b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000109280 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE>:

  Error Device::ControlOut(EndpointID ep_id, SetupData setup_data,
                           const void* buf, int len, ClassDriver* issuer) {
  109280:	55                   	push   %rbp
  109281:	48 89 e5             	mov    %rsp,%rbp
  109284:	41 57                	push   %r15
  109286:	41 56                	push   %r14
  109288:	41 55                	push   %r13
  10928a:	41 54                	push   %r12
  10928c:	53                   	push   %rbx
  10928d:	48 83 ec 38          	sub    $0x38,%rsp
  109291:	45 89 c4             	mov    %r8d,%r12d
  109294:	49 89 cd             	mov    %rcx,%r13
  109297:	49 89 d6             	mov    %rdx,%r14
  10929a:	48 89 f3             	mov    %rsi,%rbx
  10929d:	49 89 ff             	mov    %rdi,%r15
    constexpr EndpointID(const EndpointID& ep_id) : addr_{ep_id.addr_} {}
  1092a0:	8b 06                	mov    (%rsi),%eax
  1092a2:	89 45 b8             	mov    %eax,-0x48(%rbp)
  1092a5:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
    if (auto err = usb::Device::ControlOut(ep_id, setup_data, buf, len, issuer)) {
  1092a9:	e8 d2 d4 ff ff       	call   106780 <_ZN3usb6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE>
  1092ae:	85 c0                	test   %eax,%eax
  1092b0:	74 12                	je     1092c4 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x44>
  1092b2:	48 b9 00 00 00 00 ff 	movabs $0xffffffff00000000,%rcx
  1092b9:	ff ff ff 
  1092bc:	48 21 c1             	and    %rax,%rcx
  1092bf:	e9 59 05 00 00       	jmp    10981d <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x59d>
    int Address() const { return addr_; }
  1092c4:	8b 13                	mov    (%rbx),%edx
      return err;
    }

    Log(kDebug, "Device::ControlOut: ep addr %d, buf 0x%08x, len %d\n",
  1092c6:	be 56 10 10 00       	mov    $0x101056,%esi
  1092cb:	bf 07 00 00 00       	mov    $0x7,%edi
  1092d0:	4c 89 e9             	mov    %r13,%rcx
  1092d3:	45 89 e0             	mov    %r12d,%r8d
  1092d6:	31 c0                	xor    %eax,%eax
  1092d8:	e8 43 d0 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
    int Number() const { return addr_ >> 1; }
  1092dd:	48 63 1b             	movslq (%rbx),%rbx
  1092e0:	ba 37 05 10 00       	mov    $0x100537,%edx
  1092e5:	48 83 fb 1f          	cmp    $0x1f,%rbx
        ep_id.Address(), buf, len);
    if (ep_id.Number() < 0 || 15 < ep_id.Number()) {
  1092e9:	76 14                	jbe    1092ff <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x7f>
  1092eb:	48 b9 00 00 00 00 a3 	movabs $0xa300000000,%rcx
  1092f2:	00 00 00 
  1092f5:	b8 08 00 00 00       	mov    $0x8,%eax
  1092fa:	e9 1e 05 00 00       	jmp    10981d <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x59d>
  1092ff:	4c 89 7d d0          	mov    %r15,-0x30(%rbp)
    }

    // control endpoint must be dir_in=true
    const DeviceContextIndex dci{ep_id};

    Ring* tr = transfer_rings_[dci.value - 1];
  109303:	4d 8b bc df 30 0b 00 	mov    0xb30(%r15,%rbx,8),%r15
  10930a:	00 

    if (tr == nullptr) {
  10930b:	4d 85 ff             	test   %r15,%r15
  10930e:	0f 84 78 01 00 00    	je     10948c <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x20c>
  109314:	48 b8 00 00 00 00 00 	movabs $0x1100000000000,%rax
  10931b:	10 01 00 
      return MAKE_ERROR(Error::kTransferRingNotSet);
    }

    auto status = StatusStageTRB{};
    status.bits.direction = true;
  10931e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  109322:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  109329:	00 

    if (buf) {
  10932a:	4d 85 ed             	test   %r13,%r13
  10932d:	0f 84 6d 01 00 00    	je     1094a0 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x220>
      auto setup_trb_position = TRBDynamicCast<SetupStageTRB>(tr->Push(
            MakeSetupStageTRB(setup_data, SetupStageTRB::kOutDataStage)));
  109333:	4c 89 75 c0          	mov    %r14,-0x40(%rbp)
  109337:	48 b8 08 00 00 00 40 	movabs $0x2084000000008,%rax
  10933e:	08 02 00 
  109341:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  109345:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  109349:	4c 89 ff             	mov    %r15,%rdi
  10934c:	e8 af e1 ff ff       	call   107500 <_ZN3usb4xhci4Ring4PushERKNSt3__15arrayIjLm4EEE>
  109351:	b9 00 fc 00 00       	mov    $0xfc00,%ecx
  109356:	23 48 0c             	and    0xc(%rax),%ecx
  109359:	45 31 f6             	xor    %r14d,%r14d
  10935c:	81 f9 00 08 00 00    	cmp    $0x800,%ecx
      auto setup_trb_position = TRBDynamicCast<SetupStageTRB>(tr->Push(
  109362:	49 0f 45 c6          	cmovne %r14,%rax
  109366:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    data.bits.trb_transfer_length = len;
  10936a:	41 81 e4 ff ff 01 00 	and    $0x1ffff,%r12d
      auto data = MakeDataStageTRB(buf, len, false);
  109371:	4c 89 6d c0          	mov    %r13,-0x40(%rbp)
  109375:	48 b8 00 00 00 00 20 	movabs $0xc2000000000,%rax
  10937c:	0c 00 00 
      data.bits.interrupt_on_completion = true;
  10937f:	4c 09 e0             	or     %r12,%rax
  109382:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  109386:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  10938a:	4c 89 ff             	mov    %r15,%rdi
  10938d:	e8 6e e1 ff ff       	call   107500 <_ZN3usb4xhci4Ring4PushERKNSt3__15arrayIjLm4EEE>
  109392:	49 89 c4             	mov    %rax,%r12
  109395:	48 8d 75 a8          	lea    -0x58(%rbp),%rsi
  109399:	4c 89 ff             	mov    %r15,%rdi
  10939c:	e8 5f e1 ff ff       	call   107500 <_ZN3usb4xhci4Ring4PushERKNSt3__15arrayIjLm4EEE>
  1093a1:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
        return this->__engaged_;
  1093a5:	80 be 38 0c 00 00 00 	cmpb   $0x0,0xc38(%rsi)
        if (!table_[i].first) {
  1093ac:	0f 84 23 02 00 00    	je     1095d5 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x355>
  1093b2:	80 be 50 0c 00 00 00 	cmpb   $0x0,0xc50(%rsi)
  1093b9:	ba 37 05 10 00       	mov    $0x100537,%edx
  1093be:	0f 84 22 02 00 00    	je     1095e6 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x366>
  1093c4:	80 be 68 0c 00 00 00 	cmpb   $0x0,0xc68(%rsi)
  1093cb:	0f 84 33 02 00 00    	je     109604 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x384>
  1093d1:	80 be 80 0c 00 00 00 	cmpb   $0x0,0xc80(%rsi)
  1093d8:	0f 84 4a 02 00 00    	je     109628 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x3a8>
  1093de:	80 be 98 0c 00 00 00 	cmpb   $0x0,0xc98(%rsi)
  1093e5:	0f 84 61 02 00 00    	je     10964c <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x3cc>
  1093eb:	80 be b0 0c 00 00 00 	cmpb   $0x0,0xcb0(%rsi)
  1093f2:	0f 84 78 02 00 00    	je     109670 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x3f0>
  1093f8:	80 be c8 0c 00 00 00 	cmpb   $0x0,0xcc8(%rsi)
  1093ff:	0f 84 8f 02 00 00    	je     109694 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x414>
  109405:	80 be e0 0c 00 00 00 	cmpb   $0x0,0xce0(%rsi)
  10940c:	0f 84 a6 02 00 00    	je     1096b8 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x438>
  109412:	80 be f8 0c 00 00 00 	cmpb   $0x0,0xcf8(%rsi)
  109419:	0f 84 bd 02 00 00    	je     1096dc <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x45c>
  10941f:	80 be 10 0d 00 00 00 	cmpb   $0x0,0xd10(%rsi)
  109426:	0f 84 d4 02 00 00    	je     109700 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x480>
  10942c:	80 be 28 0d 00 00 00 	cmpb   $0x0,0xd28(%rsi)
  109433:	0f 84 eb 02 00 00    	je     109724 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x4a4>
  109439:	80 be 40 0d 00 00 00 	cmpb   $0x0,0xd40(%rsi)
  109440:	0f 84 ff 02 00 00    	je     109745 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x4c5>
  109446:	80 be 58 0d 00 00 00 	cmpb   $0x0,0xd58(%rsi)
  10944d:	0f 84 13 03 00 00    	je     109766 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x4e6>
  109453:	80 be 70 0d 00 00 00 	cmpb   $0x0,0xd70(%rsi)
  10945a:	0f 84 24 03 00 00    	je     109784 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x504>
  109460:	80 be 88 0d 00 00 00 	cmpb   $0x0,0xd88(%rsi)
  109467:	0f 84 35 03 00 00    	je     1097a2 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x522>
  10946d:	80 be a0 0d 00 00 00 	cmpb   $0x0,0xda0(%rsi)
  109474:	0f 85 8e 03 00 00    	jne    109808 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x588>
  10947a:	48 8d 86 a0 0d 00 00 	lea    0xda0(%rsi),%rax
  109481:	41 be 0f 00 00 00    	mov    $0xf,%r14d
  109487:	e9 23 03 00 00       	jmp    1097af <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x52f>
  10948c:	48 b9 00 00 00 00 ac 	movabs $0xac00000000,%rcx
  109493:	00 00 00 
  109496:	b8 09 00 00 00       	mov    $0x9,%eax
  10949b:	e9 7d 03 00 00       	jmp    10981d <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x59d>
      tr->Push(status);

      setup_stage_map_.Put(data_trb_position, setup_trb_position);
    } else {
      auto setup_trb_position = TRBDynamicCast<SetupStageTRB>(tr->Push(
            MakeSetupStageTRB(setup_data, SetupStageTRB::kNoDataStage)));
  1094a0:	4c 89 75 c0          	mov    %r14,-0x40(%rbp)
  1094a4:	48 b8 08 00 00 00 40 	movabs $0x84000000008,%rax
  1094ab:	08 00 00 
  1094ae:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  1094b2:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  1094b6:	4c 89 ff             	mov    %r15,%rdi
  1094b9:	e8 42 e0 ff ff       	call   107500 <_ZN3usb4xhci4Ring4PushERKNSt3__15arrayIjLm4EEE>
  1094be:	49 89 c6             	mov    %rax,%r14
  1094c1:	b8 00 fc 00 00       	mov    $0xfc00,%eax
  1094c6:	41 23 46 0c          	and    0xc(%r14),%eax
  1094ca:	45 31 e4             	xor    %r12d,%r12d
  1094cd:	3d 00 08 00 00       	cmp    $0x800,%eax
      auto setup_trb_position = TRBDynamicCast<SetupStageTRB>(tr->Push(
  1094d2:	4d 0f 45 f4          	cmovne %r12,%r14
      status.bits.interrupt_on_completion = true;
  1094d6:	80 4d b4 20          	orb    $0x20,-0x4c(%rbp)
  1094da:	48 8d 75 a8          	lea    -0x58(%rbp),%rsi
  1094de:	4c 89 ff             	mov    %r15,%rdi
  1094e1:	e8 1a e0 ff ff       	call   107500 <_ZN3usb4xhci4Ring4PushERKNSt3__15arrayIjLm4EEE>
  1094e6:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  1094ea:	80 be 38 0c 00 00 00 	cmpb   $0x0,0xc38(%rsi)
  1094f1:	0f 84 01 01 00 00    	je     1095f8 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x378>
  1094f7:	80 be 50 0c 00 00 00 	cmpb   $0x0,0xc50(%rsi)
  1094fe:	0f 84 12 01 00 00    	je     109616 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x396>
  109504:	80 be 68 0c 00 00 00 	cmpb   $0x0,0xc68(%rsi)
  10950b:	0f 84 29 01 00 00    	je     10963a <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x3ba>
  109511:	80 be 80 0c 00 00 00 	cmpb   $0x0,0xc80(%rsi)
  109518:	0f 84 40 01 00 00    	je     10965e <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x3de>
  10951e:	80 be 98 0c 00 00 00 	cmpb   $0x0,0xc98(%rsi)
  109525:	0f 84 57 01 00 00    	je     109682 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x402>
  10952b:	80 be b0 0c 00 00 00 	cmpb   $0x0,0xcb0(%rsi)
  109532:	0f 84 6e 01 00 00    	je     1096a6 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x426>
  109538:	80 be c8 0c 00 00 00 	cmpb   $0x0,0xcc8(%rsi)
  10953f:	0f 84 85 01 00 00    	je     1096ca <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x44a>
  109545:	80 be e0 0c 00 00 00 	cmpb   $0x0,0xce0(%rsi)
  10954c:	0f 84 9c 01 00 00    	je     1096ee <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x46e>
  109552:	80 be f8 0c 00 00 00 	cmpb   $0x0,0xcf8(%rsi)
  109559:	0f 84 b3 01 00 00    	je     109712 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x492>
  10955f:	80 be 10 0d 00 00 00 	cmpb   $0x0,0xd10(%rsi)
  109566:	0f 84 c7 01 00 00    	je     109733 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x4b3>
  10956c:	80 be 28 0d 00 00 00 	cmpb   $0x0,0xd28(%rsi)
  109573:	0f 84 db 01 00 00    	je     109754 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x4d4>
  109579:	80 be 40 0d 00 00 00 	cmpb   $0x0,0xd40(%rsi)
  109580:	0f 84 ef 01 00 00    	je     109775 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x4f5>
  109586:	80 be 58 0d 00 00 00 	cmpb   $0x0,0xd58(%rsi)
  10958d:	0f 84 00 02 00 00    	je     109793 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x513>
  109593:	80 be 70 0d 00 00 00 	cmpb   $0x0,0xd70(%rsi)
  10959a:	0f 84 2c 02 00 00    	je     1097cc <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x54c>
  1095a0:	80 be 88 0d 00 00 00 	cmpb   $0x0,0xd88(%rsi)
  1095a7:	0f 84 2e 02 00 00    	je     1097db <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x55b>
  1095ad:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  1095b1:	80 be a0 0d 00 00 00 	cmpb   $0x0,0xda0(%rsi)
  1095b8:	ba 37 05 10 00       	mov    $0x100537,%edx
  1095bd:	0f 85 45 02 00 00    	jne    109808 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x588>
  1095c3:	48 8d 8e a0 0d 00 00 	lea    0xda0(%rsi),%rcx
  1095ca:	41 bc 0f 00 00 00    	mov    $0xf,%r12d
  1095d0:	e9 17 02 00 00       	jmp    1097ec <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x56c>
  1095d5:	48 8d 86 38 0c 00 00 	lea    0xc38(%rsi),%rax
  1095dc:	ba 37 05 10 00       	mov    $0x100537,%edx
  1095e1:	e9 c9 01 00 00       	jmp    1097af <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x52f>
  1095e6:	48 8d 86 50 0c 00 00 	lea    0xc50(%rsi),%rax
  1095ed:	41 be 01 00 00 00    	mov    $0x1,%r14d
  1095f3:	e9 b7 01 00 00       	jmp    1097af <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x52f>
  1095f8:	48 8d 8e 38 0c 00 00 	lea    0xc38(%rsi),%rcx
  1095ff:	e9 e8 01 00 00       	jmp    1097ec <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x56c>
  109604:	48 8d 86 68 0c 00 00 	lea    0xc68(%rsi),%rax
  10960b:	41 be 02 00 00 00    	mov    $0x2,%r14d
  109611:	e9 99 01 00 00       	jmp    1097af <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x52f>
  109616:	48 8d 8e 50 0c 00 00 	lea    0xc50(%rsi),%rcx
  10961d:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  109623:	e9 c4 01 00 00       	jmp    1097ec <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x56c>
  109628:	48 8d 86 80 0c 00 00 	lea    0xc80(%rsi),%rax
  10962f:	41 be 03 00 00 00    	mov    $0x3,%r14d
  109635:	e9 75 01 00 00       	jmp    1097af <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x52f>
  10963a:	48 8d 8e 68 0c 00 00 	lea    0xc68(%rsi),%rcx
  109641:	41 bc 02 00 00 00    	mov    $0x2,%r12d
  109647:	e9 a0 01 00 00       	jmp    1097ec <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x56c>
  10964c:	48 8d 86 98 0c 00 00 	lea    0xc98(%rsi),%rax
  109653:	41 be 04 00 00 00    	mov    $0x4,%r14d
  109659:	e9 51 01 00 00       	jmp    1097af <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x52f>
  10965e:	48 8d 8e 80 0c 00 00 	lea    0xc80(%rsi),%rcx
  109665:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  10966b:	e9 7c 01 00 00       	jmp    1097ec <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x56c>
  109670:	48 8d 86 b0 0c 00 00 	lea    0xcb0(%rsi),%rax
  109677:	41 be 05 00 00 00    	mov    $0x5,%r14d
  10967d:	e9 2d 01 00 00       	jmp    1097af <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x52f>
  109682:	48 8d 8e 98 0c 00 00 	lea    0xc98(%rsi),%rcx
  109689:	41 bc 04 00 00 00    	mov    $0x4,%r12d
  10968f:	e9 58 01 00 00       	jmp    1097ec <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x56c>
  109694:	48 8d 86 c8 0c 00 00 	lea    0xcc8(%rsi),%rax
  10969b:	41 be 06 00 00 00    	mov    $0x6,%r14d
  1096a1:	e9 09 01 00 00       	jmp    1097af <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x52f>
  1096a6:	48 8d 8e b0 0c 00 00 	lea    0xcb0(%rsi),%rcx
  1096ad:	41 bc 05 00 00 00    	mov    $0x5,%r12d
  1096b3:	e9 34 01 00 00       	jmp    1097ec <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x56c>
  1096b8:	48 8d 86 e0 0c 00 00 	lea    0xce0(%rsi),%rax
  1096bf:	41 be 07 00 00 00    	mov    $0x7,%r14d
  1096c5:	e9 e5 00 00 00       	jmp    1097af <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x52f>
  1096ca:	48 8d 8e c8 0c 00 00 	lea    0xcc8(%rsi),%rcx
  1096d1:	41 bc 06 00 00 00    	mov    $0x6,%r12d
  1096d7:	e9 10 01 00 00       	jmp    1097ec <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x56c>
  1096dc:	48 8d 86 f8 0c 00 00 	lea    0xcf8(%rsi),%rax
  1096e3:	41 be 08 00 00 00    	mov    $0x8,%r14d
  1096e9:	e9 c1 00 00 00       	jmp    1097af <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x52f>
  1096ee:	48 8d 8e e0 0c 00 00 	lea    0xce0(%rsi),%rcx
  1096f5:	41 bc 07 00 00 00    	mov    $0x7,%r12d
  1096fb:	e9 ec 00 00 00       	jmp    1097ec <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x56c>
  109700:	48 8d 86 10 0d 00 00 	lea    0xd10(%rsi),%rax
  109707:	41 be 09 00 00 00    	mov    $0x9,%r14d
  10970d:	e9 9d 00 00 00       	jmp    1097af <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x52f>
  109712:	48 8d 8e f8 0c 00 00 	lea    0xcf8(%rsi),%rcx
  109719:	41 bc 08 00 00 00    	mov    $0x8,%r12d
  10971f:	e9 c8 00 00 00       	jmp    1097ec <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x56c>
  109724:	48 8d 86 28 0d 00 00 	lea    0xd28(%rsi),%rax
  10972b:	41 be 0a 00 00 00    	mov    $0xa,%r14d
  109731:	eb 7c                	jmp    1097af <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x52f>
  109733:	48 8d 8e 10 0d 00 00 	lea    0xd10(%rsi),%rcx
  10973a:	41 bc 09 00 00 00    	mov    $0x9,%r12d
  109740:	e9 a7 00 00 00       	jmp    1097ec <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x56c>
  109745:	48 8d 86 40 0d 00 00 	lea    0xd40(%rsi),%rax
  10974c:	41 be 0b 00 00 00    	mov    $0xb,%r14d
  109752:	eb 5b                	jmp    1097af <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x52f>
  109754:	48 8d 8e 28 0d 00 00 	lea    0xd28(%rsi),%rcx
  10975b:	41 bc 0a 00 00 00    	mov    $0xa,%r12d
  109761:	e9 86 00 00 00       	jmp    1097ec <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x56c>
  109766:	48 8d 86 58 0d 00 00 	lea    0xd58(%rsi),%rax
  10976d:	41 be 0c 00 00 00    	mov    $0xc,%r14d
  109773:	eb 3a                	jmp    1097af <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x52f>
  109775:	48 8d 8e 40 0d 00 00 	lea    0xd40(%rsi),%rcx
  10977c:	41 bc 0b 00 00 00    	mov    $0xb,%r12d
  109782:	eb 68                	jmp    1097ec <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x56c>
  109784:	48 8d 86 70 0d 00 00 	lea    0xd70(%rsi),%rax
  10978b:	41 be 0d 00 00 00    	mov    $0xd,%r14d
  109791:	eb 1c                	jmp    1097af <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x52f>
  109793:	48 8d 8e 58 0d 00 00 	lea    0xd58(%rsi),%rcx
  10979a:	41 bc 0c 00 00 00    	mov    $0xc,%r12d
  1097a0:	eb 4a                	jmp    1097ec <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x56c>
  1097a2:	48 8d 86 88 0d 00 00 	lea    0xd88(%rsi),%rax
  1097a9:	41 be 0e 00 00 00    	mov    $0xe,%r14d
  1097af:	4b 8d 0c 76          	lea    (%r14,%r14,2),%rcx
  1097b3:	4c 89 a4 ce 30 0c 00 	mov    %r12,0xc30(%rsi,%rcx,8)
  1097ba:	00 
        this->__engaged_ = true;
  1097bb:	c6 00 01             	movb   $0x1,(%rax)
  1097be:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
          table_[i].second = value;
  1097c2:	48 89 84 ce 40 0c 00 	mov    %rax,0xc40(%rsi,%rcx,8)
  1097c9:	00 
  1097ca:	eb 3c                	jmp    109808 <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x588>
  1097cc:	48 8d 8e 70 0d 00 00 	lea    0xd70(%rsi),%rcx
  1097d3:	41 bc 0d 00 00 00    	mov    $0xd,%r12d
  1097d9:	eb 11                	jmp    1097ec <_ZN3usb4xhci6Device10ControlOutENS_10EndpointIDENS_9SetupDataEPKviPNS_11ClassDriverE+0x56c>
  1097db:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  1097df:	48 8d 8e 88 0d 00 00 	lea    0xd88(%rsi),%rcx
  1097e6:	41 bc 0e 00 00 00    	mov    $0xe,%r12d
  1097ec:	4b 8d 14 64          	lea    (%r12,%r12,2),%rdx
  1097f0:	48 89 84 d6 30 0c 00 	mov    %rax,0xc30(%rsi,%rdx,8)
  1097f7:	00 
  1097f8:	c6 01 01             	movb   $0x1,(%rcx)
  1097fb:	4c 89 b4 d6 40 0c 00 	mov    %r14,0xc40(%rsi,%rdx,8)
  109802:	00 
  109803:	ba 37 05 10 00       	mov    $0x100537,%edx
      auto status_trb_position = tr->Push(status);

      setup_stage_map_.Put(status_trb_position, setup_trb_position);
    }

    dbreg_->Ring(dci.value);
  109808:	48 8b 86 28 0b 00 00 	mov    0xb28(%rsi),%rax
  10980f:	89 18                	mov    %ebx,(%rax)
  109811:	48 b9 00 00 00 00 c6 	movabs $0xc600000000,%rcx
  109818:	00 00 00 
  10981b:	31 c0                	xor    %eax,%eax

    return MAKE_ERROR(Error::kSuccess);
  }
  10981d:	89 c0                	mov    %eax,%eax
  10981f:	48 09 c8             	or     %rcx,%rax
  109822:	48 83 c4 38          	add    $0x38,%rsp
  109826:	5b                   	pop    %rbx
  109827:	41 5c                	pop    %r12
  109829:	41 5d                	pop    %r13
  10982b:	41 5e                	pop    %r14
  10982d:	41 5f                	pop    %r15
  10982f:	5d                   	pop    %rbp
  109830:	c3                   	ret    
  109831:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  109838:	00 00 00 
  10983b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000109840 <_ZN3usb4xhci6Device11InterruptInENS_10EndpointIDEPvi>:

  Error Device::InterruptIn(EndpointID ep_id, void* buf, int len) {
  109840:	55                   	push   %rbp
  109841:	48 89 e5             	mov    %rsp,%rbp
  109844:	41 57                	push   %r15
  109846:	41 56                	push   %r14
  109848:	41 55                	push   %r13
  10984a:	41 54                	push   %r12
  10984c:	53                   	push   %rbx
  10984d:	48 83 ec 18          	sub    $0x18,%rsp
  109851:	41 89 cd             	mov    %ecx,%r13d
  109854:	49 89 d4             	mov    %rdx,%r12
  109857:	48 89 f3             	mov    %rsi,%rbx
  10985a:	49 89 ff             	mov    %rdi,%r15
    constexpr EndpointID(const EndpointID& ep_id) : addr_{ep_id.addr_} {}
  10985d:	8b 06                	mov    (%rsi),%eax
  10985f:	89 45 d0             	mov    %eax,-0x30(%rbp)
  109862:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
    if (auto err = usb::Device::InterruptIn(ep_id, buf, len)) {
  109866:	e8 a5 cf ff ff       	call   106810 <_ZN3usb6Device11InterruptInENS_10EndpointIDEPvi>
  10986b:	85 c0                	test   %eax,%eax
  10986d:	74 12                	je     109881 <_ZN3usb4xhci6Device11InterruptInENS_10EndpointIDEPvi+0x41>
  10986f:	49 89 d6             	mov    %rdx,%r14
  109872:	48 b9 00 00 00 00 ff 	movabs $0xffffffff00000000,%rcx
  109879:	ff ff ff 
  10987c:	48 21 c1             	and    %rax,%rcx
  10987f:	eb 64                	jmp    1098e5 <_ZN3usb4xhci6Device11InterruptInENS_10EndpointIDEPvi+0xa5>
  109881:	48 63 1b             	movslq (%rbx),%rbx
      return err;
    }

    const DeviceContextIndex dci{ep_id};

    Ring* tr = transfer_rings_[dci.value - 1];
  109884:	49 8b bc df 30 0b 00 	mov    0xb30(%r15,%rbx,8),%rdi
  10988b:	00 
  10988c:	41 be 37 05 10 00    	mov    $0x100537,%r14d

    if (tr == nullptr) {
  109892:	48 85 ff             	test   %rdi,%rdi
  109895:	74 3f                	je     1098d6 <_ZN3usb4xhci6Device11InterruptInENS_10EndpointIDEPvi+0x96>
      bits.data_buffer_pointer = reinterpret_cast<uint64_t>(p);
  109897:	4c 89 65 c0          	mov    %r12,-0x40(%rbp)
      return MAKE_ERROR(Error::kTransferRingNotSet);
    }

    NormalTRB normal{};
    normal.SetPointer(buf);
    normal.bits.trb_transfer_length = len;
  10989b:	41 81 e5 ff ff 01 00 	and    $0x1ffff,%r13d
  1098a2:	48 b8 00 00 00 00 24 	movabs $0x42400000000,%rax
  1098a9:	04 00 00 
    normal.bits.interrupt_on_short_packet = true;
    normal.bits.interrupt_on_completion = true;
  1098ac:	4c 09 e8             	or     %r13,%rax
  1098af:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  1098b3:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  1098b7:	e8 44 dc ff ff       	call   107500 <_ZN3usb4xhci4Ring4PushERKNSt3__15arrayIjLm4EEE>

    tr->Push(normal);
    dbreg_->Ring(dci.value);
  1098bc:	49 8b 87 28 0b 00 00 	mov    0xb28(%r15),%rax
      value.bits.db_target = target;
  1098c3:	0f b6 cb             	movzbl %bl,%ecx
  1098c6:	89 08                	mov    %ecx,(%rax)
  1098c8:	48 b9 00 00 00 00 de 	movabs $0xde00000000,%rcx
  1098cf:	00 00 00 
  1098d2:	31 c0                	xor    %eax,%eax
  1098d4:	eb 0f                	jmp    1098e5 <_ZN3usb4xhci6Device11InterruptInENS_10EndpointIDEPvi+0xa5>
  1098d6:	48 b9 00 00 00 00 d3 	movabs $0xd300000000,%rcx
  1098dd:	00 00 00 
  1098e0:	b8 09 00 00 00       	mov    $0x9,%eax
    return MAKE_ERROR(Error::kSuccess);
  }
  1098e5:	89 c0                	mov    %eax,%eax
  1098e7:	48 09 c8             	or     %rcx,%rax
  1098ea:	4c 89 f2             	mov    %r14,%rdx
  1098ed:	48 83 c4 18          	add    $0x18,%rsp
  1098f1:	5b                   	pop    %rbx
  1098f2:	41 5c                	pop    %r12
  1098f4:	41 5d                	pop    %r13
  1098f6:	41 5e                	pop    %r14
  1098f8:	41 5f                	pop    %r15
  1098fa:	5d                   	pop    %rbp
  1098fb:	c3                   	ret    
  1098fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000109900 <_ZN3usb4xhci6Device12InterruptOutENS_10EndpointIDEPvi>:

  Error Device::InterruptOut(EndpointID ep_id, void* buf, int len) {
  109900:	55                   	push   %rbp
  109901:	48 89 e5             	mov    %rsp,%rbp
  109904:	41 57                	push   %r15
  109906:	41 56                	push   %r14
  109908:	41 54                	push   %r12
  10990a:	53                   	push   %rbx
  10990b:	48 83 ec 10          	sub    $0x10,%rsp
  10990f:	41 89 ce             	mov    %ecx,%r14d
  109912:	49 89 d7             	mov    %rdx,%r15
  109915:	48 89 f3             	mov    %rsi,%rbx
  109918:	49 89 fc             	mov    %rdi,%r12
  10991b:	8b 06                	mov    (%rsi),%eax
  10991d:	89 45 d8             	mov    %eax,-0x28(%rbp)
  109920:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
    if (auto err = usb::Device::InterruptOut(ep_id, buf, len)) {
  109924:	e8 07 cf ff ff       	call   106830 <_ZN3usb6Device12InterruptOutENS_10EndpointIDEPvi>
  109929:	85 c0                	test   %eax,%eax
  10992b:	74 0f                	je     10993c <_ZN3usb4xhci6Device12InterruptOutENS_10EndpointIDEPvi+0x3c>
  10992d:	48 b9 00 00 00 00 ff 	movabs $0xffffffff00000000,%rcx
  109934:	ff ff ff 
  109937:	48 21 c1             	and    %rax,%rcx
  10993a:	eb 30                	jmp    10996c <_ZN3usb4xhci6Device12InterruptOutENS_10EndpointIDEPvi+0x6c>
    int Address() const { return addr_; }
  10993c:	8b 13                	mov    (%rbx),%edx
      return err;
    }

    Log(kDebug, "Device::InterrutpOut: ep addr %d, buf %08lx, len %d, dev %08lx\n",
  10993e:	be 5f 0a 10 00       	mov    $0x100a5f,%esi
  109943:	bf 07 00 00 00       	mov    $0x7,%edi
  109948:	4c 89 f9             	mov    %r15,%rcx
  10994b:	45 89 f0             	mov    %r14d,%r8d
  10994e:	4d 89 e1             	mov    %r12,%r9
  109951:	31 c0                	xor    %eax,%eax
  109953:	e8 c8 c9 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
  109958:	b8 0b 00 00 00       	mov    $0xb,%eax
  10995d:	48 b9 00 00 00 00 e8 	movabs $0xe800000000,%rcx
  109964:	00 00 00 
  109967:	ba 37 05 10 00       	mov    $0x100537,%edx
        ep_id.Address(), buf, len, this);
    return MAKE_ERROR(Error::kNotImplemented);
  }
  10996c:	89 c0                	mov    %eax,%eax
  10996e:	48 09 c8             	or     %rcx,%rax
  109971:	48 83 c4 10          	add    $0x10,%rsp
  109975:	5b                   	pop    %rbx
  109976:	41 5c                	pop    %r12
  109978:	41 5e                	pop    %r14
  10997a:	41 5f                	pop    %r15
  10997c:	5d                   	pop    %rbp
  10997d:	c3                   	ret    
  10997e:	66 90                	xchg   %ax,%ax

0000000000109980 <_ZN3usb4xhci6Device23OnTransferEventReceivedERKNS0_16TransferEventTRBE>:

  Error Device::OnTransferEventReceived(const TransferEventTRB& trb) {
  109980:	55                   	push   %rbp
  109981:	48 89 e5             	mov    %rsp,%rbp
  109984:	41 57                	push   %r15
  109986:	41 56                	push   %r14
  109988:	41 55                	push   %r13
  10998a:	41 54                	push   %r12
  10998c:	53                   	push   %rbx
  10998d:	48 83 ec 28          	sub    $0x28,%rsp
  109991:	49 89 f7             	mov    %rsi,%r15
  109994:	49 89 fe             	mov    %rdi,%r14
    const auto residual_length = trb.bits.trb_transfer_length;
  109997:	48 8b 5e 08          	mov    0x8(%rsi),%rbx

    if (trb.bits.completion_code != 1 /* Success */ &&
  10999b:	48 89 d8             	mov    %rbx,%rax
  10999e:	48 c1 e8 18          	shr    $0x18,%rax
  1099a2:	3c 01                	cmp    $0x1,%al
  1099a4:	74 04                	je     1099aa <_ZN3usb4xhci6Device23OnTransferEventReceivedERKNS0_16TransferEventTRBE+0x2a>
  1099a6:	3c 0d                	cmp    $0xd,%al
  1099a8:	75 54                	jne    1099fe <_ZN3usb4xhci6Device23OnTransferEventReceivedERKNS0_16TransferEventTRBE+0x7e>
  1099aa:	81 e3 ff ff ff 00    	and    $0xffffff,%ebx
        trb.bits.completion_code != 13 /* Short Packet */) {
      Log(kDebug, trb);
      return MAKE_ERROR(Error::kTransferFailed);
    }
    Log(kDebug, trb);
  1099b0:	4c 89 ff             	mov    %r15,%rdi
  1099b3:	e8 c8 01 00 00       	call   109b80 <_ZN12_GLOBAL__N_13LogE8LogLevelRKN3usb4xhci16TransferEventTRBE>
      return reinterpret_cast<TRB*>(bits.trb_pointer);
  1099b8:	4d 8b 2f             	mov    (%r15),%r13

    TRB* issuer_trb = trb.Pointer();
    if (auto normal_trb = TRBDynamicCast<NormalTRB>(issuer_trb)) {
  1099bb:	4d 85 ed             	test   %r13,%r13
  1099be:	74 60                	je     109a20 <_ZN3usb4xhci6Device23OnTransferEventReceivedERKNS0_16TransferEventTRBE+0xa0>
  1099c0:	b8 00 fc 00 00       	mov    $0xfc00,%eax
  1099c5:	41 23 45 0c          	and    0xc(%r13),%eax
  1099c9:	3d 00 04 00 00       	cmp    $0x400,%eax
  1099ce:	75 50                	jne    109a20 <_ZN3usb4xhci6Device23OnTransferEventReceivedERKNS0_16TransferEventTRBE+0xa0>
  1099d0:	49 8b 47 08          	mov    0x8(%r15),%rax
  1099d4:	b9 ff ff 01 00       	mov    $0x1ffff,%ecx
      const auto transfer_length =
        normal_trb->bits.trb_transfer_length - residual_length;
  1099d9:	41 23 4d 08          	and    0x8(%r13),%ecx
  1099dd:	29 d9                	sub    %ebx,%ecx
      return usb::EndpointID{bits.endpoint_id};
  1099df:	48 c1 e8 30          	shr    $0x30,%rax
  1099e3:	83 e0 1f             	and    $0x1f,%eax
    explicit constexpr EndpointID(int addr) : addr_{addr} {}
  1099e6:	89 45 c0             	mov    %eax,-0x40(%rbp)
      return reinterpret_cast<TRB*>(bits.data_buffer_pointer);
  1099e9:	49 8b 55 00          	mov    0x0(%r13),%rdx
  1099ed:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
      return this->OnInterruptCompleted(
  1099f1:	4c 89 f7             	mov    %r14,%rdi
  1099f4:	e8 47 d8 ff ff       	call   107240 <_ZN3usb6Device20OnInterruptCompletedENS_10EndpointIDEPKvi>
  1099f9:	e9 54 01 00 00       	jmp    109b52 <_ZN3usb4xhci6Device23OnTransferEventReceivedERKNS0_16TransferEventTRBE+0x1d2>
      Log(kDebug, trb);
  1099fe:	4c 89 ff             	mov    %r15,%rdi
  109a01:	e8 7a 01 00 00       	call   109b80 <_ZN12_GLOBAL__N_13LogE8LogLevelRKN3usb4xhci16TransferEventTRBE>
  109a06:	bb 37 05 10 00       	mov    $0x100537,%ebx
  109a0b:	49 be 00 00 00 00 f1 	movabs $0xf100000000,%r14
  109a12:	00 00 00 
  109a15:	41 bc 10 00 00 00    	mov    $0x10,%r12d
  109a1b:	e9 45 01 00 00       	jmp    109b65 <_ZN3usb4xhci6Device23OnTransferEventReceivedERKNS0_16TransferEventTRBE+0x1e5>
  109a20:	4c 89 75 b8          	mov    %r14,-0x48(%rbp)
          trb.EndpointID(), normal_trb->Pointer(), transfer_length);
    }

    auto opt_setup_stage_trb = setup_stage_map_.Get(issuer_trb);
  109a24:	49 81 c6 30 0c 00 00 	add    $0xc30,%r14
  109a2b:	4c 89 6d c8          	mov    %r13,-0x38(%rbp)
  109a2f:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
  109a33:	4c 89 f7             	mov    %r14,%rdi
  109a36:	e8 b5 02 00 00       	call   109cf0 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_>
        return this->__engaged_;
  109a3b:	84 d2                	test   %dl,%dl
    if (!opt_setup_stage_trb) {
  109a3d:	74 4a                	je     109a89 <_ZN3usb4xhci6Device23OnTransferEventReceivedERKNS0_16TransferEventTRBE+0x109>
  109a3f:	49 89 c4             	mov    %rax,%r12
      if (auto data_trb = TRBDynamicCast<DataStageTRB>(issuer_trb)) {
        Log(kDebug, *data_trb);
      }
      return MAKE_ERROR(Error::kNoCorrespondingSetupStage);
    }
    setup_stage_map_.Delete(issuer_trb);
  109a42:	4c 89 6d c8          	mov    %r13,-0x38(%rbp)
  109a46:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
  109a4a:	4c 89 f7             	mov    %r14,%rdi
  109a4d:	e8 2e 04 00 00       	call   109e80 <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_>
  109a52:	b8 00 fc 00 00       	mov    $0xfc00,%eax
    if (ToType::Type == trb->bits.trb_type) {
  109a57:	41 23 45 0c          	and    0xc(%r13),%eax

    auto setup_stage_trb = opt_setup_stage_trb.value();
    SetupData setup_data{};
    setup_data.request_type.data = setup_stage_trb->bits.request_type;
  109a5b:	49 8b 14 24          	mov    (%r12),%rdx
    if (auto normal_trb = TRBDynamicCast<NormalTRB>(issuer_trb)) {
  109a5f:	4d 85 ed             	test   %r13,%r13
    setup_data.index = setup_stage_trb->bits.index;
    setup_data.length = setup_stage_trb->bits.length;

    void* data_stage_buffer{nullptr};
    int transfer_length{0};
    if (auto data_stage_trb = TRBDynamicCast<DataStageTRB>(issuer_trb)) {
  109a62:	0f 84 ac 00 00 00    	je     109b14 <_ZN3usb4xhci6Device23OnTransferEventReceivedERKNS0_16TransferEventTRBE+0x194>
  109a68:	3d 00 0c 00 00       	cmp    $0xc00,%eax
  109a6d:	0f 85 a1 00 00 00    	jne    109b14 <_ZN3usb4xhci6Device23OnTransferEventReceivedERKNS0_16TransferEventTRBE+0x194>
      return reinterpret_cast<void*>(bits.data_buffer_pointer);
  109a73:	49 8b 4d 00          	mov    0x0(%r13),%rcx
  109a77:	41 b8 ff ff 01 00    	mov    $0x1ffff,%r8d
      data_stage_buffer = data_stage_trb->Pointer();
      transfer_length =
        data_stage_trb->bits.trb_transfer_length - residual_length;
  109a7d:	45 23 45 08          	and    0x8(%r13),%r8d
  109a81:	41 29 d8             	sub    %ebx,%r8d
  109a84:	e9 b1 00 00 00       	jmp    109b3a <_ZN3usb4xhci6Device23OnTransferEventReceivedERKNS0_16TransferEventTRBE+0x1ba>
          kTRBTypeToName[issuer_trb->bits.trb_type]);
  109a89:	41 8b 45 0c          	mov    0xc(%r13),%eax
    const_reference operator[](size_type __n) const {return __elems_[__n];}
  109a8d:	48 c1 e8 07          	shr    $0x7,%rax
  109a91:	25 f8 01 00 00       	and    $0x1f8,%eax
  109a96:	48 8b 90 e8 14 10 00 	mov    0x1014e8(%rax),%rdx
      Log(kDebug, "No Corresponding Setup Stage for issuer %s\n",
  109a9d:	be 8a 10 10 00       	mov    $0x10108a,%esi
  109aa2:	bf 07 00 00 00       	mov    $0x7,%edi
  109aa7:	31 c0                	xor    %eax,%eax
  109aa9:	e8 72 c8 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
  109aae:	49 be 00 00 00 00 04 	movabs $0x10400000000,%r14
  109ab5:	01 00 00 
  109ab8:	bb 37 05 10 00       	mov    $0x100537,%ebx
  109abd:	41 bc 0f 00 00 00    	mov    $0xf,%r12d
    if (auto normal_trb = TRBDynamicCast<NormalTRB>(issuer_trb)) {
  109ac3:	4d 85 ed             	test   %r13,%r13
      if (auto data_trb = TRBDynamicCast<DataStageTRB>(issuer_trb)) {
  109ac6:	0f 84 99 00 00 00    	je     109b65 <_ZN3usb4xhci6Device23OnTransferEventReceivedERKNS0_16TransferEventTRBE+0x1e5>
  109acc:	b8 00 fc 00 00       	mov    $0xfc00,%eax
  109ad1:	41 23 45 0c          	and    0xc(%r13),%eax
  109ad5:	3d 00 0c 00 00       	cmp    $0xc00,%eax
  109ada:	0f 85 85 00 00 00    	jne    109b65 <_ZN3usb4xhci6Device23OnTransferEventReceivedERKNS0_16TransferEventTRBE+0x1e5>
        trb.bits.data_buffer_pointer,
  109ae0:	49 8b 4d 00          	mov    0x0(%r13),%rcx
        trb.bits.trb_transfer_length,
  109ae4:	4d 8b 45 08          	mov    0x8(%r13),%r8
  109ae8:	44 89 c2             	mov    %r8d,%edx
  109aeb:	81 e2 ff ff 01 00    	and    $0x1ffff,%edx
        trb.bits.direction,
  109af1:	49 c1 e8 30          	shr    $0x30,%r8
  109af5:	41 83 e0 01          	and    $0x1,%r8d
        trb.data[3] & 0x7fu);
  109af9:	45 8b 4d 0c          	mov    0xc(%r13),%r9d
  109afd:	41 83 e1 7f          	and    $0x7f,%r9d
    Log(level,
  109b01:	be 4e 0c 10 00       	mov    $0x100c4e,%esi
  109b06:	bf 07 00 00 00       	mov    $0x7,%edi
  109b0b:	31 c0                	xor    %eax,%eax
  109b0d:	e8 0e c8 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
  109b12:	eb 51                	jmp    109b65 <_ZN3usb4xhci6Device23OnTransferEventReceivedERKNS0_16TransferEventTRBE+0x1e5>
  109b14:	bb 37 05 10 00       	mov    $0x100537,%ebx
  109b19:	49 be 00 00 00 00 19 	movabs $0x11900000000,%r14
  109b20:	01 00 00 
  109b23:	41 bc 0b 00 00 00    	mov    $0xb,%r12d
    if (auto normal_trb = TRBDynamicCast<NormalTRB>(issuer_trb)) {
  109b29:	4d 85 ed             	test   %r13,%r13
    } else if (auto status_stage_trb = TRBDynamicCast<StatusStageTRB>(issuer_trb)) {
  109b2c:	74 37                	je     109b65 <_ZN3usb4xhci6Device23OnTransferEventReceivedERKNS0_16TransferEventTRBE+0x1e5>
  109b2e:	3d 00 10 00 00       	cmp    $0x1000,%eax
  109b33:	75 30                	jne    109b65 <_ZN3usb4xhci6Device23OnTransferEventReceivedERKNS0_16TransferEventTRBE+0x1e5>
  109b35:	31 c9                	xor    %ecx,%ecx
  109b37:	45 31 c0             	xor    %r8d,%r8d
  109b3a:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
      return usb::EndpointID{bits.endpoint_id};
  109b3e:	41 0f b7 47 0e       	movzwl 0xe(%r15),%eax
  109b43:	83 e0 1f             	and    $0x1f,%eax
  109b46:	89 45 d0             	mov    %eax,-0x30(%rbp)
  109b49:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
      // pass
    } else {
      return MAKE_ERROR(Error::kNotImplemented);
    }
    return this->OnControlCompleted(
  109b4d:	e8 4e cf ff ff       	call   106aa0 <_ZN3usb6Device18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi>
  109b52:	49 89 c4             	mov    %rax,%r12
  109b55:	48 89 d3             	mov    %rdx,%rbx
  109b58:	49 be 00 00 00 00 ff 	movabs $0xffffffff00000000,%r14
  109b5f:	ff ff ff 
        trb.EndpointID(), setup_data, data_stage_buffer, transfer_length);
  }
  109b62:	49 21 c6             	and    %rax,%r14
  109b65:	44 89 e0             	mov    %r12d,%eax
  109b68:	4c 09 f0             	or     %r14,%rax
  109b6b:	48 89 da             	mov    %rbx,%rdx
  109b6e:	48 83 c4 28          	add    $0x28,%rsp
  109b72:	5b                   	pop    %rbx
  109b73:	41 5c                	pop    %r12
  109b75:	41 5d                	pop    %r13
  109b77:	41 5e                	pop    %r14
  109b79:	41 5f                	pop    %r15
  109b7b:	5d                   	pop    %rbp
  109b7c:	c3                   	ret    
  109b7d:	0f 1f 00             	nopl   (%rax)

0000000000109b80 <_ZN12_GLOBAL__N_13LogE8LogLevelRKN3usb4xhci16TransferEventTRBE>:
  void Log(LogLevel level, const TransferEventTRB& trb) {
  109b80:	55                   	push   %rbp
  109b81:	48 89 e5             	mov    %rsp,%rbp
  109b84:	53                   	push   %rbx
  109b85:	50                   	push   %rax
    if (trb.bits.event_data) {
  109b86:	48 8b 1f             	mov    (%rdi),%rbx
  109b89:	48 8b 47 08          	mov    0x8(%rdi),%rax
  109b8d:	48 0f ba e0 22       	bt     $0x22,%rax
  109b92:	0f 82 b8 00 00 00    	jb     109c50 <_ZN12_GLOBAL__N_13LogE8LogLevelRKN3usb4xhci16TransferEventTRBE+0xd0>
        kTRBTypeToName[issuer_trb->bits.trb_type],
  109b98:	8b 4b 0c             	mov    0xc(%rbx),%ecx
  109b9b:	48 c1 e9 07          	shr    $0x7,%rcx
  109b9f:	81 e1 f8 01 00 00    	and    $0x1f8,%ecx
  109ba5:	48 8b 91 e8 14 10 00 	mov    0x1014e8(%rcx),%rdx
  109bac:	48 89 c1             	mov    %rax,%rcx
  109baf:	48 c1 e9 15          	shr    $0x15,%rcx
  109bb3:	81 e1 f8 07 00 00    	and    $0x7f8,%ecx
        kTRBCompletionCodeToName[trb.bits.completion_code],
  109bb9:	48 8b 89 c0 13 10 00 	mov    0x1013c0(%rcx),%rcx
        trb.bits.trb_transfer_length,
  109bc0:	41 89 c0             	mov    %eax,%r8d
  109bc3:	41 81 e0 ff ff ff 00 	and    $0xffffff,%r8d
        trb.bits.slot_id,
  109bca:	49 89 c1             	mov    %rax,%r9
  109bcd:	49 c1 e9 38          	shr    $0x38,%r9
  109bd1:	48 c1 e8 30          	shr    $0x30,%rax
  109bd5:	83 e0 1f             	and    $0x1f,%eax
    Log(level,
  109bd8:	89 04 24             	mov    %eax,(%rsp)
  109bdb:	be e4 05 10 00       	mov    $0x1005e4,%esi
  109be0:	bf 07 00 00 00       	mov    $0x7,%edi
  109be5:	31 c0                	xor    %eax,%eax
  109be7:	e8 34 c7 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
  109bec:	b8 00 fc 00 00       	mov    $0xfc00,%eax
    if (ToType::Type == trb->bits.trb_type) {
  109bf1:	23 43 0c             	and    0xc(%rbx),%eax
    if (auto data_trb = TRBDynamicCast<DataStageTRB>(issuer_trb)) {
  109bf4:	48 85 db             	test   %rbx,%rbx
  109bf7:	0f 84 98 00 00 00    	je     109c95 <_ZN12_GLOBAL__N_13LogE8LogLevelRKN3usb4xhci16TransferEventTRBE+0x115>
  109bfd:	3d 00 0c 00 00       	cmp    $0xc00,%eax
  109c02:	0f 85 8d 00 00 00    	jne    109c95 <_ZN12_GLOBAL__N_13LogE8LogLevelRKN3usb4xhci16TransferEventTRBE+0x115>
      Log(level, "  ");
  109c08:	be 97 06 10 00       	mov    $0x100697,%esi
  109c0d:	bf 07 00 00 00       	mov    $0x7,%edi
  109c12:	31 c0                	xor    %eax,%eax
  109c14:	e8 07 c7 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
        trb.bits.data_buffer_pointer,
  109c19:	48 8b 0b             	mov    (%rbx),%rcx
        trb.bits.trb_transfer_length,
  109c1c:	4c 8b 43 08          	mov    0x8(%rbx),%r8
  109c20:	44 89 c2             	mov    %r8d,%edx
  109c23:	81 e2 ff ff 01 00    	and    $0x1ffff,%edx
        trb.bits.direction,
  109c29:	49 c1 e8 30          	shr    $0x30,%r8
  109c2d:	41 83 e0 01          	and    $0x1,%r8d
        trb.data[3] & 0x7fu);
  109c31:	44 8b 4b 0c          	mov    0xc(%rbx),%r9d
  109c35:	41 83 e1 7f          	and    $0x7f,%r9d
    Log(level,
  109c39:	be 4e 0c 10 00       	mov    $0x100c4e,%esi
  109c3e:	bf 07 00 00 00       	mov    $0x7,%edi
  109c43:	31 c0                	xor    %eax,%eax
  109c45:	48 83 c4 08          	add    $0x8,%rsp
  109c49:	5b                   	pop    %rbx
  109c4a:	5d                   	pop    %rbp
  109c4b:	e9 d0 c6 ff ff       	jmp    106320 <_Z3Log8LogLevelPKcz>
  109c50:	48 89 c1             	mov    %rax,%rcx
  109c53:	48 c1 e9 15          	shr    $0x15,%rcx
  109c57:	81 e1 f8 07 00 00    	and    $0x7f8,%ecx
          kTRBCompletionCodeToName[trb.bits.completion_code],
  109c5d:	48 8b 89 c0 13 10 00 	mov    0x1013c0(%rcx),%rcx
          trb.bits.trb_transfer_length,
  109c64:	41 89 c0             	mov    %eax,%r8d
  109c67:	41 81 e0 ff ff ff 00 	and    $0xffffff,%r8d
          trb.bits.slot_id,
  109c6e:	49 89 c1             	mov    %rax,%r9
  109c71:	49 c1 e9 38          	shr    $0x38,%r9
      return usb::EndpointID{bits.endpoint_id};
  109c75:	48 c1 e8 30          	shr    $0x30,%rax
  109c79:	83 e0 1f             	and    $0x1f,%eax
      Log(level,
  109c7c:	89 04 24             	mov    %eax,(%rsp)
  109c7f:	be 3c 0f 10 00       	mov    $0x100f3c,%esi
  109c84:	bf 07 00 00 00       	mov    $0x7,%edi
  109c89:	48 89 da             	mov    %rbx,%rdx
  109c8c:	31 c0                	xor    %eax,%eax
  109c8e:	e8 8d c6 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
  109c93:	eb 51                	jmp    109ce6 <_ZN12_GLOBAL__N_13LogE8LogLevelRKN3usb4xhci16TransferEventTRBE+0x166>
    if (auto data_trb = TRBDynamicCast<DataStageTRB>(issuer_trb)) {
  109c95:	48 85 db             	test   %rbx,%rbx
    } else if (auto setup_trb = TRBDynamicCast<SetupStageTRB>(issuer_trb)) {
  109c98:	74 4c                	je     109ce6 <_ZN12_GLOBAL__N_13LogE8LogLevelRKN3usb4xhci16TransferEventTRBE+0x166>
  109c9a:	3d 00 08 00 00       	cmp    $0x800,%eax
  109c9f:	75 45                	jne    109ce6 <_ZN12_GLOBAL__N_13LogE8LogLevelRKN3usb4xhci16TransferEventTRBE+0x166>
      Log(level, "  ");
  109ca1:	be 97 06 10 00       	mov    $0x100697,%esi
  109ca6:	bf 07 00 00 00       	mov    $0x7,%edi
  109cab:	31 c0                	xor    %eax,%eax
  109cad:	e8 6e c6 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
        trb.bits.request_type,
  109cb2:	48 8b 1b             	mov    (%rbx),%rbx
  109cb5:	0f b6 d3             	movzbl %bl,%edx
        trb.bits.request,
  109cb8:	0f b6 cf             	movzbl %bh,%ecx
        trb.bits.value,
  109cbb:	89 d8                	mov    %ebx,%eax
  109cbd:	c1 e8 10             	shr    $0x10,%eax
        trb.bits.index,
  109cc0:	48 89 de             	mov    %rbx,%rsi
  109cc3:	48 c1 ee 20          	shr    $0x20,%rsi
  109cc7:	44 0f b7 ce          	movzwl %si,%r9d
        trb.bits.length);
  109ccb:	48 c1 eb 30          	shr    $0x30,%rbx
    Log(level,
  109ccf:	89 1c 24             	mov    %ebx,(%rsp)
  109cd2:	be 8d 04 10 00       	mov    $0x10048d,%esi
  109cd7:	bf 07 00 00 00       	mov    $0x7,%edi
  109cdc:	41 89 c0             	mov    %eax,%r8d
  109cdf:	31 c0                	xor    %eax,%eax
  109ce1:	e8 3a c6 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
  }
  109ce6:	48 83 c4 08          	add    $0x8,%rsp
  109cea:	5b                   	pop    %rbx
  109ceb:	5d                   	pop    %rbp
  109cec:	c3                   	ret    
  109ced:	cc                   	int3   
  109cee:	cc                   	int3   
  109cef:	cc                   	int3   

0000000000109cf0 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_>:
     std::optional<V> Get(const K& key) const {
  109cf0:	55                   	push   %rbp
  109cf1:	48 89 e5             	mov    %rsp,%rbp
  109cf4:	48 8b 0e             	mov    (%rsi),%rcx
  109cf7:	80 7f 08 00          	cmpb   $0x0,0x8(%rdi)
        if (auto opt_k = table_[i].first; opt_k && opt_k.value() == key) {
  109cfb:	74 0c                	je     109d09 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x19>
  109cfd:	48 39 0f             	cmp    %rcx,(%rdi)
  109d00:	75 07                	jne    109d09 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x19>
  109d02:	31 f6                	xor    %esi,%esi
  109d04:	e9 69 01 00 00       	jmp    109e72 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x182>
  109d09:	80 7f 20 00          	cmpb   $0x0,0x20(%rdi)
  109d0d:	74 0f                	je     109d1e <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x2e>
  109d0f:	be 01 00 00 00       	mov    $0x1,%esi
  109d14:	48 39 4f 18          	cmp    %rcx,0x18(%rdi)
  109d18:	0f 84 54 01 00 00    	je     109e72 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x182>
  109d1e:	80 7f 38 00          	cmpb   $0x0,0x38(%rdi)
  109d22:	74 0f                	je     109d33 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x43>
  109d24:	be 02 00 00 00       	mov    $0x2,%esi
  109d29:	48 39 4f 30          	cmp    %rcx,0x30(%rdi)
  109d2d:	0f 84 3f 01 00 00    	je     109e72 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x182>
  109d33:	80 7f 50 00          	cmpb   $0x0,0x50(%rdi)
  109d37:	74 0f                	je     109d48 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x58>
  109d39:	be 03 00 00 00       	mov    $0x3,%esi
  109d3e:	48 39 4f 48          	cmp    %rcx,0x48(%rdi)
  109d42:	0f 84 2a 01 00 00    	je     109e72 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x182>
  109d48:	80 7f 68 00          	cmpb   $0x0,0x68(%rdi)
  109d4c:	74 0f                	je     109d5d <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x6d>
  109d4e:	be 04 00 00 00       	mov    $0x4,%esi
  109d53:	48 39 4f 60          	cmp    %rcx,0x60(%rdi)
  109d57:	0f 84 15 01 00 00    	je     109e72 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x182>
  109d5d:	80 bf 80 00 00 00 00 	cmpb   $0x0,0x80(%rdi)
  109d64:	74 0f                	je     109d75 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x85>
  109d66:	be 05 00 00 00       	mov    $0x5,%esi
  109d6b:	48 39 4f 78          	cmp    %rcx,0x78(%rdi)
  109d6f:	0f 84 fd 00 00 00    	je     109e72 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x182>
  109d75:	80 bf 98 00 00 00 00 	cmpb   $0x0,0x98(%rdi)
  109d7c:	74 12                	je     109d90 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0xa0>
  109d7e:	be 06 00 00 00       	mov    $0x6,%esi
  109d83:	48 39 8f 90 00 00 00 	cmp    %rcx,0x90(%rdi)
  109d8a:	0f 84 e2 00 00 00    	je     109e72 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x182>
  109d90:	80 bf b0 00 00 00 00 	cmpb   $0x0,0xb0(%rdi)
  109d97:	74 12                	je     109dab <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0xbb>
  109d99:	be 07 00 00 00       	mov    $0x7,%esi
  109d9e:	48 39 8f a8 00 00 00 	cmp    %rcx,0xa8(%rdi)
  109da5:	0f 84 c7 00 00 00    	je     109e72 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x182>
  109dab:	80 bf c8 00 00 00 00 	cmpb   $0x0,0xc8(%rdi)
  109db2:	74 12                	je     109dc6 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0xd6>
  109db4:	be 08 00 00 00       	mov    $0x8,%esi
  109db9:	48 39 8f c0 00 00 00 	cmp    %rcx,0xc0(%rdi)
  109dc0:	0f 84 ac 00 00 00    	je     109e72 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x182>
  109dc6:	80 bf e0 00 00 00 00 	cmpb   $0x0,0xe0(%rdi)
  109dcd:	74 12                	je     109de1 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0xf1>
  109dcf:	be 09 00 00 00       	mov    $0x9,%esi
  109dd4:	48 39 8f d8 00 00 00 	cmp    %rcx,0xd8(%rdi)
  109ddb:	0f 84 91 00 00 00    	je     109e72 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x182>
  109de1:	80 bf f8 00 00 00 00 	cmpb   $0x0,0xf8(%rdi)
  109de8:	74 0e                	je     109df8 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x108>
  109dea:	be 0a 00 00 00       	mov    $0xa,%esi
  109def:	48 39 8f f0 00 00 00 	cmp    %rcx,0xf0(%rdi)
  109df6:	74 7a                	je     109e72 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x182>
  109df8:	80 bf 10 01 00 00 00 	cmpb   $0x0,0x110(%rdi)
  109dff:	74 0e                	je     109e0f <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x11f>
  109e01:	be 0b 00 00 00       	mov    $0xb,%esi
  109e06:	48 39 8f 08 01 00 00 	cmp    %rcx,0x108(%rdi)
  109e0d:	74 63                	je     109e72 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x182>
  109e0f:	80 bf 28 01 00 00 00 	cmpb   $0x0,0x128(%rdi)
  109e16:	74 0e                	je     109e26 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x136>
  109e18:	be 0c 00 00 00       	mov    $0xc,%esi
  109e1d:	48 39 8f 20 01 00 00 	cmp    %rcx,0x120(%rdi)
  109e24:	74 4c                	je     109e72 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x182>
  109e26:	80 bf 40 01 00 00 00 	cmpb   $0x0,0x140(%rdi)
  109e2d:	74 0e                	je     109e3d <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x14d>
  109e2f:	be 0d 00 00 00       	mov    $0xd,%esi
  109e34:	48 39 8f 38 01 00 00 	cmp    %rcx,0x138(%rdi)
  109e3b:	74 35                	je     109e72 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x182>
  109e3d:	80 bf 58 01 00 00 00 	cmpb   $0x0,0x158(%rdi)
  109e44:	74 0e                	je     109e54 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x164>
  109e46:	be 0e 00 00 00       	mov    $0xe,%esi
  109e4b:	48 39 8f 50 01 00 00 	cmp    %rcx,0x150(%rdi)
  109e52:	74 1e                	je     109e72 <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x182>
  109e54:	31 c0                	xor    %eax,%eax
  109e56:	80 bf 70 01 00 00 00 	cmpb   $0x0,0x170(%rdi)
  109e5d:	ba 00 00 00 00       	mov    $0x0,%edx
  109e62:	74 19                	je     109e7d <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x18d>
  109e64:	be 0f 00 00 00       	mov    $0xf,%esi
  109e69:	48 39 8f 68 01 00 00 	cmp    %rcx,0x168(%rdi)
  109e70:	75 0b                	jne    109e7d <_ZNK3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE3GetERKS2_+0x18d>
          return table_[i].second;
  109e72:	48 8d 04 76          	lea    (%rsi,%rsi,2),%rax
        :  __val_(_VSTD::forward<_Args>(__args)...),
  109e76:	48 8b 44 c7 10       	mov    0x10(%rdi,%rax,8),%rax
  109e7b:	b2 01                	mov    $0x1,%dl
    }
  109e7d:	5d                   	pop    %rbp
  109e7e:	c3                   	ret    
  109e7f:	cc                   	int3   

0000000000109e80 <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_>:
          break;
        }
      }
    }

    void Delete(const K& key) {
  109e80:	55                   	push   %rbp
  109e81:	48 89 e5             	mov    %rsp,%rbp
  109e84:	48 8b 06             	mov    (%rsi),%rax
        return this->__engaged_;
  109e87:	80 7f 08 00          	cmpb   $0x0,0x8(%rdi)
      for (int i = 0; i < table_.size(); ++i) {
        if (auto opt_k = table_[i].first; opt_k && opt_k.value() == key) {
  109e8b:	74 0c                	je     109e99 <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x19>
  109e8d:	48 39 07             	cmp    %rax,(%rdi)
  109e90:	75 07                	jne    109e99 <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x19>
  109e92:	31 c9                	xor    %ecx,%ecx
  109e94:	e9 62 01 00 00       	jmp    109ffb <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x17b>
  109e99:	80 7f 20 00          	cmpb   $0x0,0x20(%rdi)
  109e9d:	74 0f                	je     109eae <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x2e>
  109e9f:	b9 01 00 00 00       	mov    $0x1,%ecx
  109ea4:	48 39 47 18          	cmp    %rax,0x18(%rdi)
  109ea8:	0f 84 4d 01 00 00    	je     109ffb <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x17b>
  109eae:	80 7f 38 00          	cmpb   $0x0,0x38(%rdi)
  109eb2:	74 0f                	je     109ec3 <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x43>
  109eb4:	b9 02 00 00 00       	mov    $0x2,%ecx
  109eb9:	48 39 47 30          	cmp    %rax,0x30(%rdi)
  109ebd:	0f 84 38 01 00 00    	je     109ffb <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x17b>
  109ec3:	80 7f 50 00          	cmpb   $0x0,0x50(%rdi)
  109ec7:	74 0f                	je     109ed8 <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x58>
  109ec9:	b9 03 00 00 00       	mov    $0x3,%ecx
  109ece:	48 39 47 48          	cmp    %rax,0x48(%rdi)
  109ed2:	0f 84 23 01 00 00    	je     109ffb <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x17b>
  109ed8:	80 7f 68 00          	cmpb   $0x0,0x68(%rdi)
  109edc:	74 0f                	je     109eed <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x6d>
  109ede:	b9 04 00 00 00       	mov    $0x4,%ecx
  109ee3:	48 39 47 60          	cmp    %rax,0x60(%rdi)
  109ee7:	0f 84 0e 01 00 00    	je     109ffb <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x17b>
  109eed:	80 bf 80 00 00 00 00 	cmpb   $0x0,0x80(%rdi)
  109ef4:	74 0f                	je     109f05 <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x85>
  109ef6:	b9 05 00 00 00       	mov    $0x5,%ecx
  109efb:	48 39 47 78          	cmp    %rax,0x78(%rdi)
  109eff:	0f 84 f6 00 00 00    	je     109ffb <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x17b>
  109f05:	80 bf 98 00 00 00 00 	cmpb   $0x0,0x98(%rdi)
  109f0c:	74 12                	je     109f20 <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0xa0>
  109f0e:	b9 06 00 00 00       	mov    $0x6,%ecx
  109f13:	48 39 87 90 00 00 00 	cmp    %rax,0x90(%rdi)
  109f1a:	0f 84 db 00 00 00    	je     109ffb <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x17b>
  109f20:	80 bf b0 00 00 00 00 	cmpb   $0x0,0xb0(%rdi)
  109f27:	74 12                	je     109f3b <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0xbb>
  109f29:	b9 07 00 00 00       	mov    $0x7,%ecx
  109f2e:	48 39 87 a8 00 00 00 	cmp    %rax,0xa8(%rdi)
  109f35:	0f 84 c0 00 00 00    	je     109ffb <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x17b>
  109f3b:	80 bf c8 00 00 00 00 	cmpb   $0x0,0xc8(%rdi)
  109f42:	74 12                	je     109f56 <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0xd6>
  109f44:	b9 08 00 00 00       	mov    $0x8,%ecx
  109f49:	48 39 87 c0 00 00 00 	cmp    %rax,0xc0(%rdi)
  109f50:	0f 84 a5 00 00 00    	je     109ffb <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x17b>
  109f56:	80 bf e0 00 00 00 00 	cmpb   $0x0,0xe0(%rdi)
  109f5d:	74 12                	je     109f71 <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0xf1>
  109f5f:	b9 09 00 00 00       	mov    $0x9,%ecx
  109f64:	48 39 87 d8 00 00 00 	cmp    %rax,0xd8(%rdi)
  109f6b:	0f 84 8a 00 00 00    	je     109ffb <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x17b>
  109f71:	80 bf f8 00 00 00 00 	cmpb   $0x0,0xf8(%rdi)
  109f78:	74 0e                	je     109f88 <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x108>
  109f7a:	b9 0a 00 00 00       	mov    $0xa,%ecx
  109f7f:	48 39 87 f0 00 00 00 	cmp    %rax,0xf0(%rdi)
  109f86:	74 73                	je     109ffb <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x17b>
  109f88:	80 bf 10 01 00 00 00 	cmpb   $0x0,0x110(%rdi)
  109f8f:	74 0e                	je     109f9f <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x11f>
  109f91:	b9 0b 00 00 00       	mov    $0xb,%ecx
  109f96:	48 39 87 08 01 00 00 	cmp    %rax,0x108(%rdi)
  109f9d:	74 5c                	je     109ffb <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x17b>
  109f9f:	80 bf 28 01 00 00 00 	cmpb   $0x0,0x128(%rdi)
  109fa6:	74 0e                	je     109fb6 <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x136>
  109fa8:	b9 0c 00 00 00       	mov    $0xc,%ecx
  109fad:	48 39 87 20 01 00 00 	cmp    %rax,0x120(%rdi)
  109fb4:	74 45                	je     109ffb <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x17b>
  109fb6:	80 bf 40 01 00 00 00 	cmpb   $0x0,0x140(%rdi)
  109fbd:	74 0e                	je     109fcd <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x14d>
  109fbf:	b9 0d 00 00 00       	mov    $0xd,%ecx
  109fc4:	48 39 87 38 01 00 00 	cmp    %rax,0x138(%rdi)
  109fcb:	74 2e                	je     109ffb <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x17b>
  109fcd:	80 bf 58 01 00 00 00 	cmpb   $0x0,0x158(%rdi)
  109fd4:	74 0e                	je     109fe4 <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x164>
  109fd6:	b9 0e 00 00 00       	mov    $0xe,%ecx
  109fdb:	48 39 87 50 01 00 00 	cmp    %rax,0x150(%rdi)
  109fe2:	74 17                	je     109ffb <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x17b>
  109fe4:	80 bf 70 01 00 00 00 	cmpb   $0x0,0x170(%rdi)
  109feb:	74 17                	je     10a004 <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x184>
  109fed:	b9 0f 00 00 00       	mov    $0xf,%ecx
  109ff2:	48 39 87 68 01 00 00 	cmp    %rax,0x168(%rdi)
  109ff9:	75 09                	jne    10a004 <_ZN3usb8ArrayMapIPKvPKNS_4xhci13SetupStageTRBELm16EE6DeleteERKS2_+0x184>
        if (__engaged_)
  109ffb:	48 8d 04 49          	lea    (%rcx,%rcx,2),%rax
            __engaged_ = false;
  109fff:	c6 44 c7 08 00       	movb   $0x0,0x8(%rdi,%rax,8)
          table_[i].first = std::nullopt;
          break;
        }
      }
    }
  10a004:	5d                   	pop    %rbp
  10a005:	c3                   	ret    
  10a006:	cc                   	int3   
  10a007:	cc                   	int3   
  10a008:	cc                   	int3   
  10a009:	cc                   	int3   
  10a00a:	cc                   	int3   
  10a00b:	cc                   	int3   
  10a00c:	cc                   	int3   
  10a00d:	cc                   	int3   
  10a00e:	cc                   	int3   
  10a00f:	cc                   	int3   

000000000010a010 <_ZN3usb4xhci6DeviceD0Ev>:
  class Device : public usb::Device {
  10a010:	55                   	push   %rbp
  10a011:	48 89 e5             	mov    %rsp,%rbp
  10a014:	53                   	push   %rbx
  10a015:	50                   	push   %rax
  10a016:	48 89 fb             	mov    %rdi,%rbx
  10a019:	e8 b2 c6 ff ff       	call   1066d0 <_ZN3usb6DeviceD1Ev>
  10a01e:	be 40 00 00 00       	mov    $0x40,%esi
  10a023:	48 89 df             	mov    %rbx,%rdi
  10a026:	48 83 c4 08          	add    $0x8,%rsp
  10a02a:	5b                   	pop    %rbx
  10a02b:	5d                   	pop    %rbp
  10a02c:	e9 0f 9b 00 00       	jmp    113b40 <_ZdlPvSt11align_val_t>
  10a031:	cc                   	int3   
  10a032:	cc                   	int3   
  10a033:	cc                   	int3   
  10a034:	cc                   	int3   
  10a035:	cc                   	int3   
  10a036:	cc                   	int3   
  10a037:	cc                   	int3   
  10a038:	cc                   	int3   
  10a039:	cc                   	int3   
  10a03a:	cc                   	int3   
  10a03b:	cc                   	int3   
  10a03c:	cc                   	int3   
  10a03d:	cc                   	int3   
  10a03e:	cc                   	int3   
  10a03f:	cc                   	int3   

000000000010a040 <_ZN3usb4xhci13DeviceManager10InitializeEm>:
#include "usb/xhci/devmgr.hpp"

#include "usb/memory.hpp"

namespace usb::xhci {
  Error DeviceManager::Initialize(size_t max_slots) {
  10a040:	55                   	push   %rbp
  10a041:	48 89 e5             	mov    %rsp,%rbp
  10a044:	41 56                	push   %r14
  10a046:	53                   	push   %rbx
  10a047:	48 89 fb             	mov    %rdi,%rbx
    max_slots_ = max_slots;
  10a04a:	48 89 77 08          	mov    %rsi,0x8(%rdi)
  10a04e:	48 8d 3c f5 08 00 00 	lea    0x8(,%rsi,8),%rdi
  10a055:	00 
  10a056:	31 f6                	xor    %esi,%esi
  10a058:	31 d2                	xor    %edx,%edx
  10a05a:	e8 e1 c5 ff ff       	call   106640 <_ZN3usb8AllocMemEmjj>

    devices_ = AllocArray<Device*>(max_slots_ + 1, 0, 0);
  10a05f:	48 89 43 10          	mov    %rax,0x10(%rbx)
  10a063:	41 be 03 00 00 00    	mov    $0x3,%r14d
    if (devices_ == nullptr) {
  10a069:	48 85 c0             	test   %rax,%rax
  10a06c:	74 64                	je     10a0d2 <_ZN3usb4xhci13DeviceManager10InitializeEm+0x92>
      return MAKE_ERROR(Error::kNoEnoughMemory);
    }

    device_context_pointers_ = AllocArray<DeviceContext*>(max_slots_ + 1, 64, 4096);
  10a06e:	48 8b 43 08          	mov    0x8(%rbx),%rax
  10a072:	48 8d 3c c5 08 00 00 	lea    0x8(,%rax,8),%rdi
  10a079:	00 
  10a07a:	be 40 00 00 00       	mov    $0x40,%esi
  10a07f:	ba 00 10 00 00       	mov    $0x1000,%edx
  10a084:	e8 b7 c5 ff ff       	call   106640 <_ZN3usb8AllocMemEmjj>
  10a089:	48 89 03             	mov    %rax,(%rbx)
    if (device_context_pointers_ == nullptr) {
  10a08c:	48 85 c0             	test   %rax,%rax
  10a08f:	74 4d                	je     10a0de <_ZN3usb4xhci13DeviceManager10InitializeEm+0x9e>
  10a091:	48 8b 4b 08          	mov    0x8(%rbx),%rcx
  10a095:	45 31 f6             	xor    %r14d,%r14d
  10a098:	48 b8 00 00 00 00 19 	movabs $0x1900000000,%rax
  10a09f:	00 00 00 
  10a0a2:	31 d2                	xor    %edx,%edx
  10a0a4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10a0ab:	00 00 00 
  10a0ae:	66 90                	xchg   %ax,%ax
      FreeMem(devices_);
      return MAKE_ERROR(Error::kNoEnoughMemory);
    }

    for (size_t i = 0; i <= max_slots_; ++i) {
      devices_[i] = nullptr;
  10a0b0:	48 8b 73 10          	mov    0x10(%rbx),%rsi
  10a0b4:	48 c7 04 d6 00 00 00 	movq   $0x0,(%rsi,%rdx,8)
  10a0bb:	00 
      device_context_pointers_[i] = nullptr;
  10a0bc:	48 8b 33             	mov    (%rbx),%rsi
  10a0bf:	48 c7 04 d6 00 00 00 	movq   $0x0,(%rsi,%rdx,8)
  10a0c6:	00 
    for (size_t i = 0; i <= max_slots_; ++i) {
  10a0c7:	48 83 c2 01          	add    $0x1,%rdx
  10a0cb:	48 39 ca             	cmp    %rcx,%rdx
  10a0ce:	76 e0                	jbe    10a0b0 <_ZN3usb4xhci13DeviceManager10InitializeEm+0x70>
  10a0d0:	eb 1f                	jmp    10a0f1 <_ZN3usb4xhci13DeviceManager10InitializeEm+0xb1>
  10a0d2:	48 b8 00 00 00 00 0b 	movabs $0xb00000000,%rax
  10a0d9:	00 00 00 
  10a0dc:	eb 13                	jmp    10a0f1 <_ZN3usb4xhci13DeviceManager10InitializeEm+0xb1>
      FreeMem(devices_);
  10a0de:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
  10a0e2:	e8 d9 c5 ff ff       	call   1066c0 <_ZN3usb7FreeMemEPv>
  10a0e7:	48 b8 00 00 00 00 11 	movabs $0x1100000000,%rax
  10a0ee:	00 00 00 
    }

    return MAKE_ERROR(Error::kSuccess);
  }
  10a0f1:	4c 09 f0             	or     %r14,%rax
  10a0f4:	ba 4b 05 10 00       	mov    $0x10054b,%edx
  10a0f9:	5b                   	pop    %rbx
  10a0fa:	41 5e                	pop    %r14
  10a0fc:	5d                   	pop    %rbp
  10a0fd:	c3                   	ret    
  10a0fe:	66 90                	xchg   %ax,%ax

000000000010a100 <_ZNK3usb4xhci13DeviceManager14DeviceContextsEv>:

  DeviceContext** DeviceManager::DeviceContexts() const {
  10a100:	55                   	push   %rbp
  10a101:	48 89 e5             	mov    %rsp,%rbp
    return device_context_pointers_;
  10a104:	48 8b 07             	mov    (%rdi),%rax
  10a107:	5d                   	pop    %rbp
  10a108:	c3                   	ret    
  10a109:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000010a110 <_ZNK3usb4xhci13DeviceManager10FindByPortEhj>:
  }

  Device* DeviceManager::FindByPort(uint8_t port_num, uint32_t route_string) const {
  10a110:	55                   	push   %rbp
  10a111:	48 89 e5             	mov    %rsp,%rbp
    for (size_t i = 1; i <= max_slots_; ++i) {
  10a114:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  10a118:	48 85 c9             	test   %rcx,%rcx
  10a11b:	74 30                	je     10a14d <_ZNK3usb4xhci13DeviceManager10FindByPortEhj+0x3d>
  10a11d:	48 8b 57 10          	mov    0x10(%rdi),%rdx
  10a121:	bf 01 00 00 00       	mov    $0x1,%edi
  10a126:	eb 11                	jmp    10a139 <_ZNK3usb4xhci13DeviceManager10FindByPortEhj+0x29>
  10a128:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10a12f:	00 
  10a130:	48 83 c7 01          	add    $0x1,%rdi
  10a134:	48 39 cf             	cmp    %rcx,%rdi
  10a137:	77 14                	ja     10a14d <_ZNK3usb4xhci13DeviceManager10FindByPortEhj+0x3d>
      auto dev = devices_[i];
  10a139:	48 8b 04 fa          	mov    (%rdx,%rdi,8),%rax
      if (dev == nullptr) continue;
  10a13d:	48 85 c0             	test   %rax,%rax
  10a140:	74 ee                	je     10a130 <_ZNK3usb4xhci13DeviceManager10FindByPortEhj+0x20>
      if (dev->DeviceContext()->slot_context.bits.root_hub_port_num == port_num) {
  10a142:	40 38 b0 06 03 00 00 	cmp    %sil,0x306(%rax)
  10a149:	75 e5                	jne    10a130 <_ZNK3usb4xhci13DeviceManager10FindByPortEhj+0x20>
        return dev;
      }
    }
    return nullptr;
  }
  10a14b:	5d                   	pop    %rbp
  10a14c:	c3                   	ret    
  10a14d:	31 c0                	xor    %eax,%eax
  10a14f:	5d                   	pop    %rbp
  10a150:	c3                   	ret    
  10a151:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10a158:	00 00 00 
  10a15b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000010a160 <_ZNK3usb4xhci13DeviceManager11FindByStateENS0_6Device5StateE>:

  Device* DeviceManager::FindByState(enum Device::State state) const {
  10a160:	55                   	push   %rbp
  10a161:	48 89 e5             	mov    %rsp,%rbp
    for (size_t i = 1; i <= max_slots_; ++i) {
  10a164:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  10a168:	48 85 c9             	test   %rcx,%rcx
  10a16b:	74 2f                	je     10a19c <_ZNK3usb4xhci13DeviceManager11FindByStateENS0_6Device5StateE+0x3c>
  10a16d:	48 8b 57 10          	mov    0x10(%rdi),%rdx
  10a171:	bf 01 00 00 00       	mov    $0x1,%edi
  10a176:	eb 11                	jmp    10a189 <_ZNK3usb4xhci13DeviceManager11FindByStateENS0_6Device5StateE+0x29>
  10a178:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10a17f:	00 
  10a180:	48 83 c7 01          	add    $0x1,%rdi
  10a184:	48 39 cf             	cmp    %rcx,%rdi
  10a187:	77 13                	ja     10a19c <_ZNK3usb4xhci13DeviceManager11FindByStateENS0_6Device5StateE+0x3c>
      auto dev = devices_[i];
  10a189:	48 8b 04 fa          	mov    (%rdx,%rdi,8),%rax
      if (dev == nullptr) continue;
  10a18d:	48 85 c0             	test   %rax,%rax
  10a190:	74 ee                	je     10a180 <_ZNK3usb4xhci13DeviceManager11FindByStateENS0_6Device5StateE+0x20>
      if (dev->State() == state) {
  10a192:	39 b0 30 0b 00 00    	cmp    %esi,0xb30(%rax)
  10a198:	75 e6                	jne    10a180 <_ZNK3usb4xhci13DeviceManager11FindByStateENS0_6Device5StateE+0x20>
        return dev;
      }
    }
    return nullptr;
  }
  10a19a:	5d                   	pop    %rbp
  10a19b:	c3                   	ret    
  10a19c:	31 c0                	xor    %eax,%eax
  10a19e:	5d                   	pop    %rbp
  10a19f:	c3                   	ret    

000000000010a1a0 <_ZNK3usb4xhci13DeviceManager10FindBySlotEh>:

  Device* DeviceManager::FindBySlot(uint8_t slot_id) const {
  10a1a0:	55                   	push   %rbp
  10a1a1:	48 89 e5             	mov    %rsp,%rbp
    if (slot_id > max_slots_) {
  10a1a4:	89 f0                	mov    %esi,%eax
  10a1a6:	48 39 47 08          	cmp    %rax,0x8(%rdi)
  10a1aa:	73 04                	jae    10a1b0 <_ZNK3usb4xhci13DeviceManager10FindBySlotEh+0x10>
  10a1ac:	31 c0                	xor    %eax,%eax
      return nullptr;
    }
    return devices_[slot_id];
  }
  10a1ae:	5d                   	pop    %rbp
  10a1af:	c3                   	ret    
    return devices_[slot_id];
  10a1b0:	48 8b 4f 10          	mov    0x10(%rdi),%rcx
  10a1b4:	48 8b 04 c1          	mov    (%rcx,%rax,8),%rax
  }
  10a1b8:	5d                   	pop    %rbp
  10a1b9:	c3                   	ret    
  10a1ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000010a1c0 <_ZN3usb4xhci13DeviceManager11AllocDeviceEhPNS0_16DoorbellRegisterE>:
    }
    return {&devices_[device_id], Error::kSuccess};
  }
  */

  Error DeviceManager::AllocDevice(uint8_t slot_id, DoorbellRegister* dbreg) {
  10a1c0:	55                   	push   %rbp
  10a1c1:	48 89 e5             	mov    %rsp,%rbp
  10a1c4:	41 57                	push   %r15
  10a1c6:	41 56                	push   %r14
  10a1c8:	41 54                	push   %r12
  10a1ca:	53                   	push   %rbx
    if (slot_id > max_slots_) {
  10a1cb:	41 89 f4             	mov    %esi,%r12d
  10a1ce:	4c 39 67 08          	cmp    %r12,0x8(%rdi)
  10a1d2:	73 11                	jae    10a1e5 <_ZN3usb4xhci13DeviceManager11AllocDeviceEhPNS0_16DoorbellRegisterE+0x25>
  10a1d4:	b9 06 00 00 00       	mov    $0x6,%ecx
  10a1d9:	48 b8 00 00 00 00 48 	movabs $0x4800000000,%rax
  10a1e0:	00 00 00 
  10a1e3:	eb 61                	jmp    10a246 <_ZN3usb4xhci13DeviceManager11AllocDeviceEhPNS0_16DoorbellRegisterE+0x86>
  10a1e5:	48 89 fb             	mov    %rdi,%rbx
      return MAKE_ERROR(Error::kInvalidSlotID);
    }

    if (devices_[slot_id] != nullptr) {
  10a1e8:	48 8b 47 10          	mov    0x10(%rdi),%rax
  10a1ec:	4a 83 3c e0 00       	cmpq   $0x0,(%rax,%r12,8)
  10a1f1:	74 11                	je     10a204 <_ZN3usb4xhci13DeviceManager11AllocDeviceEhPNS0_16DoorbellRegisterE+0x44>
  10a1f3:	b9 0a 00 00 00       	mov    $0xa,%ecx
  10a1f8:	48 b8 00 00 00 00 4c 	movabs $0x4c00000000,%rax
  10a1ff:	00 00 00 
  10a202:	eb 42                	jmp    10a246 <_ZN3usb4xhci13DeviceManager11AllocDeviceEhPNS0_16DoorbellRegisterE+0x86>
  10a204:	49 89 d6             	mov    %rdx,%r14
  10a207:	41 89 f7             	mov    %esi,%r15d
  10a20a:	bf c0 0d 00 00       	mov    $0xdc0,%edi
  10a20f:	be 40 00 00 00       	mov    $0x40,%esi
  10a214:	ba 00 10 00 00       	mov    $0x1000,%edx
  10a219:	e8 22 c4 ff ff       	call   106640 <_ZN3usb8AllocMemEmjj>
      return MAKE_ERROR(Error::kAlreadyAllocated);
    }

    devices_[slot_id] = AllocArray<Device>(1, 64, 4096);
  10a21e:	48 8b 4b 10          	mov    0x10(%rbx),%rcx
  10a222:	4a 89 04 e1          	mov    %rax,(%rcx,%r12,8)
    new(devices_[slot_id]) Device(slot_id, dbreg);
  10a226:	48 8b 43 10          	mov    0x10(%rbx),%rax
  10a22a:	4a 8b 3c e0          	mov    (%rax,%r12,8),%rdi
  10a22e:	41 0f b6 f7          	movzbl %r15b,%esi
  10a232:	4c 89 f2             	mov    %r14,%rdx
  10a235:	e8 66 e6 ff ff       	call   1088a0 <_ZN3usb4xhci6DeviceC1EhPNS0_16DoorbellRegisterE>
  10a23a:	48 b8 00 00 00 00 51 	movabs $0x5100000000,%rax
  10a241:	00 00 00 
  10a244:	31 c9                	xor    %ecx,%ecx
    return MAKE_ERROR(Error::kSuccess);
  }
  10a246:	48 09 c8             	or     %rcx,%rax
  10a249:	ba 4b 05 10 00       	mov    $0x10054b,%edx
  10a24e:	5b                   	pop    %rbx
  10a24f:	41 5c                	pop    %r12
  10a251:	41 5e                	pop    %r14
  10a253:	41 5f                	pop    %r15
  10a255:	5d                   	pop    %rbp
  10a256:	c3                   	ret    
  10a257:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10a25e:	00 00 

000000000010a260 <_ZN3usb4xhci13DeviceManager9LoadDCBAAEh>:

  Error DeviceManager::LoadDCBAA(uint8_t slot_id) {
  10a260:	55                   	push   %rbp
  10a261:	48 89 e5             	mov    %rsp,%rbp
    if (slot_id > max_slots_) {
  10a264:	89 f0                	mov    %esi,%eax
  10a266:	48 39 47 08          	cmp    %rax,0x8(%rdi)
  10a26a:	73 11                	jae    10a27d <_ZN3usb4xhci13DeviceManager9LoadDCBAAEh+0x1d>
  10a26c:	b9 06 00 00 00       	mov    $0x6,%ecx
  10a271:	48 b8 00 00 00 00 56 	movabs $0x5600000000,%rax
  10a278:	00 00 00 
  10a27b:	eb 20                	jmp    10a29d <_ZN3usb4xhci13DeviceManager9LoadDCBAAEh+0x3d>
      return MAKE_ERROR(Error::kInvalidSlotID);
    }

    auto dev = devices_[slot_id];
  10a27d:	48 8b 4f 10          	mov    0x10(%rdi),%rcx
  10a281:	ba 00 03 00 00       	mov    $0x300,%edx
    DeviceContext* DeviceContext() { return &ctx_; }
  10a286:	48 03 14 c1          	add    (%rcx,%rax,8),%rdx
    device_context_pointers_[slot_id] = dev->DeviceContext();
  10a28a:	48 8b 0f             	mov    (%rdi),%rcx
  10a28d:	48 89 14 c1          	mov    %rdx,(%rcx,%rax,8)
  10a291:	48 b8 00 00 00 00 5b 	movabs $0x5b00000000,%rax
  10a298:	00 00 00 
  10a29b:	31 c9                	xor    %ecx,%ecx
    return MAKE_ERROR(Error::kSuccess);
  }
  10a29d:	48 09 c8             	or     %rcx,%rax
  10a2a0:	ba 4b 05 10 00       	mov    $0x10054b,%edx
  10a2a5:	5d                   	pop    %rbp
  10a2a6:	c3                   	ret    
  10a2a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10a2ae:	00 00 

000000000010a2b0 <_ZN3usb4xhci13DeviceManager6RemoveEh>:

  Error DeviceManager::Remove(uint8_t slot_id) {
  10a2b0:	55                   	push   %rbp
  10a2b1:	48 89 e5             	mov    %rsp,%rbp
  10a2b4:	41 56                	push   %r14
  10a2b6:	53                   	push   %rbx
  10a2b7:	49 89 fe             	mov    %rdi,%r14
    device_context_pointers_[slot_id] = nullptr;
  10a2ba:	48 8b 07             	mov    (%rdi),%rax
  10a2bd:	89 f3                	mov    %esi,%ebx
  10a2bf:	48 c7 04 d8 00 00 00 	movq   $0x0,(%rax,%rbx,8)
  10a2c6:	00 
    FreeMem(devices_[slot_id]);
  10a2c7:	48 8b 47 10          	mov    0x10(%rdi),%rax
  10a2cb:	48 8b 3c d8          	mov    (%rax,%rbx,8),%rdi
  10a2cf:	e8 ec c3 ff ff       	call   1066c0 <_ZN3usb7FreeMemEPv>
    devices_[slot_id] = nullptr;
  10a2d4:	49 8b 46 10          	mov    0x10(%r14),%rax
  10a2d8:	48 c7 04 d8 00 00 00 	movq   $0x0,(%rax,%rbx,8)
  10a2df:	00 
  10a2e0:	48 b8 00 00 00 00 62 	movabs $0x6200000000,%rax
  10a2e7:	00 00 00 
    return MAKE_ERROR(Error::kSuccess);
  10a2ea:	ba 4b 05 10 00       	mov    $0x10054b,%edx
  10a2ef:	5b                   	pop    %rbx
  10a2f0:	41 5e                	pop    %r14
  10a2f2:	5d                   	pop    %rbp
  10a2f3:	c3                   	ret    
  10a2f4:	cc                   	int3   
  10a2f5:	cc                   	int3   
  10a2f6:	cc                   	int3   
  10a2f7:	cc                   	int3   
  10a2f8:	cc                   	int3   
  10a2f9:	cc                   	int3   
  10a2fa:	cc                   	int3   
  10a2fb:	cc                   	int3   
  10a2fc:	cc                   	int3   
  10a2fd:	cc                   	int3   
  10a2fe:	cc                   	int3   
  10a2ff:	cc                   	int3   

000000000010a300 <_ZN3usb4xhci20ExtendedRegisterList8IteratorppEv>:
    return d == 0 ? nullptr : p + d;
  }
}

namespace usb::xhci {
  ExtendedRegisterList::Iterator& ExtendedRegisterList::Iterator::operator++() {
  10a300:	55                   	push   %rbp
  10a301:	48 89 e5             	mov    %rsp,%rbp
  10a304:	48 89 f8             	mov    %rdi,%rax
    if (reg_) {
  10a307:	48 8b 0f             	mov    (%rdi),%rcx
  10a30a:	48 85 c9             	test   %rcx,%rcx
  10a30d:	74 14                	je     10a323 <_ZN3usb4xhci20ExtendedRegisterList8IteratorppEv+0x23>
      tmp.data[i] = value_.data[i];
  10a30f:	8b 11                	mov    (%rcx),%edx
      reg_ = AddOrNull(reg_, reg_->Read().bits.next_pointer);
  10a311:	0f b6 d6             	movzbl %dh,%edx
  10a314:	31 f6                	xor    %esi,%esi
    return d == 0 ? nullptr : p + d;
  10a316:	85 d2                	test   %edx,%edx
  10a318:	48 8d 0c 91          	lea    (%rcx,%rdx,4),%rcx
  10a31c:	48 0f 45 f1          	cmovne %rcx,%rsi
      reg_ = AddOrNull(reg_, reg_->Read().bits.next_pointer);
  10a320:	48 89 30             	mov    %rsi,(%rax)
      static_assert(sizeof(*reg_) == 4);
    }
    return *this;
  10a323:	5d                   	pop    %rbp
  10a324:	c3                   	ret    
  10a325:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10a32c:	00 00 00 
  10a32f:	90                   	nop

000000000010a330 <_ZN3usb4xhci20ExtendedRegisterListC1EmNS0_17HCCPARAMS1_BitmapE>:
  }

  ExtendedRegisterList::ExtendedRegisterList(uint64_t mmio_base,
                                             HCCPARAMS1_Bitmap hccp)
    : first_{AddOrNull(reinterpret_cast<ValueType*>(mmio_base),
                       hccp.bits.xhci_extended_capabilities_pointer)} {}
  10a330:	55                   	push   %rbp
  10a331:	48 89 e5             	mov    %rsp,%rbp
  10a334:	31 c0                	xor    %eax,%eax
  10a336:	c1 ea 10             	shr    $0x10,%edx
    return d == 0 ? nullptr : p + d;
  10a339:	48 8d 0c 96          	lea    (%rsi,%rdx,4),%rcx
  10a33d:	48 0f 45 c1          	cmovne %rcx,%rax
      Iterator(ValueType* reg) : reg_{reg} {}
  10a341:	48 89 07             	mov    %rax,(%rdi)
                       hccp.bits.xhci_extended_capabilities_pointer)} {}
  10a344:	5d                   	pop    %rbp
  10a345:	c3                   	ret    
  10a346:	cc                   	int3   
  10a347:	cc                   	int3   
  10a348:	cc                   	int3   
  10a349:	cc                   	int3   
  10a34a:	cc                   	int3   
  10a34b:	cc                   	int3   
  10a34c:	cc                   	int3   
  10a34d:	cc                   	int3   
  10a34e:	cc                   	int3   
  10a34f:	cc                   	int3   

000000000010a350 <_ZN3usb11ClassDriverC2EPNS_6DeviceE>:
#include "usb/classdriver/base.hpp"

namespace usb {
  ClassDriver::ClassDriver(Device* dev) : dev_{dev} {
  10a350:	55                   	push   %rbp
  10a351:	48 89 e5             	mov    %rsp,%rbp
  10a354:	48 c7 07 58 17 10 00 	movq   $0x101758,(%rdi)
  10a35b:	48 89 77 08          	mov    %rsi,0x8(%rdi)
  }
  10a35f:	5d                   	pop    %rbp
  10a360:	c3                   	ret    
  10a361:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10a368:	00 00 00 
  10a36b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000010a370 <_ZN3usb11ClassDriverD1Ev>:

  ClassDriver::~ClassDriver() {
  10a370:	55                   	push   %rbp
  10a371:	48 89 e5             	mov    %rsp,%rbp
  }
  10a374:	5d                   	pop    %rbp
  10a375:	c3                   	ret    
  10a376:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10a37d:	00 00 00 

000000000010a380 <_ZN3usb11ClassDriverD0Ev>:
  ClassDriver::~ClassDriver() {
  10a380:	55                   	push   %rbp
  10a381:	48 89 e5             	mov    %rsp,%rbp
  10a384:	0f 0b                	ud2    
  10a386:	cc                   	int3   
  10a387:	cc                   	int3   
  10a388:	cc                   	int3   
  10a389:	cc                   	int3   
  10a38a:	cc                   	int3   
  10a38b:	cc                   	int3   
  10a38c:	cc                   	int3   
  10a38d:	cc                   	int3   
  10a38e:	cc                   	int3   
  10a38f:	cc                   	int3   

000000000010a390 <_ZN3usb13HIDBaseDriverC2EPNS_6DeviceEii>:

namespace usb {
  HIDBaseDriver::HIDBaseDriver(Device* dev, int interface_index,
                               int in_packet_size)
      : ClassDriver{dev}, interface_index_{interface_index},
        in_packet_size_{in_packet_size} {
  10a390:	55                   	push   %rbp
  10a391:	48 89 e5             	mov    %rsp,%rbp
  10a394:	41 57                	push   %r15
  10a396:	41 56                	push   %r14
  10a398:	53                   	push   %rbx
  10a399:	50                   	push   %rax
  10a39a:	41 89 ce             	mov    %ecx,%r14d
  10a39d:	41 89 d7             	mov    %edx,%r15d
  10a3a0:	48 89 fb             	mov    %rdi,%rbx
      : ClassDriver{dev}, interface_index_{interface_index},
  10a3a3:	e8 a8 ff ff ff       	call   10a350 <_ZN3usb11ClassDriverC2EPNS_6DeviceE>
        in_packet_size_{in_packet_size} {
  10a3a8:	48 c7 03 a0 17 10 00 	movq   $0x1017a0,(%rbx)
    constexpr EndpointID() : addr_{0} {}
  10a3af:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  10a3b6:	00 
      : ClassDriver{dev}, interface_index_{interface_index},
  10a3b7:	44 89 7b 18          	mov    %r15d,0x18(%rbx)
        in_packet_size_{in_packet_size} {
  10a3bb:	44 89 73 1c          	mov    %r14d,0x1c(%rbx)
   private:
    EndpointID ep_interrupt_in_;
    EndpointID ep_interrupt_out_;
    const int interface_index_;
    int in_packet_size_;
    int initialize_phase_{0};
  10a3bf:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%rbx)

    std::array<uint8_t, kBufferSize> buf_{}, previous_buf_{};
  10a3c6:	48 8d 7b 24          	lea    0x24(%rbx),%rdi
  10a3ca:	ba 00 04 00 00       	mov    $0x400,%edx
  10a3cf:	31 f6                	xor    %esi,%esi
  10a3d1:	e8 ca 13 00 00       	call   10b7a0 <memset>
  10a3d6:	48 81 c3 24 04 00 00 	add    $0x424,%rbx
  10a3dd:	ba 00 04 00 00       	mov    $0x400,%edx
  10a3e2:	48 89 df             	mov    %rbx,%rdi
  10a3e5:	31 f6                	xor    %esi,%esi
  10a3e7:	48 83 c4 08          	add    $0x8,%rsp
  10a3eb:	5b                   	pop    %rbx
  10a3ec:	41 5e                	pop    %r14
  10a3ee:	41 5f                	pop    %r15
  10a3f0:	5d                   	pop    %rbp
  10a3f1:	e9 aa 13 00 00       	jmp    10b7a0 <memset>
  10a3f6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10a3fd:	00 00 00 

000000000010a400 <_ZN3usb13HIDBaseDriver10InitializeEv>:
  }

  Error HIDBaseDriver::Initialize() {
  10a400:	55                   	push   %rbp
  10a401:	48 89 e5             	mov    %rsp,%rbp
  10a404:	48 b8 0b 00 00 00 0f 	movabs $0xf0000000b,%rax
  10a40b:	00 00 00 
    return MAKE_ERROR(Error::kNotImplemented);
  10a40e:	ba 3a 07 10 00       	mov    $0x10073a,%edx
  10a413:	5d                   	pop    %rbp
  10a414:	c3                   	ret    
  10a415:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10a41c:	00 00 00 
  10a41f:	90                   	nop

000000000010a420 <_ZN3usb13HIDBaseDriver11SetEndpointERKNS_14EndpointConfigE>:
  }

  Error HIDBaseDriver::SetEndpoint(const EndpointConfig& config) {
  10a420:	55                   	push   %rbp
  10a421:	48 89 e5             	mov    %rsp,%rbp
    if (config.ep_type == EndpointType::kInterrupt && config.ep_id.IsIn()) {
  10a424:	83 7e 04 03          	cmpl   $0x3,0x4(%rsi)
  10a428:	75 0d                	jne    10a437 <_ZN3usb13HIDBaseDriver11SetEndpointERKNS_14EndpointConfigE+0x17>
    bool IsIn() const { return addr_ & 1; }
  10a42a:	8b 06                	mov    (%rsi),%eax
  10a42c:	31 c9                	xor    %ecx,%ecx
  10a42e:	a8 01                	test   $0x1,%al
  10a430:	0f 94 c1             	sete   %cl
  10a433:	89 44 8f 10          	mov    %eax,0x10(%rdi,%rcx,4)
  10a437:	48 b8 00 00 00 00 18 	movabs $0x1800000000,%rax
  10a43e:	00 00 00 
      ep_interrupt_in_ = config.ep_id;
    } else if (config.ep_type == EndpointType::kInterrupt && !config.ep_id.IsIn()) {
      ep_interrupt_out_ = config.ep_id;
    }
    return MAKE_ERROR(Error::kSuccess);
  10a441:	ba 3a 07 10 00       	mov    $0x10073a,%edx
  10a446:	5d                   	pop    %rbp
  10a447:	c3                   	ret    
  10a448:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10a44f:	00 

000000000010a450 <_ZN3usb13HIDBaseDriver21OnEndpointsConfiguredEv>:
  }

  Error HIDBaseDriver::OnEndpointsConfigured() {
  10a450:	55                   	push   %rbp
  10a451:	48 89 e5             	mov    %rsp,%rbp
  10a454:	48 83 ec 10          	sub    $0x10,%rsp
  10a458:	49 89 f9             	mov    %rdi,%r9
  10a45b:	0f b7 57 18          	movzwl 0x18(%rdi),%edx
    setup_data.request = request::kSetProtocol;
    setup_data.value = 0; // boot protocol
    setup_data.index = interface_index_;
    setup_data.length = 0;

    initialize_phase_ = 1;
  10a45f:	c7 47 20 01 00 00 00 	movl   $0x1,0x20(%rdi)
    virtual Error OnControlCompleted(EndpointID ep_id, SetupData setup_data,
                                     const void* buf, int len) = 0;
    virtual Error OnInterruptCompleted(EndpointID ep_id, const void* buf, int len) = 0;

    /** このクラスドライバを保持する USB デバイスを返す． */
    Device* ParentDevice() const { return dev_; }
  10a466:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
    constexpr EndpointID(const EndpointID& ep_id) : addr_{ep_id.addr_} {}
  10a46a:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
    return ParentDevice()->ControlOut(kDefaultControlPipeID, setup_data, nullptr, 0, this);
  10a471:	48 c1 e2 20          	shl    $0x20,%rdx
  10a475:	48 81 ca 21 0b 00 00 	or     $0xb21,%rdx
  10a47c:	48 8b 07             	mov    (%rdi),%rax
  10a47f:	48 8d 75 f8          	lea    -0x8(%rbp),%rsi
  10a483:	31 c9                	xor    %ecx,%ecx
  10a485:	45 31 c0             	xor    %r8d,%r8d
  10a488:	ff 50 18             	call   *0x18(%rax)
  }
  10a48b:	48 83 c4 10          	add    $0x10,%rsp
  10a48f:	5d                   	pop    %rbp
  10a490:	c3                   	ret    
  10a491:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10a498:	00 00 00 
  10a49b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000010a4a0 <_ZN3usb13HIDBaseDriver18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi>:

  Error HIDBaseDriver::OnControlCompleted(EndpointID ep_id, SetupData setup_data,
                                          const void* buf, int len) {
  10a4a0:	55                   	push   %rbp
  10a4a1:	48 89 e5             	mov    %rsp,%rbp
  10a4a4:	53                   	push   %rbx
  10a4a5:	50                   	push   %rax
  10a4a6:	48 89 fb             	mov    %rdi,%rbx
    Log(kDebug, "HIDBaseDriver::OnControlCompleted: dev %08x, phase = %d, len = %d\n",
        this, initialize_phase_, len);
  10a4a9:	8b 4f 20             	mov    0x20(%rdi),%ecx
    Log(kDebug, "HIDBaseDriver::OnControlCompleted: dev %08x, phase = %d, len = %d\n",
  10a4ac:	be 86 0c 10 00       	mov    $0x100c86,%esi
  10a4b1:	bf 07 00 00 00       	mov    $0x7,%edi
  10a4b6:	48 89 da             	mov    %rbx,%rdx
  10a4b9:	31 c0                	xor    %eax,%eax
  10a4bb:	e8 60 be ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
    if (initialize_phase_ == 1) {
  10a4c0:	83 7b 20 01          	cmpl   $0x1,0x20(%rbx)
  10a4c4:	75 39                	jne    10a4ff <_ZN3usb13HIDBaseDriver18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi+0x5f>
      initialize_phase_ = 2;
  10a4c6:	c7 43 20 02 00 00 00 	movl   $0x2,0x20(%rbx)
  10a4cd:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
  10a4d1:	8b 43 10             	mov    0x10(%rbx),%eax
  10a4d4:	89 45 f0             	mov    %eax,-0x10(%rbp)
      return ParentDevice()->InterruptIn(ep_interrupt_in_, buf_.data(), in_packet_size_);
  10a4d7:	8b 4b 1c             	mov    0x1c(%rbx),%ecx
    value_type* data() _NOEXCEPT {return __elems_;}
  10a4da:	48 83 c3 24          	add    $0x24,%rbx
  10a4de:	48 8b 07             	mov    (%rdi),%rax
  10a4e1:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  10a4e5:	48 89 da             	mov    %rbx,%rdx
  10a4e8:	ff 50 20             	call   *0x20(%rax)
  10a4eb:	48 89 c1             	mov    %rax,%rcx
  10a4ee:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  10a4f5:	ff ff ff 
    }

    return MAKE_ERROR(Error::kNotImplemented);
  }
  10a4f8:	48 21 c8             	and    %rcx,%rax
      return ParentDevice()->InterruptIn(ep_interrupt_in_, buf_.data(), in_packet_size_);
  10a4fb:	89 c9                	mov    %ecx,%ecx
  10a4fd:	eb 14                	jmp    10a513 <_ZN3usb13HIDBaseDriver18OnControlCompletedENS_10EndpointIDENS_9SetupDataEPKvi+0x73>
  10a4ff:	b9 0b 00 00 00       	mov    $0xb,%ecx
  10a504:	48 b8 00 00 00 00 32 	movabs $0x3200000000,%rax
  10a50b:	00 00 00 
  10a50e:	ba 3a 07 10 00       	mov    $0x10073a,%edx
  }
  10a513:	48 09 c8             	or     %rcx,%rax
  10a516:	48 83 c4 08          	add    $0x8,%rsp
  10a51a:	5b                   	pop    %rbx
  10a51b:	5d                   	pop    %rbp
  10a51c:	c3                   	ret    
  10a51d:	0f 1f 00             	nopl   (%rax)

000000000010a520 <_ZN3usb13HIDBaseDriver20OnInterruptCompletedENS_10EndpointIDEPKvi>:

  Error HIDBaseDriver::OnInterruptCompleted(EndpointID ep_id, const void* buf, int len) {
  10a520:	55                   	push   %rbp
  10a521:	48 89 e5             	mov    %rsp,%rbp
  10a524:	41 57                	push   %r15
  10a526:	41 56                	push   %r14
  10a528:	53                   	push   %rbx
  10a529:	50                   	push   %rax
    bool IsIn() const { return addr_ & 1; }
  10a52a:	f6 06 01             	testb  $0x1,(%rsi)
    if (ep_id.IsIn()) {
  10a52d:	75 16                	jne    10a545 <_ZN3usb13HIDBaseDriver20OnInterruptCompletedENS_10EndpointIDEPKvi+0x25>
  10a52f:	b9 0b 00 00 00       	mov    $0xb,%ecx
  10a534:	48 b8 00 00 00 00 3c 	movabs $0x3c00000000,%rax
  10a53b:	00 00 00 
  10a53e:	ba 3a 07 10 00       	mov    $0x10073a,%edx
  10a543:	eb 53                	jmp    10a598 <_ZN3usb13HIDBaseDriver20OnInterruptCompletedENS_10EndpointIDEPKvi+0x78>
  10a545:	41 89 cf             	mov    %ecx,%r15d
  10a548:	48 89 fb             	mov    %rdi,%rbx
      OnDataReceived();
  10a54b:	48 8b 07             	mov    (%rdi),%rax
  10a54e:	ff 50 38             	call   *0x38(%rax)
  10a551:	4c 8d 73 24          	lea    0x24(%rbx),%r14
    _Up*
>::type
__copy(_Tp* __first, _Tp* __last, _Up* __result)
{
    const size_t __n = static_cast<size_t>(__last - __first);
    if (__n > 0)
  10a555:	45 85 ff             	test   %r15d,%r15d
  10a558:	74 12                	je     10a56c <_ZN3usb13HIDBaseDriver20OnInterruptCompletedENS_10EndpointIDEPKvi+0x4c>
>::type
copy_n(_InputIterator __first, _Size __orig_n, _OutputIterator __result)
{
    typedef decltype(__convert_to_integral(__orig_n)) _IntegralSize;
    _IntegralSize __n = __orig_n;
    return _VSTD::copy(__first, __first + __n, __result);
  10a55a:	49 63 d7             	movslq %r15d,%rdx
  10a55d:	48 8d bb 24 04 00 00 	lea    0x424(%rbx),%rdi
        _VSTD::memmove(__result, __first, __n * sizeof(_Up));
  10a564:	4c 89 f6             	mov    %r14,%rsi
  10a567:	e8 c4 0c 00 00       	call   10b230 <memmove>
  10a56c:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
    constexpr EndpointID(const EndpointID& ep_id) : addr_{ep_id.addr_} {}
  10a570:	8b 43 10             	mov    0x10(%rbx),%eax
  10a573:	89 45 e0             	mov    %eax,-0x20(%rbp)
      std::copy_n(buf_.begin(), len, previous_buf_.begin());
      return ParentDevice()->InterruptIn(ep_interrupt_in_, buf_.data(), in_packet_size_);
  10a576:	8b 4b 1c             	mov    0x1c(%rbx),%ecx
  10a579:	48 8b 07             	mov    (%rdi),%rax
  10a57c:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
  10a580:	4c 89 f2             	mov    %r14,%rdx
  10a583:	ff 50 20             	call   *0x20(%rax)
  10a586:	48 89 c1             	mov    %rax,%rcx
  10a589:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  10a590:	ff ff ff 
    }

    return MAKE_ERROR(Error::kNotImplemented);
  }
  10a593:	48 21 c8             	and    %rcx,%rax
      return ParentDevice()->InterruptIn(ep_interrupt_in_, buf_.data(), in_packet_size_);
  10a596:	89 c9                	mov    %ecx,%ecx
  }
  10a598:	48 09 c8             	or     %rcx,%rax
  10a59b:	48 83 c4 08          	add    $0x8,%rsp
  10a59f:	5b                   	pop    %rbx
  10a5a0:	41 5e                	pop    %r14
  10a5a2:	41 5f                	pop    %r15
  10a5a4:	5d                   	pop    %rbp
  10a5a5:	c3                   	ret    
  10a5a6:	cc                   	int3   
  10a5a7:	cc                   	int3   
  10a5a8:	cc                   	int3   
  10a5a9:	cc                   	int3   
  10a5aa:	cc                   	int3   
  10a5ab:	cc                   	int3   
  10a5ac:	cc                   	int3   
  10a5ad:	cc                   	int3   
  10a5ae:	cc                   	int3   
  10a5af:	cc                   	int3   

000000000010a5b0 <_ZN3usb13HIDBaseDriverD0Ev>:
  class HIDBaseDriver : public ClassDriver {
  10a5b0:	55                   	push   %rbp
  10a5b1:	48 89 e5             	mov    %rsp,%rbp
  10a5b4:	0f 0b                	ud2    
  10a5b6:	cc                   	int3   
  10a5b7:	cc                   	int3   
  10a5b8:	cc                   	int3   
  10a5b9:	cc                   	int3   
  10a5ba:	cc                   	int3   
  10a5bb:	cc                   	int3   
  10a5bc:	cc                   	int3   
  10a5bd:	cc                   	int3   
  10a5be:	cc                   	int3   
  10a5bf:	cc                   	int3   

000000000010a5c0 <_ZN3usb17HIDKeyboardDriverC1EPNS_6DeviceEi>:
#include "usb/memory.hpp"
#include "usb/device.hpp"

namespace usb {
  HIDKeyboardDriver::HIDKeyboardDriver(Device* dev, int interface_index)
      : HIDBaseDriver{dev, interface_index, 8} {
  10a5c0:	55                   	push   %rbp
  10a5c1:	48 89 e5             	mov    %rsp,%rbp
  10a5c4:	53                   	push   %rbx
  10a5c5:	50                   	push   %rax
  10a5c6:	48 89 fb             	mov    %rdi,%rbx
  10a5c9:	b9 08 00 00 00       	mov    $0x8,%ecx
  10a5ce:	e8 bd fd ff ff       	call   10a390 <_ZN3usb13HIDBaseDriverC2EPNS_6DeviceEii>
  10a5d3:	48 c7 03 f0 17 10 00 	movq   $0x1017f0,(%rbx)
    __value_func() _NOEXCEPT : __f_(0) {}
  10a5da:	48 c7 83 50 08 00 00 	movq   $0x0,0x850(%rbx)
  10a5e1:	00 00 00 00 
  10a5e5:	48 c7 83 80 08 00 00 	movq   $0x0,0x880(%rbx)
  10a5ec:	00 00 00 00 
  10a5f0:	48 c7 83 b0 08 00 00 	movq   $0x0,0x8b0(%rbx)
  10a5f7:	00 00 00 00 
  10a5fb:	48 c7 83 e0 08 00 00 	movq   $0x0,0x8e0(%rbx)
  10a602:	00 00 00 00 
    void SubscribeKeyPush(std::function<ObserverType> observer);
    static std::function<ObserverType> default_observer;

   private:
    std::array<std::function<ObserverType>, 4> observers_;
    int num_observers_ = 0;
  10a606:	c7 83 f0 08 00 00 00 	movl   $0x0,0x8f0(%rbx)
  10a60d:	00 00 00 
  }
  10a610:	48 83 c4 08          	add    $0x8,%rsp
  10a614:	5b                   	pop    %rbx
  10a615:	5d                   	pop    %rbp
  10a616:	c3                   	ret    
  10a617:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10a61e:	00 00 

000000000010a620 <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv>:

  Error HIDKeyboardDriver::OnDataReceived() {
  10a620:	55                   	push   %rbp
  10a621:	48 89 e5             	mov    %rsp,%rbp
  10a624:	41 57                	push   %r15
  10a626:	41 56                	push   %r14
  10a628:	41 55                	push   %r13
  10a62a:	41 54                	push   %r12
  10a62c:	53                   	push   %rbx
  10a62d:	48 83 ec 18          	sub    $0x18,%rsp
  10a631:	48 89 fb             	mov    %rdi,%rbx
  10a634:	48 8d 87 24 08 00 00 	lea    0x824(%rdi),%rax
  10a63b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    for (int i = 2; i < 8; ++i) {
  10a63f:	48 8d 87 50 08 00 00 	lea    0x850(%rdi),%rax
  10a646:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  10a64a:	41 bd 02 00 00 00    	mov    $0x2,%r13d
  10a650:	eb 26                	jmp    10a678 <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv+0x58>
      const uint8_t key = Buffer()[i];
      if (key == 0) {
        continue;
      }
      const auto& prev_buf = PreviousBuffer();
      if (std::find(prev_buf.begin(), prev_buf.end(), key) != prev_buf.end()) {
  10a652:	48 01 d8             	add    %rbx,%rax
  10a655:	48 05 24 04 00 00    	add    $0x424,%rax
  10a65b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10a660:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  10a664:	0f 84 92 00 00 00    	je     10a6fc <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv+0xdc>
    for (int i = 2; i < 8; ++i) {
  10a66a:	49 83 c5 01          	add    $0x1,%r13
  10a66e:	49 83 fd 08          	cmp    $0x8,%r13
  10a672:	0f 84 2d 01 00 00    	je     10a7a5 <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv+0x185>
      const uint8_t key = Buffer()[i];
  10a678:	46 8a 64 2b 24       	mov    0x24(%rbx,%r13,1),%r12b
      if (key == 0) {
  10a67d:	45 84 e4             	test   %r12b,%r12b
  10a680:	74 e8                	je     10a66a <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv+0x4a>
  10a682:	31 c0                	xor    %eax,%eax
        if (*__first == __value_)
  10a684:	44 38 a4 03 24 04 00 	cmp    %r12b,0x424(%rbx,%rax,1)
  10a68b:	00 
  10a68c:	74 c4                	je     10a652 <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv+0x32>
  10a68e:	44 38 a4 03 25 04 00 	cmp    %r12b,0x425(%rbx,%rax,1)
  10a695:	00 
  10a696:	0f 84 a7 00 00 00    	je     10a743 <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv+0x123>
  10a69c:	44 38 a4 03 26 04 00 	cmp    %r12b,0x426(%rbx,%rax,1)
  10a6a3:	00 
  10a6a4:	0f 84 a7 00 00 00    	je     10a751 <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv+0x131>
  10a6aa:	44 38 a4 03 27 04 00 	cmp    %r12b,0x427(%rbx,%rax,1)
  10a6b1:	00 
  10a6b2:	0f 84 a7 00 00 00    	je     10a75f <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv+0x13f>
  10a6b8:	44 38 a4 03 28 04 00 	cmp    %r12b,0x428(%rbx,%rax,1)
  10a6bf:	00 
  10a6c0:	0f 84 a7 00 00 00    	je     10a76d <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv+0x14d>
  10a6c6:	44 38 a4 03 29 04 00 	cmp    %r12b,0x429(%rbx,%rax,1)
  10a6cd:	00 
  10a6ce:	0f 84 a7 00 00 00    	je     10a77b <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv+0x15b>
  10a6d4:	44 38 a4 03 2a 04 00 	cmp    %r12b,0x42a(%rbx,%rax,1)
  10a6db:	00 
  10a6dc:	0f 84 a7 00 00 00    	je     10a789 <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv+0x169>
  10a6e2:	44 38 a4 03 2b 04 00 	cmp    %r12b,0x42b(%rbx,%rax,1)
  10a6e9:	00 
  10a6ea:	0f 84 a7 00 00 00    	je     10a797 <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv+0x177>
    for (; __first != __last; ++__first)
  10a6f0:	48 83 c0 08          	add    $0x8,%rax
  10a6f4:	48 3d 00 04 00 00    	cmp    $0x400,%rax
  10a6fa:	75 88                	jne    10a684 <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv+0x64>
  }

  std::function<HIDKeyboardDriver::ObserverType> HIDKeyboardDriver::default_observer;

  void HIDKeyboardDriver::NotifyKeyPush(uint8_t keycode) {
    for (int i = 0; i < num_observers_; ++i) {
  10a6fc:	83 bb f0 08 00 00 00 	cmpl   $0x0,0x8f0(%rbx)
  10a703:	0f 8e 61 ff ff ff    	jle    10a66a <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv+0x4a>
  10a709:	4c 8b 7d c8          	mov    -0x38(%rbp),%r15
  10a70d:	45 31 f6             	xor    %r14d,%r14d
  10a710:	44 88 65 d7          	mov    %r12b,-0x29(%rbp)
        if (__f_ == 0)
  10a714:	49 8b 3f             	mov    (%r15),%rdi
  10a717:	48 85 ff             	test   %rdi,%rdi
  10a71a:	0f 84 a3 00 00 00    	je     10a7c3 <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv+0x1a3>
        return (*__f_)(_VSTD::forward<_ArgTypes>(__args)...);
  10a720:	48 8b 07             	mov    (%rdi),%rax
  10a723:	48 8d 75 d7          	lea    -0x29(%rbp),%rsi
  10a727:	ff 50 30             	call   *0x30(%rax)
  10a72a:	49 83 c6 01          	add    $0x1,%r14
  10a72e:	48 63 83 f0 08 00 00 	movslq 0x8f0(%rbx),%rax
  10a735:	49 83 c7 30          	add    $0x30,%r15
  10a739:	49 39 c6             	cmp    %rax,%r14
  10a73c:	7c d2                	jl     10a710 <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv+0xf0>
  10a73e:	e9 27 ff ff ff       	jmp    10a66a <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv+0x4a>
      if (std::find(prev_buf.begin(), prev_buf.end(), key) != prev_buf.end()) {
  10a743:	48 01 d8             	add    %rbx,%rax
  10a746:	48 05 25 04 00 00    	add    $0x425,%rax
  10a74c:	e9 0f ff ff ff       	jmp    10a660 <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv+0x40>
  10a751:	48 01 d8             	add    %rbx,%rax
  10a754:	48 05 26 04 00 00    	add    $0x426,%rax
  10a75a:	e9 01 ff ff ff       	jmp    10a660 <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv+0x40>
  10a75f:	48 01 d8             	add    %rbx,%rax
  10a762:	48 05 27 04 00 00    	add    $0x427,%rax
  10a768:	e9 f3 fe ff ff       	jmp    10a660 <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv+0x40>
  10a76d:	48 01 d8             	add    %rbx,%rax
  10a770:	48 05 28 04 00 00    	add    $0x428,%rax
  10a776:	e9 e5 fe ff ff       	jmp    10a660 <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv+0x40>
  10a77b:	48 01 d8             	add    %rbx,%rax
  10a77e:	48 05 29 04 00 00    	add    $0x429,%rax
  10a784:	e9 d7 fe ff ff       	jmp    10a660 <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv+0x40>
  10a789:	48 01 d8             	add    %rbx,%rax
  10a78c:	48 05 2a 04 00 00    	add    $0x42a,%rax
  10a792:	e9 c9 fe ff ff       	jmp    10a660 <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv+0x40>
  10a797:	48 01 d8             	add    %rbx,%rax
  10a79a:	48 05 2b 04 00 00    	add    $0x42b,%rax
  10a7a0:	e9 bb fe ff ff       	jmp    10a660 <_ZN3usb17HIDKeyboardDriver14OnDataReceivedEv+0x40>
  10a7a5:	48 b8 00 00 00 00 18 	movabs $0x1800000000,%rax
  10a7ac:	00 00 00 
    return MAKE_ERROR(Error::kSuccess);
  10a7af:	ba dd 08 10 00       	mov    $0x1008dd,%edx
  10a7b4:	48 83 c4 18          	add    $0x18,%rsp
  10a7b8:	5b                   	pop    %rbx
  10a7b9:	41 5c                	pop    %r12
  10a7bb:	41 5d                	pop    %r13
  10a7bd:	41 5e                	pop    %r14
  10a7bf:	41 5f                	pop    %r15
  10a7c1:	5d                   	pop    %rbp
  10a7c2:	c3                   	ret    
            __throw_bad_function_call();
  10a7c3:	e8 18 04 00 00       	call   10abe0 <_ZNSt3__125__throw_bad_function_callEv>
  10a7c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10a7cf:	00 

000000000010a7d0 <_ZN3usb17HIDKeyboardDriver13NotifyKeyPushEh>:
  void HIDKeyboardDriver::NotifyKeyPush(uint8_t keycode) {
  10a7d0:	55                   	push   %rbp
  10a7d1:	48 89 e5             	mov    %rsp,%rbp
  10a7d4:	41 57                	push   %r15
  10a7d6:	41 56                	push   %r14
  10a7d8:	41 55                	push   %r13
  10a7da:	41 54                	push   %r12
  10a7dc:	53                   	push   %rbx
  10a7dd:	50                   	push   %rax
    for (int i = 0; i < num_observers_; ++i) {
  10a7de:	83 bf f0 08 00 00 00 	cmpl   $0x0,0x8f0(%rdi)
  10a7e5:	7e 44                	jle    10a82b <_ZN3usb17HIDKeyboardDriver13NotifyKeyPushEh+0x5b>
  10a7e7:	41 89 f6             	mov    %esi,%r14d
  10a7ea:	49 89 fc             	mov    %rdi,%r12
  10a7ed:	4c 8d af 50 08 00 00 	lea    0x850(%rdi),%r13
  10a7f4:	31 db                	xor    %ebx,%ebx
  10a7f6:	4c 8d 7d d7          	lea    -0x29(%rbp),%r15
  10a7fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10a800:	44 88 75 d7          	mov    %r14b,-0x29(%rbp)
        if (__f_ == 0)
  10a804:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  10a808:	48 85 ff             	test   %rdi,%rdi
  10a80b:	74 2d                	je     10a83a <_ZN3usb17HIDKeyboardDriver13NotifyKeyPushEh+0x6a>
        return (*__f_)(_VSTD::forward<_ArgTypes>(__args)...);
  10a80d:	48 8b 07             	mov    (%rdi),%rax
  10a810:	4c 89 fe             	mov    %r15,%rsi
  10a813:	ff 50 30             	call   *0x30(%rax)
  10a816:	48 83 c3 01          	add    $0x1,%rbx
  10a81a:	49 63 84 24 f0 08 00 	movslq 0x8f0(%r12),%rax
  10a821:	00 
  10a822:	49 83 c5 30          	add    $0x30,%r13
  10a826:	48 39 c3             	cmp    %rax,%rbx
  10a829:	7c d5                	jl     10a800 <_ZN3usb17HIDKeyboardDriver13NotifyKeyPushEh+0x30>
      observers_[i](keycode);
    }
  }
  10a82b:	48 83 c4 08          	add    $0x8,%rsp
  10a82f:	5b                   	pop    %rbx
  10a830:	41 5c                	pop    %r12
  10a832:	41 5d                	pop    %r13
  10a834:	41 5e                	pop    %r14
  10a836:	41 5f                	pop    %r15
  10a838:	5d                   	pop    %rbp
  10a839:	c3                   	ret    
            __throw_bad_function_call();
  10a83a:	e8 a1 03 00 00       	call   10abe0 <_ZNSt3__125__throw_bad_function_callEv>
  10a83f:	90                   	nop

000000000010a840 <_ZN3usb17HIDKeyboardDrivernwEm>:
  void* HIDKeyboardDriver::operator new(size_t size) {
  10a840:	55                   	push   %rbp
  10a841:	48 89 e5             	mov    %rsp,%rbp
    return AllocMem(sizeof(HIDKeyboardDriver), 0, 0);
  10a844:	bf 00 09 00 00       	mov    $0x900,%edi
  10a849:	31 f6                	xor    %esi,%esi
  10a84b:	31 d2                	xor    %edx,%edx
  10a84d:	5d                   	pop    %rbp
  10a84e:	e9 ed bd ff ff       	jmp    106640 <_ZN3usb8AllocMemEmjj>
  10a853:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10a85a:	00 00 00 
  10a85d:	0f 1f 00             	nopl   (%rax)

000000000010a860 <_ZN3usb17HIDKeyboardDriverdlEPv>:
  void HIDKeyboardDriver::operator delete(void* ptr) noexcept {
  10a860:	55                   	push   %rbp
  10a861:	48 89 e5             	mov    %rsp,%rbp
    FreeMem(ptr);
  10a864:	5d                   	pop    %rbp
  10a865:	e9 56 be ff ff       	jmp    1066c0 <_ZN3usb7FreeMemEPv>
  10a86a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000010a870 <_ZN3usb17HIDKeyboardDriver16SubscribeKeyPushENSt3__18functionIFvhEEE>:
      std::function<void (uint8_t keycode)> observer) {
  10a870:	55                   	push   %rbp
  10a871:	48 89 e5             	mov    %rsp,%rbp
  10a874:	41 56                	push   %r14
  10a876:	53                   	push   %rbx
  10a877:	48 83 ec 30          	sub    $0x30,%rsp
  10a87b:	48 89 fb             	mov    %rdi,%rbx
    observers_[num_observers_++] = observer;
  10a87e:	4c 63 b7 f0 08 00 00 	movslq 0x8f0(%rdi),%r14
  10a885:	41 8d 46 01          	lea    0x1(%r14),%eax
  10a889:	89 87 f0 08 00 00    	mov    %eax,0x8f0(%rdi)
        if (__f.__f_ == 0)
  10a88f:	48 8b 7e 20          	mov    0x20(%rsi),%rdi
  10a893:	48 85 ff             	test   %rdi,%rdi
  10a896:	74 11                	je     10a8a9 <_ZN3usb17HIDKeyboardDriver16SubscribeKeyPushENSt3__18functionIFvhEEE+0x39>
        else if ((void*)__f.__f_ == &__f.__buf_)
  10a898:	48 39 fe             	cmp    %rdi,%rsi
  10a89b:	74 16                	je     10a8b3 <_ZN3usb17HIDKeyboardDriver16SubscribeKeyPushENSt3__18functionIFvhEEE+0x43>
            __f_ = __f.__f_->__clone();
  10a89d:	48 8b 07             	mov    (%rdi),%rax
  10a8a0:	ff 50 10             	call   *0x10(%rax)
  10a8a3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  10a8a7:	eb 18                	jmp    10a8c1 <_ZN3usb17HIDKeyboardDriver16SubscribeKeyPushENSt3__18functionIFvhEEE+0x51>
            __f_ = 0;
  10a8a9:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  10a8b0:	00 
  10a8b1:	eb 0e                	jmp    10a8c1 <_ZN3usb17HIDKeyboardDriver16SubscribeKeyPushENSt3__18functionIFvhEEE+0x51>
  10a8b3:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
            __f_ = __as_base(&__buf_);
  10a8b7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
            __f.__f_->__clone(__f_);
  10a8bb:	48 8b 07             	mov    (%rdi),%rax
  10a8be:	ff 50 18             	call   *0x18(%rax)
    __f_.swap(__f.__f_);
  10a8c1:	4b 8d 04 76          	lea    (%r14,%r14,2),%rax
  10a8c5:	48 c1 e0 04          	shl    $0x4,%rax
  10a8c9:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  10a8cd:	48 81 c6 30 08 00 00 	add    $0x830,%rsi
  10a8d4:	48 8d 5d c0          	lea    -0x40(%rbp),%rbx
  10a8d8:	48 89 df             	mov    %rbx,%rdi
  10a8db:	e8 10 02 00 00       	call   10aaf0 <_ZNSt3__110__function12__value_funcIFvhEE4swapERS3_>
        if ((void*)__f_ == &__buf_)
  10a8e0:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  10a8e4:	48 39 fb             	cmp    %rdi,%rbx
  10a8e7:	74 0d                	je     10a8f6 <_ZN3usb17HIDKeyboardDriver16SubscribeKeyPushENSt3__18functionIFvhEEE+0x86>
        else if (__f_)
  10a8e9:	48 85 ff             	test   %rdi,%rdi
  10a8ec:	74 0e                	je     10a8fc <_ZN3usb17HIDKeyboardDriver16SubscribeKeyPushENSt3__18functionIFvhEEE+0x8c>
            __f_->destroy_deallocate();
  10a8ee:	48 8b 07             	mov    (%rdi),%rax
  10a8f1:	ff 50 28             	call   *0x28(%rax)
  10a8f4:	eb 06                	jmp    10a8fc <_ZN3usb17HIDKeyboardDriver16SubscribeKeyPushENSt3__18functionIFvhEEE+0x8c>
            __f_->destroy();
  10a8f6:	48 8b 07             	mov    (%rdi),%rax
  10a8f9:	ff 50 20             	call   *0x20(%rax)
  }
  10a8fc:	48 83 c4 30          	add    $0x30,%rsp
  10a900:	5b                   	pop    %rbx
  10a901:	41 5e                	pop    %r14
  10a903:	5d                   	pop    %rbp
  10a904:	c3                   	ret    
  10a905:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10a90c:	00 00 00 
  10a90f:	90                   	nop

000000000010a910 <_GLOBAL__sub_I_keyboard.cpp>:
  10a910:	55                   	push   %rbp
  10a911:	48 89 e5             	mov    %rsp,%rbp
    __value_func() _NOEXCEPT : __f_(0) {}
  10a914:	48 c7 05 11 0b 17 00 	movq   $0x0,0x170b11(%rip)        # 27b430 <_ZN3usb17HIDKeyboardDriver16default_observerE+0x20>
  10a91b:	00 00 00 00 
  std::function<HIDKeyboardDriver::ObserverType> HIDKeyboardDriver::default_observer;
  10a91f:	bf 40 a9 10 00       	mov    $0x10a940,%edi
  10a924:	be 10 b4 27 00       	mov    $0x27b410,%esi
  10a929:	ba 00 00 10 00       	mov    $0x100000,%edx
  10a92e:	5d                   	pop    %rbp
  10a92f:	e9 1c 07 00 00       	jmp    10b050 <__cxa_atexit>
  10a934:	cc                   	int3   
  10a935:	cc                   	int3   
  10a936:	cc                   	int3   
  10a937:	cc                   	int3   
  10a938:	cc                   	int3   
  10a939:	cc                   	int3   
  10a93a:	cc                   	int3   
  10a93b:	cc                   	int3   
  10a93c:	cc                   	int3   
  10a93d:	cc                   	int3   
  10a93e:	cc                   	int3   
  10a93f:	cc                   	int3   

000000000010a940 <_ZNSt3__18functionIFvhEED2Ev>:
function<_Rp(_ArgTypes...)>::~function() {}
  10a940:	55                   	push   %rbp
  10a941:	48 89 e5             	mov    %rsp,%rbp
  10a944:	48 89 f8             	mov    %rdi,%rax
        if ((void*)__f_ == &__buf_)
  10a947:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
  10a94b:	48 39 f8             	cmp    %rdi,%rax
  10a94e:	74 0c                	je     10a95c <_ZNSt3__18functionIFvhEED2Ev+0x1c>
        else if (__f_)
  10a950:	48 85 ff             	test   %rdi,%rdi
  10a953:	74 0e                	je     10a963 <_ZNSt3__18functionIFvhEED2Ev+0x23>
            __f_->destroy_deallocate();
  10a955:	48 8b 07             	mov    (%rdi),%rax
  10a958:	5d                   	pop    %rbp
  10a959:	ff 60 28             	jmp    *0x28(%rax)
            __f_->destroy();
  10a95c:	48 8b 07             	mov    (%rdi),%rax
  10a95f:	5d                   	pop    %rbp
  10a960:	ff 60 20             	jmp    *0x20(%rax)
function<_Rp(_ArgTypes...)>::~function() {}
  10a963:	5d                   	pop    %rbp
  10a964:	c3                   	ret    
  10a965:	cc                   	int3   
  10a966:	cc                   	int3   
  10a967:	cc                   	int3   
  10a968:	cc                   	int3   
  10a969:	cc                   	int3   
  10a96a:	cc                   	int3   
  10a96b:	cc                   	int3   
  10a96c:	cc                   	int3   
  10a96d:	cc                   	int3   
  10a96e:	cc                   	int3   
  10a96f:	cc                   	int3   

000000000010a970 <_ZN3usb17HIDKeyboardDriverD2Ev>:
  class HIDKeyboardDriver : public HIDBaseDriver {
  10a970:	55                   	push   %rbp
  10a971:	48 89 e5             	mov    %rsp,%rbp
  10a974:	53                   	push   %rbx
  10a975:	50                   	push   %rax
  10a976:	48 89 fb             	mov    %rdi,%rbx
  10a979:	48 c7 07 f0 17 10 00 	movq   $0x1017f0,(%rdi)
        if ((void*)__f_ == &__buf_)
  10a980:	48 8d 87 c0 08 00 00 	lea    0x8c0(%rdi),%rax
  10a987:	48 8b bf e0 08 00 00 	mov    0x8e0(%rdi),%rdi
  10a98e:	48 39 f8             	cmp    %rdi,%rax
  10a991:	74 0d                	je     10a9a0 <_ZN3usb17HIDKeyboardDriverD2Ev+0x30>
        else if (__f_)
  10a993:	48 85 ff             	test   %rdi,%rdi
  10a996:	74 0e                	je     10a9a6 <_ZN3usb17HIDKeyboardDriverD2Ev+0x36>
            __f_->destroy_deallocate();
  10a998:	48 8b 07             	mov    (%rdi),%rax
  10a99b:	ff 50 28             	call   *0x28(%rax)
  10a99e:	eb 06                	jmp    10a9a6 <_ZN3usb17HIDKeyboardDriverD2Ev+0x36>
            __f_->destroy();
  10a9a0:	48 8b 07             	mov    (%rdi),%rax
  10a9a3:	ff 50 20             	call   *0x20(%rax)
        if ((void*)__f_ == &__buf_)
  10a9a6:	48 8d 83 90 08 00 00 	lea    0x890(%rbx),%rax
  10a9ad:	48 8b bb b0 08 00 00 	mov    0x8b0(%rbx),%rdi
  10a9b4:	48 39 f8             	cmp    %rdi,%rax
  10a9b7:	74 0d                	je     10a9c6 <_ZN3usb17HIDKeyboardDriverD2Ev+0x56>
        else if (__f_)
  10a9b9:	48 85 ff             	test   %rdi,%rdi
  10a9bc:	74 0e                	je     10a9cc <_ZN3usb17HIDKeyboardDriverD2Ev+0x5c>
            __f_->destroy_deallocate();
  10a9be:	48 8b 07             	mov    (%rdi),%rax
  10a9c1:	ff 50 28             	call   *0x28(%rax)
  10a9c4:	eb 06                	jmp    10a9cc <_ZN3usb17HIDKeyboardDriverD2Ev+0x5c>
            __f_->destroy();
  10a9c6:	48 8b 07             	mov    (%rdi),%rax
  10a9c9:	ff 50 20             	call   *0x20(%rax)
        if ((void*)__f_ == &__buf_)
  10a9cc:	48 8d 83 60 08 00 00 	lea    0x860(%rbx),%rax
  10a9d3:	48 8b bb 80 08 00 00 	mov    0x880(%rbx),%rdi
  10a9da:	48 39 f8             	cmp    %rdi,%rax
  10a9dd:	74 0d                	je     10a9ec <_ZN3usb17HIDKeyboardDriverD2Ev+0x7c>
        else if (__f_)
  10a9df:	48 85 ff             	test   %rdi,%rdi
  10a9e2:	74 0e                	je     10a9f2 <_ZN3usb17HIDKeyboardDriverD2Ev+0x82>
            __f_->destroy_deallocate();
  10a9e4:	48 8b 07             	mov    (%rdi),%rax
  10a9e7:	ff 50 28             	call   *0x28(%rax)
  10a9ea:	eb 06                	jmp    10a9f2 <_ZN3usb17HIDKeyboardDriverD2Ev+0x82>
            __f_->destroy();
  10a9ec:	48 8b 07             	mov    (%rdi),%rax
  10a9ef:	ff 50 20             	call   *0x20(%rax)
        if ((void*)__f_ == &__buf_)
  10a9f2:	48 8d 83 30 08 00 00 	lea    0x830(%rbx),%rax
  10a9f9:	48 8b bb 50 08 00 00 	mov    0x850(%rbx),%rdi
  10aa00:	48 39 f8             	cmp    %rdi,%rax
  10aa03:	74 0d                	je     10aa12 <_ZN3usb17HIDKeyboardDriverD2Ev+0xa2>
        else if (__f_)
  10aa05:	48 85 ff             	test   %rdi,%rdi
  10aa08:	74 0e                	je     10aa18 <_ZN3usb17HIDKeyboardDriverD2Ev+0xa8>
            __f_->destroy_deallocate();
  10aa0a:	48 8b 07             	mov    (%rdi),%rax
  10aa0d:	ff 50 28             	call   *0x28(%rax)
  10aa10:	eb 06                	jmp    10aa18 <_ZN3usb17HIDKeyboardDriverD2Ev+0xa8>
            __f_->destroy();
  10aa12:	48 8b 07             	mov    (%rdi),%rax
  10aa15:	ff 50 20             	call   *0x20(%rax)
  10aa18:	48 89 df             	mov    %rbx,%rdi
  10aa1b:	48 83 c4 08          	add    $0x8,%rsp
  10aa1f:	5b                   	pop    %rbx
  10aa20:	5d                   	pop    %rbp
  10aa21:	e9 4a f9 ff ff       	jmp    10a370 <_ZN3usb11ClassDriverD1Ev>
  10aa26:	cc                   	int3   
  10aa27:	cc                   	int3   
  10aa28:	cc                   	int3   
  10aa29:	cc                   	int3   
  10aa2a:	cc                   	int3   
  10aa2b:	cc                   	int3   
  10aa2c:	cc                   	int3   
  10aa2d:	cc                   	int3   
  10aa2e:	cc                   	int3   
  10aa2f:	cc                   	int3   

000000000010aa30 <_ZN3usb17HIDKeyboardDriverD0Ev>:
  10aa30:	55                   	push   %rbp
  10aa31:	48 89 e5             	mov    %rsp,%rbp
  10aa34:	53                   	push   %rbx
  10aa35:	50                   	push   %rax
  10aa36:	48 89 fb             	mov    %rdi,%rbx
  10aa39:	48 c7 07 f0 17 10 00 	movq   $0x1017f0,(%rdi)
        if ((void*)__f_ == &__buf_)
  10aa40:	48 8d 87 c0 08 00 00 	lea    0x8c0(%rdi),%rax
  10aa47:	48 8b bf e0 08 00 00 	mov    0x8e0(%rdi),%rdi
  10aa4e:	48 39 f8             	cmp    %rdi,%rax
  10aa51:	74 0d                	je     10aa60 <_ZN3usb17HIDKeyboardDriverD0Ev+0x30>
        else if (__f_)
  10aa53:	48 85 ff             	test   %rdi,%rdi
  10aa56:	74 0e                	je     10aa66 <_ZN3usb17HIDKeyboardDriverD0Ev+0x36>
            __f_->destroy_deallocate();
  10aa58:	48 8b 07             	mov    (%rdi),%rax
  10aa5b:	ff 50 28             	call   *0x28(%rax)
  10aa5e:	eb 06                	jmp    10aa66 <_ZN3usb17HIDKeyboardDriverD0Ev+0x36>
            __f_->destroy();
  10aa60:	48 8b 07             	mov    (%rdi),%rax
  10aa63:	ff 50 20             	call   *0x20(%rax)
        if ((void*)__f_ == &__buf_)
  10aa66:	48 8d 83 90 08 00 00 	lea    0x890(%rbx),%rax
  10aa6d:	48 8b bb b0 08 00 00 	mov    0x8b0(%rbx),%rdi
  10aa74:	48 39 f8             	cmp    %rdi,%rax
  10aa77:	74 0d                	je     10aa86 <_ZN3usb17HIDKeyboardDriverD0Ev+0x56>
        else if (__f_)
  10aa79:	48 85 ff             	test   %rdi,%rdi
  10aa7c:	74 0e                	je     10aa8c <_ZN3usb17HIDKeyboardDriverD0Ev+0x5c>
            __f_->destroy_deallocate();
  10aa7e:	48 8b 07             	mov    (%rdi),%rax
  10aa81:	ff 50 28             	call   *0x28(%rax)
  10aa84:	eb 06                	jmp    10aa8c <_ZN3usb17HIDKeyboardDriverD0Ev+0x5c>
            __f_->destroy();
  10aa86:	48 8b 07             	mov    (%rdi),%rax
  10aa89:	ff 50 20             	call   *0x20(%rax)
        if ((void*)__f_ == &__buf_)
  10aa8c:	48 8d 83 60 08 00 00 	lea    0x860(%rbx),%rax
  10aa93:	48 8b bb 80 08 00 00 	mov    0x880(%rbx),%rdi
  10aa9a:	48 39 f8             	cmp    %rdi,%rax
  10aa9d:	74 0d                	je     10aaac <_ZN3usb17HIDKeyboardDriverD0Ev+0x7c>
        else if (__f_)
  10aa9f:	48 85 ff             	test   %rdi,%rdi
  10aaa2:	74 0e                	je     10aab2 <_ZN3usb17HIDKeyboardDriverD0Ev+0x82>
            __f_->destroy_deallocate();
  10aaa4:	48 8b 07             	mov    (%rdi),%rax
  10aaa7:	ff 50 28             	call   *0x28(%rax)
  10aaaa:	eb 06                	jmp    10aab2 <_ZN3usb17HIDKeyboardDriverD0Ev+0x82>
            __f_->destroy();
  10aaac:	48 8b 07             	mov    (%rdi),%rax
  10aaaf:	ff 50 20             	call   *0x20(%rax)
        if ((void*)__f_ == &__buf_)
  10aab2:	48 8d 83 30 08 00 00 	lea    0x830(%rbx),%rax
  10aab9:	48 8b bb 50 08 00 00 	mov    0x850(%rbx),%rdi
  10aac0:	48 39 f8             	cmp    %rdi,%rax
  10aac3:	74 0d                	je     10aad2 <_ZN3usb17HIDKeyboardDriverD0Ev+0xa2>
        else if (__f_)
  10aac5:	48 85 ff             	test   %rdi,%rdi
  10aac8:	74 0e                	je     10aad8 <_ZN3usb17HIDKeyboardDriverD0Ev+0xa8>
            __f_->destroy_deallocate();
  10aaca:	48 8b 07             	mov    (%rdi),%rax
  10aacd:	ff 50 28             	call   *0x28(%rax)
  10aad0:	eb 06                	jmp    10aad8 <_ZN3usb17HIDKeyboardDriverD0Ev+0xa8>
            __f_->destroy();
  10aad2:	48 8b 07             	mov    (%rdi),%rax
  10aad5:	ff 50 20             	call   *0x20(%rax)
  10aad8:	48 89 df             	mov    %rbx,%rdi
  10aadb:	e8 90 f8 ff ff       	call   10a370 <_ZN3usb11ClassDriverD1Ev>
    FreeMem(ptr);
  10aae0:	48 89 df             	mov    %rbx,%rdi
  10aae3:	48 83 c4 08          	add    $0x8,%rsp
  10aae7:	5b                   	pop    %rbx
  10aae8:	5d                   	pop    %rbp
  10aae9:	e9 d2 bb ff ff       	jmp    1066c0 <_ZN3usb7FreeMemEPv>
  10aaee:	cc                   	int3   
  10aaef:	cc                   	int3   

000000000010aaf0 <_ZNSt3__110__function12__value_funcIFvhEE4swapERS3_>:
    {
  10aaf0:	55                   	push   %rbp
  10aaf1:	48 89 e5             	mov    %rsp,%rbp
  10aaf4:	41 57                	push   %r15
  10aaf6:	41 56                	push   %r14
  10aaf8:	53                   	push   %rbx
  10aaf9:	48 83 ec 28          	sub    $0x28,%rsp
        if (&__f == this)
  10aafd:	48 39 fe             	cmp    %rdi,%rsi
  10ab00:	0f 84 c9 00 00 00    	je     10abcf <_ZNSt3__110__function12__value_funcIFvhEE4swapERS3_+0xdf>
  10ab06:	49 89 f6             	mov    %rsi,%r14
  10ab09:	48 89 fb             	mov    %rdi,%rbx
        if ((void*)__f_ == &__buf_ && (void*)__f.__f_ == &__f.__buf_)
  10ab0c:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
  10ab10:	48 39 df             	cmp    %rbx,%rdi
  10ab13:	74 16                	je     10ab2b <_ZNSt3__110__function12__value_funcIFvhEE4swapERS3_+0x3b>
        else if ((void*)__f.__f_ == &__f.__buf_)
  10ab15:	49 8b 46 20          	mov    0x20(%r14),%rax
  10ab19:	49 39 c6             	cmp    %rax,%r14
  10ab1c:	74 30                	je     10ab4e <_ZNSt3__110__function12__value_funcIFvhEE4swapERS3_+0x5e>
    __x = _VSTD::move(__y);
  10ab1e:	48 89 43 20          	mov    %rax,0x20(%rbx)
    __y = _VSTD::move(__t);
  10ab22:	49 89 7e 20          	mov    %rdi,0x20(%r14)
  10ab26:	e9 a4 00 00 00       	jmp    10abcf <_ZNSt3__110__function12__value_funcIFvhEE4swapERS3_+0xdf>
        if ((void*)__f_ == &__buf_ && (void*)__f.__f_ == &__f.__buf_)
  10ab2b:	4d 39 76 20          	cmp    %r14,0x20(%r14)
  10ab2f:	74 41                	je     10ab72 <_ZNSt3__110__function12__value_funcIFvhEE4swapERS3_+0x82>
            __f_->__clone(__as_base(&__f.__buf_));
  10ab31:	48 8b 07             	mov    (%rdi),%rax
  10ab34:	4c 89 f6             	mov    %r14,%rsi
  10ab37:	ff 50 18             	call   *0x18(%rax)
            __f_->destroy();
  10ab3a:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
  10ab3e:	48 8b 07             	mov    (%rdi),%rax
  10ab41:	ff 50 20             	call   *0x20(%rax)
            __f_ = __f.__f_;
  10ab44:	49 8b 46 20          	mov    0x20(%r14),%rax
  10ab48:	48 89 43 20          	mov    %rax,0x20(%rbx)
  10ab4c:	eb 7d                	jmp    10abcb <_ZNSt3__110__function12__value_funcIFvhEE4swapERS3_+0xdb>
            __f.__f_->__clone(__as_base(&__buf_));
  10ab4e:	48 8b 08             	mov    (%rax),%rcx
  10ab51:	48 89 c7             	mov    %rax,%rdi
  10ab54:	48 89 de             	mov    %rbx,%rsi
  10ab57:	ff 51 18             	call   *0x18(%rcx)
            __f.__f_->destroy();
  10ab5a:	49 8b 7e 20          	mov    0x20(%r14),%rdi
  10ab5e:	48 8b 07             	mov    (%rdi),%rax
  10ab61:	ff 50 20             	call   *0x20(%rax)
            __f.__f_ = __f_;
  10ab64:	48 8b 43 20          	mov    0x20(%rbx),%rax
  10ab68:	49 89 46 20          	mov    %rax,0x20(%r14)
            __f_ = __as_base(&__buf_);
  10ab6c:	48 89 5b 20          	mov    %rbx,0x20(%rbx)
  10ab70:	eb 5d                	jmp    10abcf <_ZNSt3__110__function12__value_funcIFvhEE4swapERS3_+0xdf>
            __f_->__clone(__t);
  10ab72:	48 8b 07             	mov    (%rdi),%rax
  10ab75:	4c 8d 7d c0          	lea    -0x40(%rbp),%r15
  10ab79:	4c 89 fe             	mov    %r15,%rsi
  10ab7c:	ff 50 18             	call   *0x18(%rax)
            __f_->destroy();
  10ab7f:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
  10ab83:	48 8b 07             	mov    (%rdi),%rax
  10ab86:	ff 50 20             	call   *0x20(%rax)
            __f_ = 0;
  10ab89:	48 c7 43 20 00 00 00 	movq   $0x0,0x20(%rbx)
  10ab90:	00 
            __f.__f_->__clone(__as_base(&__buf_));
  10ab91:	49 8b 7e 20          	mov    0x20(%r14),%rdi
  10ab95:	48 8b 07             	mov    (%rdi),%rax
  10ab98:	48 89 de             	mov    %rbx,%rsi
  10ab9b:	ff 50 18             	call   *0x18(%rax)
            __f.__f_->destroy();
  10ab9e:	49 8b 7e 20          	mov    0x20(%r14),%rdi
  10aba2:	48 8b 07             	mov    (%rdi),%rax
  10aba5:	ff 50 20             	call   *0x20(%rax)
            __f.__f_ = 0;
  10aba8:	49 c7 46 20 00 00 00 	movq   $0x0,0x20(%r14)
  10abaf:	00 
            __f_ = __as_base(&__buf_);
  10abb0:	48 89 5b 20          	mov    %rbx,0x20(%rbx)
            __t->__clone(__as_base(&__f.__buf_));
  10abb4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  10abb8:	4c 89 ff             	mov    %r15,%rdi
  10abbb:	4c 89 f6             	mov    %r14,%rsi
  10abbe:	ff 50 18             	call   *0x18(%rax)
            __t->destroy();
  10abc1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  10abc5:	4c 89 ff             	mov    %r15,%rdi
  10abc8:	ff 50 20             	call   *0x20(%rax)
  10abcb:	4d 89 76 20          	mov    %r14,0x20(%r14)
    }
  10abcf:	48 83 c4 28          	add    $0x28,%rsp
  10abd3:	5b                   	pop    %rbx
  10abd4:	41 5e                	pop    %r14
  10abd6:	41 5f                	pop    %r15
  10abd8:	5d                   	pop    %rbp
  10abd9:	c3                   	ret    
  10abda:	cc                   	int3   
  10abdb:	cc                   	int3   
  10abdc:	cc                   	int3   
  10abdd:	cc                   	int3   
  10abde:	cc                   	int3   
  10abdf:	cc                   	int3   

000000000010abe0 <_ZNSt3__125__throw_bad_function_callEv>:
{
  10abe0:	55                   	push   %rbp
  10abe1:	48 89 e5             	mov    %rsp,%rbp
    _VSTD::abort();
  10abe4:	e8 47 04 00 00       	call   10b030 <abort>
  10abe9:	cc                   	int3   
  10abea:	cc                   	int3   
  10abeb:	cc                   	int3   
  10abec:	cc                   	int3   
  10abed:	cc                   	int3   
  10abee:	cc                   	int3   
  10abef:	cc                   	int3   

000000000010abf0 <_ZN3usb14HIDMouseDriverC1EPNS_6DeviceEi>:
#include "usb/device.hpp"
#include "logger.hpp"

namespace usb {
  HIDMouseDriver::HIDMouseDriver(Device* dev, int interface_index)
      : HIDBaseDriver{dev, interface_index, 3} {
  10abf0:	55                   	push   %rbp
  10abf1:	48 89 e5             	mov    %rsp,%rbp
  10abf4:	53                   	push   %rbx
  10abf5:	50                   	push   %rax
  10abf6:	48 89 fb             	mov    %rdi,%rbx
  10abf9:	b9 03 00 00 00       	mov    $0x3,%ecx
  10abfe:	e8 8d f7 ff ff       	call   10a390 <_ZN3usb13HIDBaseDriverC2EPNS_6DeviceEii>
  10ac03:	48 c7 03 40 18 10 00 	movq   $0x101840,(%rbx)
    __value_func() _NOEXCEPT : __f_(0) {}
  10ac0a:	48 c7 83 50 08 00 00 	movq   $0x0,0x850(%rbx)
  10ac11:	00 00 00 00 
  10ac15:	48 c7 83 80 08 00 00 	movq   $0x0,0x880(%rbx)
  10ac1c:	00 00 00 00 
  10ac20:	48 c7 83 b0 08 00 00 	movq   $0x0,0x8b0(%rbx)
  10ac27:	00 00 00 00 
  10ac2b:	48 c7 83 e0 08 00 00 	movq   $0x0,0x8e0(%rbx)
  10ac32:	00 00 00 00 
    void SubscribeMouseMove(std::function<ObserverType> observer);
    static std::function<ObserverType> default_observer;

   private:
    std::array<std::function<ObserverType>, 4> observers_;
    int num_observers_ = 0;
  10ac36:	c7 83 f0 08 00 00 00 	movl   $0x0,0x8f0(%rbx)
  10ac3d:	00 00 00 
  }
  10ac40:	48 83 c4 08          	add    $0x8,%rsp
  10ac44:	5b                   	pop    %rbx
  10ac45:	5d                   	pop    %rbp
  10ac46:	c3                   	ret    
  10ac47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10ac4e:	00 00 

000000000010ac50 <_ZN3usb14HIDMouseDriver14OnDataReceivedEv>:

  Error HIDMouseDriver::OnDataReceived() {
  10ac50:	55                   	push   %rbp
  10ac51:	48 89 e5             	mov    %rsp,%rbp
  10ac54:	41 57                	push   %r15
  10ac56:	41 56                	push   %r14
  10ac58:	41 55                	push   %r13
  10ac5a:	41 54                	push   %r12
  10ac5c:	53                   	push   %rbx
  10ac5d:	50                   	push   %rax
  10ac5e:	48 89 fb             	mov    %rdi,%rbx
    int8_t displacement_x = Buffer()[1];
  10ac61:	44 8a 67 25          	mov    0x25(%rdi),%r12b
    int8_t displacement_y = Buffer()[2];
  10ac65:	44 8a 6f 26          	mov    0x26(%rdi),%r13b
  }

  std::function<HIDMouseDriver::ObserverType> HIDMouseDriver::default_observer;

  void HIDMouseDriver::NotifyMouseMove(int8_t displacement_x, int8_t displacement_y) {
    for (int i = 0; i < num_observers_; ++i) {
  10ac69:	83 bf f0 08 00 00 00 	cmpl   $0x0,0x8f0(%rdi)
  10ac70:	7e 40                	jle    10acb2 <_ZN3usb14HIDMouseDriver14OnDataReceivedEv+0x62>
  10ac72:	4c 8d b3 50 08 00 00 	lea    0x850(%rbx),%r14
  10ac79:	45 31 ff             	xor    %r15d,%r15d
  10ac7c:	0f 1f 40 00          	nopl   0x0(%rax)
  10ac80:	44 88 65 d6          	mov    %r12b,-0x2a(%rbp)
  10ac84:	44 88 6d d7          	mov    %r13b,-0x29(%rbp)
        if (__f_ == 0)
  10ac88:	49 8b 3e             	mov    (%r14),%rdi
  10ac8b:	48 85 ff             	test   %rdi,%rdi
  10ac8e:	74 5d                	je     10aced <_ZN3usb14HIDMouseDriver14OnDataReceivedEv+0x9d>
        return (*__f_)(_VSTD::forward<_ArgTypes>(__args)...);
  10ac90:	48 8b 07             	mov    (%rdi),%rax
  10ac93:	48 8d 75 d6          	lea    -0x2a(%rbp),%rsi
  10ac97:	48 8d 55 d7          	lea    -0x29(%rbp),%rdx
  10ac9b:	ff 50 30             	call   *0x30(%rax)
  10ac9e:	49 83 c7 01          	add    $0x1,%r15
  10aca2:	48 63 83 f0 08 00 00 	movslq 0x8f0(%rbx),%rax
  10aca9:	49 83 c6 30          	add    $0x30,%r14
  10acad:	49 39 c7             	cmp    %rax,%r15
  10acb0:	7c ce                	jl     10ac80 <_ZN3usb14HIDMouseDriver14OnDataReceivedEv+0x30>
  10acb2:	41 0f be cc          	movsbl %r12b,%ecx
  10acb6:	45 0f be c5          	movsbl %r13b,%r8d
    Log(kDebug, "%02x,(%3d,%3d)\n", Buffer()[0], displacement_x, displacement_y);
  10acba:	0f b6 53 24          	movzbl 0x24(%rbx),%edx
  10acbe:	be 19 02 10 00       	mov    $0x100219,%esi
  10acc3:	bf 07 00 00 00       	mov    $0x7,%edi
  10acc8:	31 c0                	xor    %eax,%eax
  10acca:	e8 51 b6 ff ff       	call   106320 <_Z3Log8LogLevelPKcz>
  10accf:	48 b8 00 00 00 00 12 	movabs $0x1200000000,%rax
  10acd6:	00 00 00 
  }
  10acd9:	ba 62 08 10 00       	mov    $0x100862,%edx
  10acde:	48 83 c4 08          	add    $0x8,%rsp
  10ace2:	5b                   	pop    %rbx
  10ace3:	41 5c                	pop    %r12
  10ace5:	41 5d                	pop    %r13
  10ace7:	41 5e                	pop    %r14
  10ace9:	41 5f                	pop    %r15
  10aceb:	5d                   	pop    %rbp
  10acec:	c3                   	ret    
            __throw_bad_function_call();
  10aced:	e8 ee fe ff ff       	call   10abe0 <_ZNSt3__125__throw_bad_function_callEv>
  10acf2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10acf9:	00 00 00 
  10acfc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000010ad00 <_ZN3usb14HIDMouseDriver15NotifyMouseMoveEaa>:
  void HIDMouseDriver::NotifyMouseMove(int8_t displacement_x, int8_t displacement_y) {
  10ad00:	55                   	push   %rbp
  10ad01:	48 89 e5             	mov    %rsp,%rbp
  10ad04:	41 57                	push   %r15
  10ad06:	41 56                	push   %r14
  10ad08:	41 55                	push   %r13
  10ad0a:	41 54                	push   %r12
  10ad0c:	53                   	push   %rbx
  10ad0d:	50                   	push   %rax
    for (int i = 0; i < num_observers_; ++i) {
  10ad0e:	83 bf f0 08 00 00 00 	cmpl   $0x0,0x8f0(%rdi)
  10ad15:	7e 4c                	jle    10ad63 <_ZN3usb14HIDMouseDriver15NotifyMouseMoveEaa+0x63>
  10ad17:	41 89 d6             	mov    %edx,%r14d
  10ad1a:	41 89 f7             	mov    %esi,%r15d
  10ad1d:	48 89 fb             	mov    %rdi,%rbx
  10ad20:	4c 8d a7 50 08 00 00 	lea    0x850(%rdi),%r12
  10ad27:	45 31 ed             	xor    %r13d,%r13d
  10ad2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10ad30:	44 88 7d d6          	mov    %r15b,-0x2a(%rbp)
  10ad34:	44 88 75 d7          	mov    %r14b,-0x29(%rbp)
        if (__f_ == 0)
  10ad38:	49 8b 3c 24          	mov    (%r12),%rdi
  10ad3c:	48 85 ff             	test   %rdi,%rdi
  10ad3f:	74 31                	je     10ad72 <_ZN3usb14HIDMouseDriver15NotifyMouseMoveEaa+0x72>
        return (*__f_)(_VSTD::forward<_ArgTypes>(__args)...);
  10ad41:	48 8b 07             	mov    (%rdi),%rax
  10ad44:	48 8d 75 d6          	lea    -0x2a(%rbp),%rsi
  10ad48:	48 8d 55 d7          	lea    -0x29(%rbp),%rdx
  10ad4c:	ff 50 30             	call   *0x30(%rax)
  10ad4f:	49 83 c5 01          	add    $0x1,%r13
  10ad53:	48 63 83 f0 08 00 00 	movslq 0x8f0(%rbx),%rax
  10ad5a:	49 83 c4 30          	add    $0x30,%r12
  10ad5e:	49 39 c5             	cmp    %rax,%r13
  10ad61:	7c cd                	jl     10ad30 <_ZN3usb14HIDMouseDriver15NotifyMouseMoveEaa+0x30>
      observers_[i](displacement_x, displacement_y);
    }
  }
  10ad63:	48 83 c4 08          	add    $0x8,%rsp
  10ad67:	5b                   	pop    %rbx
  10ad68:	41 5c                	pop    %r12
  10ad6a:	41 5d                	pop    %r13
  10ad6c:	41 5e                	pop    %r14
  10ad6e:	41 5f                	pop    %r15
  10ad70:	5d                   	pop    %rbp
  10ad71:	c3                   	ret    
            __throw_bad_function_call();
  10ad72:	e8 69 fe ff ff       	call   10abe0 <_ZNSt3__125__throw_bad_function_callEv>
  10ad77:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10ad7e:	00 00 

000000000010ad80 <_ZN3usb14HIDMouseDrivernwEm>:
  void* HIDMouseDriver::operator new(size_t size) {
  10ad80:	55                   	push   %rbp
  10ad81:	48 89 e5             	mov    %rsp,%rbp
    return AllocMem(sizeof(HIDMouseDriver), 0, 0);
  10ad84:	bf 00 09 00 00       	mov    $0x900,%edi
  10ad89:	31 f6                	xor    %esi,%esi
  10ad8b:	31 d2                	xor    %edx,%edx
  10ad8d:	5d                   	pop    %rbp
  10ad8e:	e9 ad b8 ff ff       	jmp    106640 <_ZN3usb8AllocMemEmjj>
  10ad93:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10ad9a:	00 00 00 
  10ad9d:	0f 1f 00             	nopl   (%rax)

000000000010ada0 <_ZN3usb14HIDMouseDriverdlEPv>:
  void HIDMouseDriver::operator delete(void* ptr) noexcept {
  10ada0:	55                   	push   %rbp
  10ada1:	48 89 e5             	mov    %rsp,%rbp
    FreeMem(ptr);
  10ada4:	5d                   	pop    %rbp
  10ada5:	e9 16 b9 ff ff       	jmp    1066c0 <_ZN3usb7FreeMemEPv>
  10adaa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000010adb0 <_ZN3usb14HIDMouseDriver18SubscribeMouseMoveENSt3__18functionIFvaaEEE>:
      std::function<void (int8_t displacement_x, int8_t displacement_y)> observer) {
  10adb0:	55                   	push   %rbp
  10adb1:	48 89 e5             	mov    %rsp,%rbp
  10adb4:	41 56                	push   %r14
  10adb6:	53                   	push   %rbx
  10adb7:	48 83 ec 30          	sub    $0x30,%rsp
  10adbb:	48 89 fb             	mov    %rdi,%rbx
    observers_[num_observers_++] = observer;
  10adbe:	4c 63 b7 f0 08 00 00 	movslq 0x8f0(%rdi),%r14
  10adc5:	41 8d 46 01          	lea    0x1(%r14),%eax
  10adc9:	89 87 f0 08 00 00    	mov    %eax,0x8f0(%rdi)
        if (__f.__f_ == 0)
  10adcf:	48 8b 7e 20          	mov    0x20(%rsi),%rdi
  10add3:	48 85 ff             	test   %rdi,%rdi
  10add6:	74 11                	je     10ade9 <_ZN3usb14HIDMouseDriver18SubscribeMouseMoveENSt3__18functionIFvaaEEE+0x39>
        else if ((void*)__f.__f_ == &__f.__buf_)
  10add8:	48 39 fe             	cmp    %rdi,%rsi
  10addb:	74 16                	je     10adf3 <_ZN3usb14HIDMouseDriver18SubscribeMouseMoveENSt3__18functionIFvaaEEE+0x43>
            __f_ = __f.__f_->__clone();
  10addd:	48 8b 07             	mov    (%rdi),%rax
  10ade0:	ff 50 10             	call   *0x10(%rax)
  10ade3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  10ade7:	eb 18                	jmp    10ae01 <_ZN3usb14HIDMouseDriver18SubscribeMouseMoveENSt3__18functionIFvaaEEE+0x51>
            __f_ = 0;
  10ade9:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  10adf0:	00 
  10adf1:	eb 0e                	jmp    10ae01 <_ZN3usb14HIDMouseDriver18SubscribeMouseMoveENSt3__18functionIFvaaEEE+0x51>
  10adf3:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
            __f_ = __as_base(&__buf_);
  10adf7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
            __f.__f_->__clone(__f_);
  10adfb:	48 8b 07             	mov    (%rdi),%rax
  10adfe:	ff 50 18             	call   *0x18(%rax)
    __f_.swap(__f.__f_);
  10ae01:	4b 8d 04 76          	lea    (%r14,%r14,2),%rax
  10ae05:	48 c1 e0 04          	shl    $0x4,%rax
  10ae09:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  10ae0d:	48 81 c6 30 08 00 00 	add    $0x830,%rsi
  10ae14:	48 8d 5d c0          	lea    -0x40(%rbp),%rbx
  10ae18:	48 89 df             	mov    %rbx,%rdi
  10ae1b:	e8 20 9c ff ff       	call   104a40 <_ZNSt3__110__function12__value_funcIFvaaEE4swapERS3_>
        if ((void*)__f_ == &__buf_)
  10ae20:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  10ae24:	48 39 fb             	cmp    %rdi,%rbx
  10ae27:	74 0d                	je     10ae36 <_ZN3usb14HIDMouseDriver18SubscribeMouseMoveENSt3__18functionIFvaaEEE+0x86>
        else if (__f_)
  10ae29:	48 85 ff             	test   %rdi,%rdi
  10ae2c:	74 0e                	je     10ae3c <_ZN3usb14HIDMouseDriver18SubscribeMouseMoveENSt3__18functionIFvaaEEE+0x8c>
            __f_->destroy_deallocate();
  10ae2e:	48 8b 07             	mov    (%rdi),%rax
  10ae31:	ff 50 28             	call   *0x28(%rax)
  10ae34:	eb 06                	jmp    10ae3c <_ZN3usb14HIDMouseDriver18SubscribeMouseMoveENSt3__18functionIFvaaEEE+0x8c>
            __f_->destroy();
  10ae36:	48 8b 07             	mov    (%rdi),%rax
  10ae39:	ff 50 20             	call   *0x20(%rax)
  }
  10ae3c:	48 83 c4 30          	add    $0x30,%rsp
  10ae40:	5b                   	pop    %rbx
  10ae41:	41 5e                	pop    %r14
  10ae43:	5d                   	pop    %rbp
  10ae44:	c3                   	ret    
  10ae45:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10ae4c:	00 00 00 
  10ae4f:	90                   	nop

000000000010ae50 <_GLOBAL__sub_I_mouse.cpp>:
  10ae50:	55                   	push   %rbp
  10ae51:	48 89 e5             	mov    %rsp,%rbp
    __value_func() _NOEXCEPT : __f_(0) {}
  10ae54:	48 c7 05 01 06 17 00 	movq   $0x0,0x170601(%rip)        # 27b460 <_ZN3usb14HIDMouseDriver16default_observerE+0x20>
  10ae5b:	00 00 00 00 
  std::function<HIDMouseDriver::ObserverType> HIDMouseDriver::default_observer;
  10ae5f:	bf 80 ae 10 00       	mov    $0x10ae80,%edi
  10ae64:	be 40 b4 27 00       	mov    $0x27b440,%esi
  10ae69:	ba 00 00 10 00       	mov    $0x100000,%edx
  10ae6e:	5d                   	pop    %rbp
  10ae6f:	e9 dc 01 00 00       	jmp    10b050 <__cxa_atexit>
  10ae74:	cc                   	int3   
  10ae75:	cc                   	int3   
  10ae76:	cc                   	int3   
  10ae77:	cc                   	int3   
  10ae78:	cc                   	int3   
  10ae79:	cc                   	int3   
  10ae7a:	cc                   	int3   
  10ae7b:	cc                   	int3   
  10ae7c:	cc                   	int3   
  10ae7d:	cc                   	int3   
  10ae7e:	cc                   	int3   
  10ae7f:	cc                   	int3   

000000000010ae80 <_ZNSt3__18functionIFvaaEED2Ev>:
function<_Rp(_ArgTypes...)>::~function() {}
  10ae80:	55                   	push   %rbp
  10ae81:	48 89 e5             	mov    %rsp,%rbp
  10ae84:	48 89 f8             	mov    %rdi,%rax
        if ((void*)__f_ == &__buf_)
  10ae87:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
  10ae8b:	48 39 f8             	cmp    %rdi,%rax
  10ae8e:	74 0c                	je     10ae9c <_ZNSt3__18functionIFvaaEED2Ev+0x1c>
        else if (__f_)
  10ae90:	48 85 ff             	test   %rdi,%rdi
  10ae93:	74 0e                	je     10aea3 <_ZNSt3__18functionIFvaaEED2Ev+0x23>
            __f_->destroy_deallocate();
  10ae95:	48 8b 07             	mov    (%rdi),%rax
  10ae98:	5d                   	pop    %rbp
  10ae99:	ff 60 28             	jmp    *0x28(%rax)
            __f_->destroy();
  10ae9c:	48 8b 07             	mov    (%rdi),%rax
  10ae9f:	5d                   	pop    %rbp
  10aea0:	ff 60 20             	jmp    *0x20(%rax)
function<_Rp(_ArgTypes...)>::~function() {}
  10aea3:	5d                   	pop    %rbp
  10aea4:	c3                   	ret    
  10aea5:	cc                   	int3   
  10aea6:	cc                   	int3   
  10aea7:	cc                   	int3   
  10aea8:	cc                   	int3   
  10aea9:	cc                   	int3   
  10aeaa:	cc                   	int3   
  10aeab:	cc                   	int3   
  10aeac:	cc                   	int3   
  10aead:	cc                   	int3   
  10aeae:	cc                   	int3   
  10aeaf:	cc                   	int3   

000000000010aeb0 <_ZN3usb14HIDMouseDriverD2Ev>:
  class HIDMouseDriver : public HIDBaseDriver {
  10aeb0:	55                   	push   %rbp
  10aeb1:	48 89 e5             	mov    %rsp,%rbp
  10aeb4:	53                   	push   %rbx
  10aeb5:	50                   	push   %rax
  10aeb6:	48 89 fb             	mov    %rdi,%rbx
  10aeb9:	48 c7 07 40 18 10 00 	movq   $0x101840,(%rdi)
        if ((void*)__f_ == &__buf_)
  10aec0:	48 8d 87 c0 08 00 00 	lea    0x8c0(%rdi),%rax
  10aec7:	48 8b bf e0 08 00 00 	mov    0x8e0(%rdi),%rdi
  10aece:	48 39 f8             	cmp    %rdi,%rax
  10aed1:	74 0d                	je     10aee0 <_ZN3usb14HIDMouseDriverD2Ev+0x30>
        else if (__f_)
  10aed3:	48 85 ff             	test   %rdi,%rdi
  10aed6:	74 0e                	je     10aee6 <_ZN3usb14HIDMouseDriverD2Ev+0x36>
            __f_->destroy_deallocate();
  10aed8:	48 8b 07             	mov    (%rdi),%rax
  10aedb:	ff 50 28             	call   *0x28(%rax)
  10aede:	eb 06                	jmp    10aee6 <_ZN3usb14HIDMouseDriverD2Ev+0x36>
            __f_->destroy();
  10aee0:	48 8b 07             	mov    (%rdi),%rax
  10aee3:	ff 50 20             	call   *0x20(%rax)
        if ((void*)__f_ == &__buf_)
  10aee6:	48 8d 83 90 08 00 00 	lea    0x890(%rbx),%rax
  10aeed:	48 8b bb b0 08 00 00 	mov    0x8b0(%rbx),%rdi
  10aef4:	48 39 f8             	cmp    %rdi,%rax
  10aef7:	74 0d                	je     10af06 <_ZN3usb14HIDMouseDriverD2Ev+0x56>
        else if (__f_)
  10aef9:	48 85 ff             	test   %rdi,%rdi
  10aefc:	74 0e                	je     10af0c <_ZN3usb14HIDMouseDriverD2Ev+0x5c>
            __f_->destroy_deallocate();
  10aefe:	48 8b 07             	mov    (%rdi),%rax
  10af01:	ff 50 28             	call   *0x28(%rax)
  10af04:	eb 06                	jmp    10af0c <_ZN3usb14HIDMouseDriverD2Ev+0x5c>
            __f_->destroy();
  10af06:	48 8b 07             	mov    (%rdi),%rax
  10af09:	ff 50 20             	call   *0x20(%rax)
        if ((void*)__f_ == &__buf_)
  10af0c:	48 8d 83 60 08 00 00 	lea    0x860(%rbx),%rax
  10af13:	48 8b bb 80 08 00 00 	mov    0x880(%rbx),%rdi
  10af1a:	48 39 f8             	cmp    %rdi,%rax
  10af1d:	74 0d                	je     10af2c <_ZN3usb14HIDMouseDriverD2Ev+0x7c>
        else if (__f_)
  10af1f:	48 85 ff             	test   %rdi,%rdi
  10af22:	74 0e                	je     10af32 <_ZN3usb14HIDMouseDriverD2Ev+0x82>
            __f_->destroy_deallocate();
  10af24:	48 8b 07             	mov    (%rdi),%rax
  10af27:	ff 50 28             	call   *0x28(%rax)
  10af2a:	eb 06                	jmp    10af32 <_ZN3usb14HIDMouseDriverD2Ev+0x82>
            __f_->destroy();
  10af2c:	48 8b 07             	mov    (%rdi),%rax
  10af2f:	ff 50 20             	call   *0x20(%rax)
        if ((void*)__f_ == &__buf_)
  10af32:	48 8d 83 30 08 00 00 	lea    0x830(%rbx),%rax
  10af39:	48 8b bb 50 08 00 00 	mov    0x850(%rbx),%rdi
  10af40:	48 39 f8             	cmp    %rdi,%rax
  10af43:	74 0d                	je     10af52 <_ZN3usb14HIDMouseDriverD2Ev+0xa2>
        else if (__f_)
  10af45:	48 85 ff             	test   %rdi,%rdi
  10af48:	74 0e                	je     10af58 <_ZN3usb14HIDMouseDriverD2Ev+0xa8>
            __f_->destroy_deallocate();
  10af4a:	48 8b 07             	mov    (%rdi),%rax
  10af4d:	ff 50 28             	call   *0x28(%rax)
  10af50:	eb 06                	jmp    10af58 <_ZN3usb14HIDMouseDriverD2Ev+0xa8>
            __f_->destroy();
  10af52:	48 8b 07             	mov    (%rdi),%rax
  10af55:	ff 50 20             	call   *0x20(%rax)
  10af58:	48 89 df             	mov    %rbx,%rdi
  10af5b:	48 83 c4 08          	add    $0x8,%rsp
  10af5f:	5b                   	pop    %rbx
  10af60:	5d                   	pop    %rbp
  10af61:	e9 0a f4 ff ff       	jmp    10a370 <_ZN3usb11ClassDriverD1Ev>
  10af66:	cc                   	int3   
  10af67:	cc                   	int3   
  10af68:	cc                   	int3   
  10af69:	cc                   	int3   
  10af6a:	cc                   	int3   
  10af6b:	cc                   	int3   
  10af6c:	cc                   	int3   
  10af6d:	cc                   	int3   
  10af6e:	cc                   	int3   
  10af6f:	cc                   	int3   

000000000010af70 <_ZN3usb14HIDMouseDriverD0Ev>:
  10af70:	55                   	push   %rbp
  10af71:	48 89 e5             	mov    %rsp,%rbp
  10af74:	53                   	push   %rbx
  10af75:	50                   	push   %rax
  10af76:	48 89 fb             	mov    %rdi,%rbx
  10af79:	48 c7 07 40 18 10 00 	movq   $0x101840,(%rdi)
        if ((void*)__f_ == &__buf_)
  10af80:	48 8d 87 c0 08 00 00 	lea    0x8c0(%rdi),%rax
  10af87:	48 8b bf e0 08 00 00 	mov    0x8e0(%rdi),%rdi
  10af8e:	48 39 f8             	cmp    %rdi,%rax
  10af91:	74 0d                	je     10afa0 <_ZN3usb14HIDMouseDriverD0Ev+0x30>
        else if (__f_)
  10af93:	48 85 ff             	test   %rdi,%rdi
  10af96:	74 0e                	je     10afa6 <_ZN3usb14HIDMouseDriverD0Ev+0x36>
            __f_->destroy_deallocate();
  10af98:	48 8b 07             	mov    (%rdi),%rax
  10af9b:	ff 50 28             	call   *0x28(%rax)
  10af9e:	eb 06                	jmp    10afa6 <_ZN3usb14HIDMouseDriverD0Ev+0x36>
            __f_->destroy();
  10afa0:	48 8b 07             	mov    (%rdi),%rax
  10afa3:	ff 50 20             	call   *0x20(%rax)
        if ((void*)__f_ == &__buf_)
  10afa6:	48 8d 83 90 08 00 00 	lea    0x890(%rbx),%rax
  10afad:	48 8b bb b0 08 00 00 	mov    0x8b0(%rbx),%rdi
  10afb4:	48 39 f8             	cmp    %rdi,%rax
  10afb7:	74 0d                	je     10afc6 <_ZN3usb14HIDMouseDriverD0Ev+0x56>
        else if (__f_)
  10afb9:	48 85 ff             	test   %rdi,%rdi
  10afbc:	74 0e                	je     10afcc <_ZN3usb14HIDMouseDriverD0Ev+0x5c>
            __f_->destroy_deallocate();
  10afbe:	48 8b 07             	mov    (%rdi),%rax
  10afc1:	ff 50 28             	call   *0x28(%rax)
  10afc4:	eb 06                	jmp    10afcc <_ZN3usb14HIDMouseDriverD0Ev+0x5c>
            __f_->destroy();
  10afc6:	48 8b 07             	mov    (%rdi),%rax
  10afc9:	ff 50 20             	call   *0x20(%rax)
        if ((void*)__f_ == &__buf_)
  10afcc:	48 8d 83 60 08 00 00 	lea    0x860(%rbx),%rax
  10afd3:	48 8b bb 80 08 00 00 	mov    0x880(%rbx),%rdi
  10afda:	48 39 f8             	cmp    %rdi,%rax
  10afdd:	74 0d                	je     10afec <_ZN3usb14HIDMouseDriverD0Ev+0x7c>
        else if (__f_)
  10afdf:	48 85 ff             	test   %rdi,%rdi
  10afe2:	74 0e                	je     10aff2 <_ZN3usb14HIDMouseDriverD0Ev+0x82>
            __f_->destroy_deallocate();
  10afe4:	48 8b 07             	mov    (%rdi),%rax
  10afe7:	ff 50 28             	call   *0x28(%rax)
  10afea:	eb 06                	jmp    10aff2 <_ZN3usb14HIDMouseDriverD0Ev+0x82>
            __f_->destroy();
  10afec:	48 8b 07             	mov    (%rdi),%rax
  10afef:	ff 50 20             	call   *0x20(%rax)
        if ((void*)__f_ == &__buf_)
  10aff2:	48 8d 83 30 08 00 00 	lea    0x830(%rbx),%rax
  10aff9:	48 8b bb 50 08 00 00 	mov    0x850(%rbx),%rdi
  10b000:	48 39 f8             	cmp    %rdi,%rax
  10b003:	74 0d                	je     10b012 <_ZN3usb14HIDMouseDriverD0Ev+0xa2>
        else if (__f_)
  10b005:	48 85 ff             	test   %rdi,%rdi
  10b008:	74 0e                	je     10b018 <_ZN3usb14HIDMouseDriverD0Ev+0xa8>
            __f_->destroy_deallocate();
  10b00a:	48 8b 07             	mov    (%rdi),%rax
  10b00d:	ff 50 28             	call   *0x28(%rax)
  10b010:	eb 06                	jmp    10b018 <_ZN3usb14HIDMouseDriverD0Ev+0xa8>
            __f_->destroy();
  10b012:	48 8b 07             	mov    (%rdi),%rax
  10b015:	ff 50 20             	call   *0x20(%rax)
  10b018:	48 89 df             	mov    %rbx,%rdi
  10b01b:	e8 50 f3 ff ff       	call   10a370 <_ZN3usb11ClassDriverD1Ev>
    FreeMem(ptr);
  10b020:	48 89 df             	mov    %rbx,%rdi
  10b023:	48 83 c4 08          	add    $0x8,%rsp
  10b027:	5b                   	pop    %rbx
  10b028:	5d                   	pop    %rbp
  10b029:	e9 92 b6 ff ff       	jmp    1066c0 <_ZN3usb7FreeMemEPv>
  10b02e:	cc                   	int3   
  10b02f:	cc                   	int3   

000000000010b030 <abort>:
  10b030:	50                   	push   %rax
  10b031:	bf 06 00 00 00       	mov    $0x6,%edi
  10b036:	e8 85 0b 00 00       	call   10bbc0 <raise>
  10b03b:	bf 01 00 00 00       	mov    $0x1,%edi
  10b040:	e8 9b a1 ff ff       	call   1051e0 <_exit>
  10b045:	cc                   	int3   
  10b046:	cc                   	int3   
  10b047:	cc                   	int3   
  10b048:	cc                   	int3   
  10b049:	cc                   	int3   
  10b04a:	cc                   	int3   
  10b04b:	cc                   	int3   
  10b04c:	cc                   	int3   
  10b04d:	cc                   	int3   
  10b04e:	cc                   	int3   
  10b04f:	cc                   	int3   

000000000010b050 <__cxa_atexit>:
  10b050:	48 89 d0             	mov    %rdx,%rax
  10b053:	48 89 f1             	mov    %rsi,%rcx
  10b056:	48 89 fa             	mov    %rdi,%rdx
  10b059:	bf 02 00 00 00       	mov    $0x2,%edi
  10b05e:	48 89 d6             	mov    %rdx,%rsi
  10b061:	48 89 ca             	mov    %rcx,%rdx
  10b064:	48 89 c1             	mov    %rax,%rcx
  10b067:	e9 04 00 00 00       	jmp    10b070 <__register_exitproc>
  10b06c:	cc                   	int3   
  10b06d:	cc                   	int3   
  10b06e:	cc                   	int3   
  10b06f:	cc                   	int3   

000000000010b070 <__register_exitproc>:
  10b070:	49 89 c8             	mov    %rcx,%r8
  10b073:	48 8b 05 a6 bc 00 00 	mov    0xbca6(%rip),%rax        # 116d20 <_global_impure_ptr+0x8>
  10b07a:	48 8b 00             	mov    (%rax),%rax
  10b07d:	4c 8b 88 f8 01 00 00 	mov    0x1f8(%rax),%r9
  10b084:	4d 85 c9             	test   %r9,%r9
  10b087:	75 0e                	jne    10b097 <__register_exitproc+0x27>
  10b089:	4c 8d 88 00 02 00 00 	lea    0x200(%rax),%r9
  10b090:	4c 89 88 f8 01 00 00 	mov    %r9,0x1f8(%rax)
  10b097:	49 63 49 08          	movslq 0x8(%r9),%rcx
  10b09b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  10b0a0:	48 83 f9 1f          	cmp    $0x1f,%rcx
  10b0a4:	7f 3c                	jg     10b0e2 <__register_exitproc+0x72>
  10b0a6:	85 ff                	test   %edi,%edi
  10b0a8:	74 2a                	je     10b0d4 <__register_exitproc+0x64>
  10b0aa:	b8 01 00 00 00       	mov    $0x1,%eax
  10b0af:	d3 e0                	shl    %cl,%eax
  10b0b1:	49 89 94 c9 10 01 00 	mov    %rdx,0x110(%r9,%rcx,8)
  10b0b8:	00 
  10b0b9:	41 09 81 10 03 00 00 	or     %eax,0x310(%r9)
  10b0c0:	4d 89 84 c9 10 02 00 	mov    %r8,0x210(%r9,%rcx,8)
  10b0c7:	00 
  10b0c8:	83 ff 02             	cmp    $0x2,%edi
  10b0cb:	75 07                	jne    10b0d4 <__register_exitproc+0x64>
  10b0cd:	41 09 81 14 03 00 00 	or     %eax,0x314(%r9)
  10b0d4:	8d 41 01             	lea    0x1(%rcx),%eax
  10b0d7:	41 89 41 08          	mov    %eax,0x8(%r9)
  10b0db:	49 89 74 c9 10       	mov    %rsi,0x10(%r9,%rcx,8)
  10b0e0:	31 c0                	xor    %eax,%eax
  10b0e2:	c3                   	ret    
  10b0e3:	cc                   	int3   
  10b0e4:	cc                   	int3   
  10b0e5:	cc                   	int3   
  10b0e6:	cc                   	int3   
  10b0e7:	cc                   	int3   
  10b0e8:	cc                   	int3   
  10b0e9:	cc                   	int3   
  10b0ea:	cc                   	int3   
  10b0eb:	cc                   	int3   
  10b0ec:	cc                   	int3   
  10b0ed:	cc                   	int3   
  10b0ee:	cc                   	int3   
  10b0ef:	cc                   	int3   

000000000010b0f0 <__errno>:
  10b0f0:	48 8b 05 31 bc 00 00 	mov    0xbc31(%rip),%rax        # 116d28 <_global_impure_ptr+0x10>
  10b0f7:	48 8b 00             	mov    (%rax),%rax
  10b0fa:	c3                   	ret    
  10b0fb:	cc                   	int3   
  10b0fc:	cc                   	int3   
  10b0fd:	cc                   	int3   
  10b0fe:	cc                   	int3   
  10b0ff:	cc                   	int3   

000000000010b100 <memcpy>:
  10b100:	48 89 f8             	mov    %rdi,%rax
  10b103:	48 83 fa 10          	cmp    $0x10,%rdx
  10b107:	0f 82 fa 00 00 00    	jb     10b207 <byte_copy>
  10b10d:	49 89 f8             	mov    %rdi,%r8
  10b110:	49 83 e0 07          	and    $0x7,%r8
  10b114:	74 0f                	je     10b125 <quadword_aligned>
  10b116:	48 c7 c1 08 00 00 00 	mov    $0x8,%rcx
  10b11d:	4c 29 c1             	sub    %r8,%rcx
  10b120:	48 29 ca             	sub    %rcx,%rdx
  10b123:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)

000000000010b125 <quadword_aligned>:
  10b125:	48 81 fa 00 01 00 00 	cmp    $0x100,%rdx
  10b12c:	0f 82 db 00 00 00    	jb     10b20d <quadword_copy>
  10b132:	50                   	push   %rax
  10b133:	41 54                	push   %r12
  10b135:	41 55                	push   %r13
  10b137:	41 56                	push   %r14
  10b139:	48 89 d1             	mov    %rdx,%rcx
  10b13c:	48 c1 e9 07          	shr    $0x7,%rcx

000000000010b140 <loop>:
  10b140:	0f 18 86 00 03 00 00 	prefetchnta 0x300(%rsi)
  10b147:	0f 18 86 40 03 00 00 	prefetchnta 0x340(%rsi)
  10b14e:	48 8b 06             	mov    (%rsi),%rax
  10b151:	4c 8b 46 08          	mov    0x8(%rsi),%r8
  10b155:	4c 8b 4e 10          	mov    0x10(%rsi),%r9
  10b159:	4c 8b 56 18          	mov    0x18(%rsi),%r10
  10b15d:	4c 8b 5e 20          	mov    0x20(%rsi),%r11
  10b161:	4c 8b 66 28          	mov    0x28(%rsi),%r12
  10b165:	4c 8b 6e 30          	mov    0x30(%rsi),%r13
  10b169:	4c 8b 76 38          	mov    0x38(%rsi),%r14
  10b16d:	48 0f c3 07          	movnti %rax,(%rdi)
  10b171:	4c 0f c3 47 08       	movnti %r8,0x8(%rdi)
  10b176:	4c 0f c3 4f 10       	movnti %r9,0x10(%rdi)
  10b17b:	4c 0f c3 57 18       	movnti %r10,0x18(%rdi)
  10b180:	4c 0f c3 5f 20       	movnti %r11,0x20(%rdi)
  10b185:	4c 0f c3 67 28       	movnti %r12,0x28(%rdi)
  10b18a:	4c 0f c3 6f 30       	movnti %r13,0x30(%rdi)
  10b18f:	4c 0f c3 77 38       	movnti %r14,0x38(%rdi)
  10b194:	48 8b 46 40          	mov    0x40(%rsi),%rax
  10b198:	4c 8b 46 48          	mov    0x48(%rsi),%r8
  10b19c:	4c 8b 4e 50          	mov    0x50(%rsi),%r9
  10b1a0:	4c 8b 56 58          	mov    0x58(%rsi),%r10
  10b1a4:	4c 8b 5e 60          	mov    0x60(%rsi),%r11
  10b1a8:	4c 8b 66 68          	mov    0x68(%rsi),%r12
  10b1ac:	4c 8b 6e 70          	mov    0x70(%rsi),%r13
  10b1b0:	4c 8b 76 78          	mov    0x78(%rsi),%r14
  10b1b4:	48 0f c3 47 40       	movnti %rax,0x40(%rdi)
  10b1b9:	4c 0f c3 47 48       	movnti %r8,0x48(%rdi)
  10b1be:	4c 0f c3 4f 50       	movnti %r9,0x50(%rdi)
  10b1c3:	4c 0f c3 57 58       	movnti %r10,0x58(%rdi)
  10b1c8:	4c 0f c3 5f 60       	movnti %r11,0x60(%rdi)
  10b1cd:	4c 0f c3 67 68       	movnti %r12,0x68(%rdi)
  10b1d2:	4c 0f c3 6f 70       	movnti %r13,0x70(%rdi)
  10b1d7:	4c 0f c3 77 78       	movnti %r14,0x78(%rdi)
  10b1dc:	48 8d b6 80 00 00 00 	lea    0x80(%rsi),%rsi
  10b1e3:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
  10b1ea:	48 ff c9             	dec    %rcx
  10b1ed:	0f 85 4d ff ff ff    	jne    10b140 <loop>
  10b1f3:	0f ae f8             	sfence 
  10b1f6:	48 89 d1             	mov    %rdx,%rcx
  10b1f9:	48 83 e1 7f          	and    $0x7f,%rcx
  10b1fd:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  10b1ff:	41 5e                	pop    %r14
  10b201:	41 5d                	pop    %r13
  10b203:	41 5c                	pop    %r12
  10b205:	58                   	pop    %rax
  10b206:	c3                   	ret    

000000000010b207 <byte_copy>:
  10b207:	48 89 d1             	mov    %rdx,%rcx
  10b20a:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  10b20c:	c3                   	ret    

000000000010b20d <quadword_copy>:
  10b20d:	48 89 d1             	mov    %rdx,%rcx
  10b210:	48 c1 e9 03          	shr    $0x3,%rcx
  10b214:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10b21b:	00 00 00 
  10b21e:	66 90                	xchg   %ax,%ax
  10b220:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  10b223:	48 89 d1             	mov    %rdx,%rcx
  10b226:	48 83 e1 07          	and    $0x7,%rcx
  10b22a:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  10b22c:	c3                   	ret    
  10b22d:	cc                   	int3   
  10b22e:	cc                   	int3   
  10b22f:	cc                   	int3   

000000000010b230 <memmove>:
  10b230:	55                   	push   %rbp
  10b231:	41 57                	push   %r15
  10b233:	41 56                	push   %r14
  10b235:	41 55                	push   %r13
  10b237:	41 54                	push   %r12
  10b239:	53                   	push   %rbx
  10b23a:	49 89 fb             	mov    %rdi,%r11
  10b23d:	48 39 fe             	cmp    %rdi,%rsi
  10b240:	0f 83 d0 00 00 00    	jae    10b316 <memmove+0xe6>
  10b246:	48 8d 04 16          	lea    (%rsi,%rdx,1),%rax
  10b24a:	4c 39 d8             	cmp    %r11,%rax
  10b24d:	0f 86 c3 00 00 00    	jbe    10b316 <memmove+0xe6>
  10b253:	48 85 d2             	test   %rdx,%rdx
  10b256:	0f 84 33 05 00 00    	je     10b78f <memmove+0x55f>
  10b25c:	49 8d 0c 13          	lea    (%r11,%rdx,1),%rcx
  10b260:	48 83 fa 10          	cmp    $0x10,%rdx
  10b264:	72 12                	jb     10b278 <memmove+0x48>
  10b266:	4c 39 d8             	cmp    %r11,%rax
  10b269:	0f 86 cb 02 00 00    	jbe    10b53a <memmove+0x30a>
  10b26f:	48 39 f1             	cmp    %rsi,%rcx
  10b272:	0f 86 c2 02 00 00    	jbe    10b53a <memmove+0x30a>
  10b278:	49 89 d1             	mov    %rdx,%r9
  10b27b:	4d 8d 41 ff          	lea    -0x1(%r9),%r8
  10b27f:	4c 89 ce             	mov    %r9,%rsi
  10b282:	48 83 e6 07          	and    $0x7,%rsi
  10b286:	74 23                	je     10b2ab <memmove+0x7b>
  10b288:	31 d2                	xor    %edx,%edx
  10b28a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10b290:	0f b6 58 ff          	movzbl -0x1(%rax),%ebx
  10b294:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
  10b298:	88 59 ff             	mov    %bl,-0x1(%rcx)
  10b29b:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
  10b29f:	48 83 c2 01          	add    $0x1,%rdx
  10b2a3:	48 39 d6             	cmp    %rdx,%rsi
  10b2a6:	75 e8                	jne    10b290 <memmove+0x60>
  10b2a8:	49 29 d1             	sub    %rdx,%r9
  10b2ab:	49 83 f8 07          	cmp    $0x7,%r8
  10b2af:	0f 82 da 04 00 00    	jb     10b78f <memmove+0x55f>
  10b2b5:	49 f7 d9             	neg    %r9
  10b2b8:	31 d2                	xor    %edx,%edx
  10b2ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10b2c0:	0f b6 5c 10 ff       	movzbl -0x1(%rax,%rdx,1),%ebx
  10b2c5:	88 5c 11 ff          	mov    %bl,-0x1(%rcx,%rdx,1)
  10b2c9:	0f b6 5c 10 fe       	movzbl -0x2(%rax,%rdx,1),%ebx
  10b2ce:	88 5c 11 fe          	mov    %bl,-0x2(%rcx,%rdx,1)
  10b2d2:	0f b6 5c 10 fd       	movzbl -0x3(%rax,%rdx,1),%ebx
  10b2d7:	88 5c 11 fd          	mov    %bl,-0x3(%rcx,%rdx,1)
  10b2db:	0f b6 5c 10 fc       	movzbl -0x4(%rax,%rdx,1),%ebx
  10b2e0:	88 5c 11 fc          	mov    %bl,-0x4(%rcx,%rdx,1)
  10b2e4:	0f b6 5c 10 fb       	movzbl -0x5(%rax,%rdx,1),%ebx
  10b2e9:	88 5c 11 fb          	mov    %bl,-0x5(%rcx,%rdx,1)
  10b2ed:	0f b6 5c 10 fa       	movzbl -0x6(%rax,%rdx,1),%ebx
  10b2f2:	88 5c 11 fa          	mov    %bl,-0x6(%rcx,%rdx,1)
  10b2f6:	0f b6 5c 10 f9       	movzbl -0x7(%rax,%rdx,1),%ebx
  10b2fb:	88 5c 11 f9          	mov    %bl,-0x7(%rcx,%rdx,1)
  10b2ff:	0f b6 5c 10 f8       	movzbl -0x8(%rax,%rdx,1),%ebx
  10b304:	88 5c 11 f8          	mov    %bl,-0x8(%rcx,%rdx,1)
  10b308:	48 83 c2 f8          	add    $0xfffffffffffffff8,%rdx
  10b30c:	49 39 d1             	cmp    %rdx,%r9
  10b30f:	75 af                	jne    10b2c0 <memmove+0x90>
  10b311:	e9 79 04 00 00       	jmp    10b78f <memmove+0x55f>
  10b316:	48 83 fa 20          	cmp    $0x20,%rdx
  10b31a:	73 11                	jae    10b32d <memmove+0xfd>
  10b31c:	4c 89 df             	mov    %r11,%rdi
  10b31f:	48 85 d2             	test   %rdx,%rdx
  10b322:	0f 85 ce 02 00 00    	jne    10b5f6 <memmove+0x3c6>
  10b328:	e9 62 04 00 00       	jmp    10b78f <memmove+0x55f>
  10b32d:	89 f0                	mov    %esi,%eax
  10b32f:	44 09 d8             	or     %r11d,%eax
  10b332:	a8 07                	test   $0x7,%al
  10b334:	74 12                	je     10b348 <memmove+0x118>
  10b336:	4c 89 df             	mov    %r11,%rdi
  10b339:	48 83 fa 20          	cmp    $0x20,%rdx
  10b33d:	0f 82 bb 03 00 00    	jb     10b6fe <memmove+0x4ce>
  10b343:	e9 b8 02 00 00       	jmp    10b600 <memmove+0x3d0>
  10b348:	4c 8d 72 e0          	lea    -0x20(%rdx),%r14
  10b34c:	41 f6 c6 20          	test   $0x20,%r14b
  10b350:	75 2b                	jne    10b37d <memmove+0x14d>
  10b352:	48 8b 06             	mov    (%rsi),%rax
  10b355:	49 89 03             	mov    %rax,(%r11)
  10b358:	48 8b 46 08          	mov    0x8(%rsi),%rax
  10b35c:	49 89 43 08          	mov    %rax,0x8(%r11)
  10b360:	48 8b 46 10          	mov    0x10(%rsi),%rax
  10b364:	49 89 43 10          	mov    %rax,0x10(%r11)
  10b368:	48 8d 46 20          	lea    0x20(%rsi),%rax
  10b36c:	48 8b 5e 18          	mov    0x18(%rsi),%rbx
  10b370:	49 8d 4b 20          	lea    0x20(%r11),%rcx
  10b374:	49 89 5b 18          	mov    %rbx,0x18(%r11)
  10b378:	4d 89 f0             	mov    %r14,%r8
  10b37b:	eb 09                	jmp    10b386 <memmove+0x156>
  10b37d:	48 89 f0             	mov    %rsi,%rax
  10b380:	4c 89 d9             	mov    %r11,%rcx
  10b383:	49 89 d0             	mov    %rdx,%r8
  10b386:	4d 89 f7             	mov    %r14,%r15
  10b389:	49 83 e7 e0          	and    $0xffffffffffffffe0,%r15
  10b38d:	49 83 fe 20          	cmp    $0x20,%r14
  10b391:	72 69                	jb     10b3fc <memmove+0x1cc>
  10b393:	31 db                	xor    %ebx,%ebx
  10b395:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10b39c:	00 00 00 
  10b39f:	90                   	nop
  10b3a0:	48 8b 2c 18          	mov    (%rax,%rbx,1),%rbp
  10b3a4:	48 89 2c 19          	mov    %rbp,(%rcx,%rbx,1)
  10b3a8:	48 8b 6c 18 08       	mov    0x8(%rax,%rbx,1),%rbp
  10b3ad:	48 89 6c 19 08       	mov    %rbp,0x8(%rcx,%rbx,1)
  10b3b2:	48 8b 6c 18 10       	mov    0x10(%rax,%rbx,1),%rbp
  10b3b7:	48 89 6c 19 10       	mov    %rbp,0x10(%rcx,%rbx,1)
  10b3bc:	48 8b 6c 18 18       	mov    0x18(%rax,%rbx,1),%rbp
  10b3c1:	48 89 6c 19 18       	mov    %rbp,0x18(%rcx,%rbx,1)
  10b3c6:	48 8b 6c 18 20       	mov    0x20(%rax,%rbx,1),%rbp
  10b3cb:	48 89 6c 19 20       	mov    %rbp,0x20(%rcx,%rbx,1)
  10b3d0:	48 8b 6c 18 28       	mov    0x28(%rax,%rbx,1),%rbp
  10b3d5:	48 89 6c 19 28       	mov    %rbp,0x28(%rcx,%rbx,1)
  10b3da:	48 8b 6c 18 30       	mov    0x30(%rax,%rbx,1),%rbp
  10b3df:	48 89 6c 19 30       	mov    %rbp,0x30(%rcx,%rbx,1)
  10b3e4:	48 8b 6c 18 38       	mov    0x38(%rax,%rbx,1),%rbp
  10b3e9:	48 89 6c 19 38       	mov    %rbp,0x38(%rcx,%rbx,1)
  10b3ee:	49 83 c0 c0          	add    $0xffffffffffffffc0,%r8
  10b3f2:	48 83 c3 40          	add    $0x40,%rbx
  10b3f6:	49 83 f8 1f          	cmp    $0x1f,%r8
  10b3fa:	77 a4                	ja     10b3a0 <memmove+0x170>
  10b3fc:	4e 8d 04 3e          	lea    (%rsi,%r15,1),%r8
  10b400:	49 83 c0 20          	add    $0x20,%r8
  10b404:	4b 8d 3c 3b          	lea    (%r11,%r15,1),%rdi
  10b408:	48 83 c7 20          	add    $0x20,%rdi
  10b40c:	4d 29 fe             	sub    %r15,%r14
  10b40f:	49 83 fe 08          	cmp    $0x8,%r14
  10b413:	0f 82 19 01 00 00    	jb     10b532 <memmove+0x302>
  10b419:	4d 8d 4e f8          	lea    -0x8(%r14),%r9
  10b41d:	4d 89 ca             	mov    %r9,%r10
  10b420:	49 c1 ea 03          	shr    $0x3,%r10
  10b424:	49 8d 42 01          	lea    0x1(%r10),%rax
  10b428:	4c 8d 6a d8          	lea    -0x28(%rdx),%r13
  10b42c:	4d 29 fd             	sub    %r15,%r13
  10b42f:	4c 89 e9             	mov    %r13,%rcx
  10b432:	48 c1 e9 03          	shr    $0x3,%rcx
  10b436:	48 83 c1 01          	add    $0x1,%rcx
  10b43a:	48 83 f9 03          	cmp    $0x3,%rcx
  10b43e:	76 29                	jbe    10b469 <memmove+0x239>
  10b440:	49 83 e5 f8          	and    $0xfffffffffffffff8,%r13
  10b444:	4b 8d 1c 2f          	lea    (%r15,%r13,1),%rbx
  10b448:	48 8d 2c 1e          	lea    (%rsi,%rbx,1),%rbp
  10b44c:	48 83 c5 28          	add    $0x28,%rbp
  10b450:	48 39 ef             	cmp    %rbp,%rdi
  10b453:	0f 83 19 01 00 00    	jae    10b572 <memmove+0x342>
  10b459:	4c 01 db             	add    %r11,%rbx
  10b45c:	48 83 c3 28          	add    $0x28,%rbx
  10b460:	49 39 d8             	cmp    %rbx,%r8
  10b463:	0f 83 09 01 00 00    	jae    10b572 <memmove+0x342>
  10b469:	4c 89 c5             	mov    %r8,%rbp
  10b46c:	48 89 f9             	mov    %rdi,%rcx
  10b46f:	ba 07 00 00 00       	mov    $0x7,%edx
  10b474:	4c 29 f2             	sub    %r14,%rdx
  10b477:	48 83 fa f8          	cmp    $0xfffffffffffffff8,%rdx
  10b47b:	49 c7 c7 f8 ff ff ff 	mov    $0xfffffffffffffff8,%r15
  10b482:	4c 0f 47 fa          	cmova  %rdx,%r15
  10b486:	4d 01 f7             	add    %r14,%r15
  10b489:	45 89 fc             	mov    %r15d,%r12d
  10b48c:	41 c1 ec 03          	shr    $0x3,%r12d
  10b490:	41 83 c4 01          	add    $0x1,%r12d
  10b494:	49 83 e4 07          	and    $0x7,%r12
  10b498:	74 25                	je     10b4bf <memmove+0x28f>
  10b49a:	31 d2                	xor    %edx,%edx
  10b49c:	31 f6                	xor    %esi,%esi
  10b49e:	66 90                	xchg   %ax,%ax
  10b4a0:	48 8b 5c f5 00       	mov    0x0(%rbp,%rsi,8),%rbx
  10b4a5:	48 89 1c f1          	mov    %rbx,(%rcx,%rsi,8)
  10b4a9:	48 83 c6 01          	add    $0x1,%rsi
  10b4ad:	48 83 c2 f8          	add    $0xfffffffffffffff8,%rdx
  10b4b1:	49 39 f4             	cmp    %rsi,%r12
  10b4b4:	75 ea                	jne    10b4a0 <memmove+0x270>
  10b4b6:	48 29 d5             	sub    %rdx,%rbp
  10b4b9:	48 29 d1             	sub    %rdx,%rcx
  10b4bc:	49 01 d6             	add    %rdx,%r14
  10b4bf:	49 83 ff 38          	cmp    $0x38,%r15
  10b4c3:	0f 82 0e 01 00 00    	jb     10b5d7 <memmove+0x3a7>
  10b4c9:	31 d2                	xor    %edx,%edx
  10b4cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10b4d0:	48 8b 74 15 00       	mov    0x0(%rbp,%rdx,1),%rsi
  10b4d5:	48 89 34 11          	mov    %rsi,(%rcx,%rdx,1)
  10b4d9:	48 8b 74 15 08       	mov    0x8(%rbp,%rdx,1),%rsi
  10b4de:	48 89 74 11 08       	mov    %rsi,0x8(%rcx,%rdx,1)
  10b4e3:	48 8b 74 15 10       	mov    0x10(%rbp,%rdx,1),%rsi
  10b4e8:	48 89 74 11 10       	mov    %rsi,0x10(%rcx,%rdx,1)
  10b4ed:	48 8b 74 15 18       	mov    0x18(%rbp,%rdx,1),%rsi
  10b4f2:	48 89 74 11 18       	mov    %rsi,0x18(%rcx,%rdx,1)
  10b4f7:	48 8b 74 15 20       	mov    0x20(%rbp,%rdx,1),%rsi
  10b4fc:	48 89 74 11 20       	mov    %rsi,0x20(%rcx,%rdx,1)
  10b501:	48 8b 74 15 28       	mov    0x28(%rbp,%rdx,1),%rsi
  10b506:	48 89 74 11 28       	mov    %rsi,0x28(%rcx,%rdx,1)
  10b50b:	48 8b 74 15 30       	mov    0x30(%rbp,%rdx,1),%rsi
  10b510:	48 89 74 11 30       	mov    %rsi,0x30(%rcx,%rdx,1)
  10b515:	48 8b 74 15 38       	mov    0x38(%rbp,%rdx,1),%rsi
  10b51a:	48 89 74 11 38       	mov    %rsi,0x38(%rcx,%rdx,1)
  10b51f:	49 83 c6 c0          	add    $0xffffffffffffffc0,%r14
  10b523:	48 83 c2 40          	add    $0x40,%rdx
  10b527:	49 83 fe 07          	cmp    $0x7,%r14
  10b52b:	77 a3                	ja     10b4d0 <memmove+0x2a0>
  10b52d:	e9 a5 00 00 00       	jmp    10b5d7 <memmove+0x3a7>
  10b532:	4c 89 c6             	mov    %r8,%rsi
  10b535:	e9 b0 00 00 00       	jmp    10b5ea <memmove+0x3ba>
  10b53a:	41 89 d1             	mov    %edx,%r9d
  10b53d:	41 83 e1 0f          	and    $0xf,%r9d
  10b541:	4a 8d 04 0e          	lea    (%rsi,%r9,1),%rax
  10b545:	4b 8d 0c 0b          	lea    (%r11,%r9,1),%rcx
  10b549:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  10b550:	0f 10 44 16 f0       	movups -0x10(%rsi,%rdx,1),%xmm0
  10b555:	41 0f 11 44 13 f0    	movups %xmm0,-0x10(%r11,%rdx,1)
  10b55b:	48 83 c2 f0          	add    $0xfffffffffffffff0,%rdx
  10b55f:	49 39 d1             	cmp    %rdx,%r9
  10b562:	75 ec                	jne    10b550 <memmove+0x320>
  10b564:	4d 85 c9             	test   %r9,%r9
  10b567:	0f 85 0e fd ff ff    	jne    10b27b <memmove+0x4b>
  10b56d:	e9 1d 02 00 00       	jmp    10b78f <memmove+0x55f>
  10b572:	41 89 cc             	mov    %ecx,%r12d
  10b575:	41 83 e4 03          	and    $0x3,%r12d
  10b579:	4c 29 e1             	sub    %r12,%rcx
  10b57c:	49 8d 2c c8          	lea    (%r8,%rcx,8),%rbp
  10b580:	48 8d 0c cf          	lea    (%rdi,%rcx,8),%rcx
  10b584:	4e 8d 34 e2          	lea    (%rdx,%r12,8),%r14
  10b588:	49 83 c6 d8          	add    $0xffffffffffffffd8,%r14
  10b58c:	4d 29 ee             	sub    %r13,%r14
  10b58f:	4d 29 fe             	sub    %r15,%r14
  10b592:	4f 8d 2c 3b          	lea    (%r11,%r15,1),%r13
  10b596:	49 83 c5 30          	add    $0x30,%r13
  10b59a:	4c 01 fe             	add    %r15,%rsi
  10b59d:	48 83 c6 30          	add    $0x30,%rsi
  10b5a1:	49 89 c7             	mov    %rax,%r15
  10b5a4:	4d 29 e7             	sub    %r12,%r15
  10b5a7:	31 d2                	xor    %edx,%edx
  10b5a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  10b5b0:	0f 10 44 d6 f0       	movups -0x10(%rsi,%rdx,8),%xmm0
  10b5b5:	0f 10 0c d6          	movups (%rsi,%rdx,8),%xmm1
  10b5b9:	41 0f 11 44 d5 f0    	movups %xmm0,-0x10(%r13,%rdx,8)
  10b5bf:	41 0f 11 4c d5 00    	movups %xmm1,0x0(%r13,%rdx,8)
  10b5c5:	48 83 c2 04          	add    $0x4,%rdx
  10b5c9:	49 39 d7             	cmp    %rdx,%r15
  10b5cc:	75 e2                	jne    10b5b0 <memmove+0x380>
  10b5ce:	4d 85 e4             	test   %r12,%r12
  10b5d1:	0f 85 98 fe ff ff    	jne    10b46f <memmove+0x23f>
  10b5d7:	4b 8d 34 d0          	lea    (%r8,%r10,8),%rsi
  10b5db:	48 83 c6 08          	add    $0x8,%rsi
  10b5df:	48 8d 3c c7          	lea    (%rdi,%rax,8),%rdi
  10b5e3:	41 83 e1 07          	and    $0x7,%r9d
  10b5e7:	4d 89 ce             	mov    %r9,%r14
  10b5ea:	4c 89 f2             	mov    %r14,%rdx
  10b5ed:	48 85 d2             	test   %rdx,%rdx
  10b5f0:	0f 84 99 01 00 00    	je     10b78f <memmove+0x55f>
  10b5f6:	48 83 fa 20          	cmp    $0x20,%rdx
  10b5fa:	0f 82 fe 00 00 00    	jb     10b6fe <memmove+0x4ce>
  10b600:	48 8d 0c 16          	lea    (%rsi,%rdx,1),%rcx
  10b604:	48 39 cf             	cmp    %rcx,%rdi
  10b607:	73 0d                	jae    10b616 <memmove+0x3e6>
  10b609:	48 8d 0c 17          	lea    (%rdi,%rdx,1),%rcx
  10b60d:	48 39 ce             	cmp    %rcx,%rsi
  10b610:	0f 82 e8 00 00 00    	jb     10b6fe <memmove+0x4ce>
  10b616:	49 89 d0             	mov    %rdx,%r8
  10b619:	49 83 e0 e0          	and    $0xffffffffffffffe0,%r8
  10b61d:	49 8d 68 e0          	lea    -0x20(%r8),%rbp
  10b621:	48 89 e9             	mov    %rbp,%rcx
  10b624:	48 c1 e9 05          	shr    $0x5,%rcx
  10b628:	48 83 c1 01          	add    $0x1,%rcx
  10b62c:	41 89 c9             	mov    %ecx,%r9d
  10b62f:	41 83 e1 03          	and    $0x3,%r9d
  10b633:	48 83 fd 60          	cmp    $0x60,%rbp
  10b637:	73 0c                	jae    10b645 <memmove+0x415>
  10b639:	31 c9                	xor    %ecx,%ecx
  10b63b:	4d 85 c9             	test   %r9,%r9
  10b63e:	75 7d                	jne    10b6bd <memmove+0x48d>
  10b640:	e9 a7 00 00 00       	jmp    10b6ec <memmove+0x4bc>
  10b645:	bd 01 00 00 00       	mov    $0x1,%ebp
  10b64a:	48 29 cd             	sub    %rcx,%rbp
  10b64d:	49 8d 1c 29          	lea    (%r9,%rbp,1),%rbx
  10b651:	48 83 c3 ff          	add    $0xffffffffffffffff,%rbx
  10b655:	31 c9                	xor    %ecx,%ecx
  10b657:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10b65e:	00 00 
  10b660:	0f 10 04 0e          	movups (%rsi,%rcx,1),%xmm0
  10b664:	0f 10 4c 0e 10       	movups 0x10(%rsi,%rcx,1),%xmm1
  10b669:	0f 11 04 0f          	movups %xmm0,(%rdi,%rcx,1)
  10b66d:	0f 11 4c 0f 10       	movups %xmm1,0x10(%rdi,%rcx,1)
  10b672:	0f 10 44 0e 20       	movups 0x20(%rsi,%rcx,1),%xmm0
  10b677:	0f 10 4c 0e 30       	movups 0x30(%rsi,%rcx,1),%xmm1
  10b67c:	0f 11 44 0f 20       	movups %xmm0,0x20(%rdi,%rcx,1)
  10b681:	0f 11 4c 0f 30       	movups %xmm1,0x30(%rdi,%rcx,1)
  10b686:	0f 10 44 0e 40       	movups 0x40(%rsi,%rcx,1),%xmm0
  10b68b:	0f 10 4c 0e 50       	movups 0x50(%rsi,%rcx,1),%xmm1
  10b690:	0f 11 44 0f 40       	movups %xmm0,0x40(%rdi,%rcx,1)
  10b695:	0f 11 4c 0f 50       	movups %xmm1,0x50(%rdi,%rcx,1)
  10b69a:	0f 10 44 0e 60       	movups 0x60(%rsi,%rcx,1),%xmm0
  10b69f:	0f 10 4c 0e 70       	movups 0x70(%rsi,%rcx,1),%xmm1
  10b6a4:	0f 11 44 0f 60       	movups %xmm0,0x60(%rdi,%rcx,1)
  10b6a9:	0f 11 4c 0f 70       	movups %xmm1,0x70(%rdi,%rcx,1)
  10b6ae:	48 83 e9 80          	sub    $0xffffffffffffff80,%rcx
  10b6b2:	48 83 c3 04          	add    $0x4,%rbx
  10b6b6:	75 a8                	jne    10b660 <memmove+0x430>
  10b6b8:	4d 85 c9             	test   %r9,%r9
  10b6bb:	74 2f                	je     10b6ec <memmove+0x4bc>
  10b6bd:	48 83 c1 10          	add    $0x10,%rcx
  10b6c1:	49 f7 d9             	neg    %r9
  10b6c4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10b6cb:	00 00 00 
  10b6ce:	66 90                	xchg   %ax,%ax
  10b6d0:	0f 10 44 0e f0       	movups -0x10(%rsi,%rcx,1),%xmm0
  10b6d5:	0f 10 0c 0e          	movups (%rsi,%rcx,1),%xmm1
  10b6d9:	0f 11 44 0f f0       	movups %xmm0,-0x10(%rdi,%rcx,1)
  10b6de:	0f 11 0c 0f          	movups %xmm1,(%rdi,%rcx,1)
  10b6e2:	48 83 c1 20          	add    $0x20,%rcx
  10b6e6:	49 83 c1 01          	add    $0x1,%r9
  10b6ea:	75 e4                	jne    10b6d0 <memmove+0x4a0>
  10b6ec:	4c 39 c2             	cmp    %r8,%rdx
  10b6ef:	0f 84 9a 00 00 00    	je     10b78f <memmove+0x55f>
  10b6f5:	4c 01 c6             	add    %r8,%rsi
  10b6f8:	4c 01 c7             	add    %r8,%rdi
  10b6fb:	4c 29 c2             	sub    %r8,%rdx
  10b6fe:	4c 8d 42 ff          	lea    -0x1(%rdx),%r8
  10b702:	48 89 d1             	mov    %rdx,%rcx
  10b705:	48 83 e1 07          	and    $0x7,%rcx
  10b709:	74 1e                	je     10b729 <memmove+0x4f9>
  10b70b:	31 db                	xor    %ebx,%ebx
  10b70d:	0f 1f 00             	nopl   (%rax)
  10b710:	0f b6 04 1e          	movzbl (%rsi,%rbx,1),%eax
  10b714:	88 04 1f             	mov    %al,(%rdi,%rbx,1)
  10b717:	48 83 c3 01          	add    $0x1,%rbx
  10b71b:	48 39 d9             	cmp    %rbx,%rcx
  10b71e:	75 f0                	jne    10b710 <memmove+0x4e0>
  10b720:	48 01 de             	add    %rbx,%rsi
  10b723:	48 01 df             	add    %rbx,%rdi
  10b726:	48 29 da             	sub    %rbx,%rdx
  10b729:	49 83 f8 07          	cmp    $0x7,%r8
  10b72d:	72 60                	jb     10b78f <memmove+0x55f>
  10b72f:	31 c9                	xor    %ecx,%ecx
  10b731:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10b738:	00 00 00 
  10b73b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10b740:	0f b6 04 0e          	movzbl (%rsi,%rcx,1),%eax
  10b744:	88 04 0f             	mov    %al,(%rdi,%rcx,1)
  10b747:	0f b6 44 0e 01       	movzbl 0x1(%rsi,%rcx,1),%eax
  10b74c:	88 44 0f 01          	mov    %al,0x1(%rdi,%rcx,1)
  10b750:	0f b6 44 0e 02       	movzbl 0x2(%rsi,%rcx,1),%eax
  10b755:	88 44 0f 02          	mov    %al,0x2(%rdi,%rcx,1)
  10b759:	0f b6 44 0e 03       	movzbl 0x3(%rsi,%rcx,1),%eax
  10b75e:	88 44 0f 03          	mov    %al,0x3(%rdi,%rcx,1)
  10b762:	0f b6 44 0e 04       	movzbl 0x4(%rsi,%rcx,1),%eax
  10b767:	88 44 0f 04          	mov    %al,0x4(%rdi,%rcx,1)
  10b76b:	0f b6 44 0e 05       	movzbl 0x5(%rsi,%rcx,1),%eax
  10b770:	88 44 0f 05          	mov    %al,0x5(%rdi,%rcx,1)
  10b774:	0f b6 44 0e 06       	movzbl 0x6(%rsi,%rcx,1),%eax
  10b779:	88 44 0f 06          	mov    %al,0x6(%rdi,%rcx,1)
  10b77d:	0f b6 44 0e 07       	movzbl 0x7(%rsi,%rcx,1),%eax
  10b782:	88 44 0f 07          	mov    %al,0x7(%rdi,%rcx,1)
  10b786:	48 83 c1 08          	add    $0x8,%rcx
  10b78a:	48 39 ca             	cmp    %rcx,%rdx
  10b78d:	75 b1                	jne    10b740 <memmove+0x510>
  10b78f:	4c 89 d8             	mov    %r11,%rax
  10b792:	5b                   	pop    %rbx
  10b793:	41 5c                	pop    %r12
  10b795:	41 5d                	pop    %r13
  10b797:	41 5e                	pop    %r14
  10b799:	41 5f                	pop    %r15
  10b79b:	5d                   	pop    %rbp
  10b79c:	c3                   	ret    
  10b79d:	cc                   	int3   
  10b79e:	cc                   	int3   
  10b79f:	cc                   	int3   

000000000010b7a0 <memset>:
  10b7a0:	49 89 f9             	mov    %rdi,%r9
  10b7a3:	48 89 f0             	mov    %rsi,%rax
  10b7a6:	48 89 d1             	mov    %rdx,%rcx
  10b7a9:	48 83 fa 10          	cmp    $0x10,%rdx
  10b7ad:	0f 82 a8 00 00 00    	jb     10b85b <byte_set>
  10b7b3:	49 89 f8             	mov    %rdi,%r8
  10b7b6:	49 83 e0 07          	and    $0x7,%r8
  10b7ba:	74 12                	je     10b7ce <quadword_aligned>
  10b7bc:	48 c7 c1 08 00 00 00 	mov    $0x8,%rcx
  10b7c3:	4c 29 c1             	sub    %r8,%rcx
  10b7c6:	48 29 ca             	sub    %rcx,%rdx
  10b7c9:	f3 aa                	rep stos %al,%es:(%rdi)
  10b7cb:	48 89 d1             	mov    %rdx,%rcx

000000000010b7ce <quadword_aligned>:
  10b7ce:	49 b8 01 01 01 01 01 	movabs $0x101010101010101,%r8
  10b7d5:	01 01 01 
  10b7d8:	40 0f b6 c6          	movzbl %sil,%eax
  10b7dc:	49 0f af c0          	imul   %r8,%rax
  10b7e0:	48 81 fa 00 01 00 00 	cmp    $0x100,%rdx
  10b7e7:	72 78                	jb     10b861 <quadword_set>
  10b7e9:	48 c1 e9 07          	shr    $0x7,%rcx
  10b7ed:	0f 1f 00             	nopl   (%rax)

000000000010b7f0 <loop>:
  10b7f0:	48 0f c3 07          	movnti %rax,(%rdi)
  10b7f4:	48 0f c3 47 08       	movnti %rax,0x8(%rdi)
  10b7f9:	48 0f c3 47 10       	movnti %rax,0x10(%rdi)
  10b7fe:	48 0f c3 47 18       	movnti %rax,0x18(%rdi)
  10b803:	48 0f c3 47 20       	movnti %rax,0x20(%rdi)
  10b808:	48 0f c3 47 28       	movnti %rax,0x28(%rdi)
  10b80d:	48 0f c3 47 30       	movnti %rax,0x30(%rdi)
  10b812:	48 0f c3 47 38       	movnti %rax,0x38(%rdi)
  10b817:	48 0f c3 47 40       	movnti %rax,0x40(%rdi)
  10b81c:	48 0f c3 47 48       	movnti %rax,0x48(%rdi)
  10b821:	48 0f c3 47 50       	movnti %rax,0x50(%rdi)
  10b826:	48 0f c3 47 58       	movnti %rax,0x58(%rdi)
  10b82b:	48 0f c3 47 60       	movnti %rax,0x60(%rdi)
  10b830:	48 0f c3 47 68       	movnti %rax,0x68(%rdi)
  10b835:	48 0f c3 47 70       	movnti %rax,0x70(%rdi)
  10b83a:	48 0f c3 47 78       	movnti %rax,0x78(%rdi)
  10b83f:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
  10b846:	48 ff c9             	dec    %rcx
  10b849:	75 a5                	jne    10b7f0 <loop>
  10b84b:	0f ae f8             	sfence 
  10b84e:	48 89 d1             	mov    %rdx,%rcx
  10b851:	48 83 e1 7f          	and    $0x7f,%rcx
  10b855:	f3 aa                	rep stos %al,%es:(%rdi)
  10b857:	4c 89 c8             	mov    %r9,%rax
  10b85a:	c3                   	ret    

000000000010b85b <byte_set>:
  10b85b:	f3 aa                	rep stos %al,%es:(%rdi)
  10b85d:	4c 89 c8             	mov    %r9,%rax
  10b860:	c3                   	ret    

000000000010b861 <quadword_set>:
  10b861:	48 c1 e9 03          	shr    $0x3,%rcx
  10b865:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10b86c:	00 00 00 
  10b86f:	90                   	nop
  10b870:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  10b873:	48 89 d1             	mov    %rdx,%rcx
  10b876:	48 83 e1 07          	and    $0x7,%rcx
  10b87a:	f3 aa                	rep stos %al,%es:(%rdi)
  10b87c:	4c 89 c8             	mov    %r9,%rax
  10b87f:	c3                   	ret    

000000000010b880 <_init_signal_r>:
  10b880:	55                   	push   %rbp
  10b881:	53                   	push   %rbx
  10b882:	50                   	push   %rax
  10b883:	31 ed                	xor    %ebp,%ebp
  10b885:	48 83 bf 18 05 00 00 	cmpq   $0x0,0x518(%rdi)
  10b88c:	00 
  10b88d:	0f 85 b7 01 00 00    	jne    10ba4a <_init_signal_r+0x1ca>
  10b893:	48 89 fb             	mov    %rdi,%rbx
  10b896:	be 00 01 00 00       	mov    $0x100,%esi
  10b89b:	e8 b0 04 00 00       	call   10bd50 <_malloc_r>
  10b8a0:	48 89 83 18 05 00 00 	mov    %rax,0x518(%rbx)
  10b8a7:	48 85 c0             	test   %rax,%rax
  10b8aa:	0f 84 95 01 00 00    	je     10ba45 <_init_signal_r+0x1c5>
  10b8b0:	48 81 c3 18 05 00 00 	add    $0x518,%rbx
  10b8b7:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  10b8be:	48 8b 03             	mov    (%rbx),%rax
  10b8c1:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  10b8c8:	00 
  10b8c9:	48 8b 03             	mov    (%rbx),%rax
  10b8cc:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  10b8d3:	00 
  10b8d4:	48 8b 03             	mov    (%rbx),%rax
  10b8d7:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  10b8de:	00 
  10b8df:	48 8b 03             	mov    (%rbx),%rax
  10b8e2:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  10b8e9:	00 
  10b8ea:	48 8b 03             	mov    (%rbx),%rax
  10b8ed:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  10b8f4:	00 
  10b8f5:	48 8b 03             	mov    (%rbx),%rax
  10b8f8:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  10b8ff:	00 
  10b900:	48 8b 03             	mov    (%rbx),%rax
  10b903:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
  10b90a:	00 
  10b90b:	48 8b 03             	mov    (%rbx),%rax
  10b90e:	48 c7 40 40 00 00 00 	movq   $0x0,0x40(%rax)
  10b915:	00 
  10b916:	48 8b 03             	mov    (%rbx),%rax
  10b919:	48 c7 40 48 00 00 00 	movq   $0x0,0x48(%rax)
  10b920:	00 
  10b921:	48 8b 03             	mov    (%rbx),%rax
  10b924:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
  10b92b:	00 
  10b92c:	48 8b 03             	mov    (%rbx),%rax
  10b92f:	48 c7 40 58 00 00 00 	movq   $0x0,0x58(%rax)
  10b936:	00 
  10b937:	48 8b 03             	mov    (%rbx),%rax
  10b93a:	48 c7 40 60 00 00 00 	movq   $0x0,0x60(%rax)
  10b941:	00 
  10b942:	48 8b 03             	mov    (%rbx),%rax
  10b945:	48 c7 40 68 00 00 00 	movq   $0x0,0x68(%rax)
  10b94c:	00 
  10b94d:	48 8b 03             	mov    (%rbx),%rax
  10b950:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  10b957:	00 
  10b958:	48 8b 03             	mov    (%rbx),%rax
  10b95b:	48 c7 40 78 00 00 00 	movq   $0x0,0x78(%rax)
  10b962:	00 
  10b963:	48 8b 03             	mov    (%rbx),%rax
  10b966:	48 c7 80 80 00 00 00 	movq   $0x0,0x80(%rax)
  10b96d:	00 00 00 00 
  10b971:	48 8b 03             	mov    (%rbx),%rax
  10b974:	48 c7 80 88 00 00 00 	movq   $0x0,0x88(%rax)
  10b97b:	00 00 00 00 
  10b97f:	48 8b 03             	mov    (%rbx),%rax
  10b982:	48 c7 80 90 00 00 00 	movq   $0x0,0x90(%rax)
  10b989:	00 00 00 00 
  10b98d:	48 8b 03             	mov    (%rbx),%rax
  10b990:	48 c7 80 98 00 00 00 	movq   $0x0,0x98(%rax)
  10b997:	00 00 00 00 
  10b99b:	48 8b 03             	mov    (%rbx),%rax
  10b99e:	48 c7 80 a0 00 00 00 	movq   $0x0,0xa0(%rax)
  10b9a5:	00 00 00 00 
  10b9a9:	48 8b 03             	mov    (%rbx),%rax
  10b9ac:	48 c7 80 a8 00 00 00 	movq   $0x0,0xa8(%rax)
  10b9b3:	00 00 00 00 
  10b9b7:	48 8b 03             	mov    (%rbx),%rax
  10b9ba:	48 c7 80 b0 00 00 00 	movq   $0x0,0xb0(%rax)
  10b9c1:	00 00 00 00 
  10b9c5:	48 8b 03             	mov    (%rbx),%rax
  10b9c8:	48 c7 80 b8 00 00 00 	movq   $0x0,0xb8(%rax)
  10b9cf:	00 00 00 00 
  10b9d3:	48 8b 03             	mov    (%rbx),%rax
  10b9d6:	48 c7 80 c0 00 00 00 	movq   $0x0,0xc0(%rax)
  10b9dd:	00 00 00 00 
  10b9e1:	48 8b 03             	mov    (%rbx),%rax
  10b9e4:	48 c7 80 c8 00 00 00 	movq   $0x0,0xc8(%rax)
  10b9eb:	00 00 00 00 
  10b9ef:	48 8b 03             	mov    (%rbx),%rax
  10b9f2:	48 c7 80 d0 00 00 00 	movq   $0x0,0xd0(%rax)
  10b9f9:	00 00 00 00 
  10b9fd:	48 8b 03             	mov    (%rbx),%rax
  10ba00:	48 c7 80 d8 00 00 00 	movq   $0x0,0xd8(%rax)
  10ba07:	00 00 00 00 
  10ba0b:	48 8b 03             	mov    (%rbx),%rax
  10ba0e:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
  10ba15:	00 00 00 00 
  10ba19:	48 8b 03             	mov    (%rbx),%rax
  10ba1c:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
  10ba23:	00 00 00 00 
  10ba27:	48 8b 03             	mov    (%rbx),%rax
  10ba2a:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
  10ba31:	00 00 00 00 
  10ba35:	48 8b 03             	mov    (%rbx),%rax
  10ba38:	48 c7 80 f8 00 00 00 	movq   $0x0,0xf8(%rax)
  10ba3f:	00 00 00 00 
  10ba43:	eb 05                	jmp    10ba4a <_init_signal_r+0x1ca>
  10ba45:	bd ff ff ff ff       	mov    $0xffffffff,%ebp
  10ba4a:	89 e8                	mov    %ebp,%eax
  10ba4c:	48 83 c4 08          	add    $0x8,%rsp
  10ba50:	5b                   	pop    %rbx
  10ba51:	5d                   	pop    %rbp
  10ba52:	c3                   	ret    
  10ba53:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10ba5a:	00 00 00 
  10ba5d:	0f 1f 00             	nopl   (%rax)

000000000010ba60 <_signal_r>:
  10ba60:	55                   	push   %rbp
  10ba61:	41 56                	push   %r14
  10ba63:	53                   	push   %rbx
  10ba64:	48 89 fb             	mov    %rdi,%rbx
  10ba67:	83 fe 20             	cmp    $0x20,%esi
  10ba6a:	72 0f                	jb     10ba7b <_signal_r+0x1b>
  10ba6c:	c7 03 16 00 00 00    	movl   $0x16,(%rbx)
  10ba72:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  10ba79:	eb 33                	jmp    10baae <_signal_r+0x4e>
  10ba7b:	49 89 d6             	mov    %rdx,%r14
  10ba7e:	89 f5                	mov    %esi,%ebp
  10ba80:	48 8b 8b 18 05 00 00 	mov    0x518(%rbx),%rcx
  10ba87:	48 85 c9             	test   %rcx,%rcx
  10ba8a:	74 0d                	je     10ba99 <_signal_r+0x39>
  10ba8c:	48 63 d5             	movslq %ebp,%rdx
  10ba8f:	48 8b 04 d1          	mov    (%rcx,%rdx,8),%rax
  10ba93:	4c 89 34 d1          	mov    %r14,(%rcx,%rdx,8)
  10ba97:	eb 15                	jmp    10baae <_signal_r+0x4e>
  10ba99:	48 89 df             	mov    %rbx,%rdi
  10ba9c:	e8 df fd ff ff       	call   10b880 <_init_signal_r>
  10baa1:	89 c1                	mov    %eax,%ecx
  10baa3:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  10baaa:	85 c9                	test   %ecx,%ecx
  10baac:	74 05                	je     10bab3 <_signal_r+0x53>
  10baae:	5b                   	pop    %rbx
  10baaf:	41 5e                	pop    %r14
  10bab1:	5d                   	pop    %rbp
  10bab2:	c3                   	ret    
  10bab3:	48 8b 8b 18 05 00 00 	mov    0x518(%rbx),%rcx
  10baba:	eb d0                	jmp    10ba8c <_signal_r+0x2c>
  10babc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000010bac0 <_raise_r>:
  10bac0:	41 57                	push   %r15
  10bac2:	41 56                	push   %r14
  10bac4:	53                   	push   %rbx
  10bac5:	49 89 ff             	mov    %rdi,%r15
  10bac8:	83 fe 20             	cmp    $0x20,%esi
  10bacb:	72 0f                	jb     10badc <_raise_r+0x1c>
  10bacd:	41 c7 07 16 00 00 00 	movl   $0x16,(%r15)
  10bad4:	41 be ff ff ff ff    	mov    $0xffffffff,%r14d
  10bada:	eb 68                	jmp    10bb44 <_raise_r+0x84>
  10badc:	89 f3                	mov    %esi,%ebx
  10bade:	49 8b 87 18 05 00 00 	mov    0x518(%r15),%rax
  10bae5:	45 31 f6             	xor    %r14d,%r14d
  10bae8:	48 85 c0             	test   %rax,%rax
  10baeb:	74 31                	je     10bb1e <_raise_r+0x5e>
  10baed:	48 63 cb             	movslq %ebx,%rcx
  10baf0:	48 8b 0c c8          	mov    (%rax,%rcx,8),%rcx
  10baf4:	48 83 f9 ff          	cmp    $0xffffffffffffffff,%rcx
  10baf8:	74 2c                	je     10bb26 <_raise_r+0x66>
  10bafa:	48 83 f9 01          	cmp    $0x1,%rcx
  10bafe:	74 44                	je     10bb44 <_raise_r+0x84>
  10bb00:	48 85 c9             	test   %rcx,%rcx
  10bb03:	75 30                	jne    10bb35 <_raise_r+0x75>
  10bb05:	4c 89 ff             	mov    %r15,%rdi
  10bb08:	e8 d3 0f 00 00       	call   10cae0 <_getpid_r>
  10bb0d:	4c 89 ff             	mov    %r15,%rdi
  10bb10:	89 c6                	mov    %eax,%esi
  10bb12:	89 da                	mov    %ebx,%edx
  10bb14:	5b                   	pop    %rbx
  10bb15:	41 5e                	pop    %r14
  10bb17:	41 5f                	pop    %r15
  10bb19:	e9 82 0f 00 00       	jmp    10caa0 <_kill_r>
  10bb1e:	31 c9                	xor    %ecx,%ecx
  10bb20:	48 83 f9 ff          	cmp    $0xffffffffffffffff,%rcx
  10bb24:	75 d4                	jne    10bafa <_raise_r+0x3a>
  10bb26:	41 c7 07 16 00 00 00 	movl   $0x16,(%r15)
  10bb2d:	41 be 01 00 00 00    	mov    $0x1,%r14d
  10bb33:	eb 0f                	jmp    10bb44 <_raise_r+0x84>
  10bb35:	48 63 d3             	movslq %ebx,%rdx
  10bb38:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
  10bb3f:	00 
  10bb40:	89 df                	mov    %ebx,%edi
  10bb42:	ff d1                	call   *%rcx
  10bb44:	44 89 f0             	mov    %r14d,%eax
  10bb47:	5b                   	pop    %rbx
  10bb48:	41 5e                	pop    %r14
  10bb4a:	41 5f                	pop    %r15
  10bb4c:	c3                   	ret    
  10bb4d:	0f 1f 00             	nopl   (%rax)

000000000010bb50 <__sigtramp_r>:
  10bb50:	55                   	push   %rbp
  10bb51:	41 56                	push   %r14
  10bb53:	53                   	push   %rbx
  10bb54:	bd ff ff ff ff       	mov    $0xffffffff,%ebp
  10bb59:	83 fe 1f             	cmp    $0x1f,%esi
  10bb5c:	77 52                	ja     10bbb0 <__sigtramp_r+0x60>
  10bb5e:	89 f3                	mov    %esi,%ebx
  10bb60:	49 89 fe             	mov    %rdi,%r14
  10bb63:	48 8b 87 18 05 00 00 	mov    0x518(%rdi),%rax
  10bb6a:	48 85 c0             	test   %rax,%rax
  10bb6d:	74 1e                	je     10bb8d <__sigtramp_r+0x3d>
  10bb6f:	48 63 d3             	movslq %ebx,%rdx
  10bb72:	48 8b 0c d0          	mov    (%rax,%rdx,8),%rcx
  10bb76:	48 8d 71 01          	lea    0x1(%rcx),%rsi
  10bb7a:	48 83 fe 03          	cmp    $0x3,%rsi
  10bb7e:	73 22                	jae    10bba2 <__sigtramp_r+0x52>
  10bb80:	48 8d 05 f9 5c ff ff 	lea    -0xa307(%rip),%rax        # 101880 <_ZTVN3usb14HIDMouseDriverE+0x50>
  10bb87:	8b 44 88 04          	mov    0x4(%rax,%rcx,4),%eax
  10bb8b:	eb 25                	jmp    10bbb2 <__sigtramp_r+0x62>
  10bb8d:	4c 89 f7             	mov    %r14,%rdi
  10bb90:	e8 eb fc ff ff       	call   10b880 <_init_signal_r>
  10bb95:	85 c0                	test   %eax,%eax
  10bb97:	75 17                	jne    10bbb0 <__sigtramp_r+0x60>
  10bb99:	49 8b 86 18 05 00 00 	mov    0x518(%r14),%rax
  10bba0:	eb cd                	jmp    10bb6f <__sigtramp_r+0x1f>
  10bba2:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
  10bba9:	00 
  10bbaa:	89 df                	mov    %ebx,%edi
  10bbac:	ff d1                	call   *%rcx
  10bbae:	31 ed                	xor    %ebp,%ebp
  10bbb0:	89 e8                	mov    %ebp,%eax
  10bbb2:	5b                   	pop    %rbx
  10bbb3:	41 5e                	pop    %r14
  10bbb5:	5d                   	pop    %rbp
  10bbb6:	c3                   	ret    
  10bbb7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10bbbe:	00 00 

000000000010bbc0 <raise>:
  10bbc0:	41 57                	push   %r15
  10bbc2:	41 56                	push   %r14
  10bbc4:	53                   	push   %rbx
  10bbc5:	48 8b 05 5c b1 00 00 	mov    0xb15c(%rip),%rax        # 116d28 <_global_impure_ptr+0x10>
  10bbcc:	4c 8b 38             	mov    (%rax),%r15
  10bbcf:	83 ff 20             	cmp    $0x20,%edi
  10bbd2:	72 0f                	jb     10bbe3 <raise+0x23>
  10bbd4:	41 c7 07 16 00 00 00 	movl   $0x16,(%r15)
  10bbdb:	41 be ff ff ff ff    	mov    $0xffffffff,%r14d
  10bbe1:	eb 68                	jmp    10bc4b <raise+0x8b>
  10bbe3:	89 fb                	mov    %edi,%ebx
  10bbe5:	49 8b 87 18 05 00 00 	mov    0x518(%r15),%rax
  10bbec:	45 31 f6             	xor    %r14d,%r14d
  10bbef:	48 85 c0             	test   %rax,%rax
  10bbf2:	74 31                	je     10bc25 <raise+0x65>
  10bbf4:	48 63 cb             	movslq %ebx,%rcx
  10bbf7:	48 8b 0c c8          	mov    (%rax,%rcx,8),%rcx
  10bbfb:	48 83 f9 ff          	cmp    $0xffffffffffffffff,%rcx
  10bbff:	74 2c                	je     10bc2d <raise+0x6d>
  10bc01:	48 83 f9 01          	cmp    $0x1,%rcx
  10bc05:	74 44                	je     10bc4b <raise+0x8b>
  10bc07:	48 85 c9             	test   %rcx,%rcx
  10bc0a:	75 30                	jne    10bc3c <raise+0x7c>
  10bc0c:	4c 89 ff             	mov    %r15,%rdi
  10bc0f:	e8 cc 0e 00 00       	call   10cae0 <_getpid_r>
  10bc14:	4c 89 ff             	mov    %r15,%rdi
  10bc17:	89 c6                	mov    %eax,%esi
  10bc19:	89 da                	mov    %ebx,%edx
  10bc1b:	5b                   	pop    %rbx
  10bc1c:	41 5e                	pop    %r14
  10bc1e:	41 5f                	pop    %r15
  10bc20:	e9 7b 0e 00 00       	jmp    10caa0 <_kill_r>
  10bc25:	31 c9                	xor    %ecx,%ecx
  10bc27:	48 83 f9 ff          	cmp    $0xffffffffffffffff,%rcx
  10bc2b:	75 d4                	jne    10bc01 <raise+0x41>
  10bc2d:	41 c7 07 16 00 00 00 	movl   $0x16,(%r15)
  10bc34:	41 be 01 00 00 00    	mov    $0x1,%r14d
  10bc3a:	eb 0f                	jmp    10bc4b <raise+0x8b>
  10bc3c:	48 63 d3             	movslq %ebx,%rdx
  10bc3f:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
  10bc46:	00 
  10bc47:	89 df                	mov    %ebx,%edi
  10bc49:	ff d1                	call   *%rcx
  10bc4b:	44 89 f0             	mov    %r14d,%eax
  10bc4e:	5b                   	pop    %rbx
  10bc4f:	41 5e                	pop    %r14
  10bc51:	41 5f                	pop    %r15
  10bc53:	c3                   	ret    
  10bc54:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10bc5b:	00 00 00 
  10bc5e:	66 90                	xchg   %ax,%ax

000000000010bc60 <signal>:
  10bc60:	55                   	push   %rbp
  10bc61:	41 56                	push   %r14
  10bc63:	53                   	push   %rbx
  10bc64:	48 8b 05 bd b0 00 00 	mov    0xb0bd(%rip),%rax        # 116d28 <_global_impure_ptr+0x10>
  10bc6b:	48 8b 18             	mov    (%rax),%rbx
  10bc6e:	83 ff 20             	cmp    $0x20,%edi
  10bc71:	72 0f                	jb     10bc82 <signal+0x22>
  10bc73:	c7 03 16 00 00 00    	movl   $0x16,(%rbx)
  10bc79:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  10bc80:	eb 33                	jmp    10bcb5 <signal+0x55>
  10bc82:	49 89 f6             	mov    %rsi,%r14
  10bc85:	89 fd                	mov    %edi,%ebp
  10bc87:	48 8b 8b 18 05 00 00 	mov    0x518(%rbx),%rcx
  10bc8e:	48 85 c9             	test   %rcx,%rcx
  10bc91:	74 0d                	je     10bca0 <signal+0x40>
  10bc93:	48 63 d5             	movslq %ebp,%rdx
  10bc96:	48 8b 04 d1          	mov    (%rcx,%rdx,8),%rax
  10bc9a:	4c 89 34 d1          	mov    %r14,(%rcx,%rdx,8)
  10bc9e:	eb 15                	jmp    10bcb5 <signal+0x55>
  10bca0:	48 89 df             	mov    %rbx,%rdi
  10bca3:	e8 d8 fb ff ff       	call   10b880 <_init_signal_r>
  10bca8:	89 c1                	mov    %eax,%ecx
  10bcaa:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  10bcb1:	85 c9                	test   %ecx,%ecx
  10bcb3:	74 05                	je     10bcba <signal+0x5a>
  10bcb5:	5b                   	pop    %rbx
  10bcb6:	41 5e                	pop    %r14
  10bcb8:	5d                   	pop    %rbp
  10bcb9:	c3                   	ret    
  10bcba:	48 8b 8b 18 05 00 00 	mov    0x518(%rbx),%rcx
  10bcc1:	eb d0                	jmp    10bc93 <signal+0x33>
  10bcc3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10bcca:	00 00 00 
  10bccd:	0f 1f 00             	nopl   (%rax)

000000000010bcd0 <_init_signal>:
  10bcd0:	48 8b 05 51 b0 00 00 	mov    0xb051(%rip),%rax        # 116d28 <_global_impure_ptr+0x10>
  10bcd7:	48 8b 38             	mov    (%rax),%rdi
  10bcda:	e9 a1 fb ff ff       	jmp    10b880 <_init_signal_r>
  10bcdf:	90                   	nop

000000000010bce0 <__sigtramp>:
  10bce0:	55                   	push   %rbp
  10bce1:	41 56                	push   %r14
  10bce3:	53                   	push   %rbx
  10bce4:	bd ff ff ff ff       	mov    $0xffffffff,%ebp
  10bce9:	83 ff 1f             	cmp    $0x1f,%edi
  10bcec:	77 59                	ja     10bd47 <__sigtramp+0x67>
  10bcee:	89 fb                	mov    %edi,%ebx
  10bcf0:	48 8b 05 31 b0 00 00 	mov    0xb031(%rip),%rax        # 116d28 <_global_impure_ptr+0x10>
  10bcf7:	4c 8b 30             	mov    (%rax),%r14
  10bcfa:	49 8b 86 18 05 00 00 	mov    0x518(%r14),%rax
  10bd01:	48 85 c0             	test   %rax,%rax
  10bd04:	74 1e                	je     10bd24 <__sigtramp+0x44>
  10bd06:	48 63 d3             	movslq %ebx,%rdx
  10bd09:	48 8b 0c d0          	mov    (%rax,%rdx,8),%rcx
  10bd0d:	48 8d 71 01          	lea    0x1(%rcx),%rsi
  10bd11:	48 83 fe 03          	cmp    $0x3,%rsi
  10bd15:	73 22                	jae    10bd39 <__sigtramp+0x59>
  10bd17:	48 8d 05 62 5b ff ff 	lea    -0xa49e(%rip),%rax        # 101880 <_ZTVN3usb14HIDMouseDriverE+0x50>
  10bd1e:	8b 44 88 04          	mov    0x4(%rax,%rcx,4),%eax
  10bd22:	eb 25                	jmp    10bd49 <__sigtramp+0x69>
  10bd24:	4c 89 f7             	mov    %r14,%rdi
  10bd27:	e8 54 fb ff ff       	call   10b880 <_init_signal_r>
  10bd2c:	85 c0                	test   %eax,%eax
  10bd2e:	75 17                	jne    10bd47 <__sigtramp+0x67>
  10bd30:	49 8b 86 18 05 00 00 	mov    0x518(%r14),%rax
  10bd37:	eb cd                	jmp    10bd06 <__sigtramp+0x26>
  10bd39:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
  10bd40:	00 
  10bd41:	89 df                	mov    %ebx,%edi
  10bd43:	ff d1                	call   *%rcx
  10bd45:	31 ed                	xor    %ebp,%ebp
  10bd47:	89 e8                	mov    %ebp,%eax
  10bd49:	5b                   	pop    %rbx
  10bd4a:	41 5e                	pop    %r14
  10bd4c:	5d                   	pop    %rbp
  10bd4d:	c3                   	ret    
  10bd4e:	cc                   	int3   
  10bd4f:	cc                   	int3   

000000000010bd50 <_malloc_r>:
  10bd50:	55                   	push   %rbp
  10bd51:	41 57                	push   %r15
  10bd53:	41 56                	push   %r14
  10bd55:	41 55                	push   %r13
  10bd57:	41 54                	push   %r12
  10bd59:	53                   	push   %rbx
  10bd5a:	48 83 ec 18          	sub    $0x18,%rsp
  10bd5e:	49 89 fe             	mov    %rdi,%r14
  10bd61:	48 8d 46 17          	lea    0x17(%rsi),%rax
  10bd65:	48 89 c1             	mov    %rax,%rcx
  10bd68:	48 83 e1 f0          	and    $0xfffffffffffffff0,%rcx
  10bd6c:	48 83 f8 2f          	cmp    $0x2f,%rax
  10bd70:	41 bd 20 00 00 00    	mov    $0x20,%r13d
  10bd76:	4c 0f 43 e9          	cmovae %rcx,%r13
  10bd7a:	49 81 fd ff ff ff 7f 	cmp    $0x7fffffff,%r13
  10bd81:	77 69                	ja     10bdec <_malloc_r+0x9c>
  10bd83:	49 39 f5             	cmp    %rsi,%r13
  10bd86:	72 64                	jb     10bdec <_malloc_r+0x9c>
  10bd88:	4c 89 f7             	mov    %r14,%rdi
  10bd8b:	e8 b0 07 00 00       	call   10c540 <__malloc_lock>
  10bd90:	4c 89 e8             	mov    %r13,%rax
  10bd93:	49 81 fd f7 01 00 00 	cmp    $0x1f7,%r13
  10bd9a:	77 5e                	ja     10bdfa <_malloc_r+0xaa>
  10bd9c:	48 c1 e0 1e          	shl    $0x1e,%rax
  10bda0:	48 c1 f8 1d          	sar    $0x1d,%rax
  10bda4:	48 83 c8 10          	or     $0x10,%rax
  10bda8:	48 8b 0d 89 af 00 00 	mov    0xaf89(%rip),%rcx        # 116d38 <_global_impure_ptr+0x20>
  10bdaf:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  10bdb3:	48 83 c2 f0          	add    $0xfffffffffffffff0,%rdx
  10bdb7:	48 8b 5c 01 08       	mov    0x8(%rcx,%rax,1),%rbx
  10bdbc:	48 39 d3             	cmp    %rdx,%rbx
  10bdbf:	74 55                	je     10be16 <_malloc_r+0xc6>
  10bdc1:	48 39 d3             	cmp    %rdx,%rbx
  10bdc4:	74 5f                	je     10be25 <_malloc_r+0xd5>
  10bdc6:	48 8b 43 08          	mov    0x8(%rbx),%rax
  10bdca:	48 8b 4b 10          	mov    0x10(%rbx),%rcx
  10bdce:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
  10bdd2:	48 8b 53 18          	mov    0x18(%rbx),%rdx
  10bdd6:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  10bdda:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
  10bdde:	80 4c 03 08 01       	orb    $0x1,0x8(%rbx,%rax,1)
  10bde3:	48 83 c3 10          	add    $0x10,%rbx
  10bde7:	e9 ad 05 00 00       	jmp    10c399 <_malloc_r+0x649>
  10bdec:	41 c7 06 0c 00 00 00 	movl   $0xc,(%r14)
  10bdf3:	31 db                	xor    %ebx,%ebx
  10bdf5:	e9 22 07 00 00       	jmp    10c51c <_malloc_r+0x7cc>
  10bdfa:	48 c1 e8 09          	shr    $0x9,%rax
  10bdfe:	74 34                	je     10be34 <_malloc_r+0xe4>
  10be00:	49 81 fd ff 09 00 00 	cmp    $0x9ff,%r13
  10be07:	77 34                	ja     10be3d <_malloc_r+0xed>
  10be09:	4c 89 e8             	mov    %r13,%rax
  10be0c:	48 c1 e8 06          	shr    $0x6,%rax
  10be10:	48 83 c0 38          	add    $0x38,%rax
  10be14:	eb 7d                	jmp    10be93 <_malloc_r+0x143>
  10be16:	48 01 c1             	add    %rax,%rcx
  10be19:	48 8b 59 18          	mov    0x18(%rcx),%rbx
  10be1d:	48 89 ca             	mov    %rcx,%rdx
  10be20:	48 39 d3             	cmp    %rdx,%rbx
  10be23:	75 a1                	jne    10bdc6 <_malloc_r+0x76>
  10be25:	4c 89 e8             	mov    %r13,%rax
  10be28:	48 c1 e8 03          	shr    $0x3,%rax
  10be2c:	83 c0 02             	add    $0x2,%eax
  10be2f:	e9 c1 00 00 00       	jmp    10bef5 <_malloc_r+0x1a5>
  10be34:	4c 89 e8             	mov    %r13,%rax
  10be37:	48 c1 e8 03          	shr    $0x3,%rax
  10be3b:	eb 56                	jmp    10be93 <_malloc_r+0x143>
  10be3d:	49 81 fd ff 29 00 00 	cmp    $0x29ff,%r13
  10be44:	77 06                	ja     10be4c <_malloc_r+0xfc>
  10be46:	48 83 c0 5b          	add    $0x5b,%rax
  10be4a:	eb 47                	jmp    10be93 <_malloc_r+0x143>
  10be4c:	49 81 fd ff a9 00 00 	cmp    $0xa9ff,%r13
  10be53:	77 0d                	ja     10be62 <_malloc_r+0x112>
  10be55:	4c 89 e8             	mov    %r13,%rax
  10be58:	48 c1 e8 0c          	shr    $0xc,%rax
  10be5c:	48 83 c0 6e          	add    $0x6e,%rax
  10be60:	eb 31                	jmp    10be93 <_malloc_r+0x143>
  10be62:	49 81 fd ff a9 02 00 	cmp    $0x2a9ff,%r13
  10be69:	77 0d                	ja     10be78 <_malloc_r+0x128>
  10be6b:	4c 89 e8             	mov    %r13,%rax
  10be6e:	48 c1 e8 0f          	shr    $0xf,%rax
  10be72:	48 83 c0 77          	add    $0x77,%rax
  10be76:	eb 1b                	jmp    10be93 <_malloc_r+0x143>
  10be78:	49 81 fd ff a9 0a 00 	cmp    $0xaa9ff,%r13
  10be7f:	77 0d                	ja     10be8e <_malloc_r+0x13e>
  10be81:	4c 89 e8             	mov    %r13,%rax
  10be84:	48 c1 e8 12          	shr    $0x12,%rax
  10be88:	48 83 c0 7c          	add    $0x7c,%rax
  10be8c:	eb 05                	jmp    10be93 <_malloc_r+0x143>
  10be8e:	b8 7e 00 00 00       	mov    $0x7e,%eax
  10be93:	8d 0c 00             	lea    (%rax,%rax,1),%ecx
  10be96:	48 63 c9             	movslq %ecx,%rcx
  10be99:	48 8b 35 98 ae 00 00 	mov    0xae98(%rip),%rsi        # 116d38 <_global_impure_ptr+0x20>
  10bea0:	48 8d 14 ce          	lea    (%rsi,%rcx,8),%rdx
  10bea4:	48 8b 7c ce 18       	mov    0x18(%rsi,%rcx,8),%rdi
  10bea9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  10beb0:	48 39 d7             	cmp    %rdx,%rdi
  10beb3:	74 3d                	je     10bef2 <_malloc_r+0x1a2>
  10beb5:	48 89 f9             	mov    %rdi,%rcx
  10beb8:	48 8b 6f 08          	mov    0x8(%rdi),%rbp
  10bebc:	48 83 e5 fc          	and    $0xfffffffffffffffc,%rbp
  10bec0:	48 89 ee             	mov    %rbp,%rsi
  10bec3:	4c 29 ee             	sub    %r13,%rsi
  10bec6:	48 83 fe 20          	cmp    $0x20,%rsi
  10beca:	7d 23                	jge    10beef <_malloc_r+0x19f>
  10becc:	48 8b 79 18          	mov    0x18(%rcx),%rdi
  10bed0:	48 85 f6             	test   %rsi,%rsi
  10bed3:	78 db                	js     10beb0 <_malloc_r+0x160>
  10bed5:	48 8b 41 10          	mov    0x10(%rcx),%rax
  10bed9:	48 89 78 18          	mov    %rdi,0x18(%rax)
  10bedd:	48 89 47 10          	mov    %rax,0x10(%rdi)
  10bee1:	80 4c 29 08 01       	orb    $0x1,0x8(%rcx,%rbp,1)
  10bee6:	48 8d 59 10          	lea    0x10(%rcx),%rbx
  10beea:	e9 aa 04 00 00       	jmp    10c399 <_malloc_r+0x649>
  10beef:	83 c0 ff             	add    $0xffffffff,%eax
  10bef2:	83 c0 01             	add    $0x1,%eax
  10bef5:	4c 8b 15 3c ae 00 00 	mov    0xae3c(%rip),%r10        # 116d38 <_global_impure_ptr+0x20>
  10befc:	49 8b 5a 20          	mov    0x20(%r10),%rbx
  10bf00:	4d 8d 42 10          	lea    0x10(%r10),%r8
  10bf04:	4c 39 c3             	cmp    %r8,%rbx
  10bf07:	0f 84 af 01 00 00    	je     10c0bc <_malloc_r+0x36c>
  10bf0d:	48 8b 73 08          	mov    0x8(%rbx),%rsi
  10bf11:	48 89 f1             	mov    %rsi,%rcx
  10bf14:	48 83 e1 fc          	and    $0xfffffffffffffffc,%rcx
  10bf18:	48 89 ca             	mov    %rcx,%rdx
  10bf1b:	4c 29 ea             	sub    %r13,%rdx
  10bf1e:	48 83 fa 20          	cmp    $0x20,%rdx
  10bf22:	7c 3d                	jl     10bf61 <_malloc_r+0x211>
  10bf24:	4a 8d 04 2b          	lea    (%rbx,%r13,1),%rax
  10bf28:	4c 89 ee             	mov    %r13,%rsi
  10bf2b:	48 83 ce 01          	or     $0x1,%rsi
  10bf2f:	48 89 73 08          	mov    %rsi,0x8(%rbx)
  10bf33:	49 89 42 28          	mov    %rax,0x28(%r10)
  10bf37:	49 89 42 20          	mov    %rax,0x20(%r10)
  10bf3b:	66 49 0f 6e c0       	movq   %r8,%xmm0
  10bf40:	66 0f 70 c0 44       	pshufd $0x44,%xmm0,%xmm0
  10bf45:	f3 42 0f 7f 44 2b 10 	movdqu %xmm0,0x10(%rbx,%r13,1)
  10bf4c:	48 89 d0             	mov    %rdx,%rax
  10bf4f:	48 83 c8 01          	or     $0x1,%rax
  10bf53:	4a 89 44 2b 08       	mov    %rax,0x8(%rbx,%r13,1)
  10bf58:	48 89 14 0b          	mov    %rdx,(%rbx,%rcx,1)
  10bf5c:	e9 af 05 00 00       	jmp    10c510 <_malloc_r+0x7c0>
  10bf61:	66 49 0f 6e c0       	movq   %r8,%xmm0
  10bf66:	66 0f 70 c0 44       	pshufd $0x44,%xmm0,%xmm0
  10bf6b:	66 41 0f 7f 42 20    	movdqa %xmm0,0x20(%r10)
  10bf71:	48 85 d2             	test   %rdx,%rdx
  10bf74:	78 0a                	js     10bf80 <_malloc_r+0x230>
  10bf76:	80 4c 0b 08 01       	orb    $0x1,0x8(%rbx,%rcx,1)
  10bf7b:	e9 90 05 00 00       	jmp    10c510 <_malloc_r+0x7c0>
  10bf80:	48 81 f9 ff 01 00 00 	cmp    $0x1ff,%rcx
  10bf87:	77 53                	ja     10bfdc <_malloc_r+0x28c>
  10bf89:	48 c1 ee 03          	shr    $0x3,%rsi
  10bf8d:	89 f1                	mov    %esi,%ecx
  10bf8f:	c1 f9 1f             	sar    $0x1f,%ecx
  10bf92:	c1 e9 1e             	shr    $0x1e,%ecx
  10bf95:	01 f1                	add    %esi,%ecx
  10bf97:	c1 e9 02             	shr    $0x2,%ecx
  10bf9a:	ba 01 00 00 00       	mov    $0x1,%edx
  10bf9f:	48 d3 e2             	shl    %cl,%rdx
  10bfa2:	49 09 52 08          	or     %rdx,0x8(%r10)
  10bfa6:	48 c1 e6 21          	shl    $0x21,%rsi
  10bfaa:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
  10bfb1:	00 00 00 
  10bfb4:	48 01 f1             	add    %rsi,%rcx
  10bfb7:	48 c1 f9 1d          	sar    $0x1d,%rcx
  10bfbb:	49 8d 14 0a          	lea    (%r10,%rcx,1),%rdx
  10bfbf:	48 83 c2 f0          	add    $0xfffffffffffffff0,%rdx
  10bfc3:	49 8b 3c 0a          	mov    (%r10,%rcx,1),%rdi
  10bfc7:	48 89 53 18          	mov    %rdx,0x18(%rbx)
  10bfcb:	48 89 7b 10          	mov    %rdi,0x10(%rbx)
  10bfcf:	49 89 1c 0a          	mov    %rbx,(%r10,%rcx,1)
  10bfd3:	48 83 c7 18          	add    $0x18,%rdi
  10bfd7:	e9 dd 00 00 00       	jmp    10c0b9 <_malloc_r+0x369>
  10bfdc:	48 89 f2             	mov    %rsi,%rdx
  10bfdf:	48 c1 ea 09          	shr    $0x9,%rdx
  10bfe3:	74 13                	je     10bff8 <_malloc_r+0x2a8>
  10bfe5:	48 81 fe ff 09 00 00 	cmp    $0x9ff,%rsi
  10bfec:	77 10                	ja     10bffe <_malloc_r+0x2ae>
  10bfee:	48 c1 ee 06          	shr    $0x6,%rsi
  10bff2:	48 83 c6 38          	add    $0x38,%rsi
  10bff6:	eb 56                	jmp    10c04e <_malloc_r+0x2fe>
  10bff8:	48 c1 ee 03          	shr    $0x3,%rsi
  10bffc:	eb 50                	jmp    10c04e <_malloc_r+0x2fe>
  10bffe:	48 81 fe ff 29 00 00 	cmp    $0x29ff,%rsi
  10c005:	77 09                	ja     10c010 <_malloc_r+0x2c0>
  10c007:	48 83 c2 5b          	add    $0x5b,%rdx
  10c00b:	48 89 d6             	mov    %rdx,%rsi
  10c00e:	eb 3e                	jmp    10c04e <_malloc_r+0x2fe>
  10c010:	48 81 fe ff a9 00 00 	cmp    $0xa9ff,%rsi
  10c017:	77 0a                	ja     10c023 <_malloc_r+0x2d3>
  10c019:	48 c1 ee 0c          	shr    $0xc,%rsi
  10c01d:	48 83 c6 6e          	add    $0x6e,%rsi
  10c021:	eb 2b                	jmp    10c04e <_malloc_r+0x2fe>
  10c023:	48 81 fe ff a9 02 00 	cmp    $0x2a9ff,%rsi
  10c02a:	77 0a                	ja     10c036 <_malloc_r+0x2e6>
  10c02c:	48 c1 ee 0f          	shr    $0xf,%rsi
  10c030:	48 83 c6 77          	add    $0x77,%rsi
  10c034:	eb 18                	jmp    10c04e <_malloc_r+0x2fe>
  10c036:	48 81 fe ff a9 0a 00 	cmp    $0xaa9ff,%rsi
  10c03d:	77 0a                	ja     10c049 <_malloc_r+0x2f9>
  10c03f:	48 c1 ee 12          	shr    $0x12,%rsi
  10c043:	48 83 c6 7c          	add    $0x7c,%rsi
  10c047:	eb 05                	jmp    10c04e <_malloc_r+0x2fe>
  10c049:	be 7e 00 00 00       	mov    $0x7e,%esi
  10c04e:	8d 14 36             	lea    (%rsi,%rsi,1),%edx
  10c051:	48 63 fa             	movslq %edx,%rdi
  10c054:	49 8d 2c fa          	lea    (%r10,%rdi,8),%rbp
  10c058:	49 8b 54 fa 10       	mov    0x10(%r10,%rdi,8),%rdx
  10c05d:	48 39 ea             	cmp    %rbp,%rdx
  10c060:	74 23                	je     10c085 <_malloc_r+0x335>
  10c062:	48 8b 72 08          	mov    0x8(%rdx),%rsi
  10c066:	48 83 e6 fc          	and    $0xfffffffffffffffc,%rsi
  10c06a:	48 39 f1             	cmp    %rsi,%rcx
  10c06d:	73 0c                	jae    10c07b <_malloc_r+0x32b>
  10c06f:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  10c073:	48 39 ea             	cmp    %rbp,%rdx
  10c076:	75 ea                	jne    10c062 <_malloc_r+0x312>
  10c078:	48 89 ea             	mov    %rbp,%rdx
  10c07b:	48 8d 7a 18          	lea    0x18(%rdx),%rdi
  10c07f:	48 8b 6a 18          	mov    0x18(%rdx),%rbp
  10c083:	eb 28                	jmp    10c0ad <_malloc_r+0x35d>
  10c085:	49 8d 3c fa          	lea    (%r10,%rdi,8),%rdi
  10c089:	48 83 c7 10          	add    $0x10,%rdi
  10c08d:	89 f1                	mov    %esi,%ecx
  10c08f:	c1 f9 1f             	sar    $0x1f,%ecx
  10c092:	c1 e9 1e             	shr    $0x1e,%ecx
  10c095:	01 f1                	add    %esi,%ecx
  10c097:	c1 e9 02             	shr    $0x2,%ecx
  10c09a:	ba 01 00 00 00       	mov    $0x1,%edx
  10c09f:	48 d3 e2             	shl    %cl,%rdx
  10c0a2:	49 09 52 08          	or     %rdx,0x8(%r10)
  10c0a6:	48 83 c7 08          	add    $0x8,%rdi
  10c0aa:	48 89 ea             	mov    %rbp,%rdx
  10c0ad:	48 89 6b 18          	mov    %rbp,0x18(%rbx)
  10c0b1:	48 89 53 10          	mov    %rdx,0x10(%rbx)
  10c0b5:	48 89 5d 10          	mov    %rbx,0x10(%rbp)
  10c0b9:	48 89 1f             	mov    %rbx,(%rdi)
  10c0bc:	89 c1                	mov    %eax,%ecx
  10c0be:	c1 f9 1f             	sar    $0x1f,%ecx
  10c0c1:	c1 e9 1e             	shr    $0x1e,%ecx
  10c0c4:	01 c1                	add    %eax,%ecx
  10c0c6:	c1 e9 02             	shr    $0x2,%ecx
  10c0c9:	be 01 00 00 00       	mov    $0x1,%esi
  10c0ce:	48 d3 e6             	shl    %cl,%rsi
  10c0d1:	49 8b 4a 08          	mov    0x8(%r10),%rcx
  10c0d5:	48 39 ce             	cmp    %rcx,%rsi
  10c0d8:	0f 86 bb 00 00 00    	jbe    10c199 <_malloc_r+0x449>
  10c0de:	49 8b 5a 10          	mov    0x10(%r10),%rbx
  10c0e2:	48 8b 6b 08          	mov    0x8(%rbx),%rbp
  10c0e6:	48 83 e5 fc          	and    $0xfffffffffffffffc,%rbp
  10c0ea:	48 89 e8             	mov    %rbp,%rax
  10c0ed:	4c 29 e8             	sub    %r13,%rax
  10c0f0:	72 0a                	jb     10c0fc <_malloc_r+0x3ac>
  10c0f2:	48 83 f8 1f          	cmp    $0x1f,%rax
  10c0f6:	0f 8f f8 03 00 00    	jg     10c4f4 <_malloc_r+0x7a4>
  10c0fc:	48 8b 05 5d ac 00 00 	mov    0xac5d(%rip),%rax        # 116d60 <_global_impure_ptr+0x48>
  10c103:	48 8b 00             	mov    (%rax),%rax
  10c106:	4a 8d 0c 28          	lea    (%rax,%r13,1),%rcx
  10c10a:	48 83 c1 20          	add    $0x20,%rcx
  10c10e:	4c 8b 25 43 ac 00 00 	mov    0xac43(%rip),%r12        # 116d58 <_global_impure_ptr+0x40>
  10c115:	4e 8d 3c 28          	lea    (%rax,%r13,1),%r15
  10c119:	49 81 c7 1f 10 00 00 	add    $0x101f,%r15
  10c120:	49 81 e7 00 f0 ff ff 	and    $0xfffffffffffff000,%r15
  10c127:	49 83 3c 24 ff       	cmpq   $0xffffffffffffffff,(%r12)
  10c12c:	4c 0f 44 f9          	cmove  %rcx,%r15
  10c130:	4c 89 f7             	mov    %r14,%rdi
  10c133:	4c 89 fe             	mov    %r15,%rsi
  10c136:	e8 f5 07 00 00       	call   10c930 <_sbrk_r>
  10c13b:	4c 8b 15 f6 ab 00 00 	mov    0xabf6(%rip),%r10        # 116d38 <_global_impure_ptr+0x20>
  10c142:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  10c146:	0f 84 91 03 00 00    	je     10c4dd <_malloc_r+0x78d>
  10c14c:	48 8d 14 2b          	lea    (%rbx,%rbp,1),%rdx
  10c150:	48 3b 1d e1 ab 00 00 	cmp    0xabe1(%rip),%rbx        # 116d38 <_global_impure_ptr+0x20>
  10c157:	74 09                	je     10c162 <_malloc_r+0x412>
  10c159:	48 39 d0             	cmp    %rdx,%rax
  10c15c:	0f 82 7b 03 00 00    	jb     10c4dd <_malloc_r+0x78d>
  10c162:	48 8b 3d d7 ab 00 00 	mov    0xabd7(%rip),%rdi        # 116d40 <_global_impure_ptr+0x28>
  10c169:	8b 0f                	mov    (%rdi),%ecx
  10c16b:	44 01 f9             	add    %r15d,%ecx
  10c16e:	89 0f                	mov    %ecx,(%rdi)
  10c170:	48 39 d0             	cmp    %rdx,%rax
  10c173:	75 0c                	jne    10c181 <_malloc_r+0x431>
  10c175:	f7 c2 ff 0f 00 00    	test   $0xfff,%edx
  10c17b:	0f 84 2c 03 00 00    	je     10c4ad <_malloc_r+0x75d>
  10c181:	49 83 3c 24 ff       	cmpq   $0xffffffffffffffff,(%r12)
  10c186:	0f 84 1a 02 00 00    	je     10c3a6 <_malloc_r+0x656>
  10c18c:	89 c6                	mov    %eax,%esi
  10c18e:	29 d6                	sub    %edx,%esi
  10c190:	01 f1                	add    %esi,%ecx
  10c192:	89 0f                	mov    %ecx,(%rdi)
  10c194:	e9 11 02 00 00       	jmp    10c3aa <_malloc_r+0x65a>
  10c199:	48 85 f1             	test   %rsi,%rcx
  10c19c:	75 21                	jne    10c1bf <_malloc_r+0x46f>
  10c19e:	83 c0 04             	add    $0x4,%eax
  10c1a1:	83 e0 fc             	and    $0xfffffffc,%eax
  10c1a4:	83 c0 fc             	add    $0xfffffffc,%eax
  10c1a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10c1ae:	00 00 
  10c1b0:	48 01 f6             	add    %rsi,%rsi
  10c1b3:	83 c0 04             	add    $0x4,%eax
  10c1b6:	48 85 ce             	test   %rcx,%rsi
  10c1b9:	74 f5                	je     10c1b0 <_malloc_r+0x460>
  10c1bb:	eb 02                	jmp    10c1bf <_malloc_r+0x46f>
  10c1bd:	89 e8                	mov    %ebp,%eax
  10c1bf:	8d 14 00             	lea    (%rax,%rax,1),%edx
  10c1c2:	48 63 d2             	movslq %edx,%rdx
  10c1c5:	4d 8d 0c d2          	lea    (%r10,%rdx,8),%r9
  10c1c9:	49 83 c1 10          	add    $0x10,%r9
  10c1cd:	49 8d 3c d2          	lea    (%r10,%rdx,8),%rdi
  10c1d1:	48 89 fb             	mov    %rdi,%rbx
  10c1d4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10c1db:	00 00 00 
  10c1de:	66 90                	xchg   %ax,%ax
  10c1e0:	48 8b 5b 18          	mov    0x18(%rbx),%rbx
  10c1e4:	48 39 fb             	cmp    %rdi,%rbx
  10c1e7:	74 22                	je     10c20b <_malloc_r+0x4bb>
  10c1e9:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  10c1ed:	48 83 e2 fc          	and    $0xfffffffffffffffc,%rdx
  10c1f1:	48 89 d5             	mov    %rdx,%rbp
  10c1f4:	4c 29 ed             	sub    %r13,%rbp
  10c1f7:	48 83 fd 20          	cmp    $0x20,%rbp
  10c1fb:	0f 8d 31 01 00 00    	jge    10c332 <_malloc_r+0x5e2>
  10c201:	48 85 ed             	test   %rbp,%rbp
  10c204:	78 da                	js     10c1e0 <_malloc_r+0x490>
  10c206:	e9 75 01 00 00       	jmp    10c380 <_malloc_r+0x630>
  10c20b:	8d 68 01             	lea    0x1(%rax),%ebp
  10c20e:	40 f6 c5 03          	test   $0x3,%bpl
  10c212:	0f 84 a7 00 00 00    	je     10c2bf <_malloc_r+0x56f>
  10c218:	4c 89 cb             	mov    %r9,%rbx
  10c21b:	48 8b 5b 18          	mov    0x18(%rbx),%rbx
  10c21f:	4c 39 cb             	cmp    %r9,%rbx
  10c222:	74 22                	je     10c246 <_malloc_r+0x4f6>
  10c224:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  10c228:	48 83 e2 fc          	and    $0xfffffffffffffffc,%rdx
  10c22c:	48 89 d5             	mov    %rdx,%rbp
  10c22f:	4c 29 ed             	sub    %r13,%rbp
  10c232:	48 83 fd 1f          	cmp    $0x1f,%rbp
  10c236:	0f 8f f6 00 00 00    	jg     10c332 <_malloc_r+0x5e2>
  10c23c:	48 85 ed             	test   %rbp,%rbp
  10c23f:	78 da                	js     10c21b <_malloc_r+0x4cb>
  10c241:	e9 3a 01 00 00       	jmp    10c380 <_malloc_r+0x630>
  10c246:	8d 68 02             	lea    0x2(%rax),%ebp
  10c249:	40 f6 c5 03          	test   $0x3,%bpl
  10c24d:	74 70                	je     10c2bf <_malloc_r+0x56f>
  10c24f:	49 8d 79 10          	lea    0x10(%r9),%rdi
  10c253:	48 89 fb             	mov    %rdi,%rbx
  10c256:	48 8b 5b 18          	mov    0x18(%rbx),%rbx
  10c25a:	48 39 fb             	cmp    %rdi,%rbx
  10c25d:	74 22                	je     10c281 <_malloc_r+0x531>
  10c25f:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  10c263:	48 83 e2 fc          	and    $0xfffffffffffffffc,%rdx
  10c267:	48 89 d5             	mov    %rdx,%rbp
  10c26a:	4c 29 ed             	sub    %r13,%rbp
  10c26d:	48 83 fd 1f          	cmp    $0x1f,%rbp
  10c271:	0f 8f bb 00 00 00    	jg     10c332 <_malloc_r+0x5e2>
  10c277:	48 85 ed             	test   %rbp,%rbp
  10c27a:	78 da                	js     10c256 <_malloc_r+0x506>
  10c27c:	e9 ff 00 00 00       	jmp    10c380 <_malloc_r+0x630>
  10c281:	8d 68 03             	lea    0x3(%rax),%ebp
  10c284:	40 f6 c5 03          	test   $0x3,%bpl
  10c288:	74 35                	je     10c2bf <_malloc_r+0x56f>
  10c28a:	49 8d 79 20          	lea    0x20(%r9),%rdi
  10c28e:	48 89 fb             	mov    %rdi,%rbx
  10c291:	48 8b 5b 18          	mov    0x18(%rbx),%rbx
  10c295:	48 39 fb             	cmp    %rdi,%rbx
  10c298:	74 22                	je     10c2bc <_malloc_r+0x56c>
  10c29a:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  10c29e:	48 83 e2 fc          	and    $0xfffffffffffffffc,%rdx
  10c2a2:	48 89 d5             	mov    %rdx,%rbp
  10c2a5:	4c 29 ed             	sub    %r13,%rbp
  10c2a8:	48 83 fd 1f          	cmp    $0x1f,%rbp
  10c2ac:	0f 8f 80 00 00 00    	jg     10c332 <_malloc_r+0x5e2>
  10c2b2:	48 85 ed             	test   %rbp,%rbp
  10c2b5:	78 da                	js     10c291 <_malloc_r+0x541>
  10c2b7:	e9 c4 00 00 00       	jmp    10c380 <_malloc_r+0x630>
  10c2bc:	8d 68 04             	lea    0x4(%rax),%ebp
  10c2bf:	a8 03                	test   $0x3,%al
  10c2c1:	74 35                	je     10c2f8 <_malloc_r+0x5a8>
  10c2c3:	49 8d 51 e0          	lea    -0x20(%r9),%rdx
  10c2c7:	49 39 51 f0          	cmp    %rdx,-0x10(%r9)
  10c2cb:	75 38                	jne    10c305 <_malloc_r+0x5b5>
  10c2cd:	8d 50 ff             	lea    -0x1(%rax),%edx
  10c2d0:	f6 c2 03             	test   $0x3,%dl
  10c2d3:	74 23                	je     10c2f8 <_malloc_r+0x5a8>
  10c2d5:	49 8d 51 d0          	lea    -0x30(%r9),%rdx
  10c2d9:	49 39 51 e0          	cmp    %rdx,-0x20(%r9)
  10c2dd:	75 26                	jne    10c305 <_malloc_r+0x5b5>
  10c2df:	8d 50 02             	lea    0x2(%rax),%edx
  10c2e2:	f6 c2 03             	test   $0x3,%dl
  10c2e5:	74 11                	je     10c2f8 <_malloc_r+0x5a8>
  10c2e7:	49 8d 51 c0          	lea    -0x40(%r9),%rdx
  10c2eb:	49 39 51 d0          	cmp    %rdx,-0x30(%r9)
  10c2ef:	75 14                	jne    10c305 <_malloc_r+0x5b5>
  10c2f1:	83 c0 01             	add    $0x1,%eax
  10c2f4:	a8 03                	test   $0x3,%al
  10c2f6:	75 0d                	jne    10c305 <_malloc_r+0x5b5>
  10c2f8:	48 89 f0             	mov    %rsi,%rax
  10c2fb:	48 f7 d0             	not    %rax
  10c2fe:	48 21 c1             	and    %rax,%rcx
  10c301:	49 89 4a 08          	mov    %rcx,0x8(%r10)
  10c305:	48 01 f6             	add    %rsi,%rsi
  10c308:	0f 84 d0 fd ff ff    	je     10c0de <_malloc_r+0x38e>
  10c30e:	48 39 ce             	cmp    %rcx,%rsi
  10c311:	0f 87 c7 fd ff ff    	ja     10c0de <_malloc_r+0x38e>
  10c317:	89 e8                	mov    %ebp,%eax
  10c319:	48 85 ce             	test   %rcx,%rsi
  10c31c:	0f 85 9d fe ff ff    	jne    10c1bf <_malloc_r+0x46f>
  10c322:	83 c5 04             	add    $0x4,%ebp
  10c325:	48 01 f6             	add    %rsi,%rsi
  10c328:	48 85 ce             	test   %rcx,%rsi
  10c32b:	74 f5                	je     10c322 <_malloc_r+0x5d2>
  10c32d:	e9 8b fe ff ff       	jmp    10c1bd <_malloc_r+0x46d>
  10c332:	4a 8d 04 2b          	lea    (%rbx,%r13,1),%rax
  10c336:	4c 89 e9             	mov    %r13,%rcx
  10c339:	48 83 c9 01          	or     $0x1,%rcx
  10c33d:	48 89 4b 08          	mov    %rcx,0x8(%rbx)
  10c341:	48 8b 4b 10          	mov    0x10(%rbx),%rcx
  10c345:	48 8b 73 18          	mov    0x18(%rbx),%rsi
  10c349:	48 89 71 18          	mov    %rsi,0x18(%rcx)
  10c34d:	48 89 4e 10          	mov    %rcx,0x10(%rsi)
  10c351:	49 89 42 28          	mov    %rax,0x28(%r10)
  10c355:	49 89 42 20          	mov    %rax,0x20(%r10)
  10c359:	66 49 0f 6e c0       	movq   %r8,%xmm0
  10c35e:	66 0f 70 c0 44       	pshufd $0x44,%xmm0,%xmm0
  10c363:	f3 42 0f 7f 44 2b 10 	movdqu %xmm0,0x10(%rbx,%r13,1)
  10c36a:	48 89 e8             	mov    %rbp,%rax
  10c36d:	48 83 c8 01          	or     $0x1,%rax
  10c371:	4a 89 44 2b 08       	mov    %rax,0x8(%rbx,%r13,1)
  10c376:	48 89 2c 13          	mov    %rbp,(%rbx,%rdx,1)
  10c37a:	48 8d 5b 10          	lea    0x10(%rbx),%rbx
  10c37e:	eb 19                	jmp    10c399 <_malloc_r+0x649>
  10c380:	80 4c 13 08 01       	orb    $0x1,0x8(%rbx,%rdx,1)
  10c385:	48 8b 43 10          	mov    0x10(%rbx),%rax
  10c389:	48 8b 4b 18          	mov    0x18(%rbx),%rcx
  10c38d:	48 83 c3 10          	add    $0x10,%rbx
  10c391:	48 89 48 18          	mov    %rcx,0x18(%rax)
  10c395:	48 89 41 10          	mov    %rax,0x10(%rcx)
  10c399:	4c 89 f7             	mov    %r14,%rdi
  10c39c:	e8 af 01 00 00       	call   10c550 <__malloc_unlock>
  10c3a1:	e9 76 01 00 00       	jmp    10c51c <_malloc_r+0x7cc>
  10c3a6:	49 89 04 24          	mov    %rax,(%r12)
  10c3aa:	48 8d 50 10          	lea    0x10(%rax),%rdx
  10c3ae:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  10c3b3:	83 e2 0f             	and    $0xf,%edx
  10c3b6:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  10c3bb:	41 bc 10 00 00 00    	mov    $0x10,%r12d
  10c3c1:	49 29 d4             	sub    %rdx,%r12
  10c3c4:	4a 8d 34 20          	lea    (%rax,%r12,1),%rsi
  10c3c8:	31 c9                	xor    %ecx,%ecx
  10c3ca:	48 85 d2             	test   %rdx,%rdx
  10c3cd:	48 0f 44 f0          	cmove  %rax,%rsi
  10c3d1:	48 89 34 24          	mov    %rsi,(%rsp)
  10c3d5:	44 0f 44 e1          	cmove  %ecx,%r12d
  10c3d9:	49 01 f7             	add    %rsi,%r15
  10c3dc:	45 29 fc             	sub    %r15d,%r12d
  10c3df:	41 81 e4 ff 0f 00 00 	and    $0xfff,%r12d
  10c3e6:	4c 89 f7             	mov    %r14,%rdi
  10c3e9:	4c 89 e6             	mov    %r12,%rsi
  10c3ec:	e8 3f 05 00 00       	call   10c930 <_sbrk_r>
  10c3f1:	48 8b 34 24          	mov    (%rsp),%rsi
  10c3f5:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  10c3f9:	4c 89 f9             	mov    %r15,%rcx
  10c3fc:	48 0f 45 c8          	cmovne %rax,%rcx
  10c400:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  10c405:	48 83 ca f0          	or     $0xfffffffffffffff0,%rdx
  10c409:	4c 01 fa             	add    %r15,%rdx
  10c40c:	48 83 7c 24 08 00    	cmpq   $0x0,0x8(%rsp)
  10c412:	48 0f 44 d1          	cmove  %rcx,%rdx
  10c416:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  10c41a:	48 0f 45 d1          	cmovne %rcx,%rdx
  10c41e:	bf 00 00 00 00       	mov    $0x0,%edi
  10c423:	49 0f 45 fc          	cmovne %r12,%rdi
  10c427:	48 8b 05 12 a9 00 00 	mov    0xa912(%rip),%rax        # 116d40 <_global_impure_ptr+0x28>
  10c42e:	8b 08                	mov    (%rax),%ecx
  10c430:	01 f9                	add    %edi,%ecx
  10c432:	48 29 f7             	sub    %rsi,%rdi
  10c435:	48 01 d7             	add    %rdx,%rdi
  10c438:	48 83 cf 01          	or     $0x1,%rdi
  10c43c:	89 08                	mov    %ecx,(%rax)
  10c43e:	4c 8b 15 f3 a8 00 00 	mov    0xa8f3(%rip),%r10        # 116d38 <_global_impure_ptr+0x20>
  10c445:	49 89 72 10          	mov    %rsi,0x10(%r10)
  10c449:	48 89 7e 08          	mov    %rdi,0x8(%rsi)
  10c44d:	4c 39 d3             	cmp    %r10,%rbx
  10c450:	74 6a                	je     10c4bc <_malloc_r+0x76c>
  10c452:	48 83 fd 1f          	cmp    $0x1f,%rbp
  10c456:	77 0a                	ja     10c462 <_malloc_r+0x712>
  10c458:	48 c7 46 08 01 00 00 	movq   $0x1,0x8(%rsi)
  10c45f:	00 
  10c460:	eb 7b                	jmp    10c4dd <_malloc_r+0x78d>
  10c462:	48 89 c2             	mov    %rax,%rdx
  10c465:	48 83 c5 e8          	add    $0xffffffffffffffe8,%rbp
  10c469:	48 83 e5 f0          	and    $0xfffffffffffffff0,%rbp
  10c46d:	48 8b 43 08          	mov    0x8(%rbx),%rax
  10c471:	83 e0 01             	and    $0x1,%eax
  10c474:	48 09 e8             	or     %rbp,%rax
  10c477:	48 89 43 08          	mov    %rax,0x8(%rbx)
  10c47b:	66 0f 6f 05 1d 3d ff 	movdqa -0xc2e3(%rip),%xmm0        # 1001a0 <__dso_handle+0x1a0>
  10c482:	ff 
  10c483:	f3 0f 7f 44 2b 08    	movdqu %xmm0,0x8(%rbx,%rbp,1)
  10c489:	48 83 fd 20          	cmp    $0x20,%rbp
  10c48d:	72 2d                	jb     10c4bc <_malloc_r+0x76c>
  10c48f:	48 83 c3 10          	add    $0x10,%rbx
  10c493:	48 89 d5             	mov    %rdx,%rbp
  10c496:	4c 89 f7             	mov    %r14,%rdi
  10c499:	48 89 de             	mov    %rbx,%rsi
  10c49c:	e8 bf 00 00 00       	call   10c560 <_free_r>
  10c4a1:	4c 8b 15 90 a8 00 00 	mov    0xa890(%rip),%r10        # 116d38 <_global_impure_ptr+0x20>
  10c4a8:	8b 4d 00             	mov    0x0(%rbp),%ecx
  10c4ab:	eb 0f                	jmp    10c4bc <_malloc_r+0x76c>
  10c4ad:	49 01 ef             	add    %rbp,%r15
  10c4b0:	49 83 cf 01          	or     $0x1,%r15
  10c4b4:	49 8b 42 10          	mov    0x10(%r10),%rax
  10c4b8:	4c 89 78 08          	mov    %r15,0x8(%rax)
  10c4bc:	48 63 c1             	movslq %ecx,%rax
  10c4bf:	48 8b 0d 82 a8 00 00 	mov    0xa882(%rip),%rcx        # 116d48 <_global_impure_ptr+0x30>
  10c4c6:	48 39 01             	cmp    %rax,(%rcx)
  10c4c9:	73 03                	jae    10c4ce <_malloc_r+0x77e>
  10c4cb:	48 89 01             	mov    %rax,(%rcx)
  10c4ce:	48 8b 0d 7b a8 00 00 	mov    0xa87b(%rip),%rcx        # 116d50 <_global_impure_ptr+0x38>
  10c4d5:	48 39 01             	cmp    %rax,(%rcx)
  10c4d8:	73 03                	jae    10c4dd <_malloc_r+0x78d>
  10c4da:	48 89 01             	mov    %rax,(%rcx)
  10c4dd:	49 8b 5a 10          	mov    0x10(%r10),%rbx
  10c4e1:	48 8b 43 08          	mov    0x8(%rbx),%rax
  10c4e5:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
  10c4e9:	4c 29 e8             	sub    %r13,%rax
  10c4ec:	72 40                	jb     10c52e <_malloc_r+0x7de>
  10c4ee:	48 83 f8 1f          	cmp    $0x1f,%rax
  10c4f2:	7e 3a                	jle    10c52e <_malloc_r+0x7de>
  10c4f4:	4c 89 e9             	mov    %r13,%rcx
  10c4f7:	48 83 c9 01          	or     $0x1,%rcx
  10c4fb:	48 89 4b 08          	mov    %rcx,0x8(%rbx)
  10c4ff:	4a 8d 0c 2b          	lea    (%rbx,%r13,1),%rcx
  10c503:	49 89 4a 10          	mov    %rcx,0x10(%r10)
  10c507:	48 83 c8 01          	or     $0x1,%rax
  10c50b:	4a 89 44 2b 08       	mov    %rax,0x8(%rbx,%r13,1)
  10c510:	4c 89 f7             	mov    %r14,%rdi
  10c513:	e8 38 00 00 00       	call   10c550 <__malloc_unlock>
  10c518:	48 83 c3 10          	add    $0x10,%rbx
  10c51c:	48 89 d8             	mov    %rbx,%rax
  10c51f:	48 83 c4 18          	add    $0x18,%rsp
  10c523:	5b                   	pop    %rbx
  10c524:	41 5c                	pop    %r12
  10c526:	41 5d                	pop    %r13
  10c528:	41 5e                	pop    %r14
  10c52a:	41 5f                	pop    %r15
  10c52c:	5d                   	pop    %rbp
  10c52d:	c3                   	ret    
  10c52e:	4c 89 f7             	mov    %r14,%rdi
  10c531:	e8 1a 00 00 00       	call   10c550 <__malloc_unlock>
  10c536:	31 db                	xor    %ebx,%ebx
  10c538:	eb e2                	jmp    10c51c <_malloc_r+0x7cc>
  10c53a:	cc                   	int3   
  10c53b:	cc                   	int3   
  10c53c:	cc                   	int3   
  10c53d:	cc                   	int3   
  10c53e:	cc                   	int3   
  10c53f:	cc                   	int3   

000000000010c540 <__malloc_lock>:
  10c540:	c3                   	ret    
  10c541:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10c548:	00 00 00 
  10c54b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000010c550 <__malloc_unlock>:
  10c550:	c3                   	ret    
  10c551:	cc                   	int3   
  10c552:	cc                   	int3   
  10c553:	cc                   	int3   
  10c554:	cc                   	int3   
  10c555:	cc                   	int3   
  10c556:	cc                   	int3   
  10c557:	cc                   	int3   
  10c558:	cc                   	int3   
  10c559:	cc                   	int3   
  10c55a:	cc                   	int3   
  10c55b:	cc                   	int3   
  10c55c:	cc                   	int3   
  10c55d:	cc                   	int3   
  10c55e:	cc                   	int3   
  10c55f:	cc                   	int3   

000000000010c560 <_free_r>:
  10c560:	41 56                	push   %r14
  10c562:	53                   	push   %rbx
  10c563:	50                   	push   %rax
  10c564:	48 85 f6             	test   %rsi,%rsi
  10c567:	0f 84 c2 00 00 00    	je     10c62f <_free_r+0xcf>
  10c56d:	48 89 f3             	mov    %rsi,%rbx
  10c570:	49 89 fe             	mov    %rdi,%r14
  10c573:	e8 c8 ff ff ff       	call   10c540 <__malloc_lock>
  10c578:	48 8b 73 f8          	mov    -0x8(%rbx),%rsi
  10c57c:	48 89 f2             	mov    %rsi,%rdx
  10c57f:	48 83 e2 fe          	and    $0xfffffffffffffffe,%rdx
  10c583:	48 8d 3c 13          	lea    (%rbx,%rdx,1),%rdi
  10c587:	48 83 c7 f0          	add    $0xfffffffffffffff0,%rdi
  10c58b:	48 8b 4c 13 f8       	mov    -0x8(%rbx,%rdx,1),%rcx
  10c590:	48 8d 43 f0          	lea    -0x10(%rbx),%rax
  10c594:	48 83 e1 fc          	and    $0xfffffffffffffffc,%rcx
  10c598:	4c 8b 05 99 a7 00 00 	mov    0xa799(%rip),%r8        # 116d38 <_global_impure_ptr+0x20>
  10c59f:	49 39 78 10          	cmp    %rdi,0x10(%r8)
  10c5a3:	0f 84 8e 00 00 00    	je     10c637 <_free_r+0xd7>
  10c5a9:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  10c5ad:	45 31 c9             	xor    %r9d,%r9d
  10c5b0:	40 f6 c6 01          	test   $0x1,%sil
  10c5b4:	75 26                	jne    10c5dc <_free_r+0x7c>
  10c5b6:	48 8b 30             	mov    (%rax),%rsi
  10c5b9:	48 29 f0             	sub    %rsi,%rax
  10c5bc:	48 01 f2             	add    %rsi,%rdx
  10c5bf:	48 8b 70 10          	mov    0x10(%rax),%rsi
  10c5c3:	49 8d 58 10          	lea    0x10(%r8),%rbx
  10c5c7:	48 39 de             	cmp    %rbx,%rsi
  10c5ca:	0f 84 cd 00 00 00    	je     10c69d <_free_r+0x13d>
  10c5d0:	48 8b 58 18          	mov    0x18(%rax),%rbx
  10c5d4:	48 89 5e 18          	mov    %rbx,0x18(%rsi)
  10c5d8:	48 89 73 10          	mov    %rsi,0x10(%rbx)
  10c5dc:	f6 44 0f 08 01       	testb  $0x1,0x8(%rdi,%rcx,1)
  10c5e1:	0f 85 c7 00 00 00    	jne    10c6ae <_free_r+0x14e>
  10c5e7:	48 01 ca             	add    %rcx,%rdx
  10c5ea:	48 8b 4f 10          	mov    0x10(%rdi),%rcx
  10c5ee:	45 85 c9             	test   %r9d,%r9d
  10c5f1:	0f 85 98 00 00 00    	jne    10c68f <_free_r+0x12f>
  10c5f7:	49 8d 70 10          	lea    0x10(%r8),%rsi
  10c5fb:	48 39 f1             	cmp    %rsi,%rcx
  10c5fe:	0f 85 8b 00 00 00    	jne    10c68f <_free_r+0x12f>
  10c604:	49 89 40 28          	mov    %rax,0x28(%r8)
  10c608:	49 89 40 20          	mov    %rax,0x20(%r8)
  10c60c:	66 48 0f 6e c6       	movq   %rsi,%xmm0
  10c611:	66 0f 70 c0 44       	pshufd $0x44,%xmm0,%xmm0
  10c616:	f3 0f 7f 40 10       	movdqu %xmm0,0x10(%rax)
  10c61b:	48 89 d1             	mov    %rdx,%rcx
  10c61e:	48 83 c9 01          	or     $0x1,%rcx
  10c622:	48 89 48 08          	mov    %rcx,0x8(%rax)
  10c626:	48 89 14 10          	mov    %rdx,(%rax,%rdx,1)
  10c62a:	e9 eb 01 00 00       	jmp    10c81a <_free_r+0x2ba>
  10c62f:	48 83 c4 08          	add    $0x8,%rsp
  10c633:	5b                   	pop    %rbx
  10c634:	41 5e                	pop    %r14
  10c636:	c3                   	ret    
  10c637:	48 01 d1             	add    %rdx,%rcx
  10c63a:	40 f6 c6 01          	test   $0x1,%sil
  10c63e:	75 19                	jne    10c659 <_free_r+0xf9>
  10c640:	48 8b 10             	mov    (%rax),%rdx
  10c643:	48 29 d0             	sub    %rdx,%rax
  10c646:	48 01 d1             	add    %rdx,%rcx
  10c649:	48 8b 50 10          	mov    0x10(%rax),%rdx
  10c64d:	48 8b 70 18          	mov    0x18(%rax),%rsi
  10c651:	48 89 72 18          	mov    %rsi,0x18(%rdx)
  10c655:	48 89 56 10          	mov    %rdx,0x10(%rsi)
  10c659:	48 89 ca             	mov    %rcx,%rdx
  10c65c:	48 83 ca 01          	or     $0x1,%rdx
  10c660:	48 89 50 08          	mov    %rdx,0x8(%rax)
  10c664:	49 89 40 10          	mov    %rax,0x10(%r8)
  10c668:	48 8b 05 f9 a6 00 00 	mov    0xa6f9(%rip),%rax        # 116d68 <_global_impure_ptr+0x50>
  10c66f:	48 3b 08             	cmp    (%rax),%rcx
  10c672:	0f 82 a2 01 00 00    	jb     10c81a <_free_r+0x2ba>
  10c678:	48 8b 05 e1 a6 00 00 	mov    0xa6e1(%rip),%rax        # 116d60 <_global_impure_ptr+0x48>
  10c67f:	48 8b 30             	mov    (%rax),%rsi
  10c682:	4c 89 f7             	mov    %r14,%rdi
  10c685:	e8 a6 01 00 00       	call   10c830 <_malloc_trim_r>
  10c68a:	e9 8b 01 00 00       	jmp    10c81a <_free_r+0x2ba>
  10c68f:	48 8b 77 18          	mov    0x18(%rdi),%rsi
  10c693:	48 89 71 18          	mov    %rsi,0x18(%rcx)
  10c697:	48 89 4e 10          	mov    %rcx,0x10(%rsi)
  10c69b:	eb 11                	jmp    10c6ae <_free_r+0x14e>
  10c69d:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  10c6a3:	f6 44 0f 08 01       	testb  $0x1,0x8(%rdi,%rcx,1)
  10c6a8:	0f 84 39 ff ff ff    	je     10c5e7 <_free_r+0x87>
  10c6ae:	48 89 d1             	mov    %rdx,%rcx
  10c6b1:	48 83 c9 01          	or     $0x1,%rcx
  10c6b5:	48 89 48 08          	mov    %rcx,0x8(%rax)
  10c6b9:	48 89 14 10          	mov    %rdx,(%rax,%rdx,1)
  10c6bd:	45 85 c9             	test   %r9d,%r9d
  10c6c0:	0f 85 54 01 00 00    	jne    10c81a <_free_r+0x2ba>
  10c6c6:	48 81 fa ff 01 00 00 	cmp    $0x1ff,%rdx
  10c6cd:	77 53                	ja     10c722 <_free_r+0x1c2>
  10c6cf:	48 c1 ea 03          	shr    $0x3,%rdx
  10c6d3:	89 d1                	mov    %edx,%ecx
  10c6d5:	c1 f9 1f             	sar    $0x1f,%ecx
  10c6d8:	c1 e9 1e             	shr    $0x1e,%ecx
  10c6db:	01 d1                	add    %edx,%ecx
  10c6dd:	c1 e9 02             	shr    $0x2,%ecx
  10c6e0:	be 01 00 00 00       	mov    $0x1,%esi
  10c6e5:	48 d3 e6             	shl    %cl,%rsi
  10c6e8:	49 09 70 08          	or     %rsi,0x8(%r8)
  10c6ec:	48 c1 e2 21          	shl    $0x21,%rdx
  10c6f0:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
  10c6f7:	00 00 00 
  10c6fa:	48 01 d1             	add    %rdx,%rcx
  10c6fd:	48 c1 f9 1d          	sar    $0x1d,%rcx
  10c701:	49 8d 14 08          	lea    (%r8,%rcx,1),%rdx
  10c705:	48 83 c2 f0          	add    $0xfffffffffffffff0,%rdx
  10c709:	49 8b 34 08          	mov    (%r8,%rcx,1),%rsi
  10c70d:	48 89 50 18          	mov    %rdx,0x18(%rax)
  10c711:	48 89 70 10          	mov    %rsi,0x10(%rax)
  10c715:	49 89 04 08          	mov    %rax,(%r8,%rcx,1)
  10c719:	48 89 46 18          	mov    %rax,0x18(%rsi)
  10c71d:	e9 f8 00 00 00       	jmp    10c81a <_free_r+0x2ba>
  10c722:	48 89 d7             	mov    %rdx,%rdi
  10c725:	48 c1 ef 09          	shr    $0x9,%rdi
  10c729:	74 16                	je     10c741 <_free_r+0x1e1>
  10c72b:	48 81 fa ff 09 00 00 	cmp    $0x9ff,%rdx
  10c732:	77 16                	ja     10c74a <_free_r+0x1ea>
  10c734:	48 89 d7             	mov    %rdx,%rdi
  10c737:	48 c1 ef 06          	shr    $0x6,%rdi
  10c73b:	48 83 c7 38          	add    $0x38,%rdi
  10c73f:	eb 5f                	jmp    10c7a0 <_free_r+0x240>
  10c741:	48 89 d7             	mov    %rdx,%rdi
  10c744:	48 c1 ef 03          	shr    $0x3,%rdi
  10c748:	eb 56                	jmp    10c7a0 <_free_r+0x240>
  10c74a:	48 81 fa ff 29 00 00 	cmp    $0x29ff,%rdx
  10c751:	77 06                	ja     10c759 <_free_r+0x1f9>
  10c753:	48 83 c7 5b          	add    $0x5b,%rdi
  10c757:	eb 47                	jmp    10c7a0 <_free_r+0x240>
  10c759:	48 81 fa ff a9 00 00 	cmp    $0xa9ff,%rdx
  10c760:	77 0d                	ja     10c76f <_free_r+0x20f>
  10c762:	48 89 d7             	mov    %rdx,%rdi
  10c765:	48 c1 ef 0c          	shr    $0xc,%rdi
  10c769:	48 83 c7 6e          	add    $0x6e,%rdi
  10c76d:	eb 31                	jmp    10c7a0 <_free_r+0x240>
  10c76f:	48 81 fa ff a9 02 00 	cmp    $0x2a9ff,%rdx
  10c776:	77 0d                	ja     10c785 <_free_r+0x225>
  10c778:	48 89 d7             	mov    %rdx,%rdi
  10c77b:	48 c1 ef 0f          	shr    $0xf,%rdi
  10c77f:	48 83 c7 77          	add    $0x77,%rdi
  10c783:	eb 1b                	jmp    10c7a0 <_free_r+0x240>
  10c785:	48 81 fa ff a9 0a 00 	cmp    $0xaa9ff,%rdx
  10c78c:	77 0d                	ja     10c79b <_free_r+0x23b>
  10c78e:	48 89 d7             	mov    %rdx,%rdi
  10c791:	48 c1 ef 12          	shr    $0x12,%rdi
  10c795:	48 83 c7 7c          	add    $0x7c,%rdi
  10c799:	eb 05                	jmp    10c7a0 <_free_r+0x240>
  10c79b:	bf 7e 00 00 00       	mov    $0x7e,%edi
  10c7a0:	8d 0c 3f             	lea    (%rdi,%rdi,1),%ecx
  10c7a3:	48 63 f1             	movslq %ecx,%rsi
  10c7a6:	49 8d 1c f0          	lea    (%r8,%rsi,8),%rbx
  10c7aa:	49 8b 4c f0 10       	mov    0x10(%r8,%rsi,8),%rcx
  10c7af:	48 39 d9             	cmp    %rbx,%rcx
  10c7b2:	74 2f                	je     10c7e3 <_free_r+0x283>
  10c7b4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10c7bb:	00 00 00 
  10c7be:	66 90                	xchg   %ax,%ax
  10c7c0:	48 8b 71 08          	mov    0x8(%rcx),%rsi
  10c7c4:	48 83 e6 fc          	and    $0xfffffffffffffffc,%rsi
  10c7c8:	48 39 f2             	cmp    %rsi,%rdx
  10c7cb:	73 0c                	jae    10c7d9 <_free_r+0x279>
  10c7cd:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  10c7d1:	48 39 d9             	cmp    %rbx,%rcx
  10c7d4:	75 ea                	jne    10c7c0 <_free_r+0x260>
  10c7d6:	48 89 d9             	mov    %rbx,%rcx
  10c7d9:	48 8d 71 18          	lea    0x18(%rcx),%rsi
  10c7dd:	48 8b 59 18          	mov    0x18(%rcx),%rbx
  10c7e1:	eb 28                	jmp    10c80b <_free_r+0x2ab>
  10c7e3:	49 8d 34 f0          	lea    (%r8,%rsi,8),%rsi
  10c7e7:	48 83 c6 10          	add    $0x10,%rsi
  10c7eb:	89 f9                	mov    %edi,%ecx
  10c7ed:	c1 f9 1f             	sar    $0x1f,%ecx
  10c7f0:	c1 e9 1e             	shr    $0x1e,%ecx
  10c7f3:	01 f9                	add    %edi,%ecx
  10c7f5:	c1 e9 02             	shr    $0x2,%ecx
  10c7f8:	ba 01 00 00 00       	mov    $0x1,%edx
  10c7fd:	48 d3 e2             	shl    %cl,%rdx
  10c800:	49 09 50 08          	or     %rdx,0x8(%r8)
  10c804:	48 83 c6 08          	add    $0x8,%rsi
  10c808:	48 89 d9             	mov    %rbx,%rcx
  10c80b:	48 89 58 18          	mov    %rbx,0x18(%rax)
  10c80f:	48 89 48 10          	mov    %rcx,0x10(%rax)
  10c813:	48 89 43 10          	mov    %rax,0x10(%rbx)
  10c817:	48 89 06             	mov    %rax,(%rsi)
  10c81a:	4c 89 f7             	mov    %r14,%rdi
  10c81d:	48 83 c4 08          	add    $0x8,%rsp
  10c821:	5b                   	pop    %rbx
  10c822:	41 5e                	pop    %r14
  10c824:	e9 27 fd ff ff       	jmp    10c550 <__malloc_unlock>
  10c829:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000010c830 <_malloc_trim_r>:
  10c830:	41 57                	push   %r15
  10c832:	41 56                	push   %r14
  10c834:	41 55                	push   %r13
  10c836:	41 54                	push   %r12
  10c838:	53                   	push   %rbx
  10c839:	49 89 f6             	mov    %rsi,%r14
  10c83c:	49 89 ff             	mov    %rdi,%r15
  10c83f:	e8 fc fc ff ff       	call   10c540 <__malloc_lock>
  10c844:	4c 8b 25 ed a4 00 00 	mov    0xa4ed(%rip),%r12        # 116d38 <_global_impure_ptr+0x20>
  10c84b:	49 8b 44 24 10       	mov    0x10(%r12),%rax
  10c850:	4c 8b 68 08          	mov    0x8(%rax),%r13
  10c854:	49 83 e5 fc          	and    $0xfffffffffffffffc,%r13
  10c858:	48 c7 c3 df ff ff ff 	mov    $0xffffffffffffffdf,%rbx
  10c85f:	4c 29 f3             	sub    %r14,%rbx
  10c862:	4c 01 eb             	add    %r13,%rbx
  10c865:	48 81 e3 00 f0 ff ff 	and    $0xfffffffffffff000,%rbx
  10c86c:	48 81 fb ff 0f 00 00 	cmp    $0xfff,%rbx
  10c873:	7f 0d                	jg     10c882 <_malloc_trim_r+0x52>
  10c875:	4c 89 ff             	mov    %r15,%rdi
  10c878:	e8 d3 fc ff ff       	call   10c550 <__malloc_unlock>
  10c87d:	45 31 f6             	xor    %r14d,%r14d
  10c880:	eb 5f                	jmp    10c8e1 <_malloc_trim_r+0xb1>
  10c882:	45 31 f6             	xor    %r14d,%r14d
  10c885:	31 f6                	xor    %esi,%esi
  10c887:	4c 89 ff             	mov    %r15,%rdi
  10c88a:	e8 a1 00 00 00       	call   10c930 <_sbrk_r>
  10c88f:	49 8b 4c 24 10       	mov    0x10(%r12),%rcx
  10c894:	4c 01 e9             	add    %r13,%rcx
  10c897:	48 39 c8             	cmp    %rcx,%rax
  10c89a:	74 0a                	je     10c8a6 <_malloc_trim_r+0x76>
  10c89c:	4c 89 ff             	mov    %r15,%rdi
  10c89f:	e8 ac fc ff ff       	call   10c550 <__malloc_unlock>
  10c8a4:	eb 3b                	jmp    10c8e1 <_malloc_trim_r+0xb1>
  10c8a6:	48 89 de             	mov    %rbx,%rsi
  10c8a9:	48 f7 de             	neg    %rsi
  10c8ac:	4c 89 ff             	mov    %r15,%rdi
  10c8af:	e8 7c 00 00 00       	call   10c930 <_sbrk_r>
  10c8b4:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  10c8b8:	74 34                	je     10c8ee <_malloc_trim_r+0xbe>
  10c8ba:	49 29 dd             	sub    %rbx,%r13
  10c8bd:	49 83 cd 01          	or     $0x1,%r13
  10c8c1:	49 8b 44 24 10       	mov    0x10(%r12),%rax
  10c8c6:	4c 89 68 08          	mov    %r13,0x8(%rax)
  10c8ca:	48 8b 05 6f a4 00 00 	mov    0xa46f(%rip),%rax        # 116d40 <_global_impure_ptr+0x28>
  10c8d1:	29 18                	sub    %ebx,(%rax)
  10c8d3:	4c 89 ff             	mov    %r15,%rdi
  10c8d6:	e8 75 fc ff ff       	call   10c550 <__malloc_unlock>
  10c8db:	41 be 01 00 00 00    	mov    $0x1,%r14d
  10c8e1:	44 89 f0             	mov    %r14d,%eax
  10c8e4:	5b                   	pop    %rbx
  10c8e5:	41 5c                	pop    %r12
  10c8e7:	41 5d                	pop    %r13
  10c8e9:	41 5e                	pop    %r14
  10c8eb:	41 5f                	pop    %r15
  10c8ed:	c3                   	ret    
  10c8ee:	45 31 f6             	xor    %r14d,%r14d
  10c8f1:	31 f6                	xor    %esi,%esi
  10c8f3:	4c 89 ff             	mov    %r15,%rdi
  10c8f6:	e8 35 00 00 00       	call   10c930 <_sbrk_r>
  10c8fb:	49 8b 4c 24 10       	mov    0x10(%r12),%rcx
  10c900:	48 89 c2             	mov    %rax,%rdx
  10c903:	48 29 ca             	sub    %rcx,%rdx
  10c906:	48 83 fa 20          	cmp    $0x20,%rdx
  10c90a:	7c 90                	jl     10c89c <_malloc_trim_r+0x6c>
  10c90c:	48 8b 35 45 a4 00 00 	mov    0xa445(%rip),%rsi        # 116d58 <_global_impure_ptr+0x40>
  10c913:	2b 06                	sub    (%rsi),%eax
  10c915:	48 8b 35 24 a4 00 00 	mov    0xa424(%rip),%rsi        # 116d40 <_global_impure_ptr+0x28>
  10c91c:	89 06                	mov    %eax,(%rsi)
  10c91e:	48 83 ca 01          	or     $0x1,%rdx
  10c922:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  10c926:	e9 71 ff ff ff       	jmp    10c89c <_malloc_trim_r+0x6c>
  10c92b:	cc                   	int3   
  10c92c:	cc                   	int3   
  10c92d:	cc                   	int3   
  10c92e:	cc                   	int3   
  10c92f:	cc                   	int3   

000000000010c930 <_sbrk_r>:
  10c930:	41 56                	push   %r14
  10c932:	53                   	push   %rbx
  10c933:	50                   	push   %rax
  10c934:	49 89 fe             	mov    %rdi,%r14
  10c937:	48 8b 1d 42 a4 00 00 	mov    0xa442(%rip),%rbx        # 116d80 <_global_impure_ptr+0x68>
  10c93e:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
  10c944:	48 89 f7             	mov    %rsi,%rdi
  10c947:	e8 b4 88 ff ff       	call   105200 <sbrk>
  10c94c:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  10c950:	75 09                	jne    10c95b <_sbrk_r+0x2b>
  10c952:	8b 0b                	mov    (%rbx),%ecx
  10c954:	85 c9                	test   %ecx,%ecx
  10c956:	74 03                	je     10c95b <_sbrk_r+0x2b>
  10c958:	41 89 0e             	mov    %ecx,(%r14)
  10c95b:	48 83 c4 08          	add    $0x8,%rsp
  10c95f:	5b                   	pop    %rbx
  10c960:	41 5e                	pop    %r14
  10c962:	c3                   	ret    
  10c963:	cc                   	int3   
  10c964:	cc                   	int3   
  10c965:	cc                   	int3   
  10c966:	cc                   	int3   
  10c967:	cc                   	int3   
  10c968:	cc                   	int3   
  10c969:	cc                   	int3   
  10c96a:	cc                   	int3   
  10c96b:	cc                   	int3   
  10c96c:	cc                   	int3   
  10c96d:	cc                   	int3   
  10c96e:	cc                   	int3   
  10c96f:	cc                   	int3   

000000000010c970 <cleanup_glue>:
  10c970:	41 56                	push   %r14
  10c972:	53                   	push   %rbx
  10c973:	50                   	push   %rax
  10c974:	48 89 f3             	mov    %rsi,%rbx
  10c977:	49 89 fe             	mov    %rdi,%r14
  10c97a:	48 8b 36             	mov    (%rsi),%rsi
  10c97d:	48 85 f6             	test   %rsi,%rsi
  10c980:	74 08                	je     10c98a <cleanup_glue+0x1a>
  10c982:	4c 89 f7             	mov    %r14,%rdi
  10c985:	e8 e6 ff ff ff       	call   10c970 <cleanup_glue>
  10c98a:	4c 89 f7             	mov    %r14,%rdi
  10c98d:	48 89 de             	mov    %rbx,%rsi
  10c990:	48 83 c4 08          	add    $0x8,%rsp
  10c994:	5b                   	pop    %rbx
  10c995:	41 5e                	pop    %r14
  10c997:	e9 c4 fb ff ff       	jmp    10c560 <_free_r>
  10c99c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000010c9a0 <_reclaim_reent>:
  10c9a0:	41 57                	push   %r15
  10c9a2:	41 56                	push   %r14
  10c9a4:	53                   	push   %rbx
  10c9a5:	48 8b 05 7c a3 00 00 	mov    0xa37c(%rip),%rax        # 116d28 <_global_impure_ptr+0x10>
  10c9ac:	48 39 38             	cmp    %rdi,(%rax)
  10c9af:	0f 84 d9 00 00 00    	je     10ca8e <_reclaim_reent+0xee>
  10c9b5:	49 89 ff             	mov    %rdi,%r15
  10c9b8:	48 8b 47 78          	mov    0x78(%rdi),%rax
  10c9bc:	48 85 c0             	test   %rax,%rax
  10c9bf:	74 48                	je     10ca09 <_reclaim_reent+0x69>
  10c9c1:	45 31 f6             	xor    %r14d,%r14d
  10c9c4:	eb 0e                	jmp    10c9d4 <_reclaim_reent+0x34>
  10c9c6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10c9cd:	00 00 00 
  10c9d0:	49 8b 47 78          	mov    0x78(%r15),%rax
  10c9d4:	4a 8b 34 f0          	mov    (%rax,%r14,8),%rsi
  10c9d8:	48 85 f6             	test   %rsi,%rsi
  10c9db:	74 16                	je     10c9f3 <_reclaim_reent+0x53>
  10c9dd:	0f 1f 00             	nopl   (%rax)
  10c9e0:	48 8b 1e             	mov    (%rsi),%rbx
  10c9e3:	4c 89 ff             	mov    %r15,%rdi
  10c9e6:	e8 75 fb ff ff       	call   10c560 <_free_r>
  10c9eb:	48 89 de             	mov    %rbx,%rsi
  10c9ee:	48 85 db             	test   %rbx,%rbx
  10c9f1:	75 ed                	jne    10c9e0 <_reclaim_reent+0x40>
  10c9f3:	49 83 c6 01          	add    $0x1,%r14
  10c9f7:	49 83 fe 40          	cmp    $0x40,%r14
  10c9fb:	75 d3                	jne    10c9d0 <_reclaim_reent+0x30>
  10c9fd:	49 8b 77 78          	mov    0x78(%r15),%rsi
  10ca01:	4c 89 ff             	mov    %r15,%rdi
  10ca04:	e8 57 fb ff ff       	call   10c560 <_free_r>
  10ca09:	49 8b 77 60          	mov    0x60(%r15),%rsi
  10ca0d:	48 85 f6             	test   %rsi,%rsi
  10ca10:	74 08                	je     10ca1a <_reclaim_reent+0x7a>
  10ca12:	4c 89 ff             	mov    %r15,%rdi
  10ca15:	e8 46 fb ff ff       	call   10c560 <_free_r>
  10ca1a:	49 8b b7 f8 01 00 00 	mov    0x1f8(%r15),%rsi
  10ca21:	48 85 f6             	test   %rsi,%rsi
  10ca24:	74 2d                	je     10ca53 <_reclaim_reent+0xb3>
  10ca26:	4d 8d b7 00 02 00 00 	lea    0x200(%r15),%r14
  10ca2d:	4c 39 f6             	cmp    %r14,%rsi
  10ca30:	74 21                	je     10ca53 <_reclaim_reent+0xb3>
  10ca32:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10ca39:	00 00 00 
  10ca3c:	0f 1f 40 00          	nopl   0x0(%rax)
  10ca40:	48 8b 1e             	mov    (%rsi),%rbx
  10ca43:	4c 89 ff             	mov    %r15,%rdi
  10ca46:	e8 15 fb ff ff       	call   10c560 <_free_r>
  10ca4b:	48 89 de             	mov    %rbx,%rsi
  10ca4e:	4c 39 f3             	cmp    %r14,%rbx
  10ca51:	75 ed                	jne    10ca40 <_reclaim_reent+0xa0>
  10ca53:	49 8b b7 88 00 00 00 	mov    0x88(%r15),%rsi
  10ca5a:	48 85 f6             	test   %rsi,%rsi
  10ca5d:	74 08                	je     10ca67 <_reclaim_reent+0xc7>
  10ca5f:	4c 89 ff             	mov    %r15,%rdi
  10ca62:	e8 f9 fa ff ff       	call   10c560 <_free_r>
  10ca67:	41 83 7f 50 00       	cmpl   $0x0,0x50(%r15)
  10ca6c:	74 20                	je     10ca8e <_reclaim_reent+0xee>
  10ca6e:	4c 89 ff             	mov    %r15,%rdi
  10ca71:	41 ff 57 58          	call   *0x58(%r15)
  10ca75:	49 8b b7 20 05 00 00 	mov    0x520(%r15),%rsi
  10ca7c:	48 85 f6             	test   %rsi,%rsi
  10ca7f:	74 0d                	je     10ca8e <_reclaim_reent+0xee>
  10ca81:	4c 89 ff             	mov    %r15,%rdi
  10ca84:	5b                   	pop    %rbx
  10ca85:	41 5e                	pop    %r14
  10ca87:	41 5f                	pop    %r15
  10ca89:	e9 e2 fe ff ff       	jmp    10c970 <cleanup_glue>
  10ca8e:	5b                   	pop    %rbx
  10ca8f:	41 5e                	pop    %r14
  10ca91:	41 5f                	pop    %r15
  10ca93:	c3                   	ret    
  10ca94:	cc                   	int3   
  10ca95:	cc                   	int3   
  10ca96:	cc                   	int3   
  10ca97:	cc                   	int3   
  10ca98:	cc                   	int3   
  10ca99:	cc                   	int3   
  10ca9a:	cc                   	int3   
  10ca9b:	cc                   	int3   
  10ca9c:	cc                   	int3   
  10ca9d:	cc                   	int3   
  10ca9e:	cc                   	int3   
  10ca9f:	cc                   	int3   

000000000010caa0 <_kill_r>:
  10caa0:	41 56                	push   %r14
  10caa2:	53                   	push   %rbx
  10caa3:	50                   	push   %rax
  10caa4:	49 89 fe             	mov    %rdi,%r14
  10caa7:	48 8b 1d d2 a2 00 00 	mov    0xa2d2(%rip),%rbx        # 116d80 <_global_impure_ptr+0x68>
  10caae:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
  10cab4:	89 f7                	mov    %esi,%edi
  10cab6:	89 d6                	mov    %edx,%esi
  10cab8:	e8 73 87 ff ff       	call   105230 <kill>
  10cabd:	83 f8 ff             	cmp    $0xffffffff,%eax
  10cac0:	75 09                	jne    10cacb <_kill_r+0x2b>
  10cac2:	8b 0b                	mov    (%rbx),%ecx
  10cac4:	85 c9                	test   %ecx,%ecx
  10cac6:	74 03                	je     10cacb <_kill_r+0x2b>
  10cac8:	41 89 0e             	mov    %ecx,(%r14)
  10cacb:	48 83 c4 08          	add    $0x8,%rsp
  10cacf:	5b                   	pop    %rbx
  10cad0:	41 5e                	pop    %r14
  10cad2:	c3                   	ret    
  10cad3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10cada:	00 00 00 
  10cadd:	0f 1f 00             	nopl   (%rax)

000000000010cae0 <_getpid_r>:
  10cae0:	e9 3b 87 ff ff       	jmp    105220 <getpid>
  10cae5:	cc                   	int3   
  10cae6:	cc                   	int3   
  10cae7:	cc                   	int3   
  10cae8:	cc                   	int3   
  10cae9:	cc                   	int3   
  10caea:	cc                   	int3   
  10caeb:	cc                   	int3   
  10caec:	cc                   	int3   
  10caed:	cc                   	int3   
  10caee:	cc                   	int3   
  10caef:	cc                   	int3   

000000000010caf0 <vsprintf>:
  10caf0:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  10caf7:	48 89 d0             	mov    %rdx,%rax
  10cafa:	48 89 f1             	mov    %rsi,%rcx
  10cafd:	48 8b 15 24 a2 00 00 	mov    0xa224(%rip),%rdx        # 116d28 <_global_impure_ptr+0x10>
  10cb04:	48 8b 12             	mov    (%rdx),%rdx
  10cb07:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  10cb0c:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  10cb11:	48 be ff ff ff 7f 08 	movabs $0xffff02087fffffff,%rsi
  10cb18:	02 ff ff 
  10cb1b:	48 89 74 24 14       	mov    %rsi,0x14(%rsp)
  10cb20:	c7 44 24 28 ff ff ff 	movl   $0x7fffffff,0x28(%rsp)
  10cb27:	7f 
  10cb28:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  10cb2d:	48 89 d7             	mov    %rdx,%rdi
  10cb30:	48 89 ca             	mov    %rcx,%rdx
  10cb33:	48 89 c1             	mov    %rax,%rcx
  10cb36:	e8 65 00 00 00       	call   10cba0 <_svfprintf_r>
  10cb3b:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  10cb40:	c6 01 00             	movb   $0x0,(%rcx)
  10cb43:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  10cb4a:	c3                   	ret    
  10cb4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000010cb50 <_vsprintf_r>:
  10cb50:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  10cb57:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  10cb5c:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  10cb61:	48 b8 ff ff ff 7f 08 	movabs $0xffff02087fffffff,%rax
  10cb68:	02 ff ff 
  10cb6b:	48 89 44 24 14       	mov    %rax,0x14(%rsp)
  10cb70:	c7 44 24 28 ff ff ff 	movl   $0x7fffffff,0x28(%rsp)
  10cb77:	7f 
  10cb78:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  10cb7d:	e8 1e 00 00 00       	call   10cba0 <_svfprintf_r>
  10cb82:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  10cb87:	c6 01 00             	movb   $0x0,(%rcx)
  10cb8a:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  10cb91:	c3                   	ret    
  10cb92:	cc                   	int3   
  10cb93:	cc                   	int3   
  10cb94:	cc                   	int3   
  10cb95:	cc                   	int3   
  10cb96:	cc                   	int3   
  10cb97:	cc                   	int3   
  10cb98:	cc                   	int3   
  10cb99:	cc                   	int3   
  10cb9a:	cc                   	int3   
  10cb9b:	cc                   	int3   
  10cb9c:	cc                   	int3   
  10cb9d:	cc                   	int3   
  10cb9e:	cc                   	int3   
  10cb9f:	cc                   	int3   

000000000010cba0 <_svfprintf_r>:
  10cba0:	55                   	push   %rbp
  10cba1:	41 57                	push   %r15
  10cba3:	41 56                	push   %r14
  10cba5:	41 55                	push   %r13
  10cba7:	41 54                	push   %r12
  10cba9:	53                   	push   %rbx
  10cbaa:	48 81 ec a8 01 00 00 	sub    $0x1a8,%rsp
  10cbb1:	49 89 ce             	mov    %rcx,%r14
  10cbb4:	48 89 d5             	mov    %rdx,%rbp
  10cbb7:	49 89 f4             	mov    %rsi,%r12
  10cbba:	48 89 fb             	mov    %rdi,%rbx
  10cbbd:	e8 ee 6b 00 00       	call   1137b0 <_localeconv_r>
  10cbc2:	48 8b 38             	mov    (%rax),%rdi
  10cbc5:	48 89 bc 24 d0 00 00 	mov    %rdi,0xd0(%rsp)
  10cbcc:	00 
  10cbcd:	e8 ee 3a 00 00       	call   1106c0 <strlen>
  10cbd2:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  10cbd9:	00 
  10cbda:	41 80 7c 24 10 00    	cmpb   $0x0,0x10(%r12)
  10cbe0:	79 30                	jns    10cc12 <_svfprintf_r+0x72>
  10cbe2:	49 83 7c 24 18 00    	cmpq   $0x0,0x18(%r12)
  10cbe8:	75 28                	jne    10cc12 <_svfprintf_r+0x72>
  10cbea:	be 40 00 00 00       	mov    $0x40,%esi
  10cbef:	48 89 df             	mov    %rbx,%rdi
  10cbf2:	e8 59 f1 ff ff       	call   10bd50 <_malloc_r>
  10cbf7:	49 89 04 24          	mov    %rax,(%r12)
  10cbfb:	49 89 44 24 18       	mov    %rax,0x18(%r12)
  10cc00:	48 85 c0             	test   %rax,%rax
  10cc03:	0f 84 8d 21 00 00    	je     10ed96 <_svfprintf_r+0x21f6>
  10cc09:	41 c7 44 24 20 40 00 	movl   $0x40,0x20(%r12)
  10cc10:	00 00 
  10cc12:	48 89 5c 24 30       	mov    %rbx,0x30(%rsp)
  10cc17:	4c 8d bc 24 20 01 00 	lea    0x120(%rsp),%r15
  10cc1e:	00 
  10cc1f:	4c 89 7c 24 18       	mov    %r15,0x18(%rsp)
  10cc24:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  10cc2b:	00 00 
  10cc2d:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%rsp)
  10cc34:	00 
  10cc35:	4c 89 74 24 48       	mov    %r14,0x48(%rsp)
  10cc3a:	49 8d 46 08          	lea    0x8(%r14),%rax
  10cc3e:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  10cc43:	66 0f ef d2          	pxor   %xmm2,%xmm2
  10cc47:	b8 00 00 00 00       	mov    $0x0,%eax
  10cc4c:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  10cc53:	00 
  10cc54:	31 db                	xor    %ebx,%ebx
  10cc56:	31 c0                	xor    %eax,%eax
  10cc58:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  10cc5f:	00 
  10cc60:	31 c0                	xor    %eax,%eax
  10cc62:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  10cc69:	00 
  10cc6a:	4c 89 64 24 08       	mov    %r12,0x8(%rsp)
  10cc6f:	eb 20                	jmp    10cc91 <_svfprintf_r+0xf1>
  10cc71:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10cc78:	00 00 00 
  10cc7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10cc80:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%rsp)
  10cc87:	00 
  10cc88:	66 0f 6f 94 24 80 00 	movdqa 0x80(%rsp),%xmm2
  10cc8f:	00 00 
  10cc91:	41 89 dd             	mov    %ebx,%r13d
  10cc94:	4d 89 fe             	mov    %r15,%r14
  10cc97:	eb 27                	jmp    10ccc0 <_svfprintf_r+0x120>
  10cc99:	49 89 fc             	mov    %rdi,%r12
  10cc9c:	48 8b 09             	mov    (%rcx),%rcx
  10cc9f:	48 89 01             	mov    %rax,(%rcx)
  10cca2:	eb 1c                	jmp    10ccc0 <_svfprintf_r+0x120>
  10cca4:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  10cca9:	48 8b 0e             	mov    (%rsi),%rcx
  10ccac:	48 8d 51 08          	lea    0x8(%rcx),%rdx
  10ccb0:	48 89 16             	mov    %rdx,(%rsi)
  10ccb3:	eb e4                	jmp    10cc99 <_svfprintf_r+0xf9>
  10ccb5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10ccbc:	00 00 00 
  10ccbf:	90                   	nop
  10ccc0:	48 89 eb             	mov    %rbp,%rbx
  10ccc3:	eb 0f                	jmp    10ccd4 <_svfprintf_r+0x134>
  10ccc5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10cccc:	00 00 00 
  10cccf:	90                   	nop
  10ccd0:	48 83 c3 01          	add    $0x1,%rbx
  10ccd4:	0f b6 03             	movzbl (%rbx),%eax
  10ccd7:	84 c0                	test   %al,%al
  10ccd9:	74 04                	je     10ccdf <_svfprintf_r+0x13f>
  10ccdb:	3c 25                	cmp    $0x25,%al
  10ccdd:	75 f1                	jne    10ccd0 <_svfprintf_r+0x130>
  10ccdf:	49 89 df             	mov    %rbx,%r15
  10cce2:	49 29 ef             	sub    %rbp,%r15
  10cce5:	45 85 ff             	test   %r15d,%r15d
  10cce8:	74 56                	je     10cd40 <_svfprintf_r+0x1a0>
  10ccea:	49 89 2e             	mov    %rbp,(%r14)
  10cced:	49 63 c7             	movslq %r15d,%rax
  10ccf0:	49 89 46 08          	mov    %rax,0x8(%r14)
  10ccf4:	48 01 44 24 28       	add    %rax,0x28(%rsp)
  10ccf9:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10ccfd:	8d 48 01             	lea    0x1(%rax),%ecx
  10cd00:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10cd04:	83 f8 07             	cmp    $0x7,%eax
  10cd07:	7c 57                	jl     10cd60 <_svfprintf_r+0x1c0>
  10cd09:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10cd0e:	4c 89 e6             	mov    %r12,%rsi
  10cd11:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10cd16:	66 0f 7f 94 24 80 00 	movdqa %xmm2,0x80(%rsp)
  10cd1d:	00 00 
  10cd1f:	e8 fc 20 00 00       	call   10ee20 <__ssprint_r>
  10cd24:	66 0f 6f 94 24 80 00 	movdqa 0x80(%rsp),%xmm2
  10cd2b:	00 00 
  10cd2d:	4c 8d b4 24 20 01 00 	lea    0x120(%rsp),%r14
  10cd34:	00 
  10cd35:	85 c0                	test   %eax,%eax
  10cd37:	74 2b                	je     10cd64 <_svfprintf_r+0x1c4>
  10cd39:	e9 2f 20 00 00       	jmp    10ed6d <_svfprintf_r+0x21cd>
  10cd3e:	66 90                	xchg   %ax,%ax
  10cd40:	4c 89 e7             	mov    %r12,%rdi
  10cd43:	44 89 6c 24 38       	mov    %r13d,0x38(%rsp)
  10cd48:	84 c0                	test   %al,%al
  10cd4a:	75 2d                	jne    10cd79 <_svfprintf_r+0x1d9>
  10cd4c:	e9 e7 1f 00 00       	jmp    10ed38 <_svfprintf_r+0x2198>
  10cd51:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10cd58:	00 00 00 
  10cd5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10cd60:	49 83 c6 10          	add    $0x10,%r14
  10cd64:	4c 89 e7             	mov    %r12,%rdi
  10cd67:	45 01 fd             	add    %r15d,%r13d
  10cd6a:	44 89 6c 24 38       	mov    %r13d,0x38(%rsp)
  10cd6f:	8a 03                	mov    (%rbx),%al
  10cd71:	84 c0                	test   %al,%al
  10cd73:	0f 84 bf 1f 00 00    	je     10ed38 <_svfprintf_r+0x2198>
  10cd79:	48 83 c3 01          	add    $0x1,%rbx
  10cd7d:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
  10cd82:	41 bd ff ff ff ff    	mov    $0xffffffff,%r13d
  10cd88:	31 c0                	xor    %eax,%eax
  10cd8a:	45 31 e4             	xor    %r12d,%r12d
  10cd8d:	48 89 dd             	mov    %rbx,%rbp
  10cd90:	31 db                	xor    %ebx,%ebx
  10cd92:	eb 1c                	jmp    10cdb0 <_svfprintf_r+0x210>
  10cd94:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10cd9b:	00 00 00 
  10cd9e:	66 90                	xchg   %ax,%ax
  10cda0:	44 8b 29             	mov    (%rcx),%r13d
  10cda3:	41 83 fd fe          	cmp    $0xfffffffe,%r13d
  10cda7:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  10cdac:	44 0f 4e e9          	cmovle %ecx,%r13d
  10cdb0:	8a 4d 00             	mov    0x0(%rbp),%cl
  10cdb3:	48 83 c5 01          	add    $0x1,%rbp
  10cdb7:	eb 27                	jmp    10cde0 <_svfprintf_r+0x240>
  10cdb9:	31 db                	xor    %ebx,%ebx
  10cdbb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10cdc0:	8d 0c 9b             	lea    (%rbx,%rbx,4),%ecx
  10cdc3:	41 8d 1c 4f          	lea    (%r15,%rcx,2),%ebx
  10cdc7:	83 c3 d0             	add    $0xffffffd0,%ebx
  10cdca:	0f b6 4d 00          	movzbl 0x0(%rbp),%ecx
  10cdce:	48 83 c5 01          	add    $0x1,%rbp
  10cdd2:	44 0f be f9          	movsbl %cl,%r15d
  10cdd6:	41 8d 57 d0          	lea    -0x30(%r15),%edx
  10cdda:	83 fa 0a             	cmp    $0xa,%edx
  10cddd:	72 e1                	jb     10cdc0 <_svfprintf_r+0x220>
  10cddf:	90                   	nop
  10cde0:	44 0f be f9          	movsbl %cl,%r15d
  10cde4:	eb 0d                	jmp    10cdf3 <_svfprintf_r+0x253>
  10cde6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10cded:	00 00 00 
  10cdf0:	41 89 cd             	mov    %ecx,%r13d
  10cdf3:	41 83 ff 2e          	cmp    $0x2e,%r15d
  10cdf7:	75 57                	jne    10ce50 <_svfprintf_r+0x2b0>
  10cdf9:	44 0f be 7d 00       	movsbl 0x0(%rbp),%r15d
  10cdfe:	48 83 c5 01          	add    $0x1,%rbp
  10ce02:	41 83 ff 2a          	cmp    $0x2a,%r15d
  10ce06:	74 78                	je     10ce80 <_svfprintf_r+0x2e0>
  10ce08:	41 8d 57 d0          	lea    -0x30(%r15),%edx
  10ce0c:	31 c9                	xor    %ecx,%ecx
  10ce0e:	83 fa 09             	cmp    $0x9,%edx
  10ce11:	77 dd                	ja     10cdf0 <_svfprintf_r+0x250>
  10ce13:	31 c9                	xor    %ecx,%ecx
  10ce15:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10ce1c:	00 00 00 
  10ce1f:	90                   	nop
  10ce20:	8d 0c 89             	lea    (%rcx,%rcx,4),%ecx
  10ce23:	8d 0c 4a             	lea    (%rdx,%rcx,2),%ecx
  10ce26:	44 0f be 7d 00       	movsbl 0x0(%rbp),%r15d
  10ce2b:	48 83 c5 01          	add    $0x1,%rbp
  10ce2f:	41 8d 57 d0          	lea    -0x30(%r15),%edx
  10ce33:	83 fa 0a             	cmp    $0xa,%edx
  10ce36:	72 e8                	jb     10ce20 <_svfprintf_r+0x280>
  10ce38:	41 bd ff ff ff ff    	mov    $0xffffffff,%r13d
  10ce3e:	85 c9                	test   %ecx,%ecx
  10ce40:	78 b1                	js     10cdf3 <_svfprintf_r+0x253>
  10ce42:	eb ac                	jmp    10cdf0 <_svfprintf_r+0x250>
  10ce44:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10ce4b:	00 00 00 
  10ce4e:	66 90                	xchg   %ax,%ax
  10ce50:	41 83 ff 78          	cmp    $0x78,%r15d
  10ce54:	0f 87 25 05 00 00    	ja     10d37f <_svfprintf_r+0x7df>
  10ce5a:	44 89 f9             	mov    %r15d,%ecx
  10ce5d:	48 8d 15 8c 4a ff ff 	lea    -0xb574(%rip),%rdx        # 1018f0 <_ZTVN3usb14HIDMouseDriverE+0xc0>
  10ce64:	48 63 0c 8a          	movslq (%rdx,%rcx,4),%rcx
  10ce68:	48 01 d1             	add    %rdx,%rcx
  10ce6b:	ff e1                	jmp    *%rcx
  10ce6d:	41 83 cc 10          	or     $0x10,%r12d
  10ce71:	e9 3a ff ff ff       	jmp    10cdb0 <_svfprintf_r+0x210>
  10ce76:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10ce7d:	00 00 00 
  10ce80:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  10ce85:	48 63 16             	movslq (%rsi),%rdx
  10ce88:	48 83 fa 28          	cmp    $0x28,%rdx
  10ce8c:	77 12                	ja     10cea0 <_svfprintf_r+0x300>
  10ce8e:	48 89 d1             	mov    %rdx,%rcx
  10ce91:	48 03 4e 10          	add    0x10(%rsi),%rcx
  10ce95:	8d 52 08             	lea    0x8(%rdx),%edx
  10ce98:	89 16                	mov    %edx,(%rsi)
  10ce9a:	e9 01 ff ff ff       	jmp    10cda0 <_svfprintf_r+0x200>
  10ce9f:	90                   	nop
  10cea0:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  10cea5:	48 8b 0e             	mov    (%rsi),%rcx
  10cea8:	48 8d 51 08          	lea    0x8(%rcx),%rdx
  10ceac:	48 89 16             	mov    %rdx,(%rsi)
  10ceaf:	e9 ec fe ff ff       	jmp    10cda0 <_svfprintf_r+0x200>
  10ceb4:	84 c0                	test   %al,%al
  10ceb6:	0f 85 f4 fe ff ff    	jne    10cdb0 <_svfprintf_r+0x210>
  10cebc:	c6 44 24 07 20       	movb   $0x20,0x7(%rsp)
  10cec1:	b0 20                	mov    $0x20,%al
  10cec3:	e9 e8 fe ff ff       	jmp    10cdb0 <_svfprintf_r+0x210>
  10cec8:	41 83 cc 01          	or     $0x1,%r12d
  10cecc:	e9 df fe ff ff       	jmp    10cdb0 <_svfprintf_r+0x210>
  10ced1:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  10ced6:	48 63 16             	movslq (%rsi),%rdx
  10ced9:	48 83 fa 28          	cmp    $0x28,%rdx
  10cedd:	77 38                	ja     10cf17 <_svfprintf_r+0x377>
  10cedf:	48 89 d1             	mov    %rdx,%rcx
  10cee2:	48 03 4e 10          	add    0x10(%rsi),%rcx
  10cee6:	8d 52 08             	lea    0x8(%rdx),%edx
  10cee9:	89 16                	mov    %edx,(%rsi)
  10ceeb:	eb 39                	jmp    10cf26 <_svfprintf_r+0x386>
  10ceed:	c6 44 24 07 2b       	movb   $0x2b,0x7(%rsp)
  10cef2:	b0 2b                	mov    $0x2b,%al
  10cef4:	e9 b7 fe ff ff       	jmp    10cdb0 <_svfprintf_r+0x210>
  10cef9:	41 81 cc 80 00 00 00 	or     $0x80,%r12d
  10cf00:	e9 ab fe ff ff       	jmp    10cdb0 <_svfprintf_r+0x210>
  10cf05:	41 83 cc 08          	or     $0x8,%r12d
  10cf09:	e9 a2 fe ff ff       	jmp    10cdb0 <_svfprintf_r+0x210>
  10cf0e:	41 83 cc 40          	or     $0x40,%r12d
  10cf12:	e9 99 fe ff ff       	jmp    10cdb0 <_svfprintf_r+0x210>
  10cf17:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  10cf1c:	48 8b 0e             	mov    (%rsi),%rcx
  10cf1f:	48 8d 51 08          	lea    0x8(%rcx),%rdx
  10cf23:	48 89 16             	mov    %rdx,(%rsi)
  10cf26:	8b 19                	mov    (%rcx),%ebx
  10cf28:	85 db                	test   %ebx,%ebx
  10cf2a:	0f 89 80 fe ff ff    	jns    10cdb0 <_svfprintf_r+0x210>
  10cf30:	f7 db                	neg    %ebx
  10cf32:	41 83 cc 04          	or     $0x4,%r12d
  10cf36:	e9 75 fe ff ff       	jmp    10cdb0 <_svfprintf_r+0x210>
  10cf3b:	41 f6 c4 10          	test   $0x10,%r12b
  10cf3f:	75 2a                	jne    10cf6b <_svfprintf_r+0x3cb>
  10cf41:	41 f6 c4 40          	test   $0x40,%r12b
  10cf45:	44 8b 6c 24 38       	mov    0x38(%rsp),%r13d
  10cf4a:	75 4a                	jne    10cf96 <_svfprintf_r+0x3f6>
  10cf4c:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  10cf51:	48 63 0a             	movslq (%rdx),%rcx
  10cf54:	48 83 f9 28          	cmp    $0x28,%rcx
  10cf58:	49 89 fc             	mov    %rdi,%r12
  10cf5b:	77 58                	ja     10cfb5 <_svfprintf_r+0x415>
  10cf5d:	48 89 c8             	mov    %rcx,%rax
  10cf60:	48 03 42 10          	add    0x10(%rdx),%rax
  10cf64:	8d 49 08             	lea    0x8(%rcx),%ecx
  10cf67:	89 0a                	mov    %ecx,(%rdx)
  10cf69:	eb 59                	jmp    10cfc4 <_svfprintf_r+0x424>
  10cf6b:	44 8b 6c 24 38       	mov    0x38(%rsp),%r13d
  10cf70:	49 63 c5             	movslq %r13d,%rax
  10cf73:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  10cf78:	48 63 16             	movslq (%rsi),%rdx
  10cf7b:	48 83 fa 28          	cmp    $0x28,%rdx
  10cf7f:	0f 87 1f fd ff ff    	ja     10cca4 <_svfprintf_r+0x104>
  10cf85:	48 89 d1             	mov    %rdx,%rcx
  10cf88:	48 03 4e 10          	add    0x10(%rsi),%rcx
  10cf8c:	8d 52 08             	lea    0x8(%rdx),%edx
  10cf8f:	89 16                	mov    %edx,(%rsi)
  10cf91:	e9 03 fd ff ff       	jmp    10cc99 <_svfprintf_r+0xf9>
  10cf96:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  10cf9b:	48 63 0a             	movslq (%rdx),%rcx
  10cf9e:	48 83 f9 28          	cmp    $0x28,%rcx
  10cfa2:	49 89 fc             	mov    %rdi,%r12
  10cfa5:	77 28                	ja     10cfcf <_svfprintf_r+0x42f>
  10cfa7:	48 89 c8             	mov    %rcx,%rax
  10cfaa:	48 03 42 10          	add    0x10(%rdx),%rax
  10cfae:	8d 49 08             	lea    0x8(%rcx),%ecx
  10cfb1:	89 0a                	mov    %ecx,(%rdx)
  10cfb3:	eb 29                	jmp    10cfde <_svfprintf_r+0x43e>
  10cfb5:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  10cfba:	48 8b 02             	mov    (%rdx),%rax
  10cfbd:	48 8d 48 08          	lea    0x8(%rax),%rcx
  10cfc1:	48 89 0a             	mov    %rcx,(%rdx)
  10cfc4:	48 8b 00             	mov    (%rax),%rax
  10cfc7:	44 89 28             	mov    %r13d,(%rax)
  10cfca:	e9 f1 fc ff ff       	jmp    10ccc0 <_svfprintf_r+0x120>
  10cfcf:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  10cfd4:	48 8b 02             	mov    (%rdx),%rax
  10cfd7:	48 8d 48 08          	lea    0x8(%rax),%rcx
  10cfdb:	48 89 0a             	mov    %rcx,(%rdx)
  10cfde:	48 8b 00             	mov    (%rax),%rax
  10cfe1:	66 44 89 28          	mov    %r13w,(%rax)
  10cfe5:	e9 d6 fc ff ff       	jmp    10ccc0 <_svfprintf_r+0x120>
  10cfea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10cff0:	41 f6 c4 08          	test   $0x8,%r12b
  10cff4:	75 21                	jne    10d017 <_svfprintf_r+0x477>
  10cff6:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  10cffb:	48 63 4a 04          	movslq 0x4(%rdx),%rcx
  10cfff:	48 81 f9 a0 00 00 00 	cmp    $0xa0,%rcx
  10d006:	77 3a                	ja     10d042 <_svfprintf_r+0x4a2>
  10d008:	48 89 c8             	mov    %rcx,%rax
  10d00b:	48 03 42 10          	add    0x10(%rdx),%rax
  10d00f:	8d 49 10             	lea    0x10(%rcx),%ecx
  10d012:	89 4a 04             	mov    %ecx,0x4(%rdx)
  10d015:	eb 3a                	jmp    10d051 <_svfprintf_r+0x4b1>
  10d017:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  10d01c:	48 8b 02             	mov    (%rdx),%rax
  10d01f:	48 83 c0 0f          	add    $0xf,%rax
  10d023:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  10d027:	48 8d 48 10          	lea    0x10(%rax),%rcx
  10d02b:	48 89 0a             	mov    %rcx,(%rdx)
  10d02e:	db 28                	fldt   (%rax)
  10d030:	dd 9c 24 10 01 00 00 	fstpl  0x110(%rsp)
  10d037:	f3 0f 7e 84 24 10 01 	movq   0x110(%rsp),%xmm0
  10d03e:	00 00 
  10d040:	eb 13                	jmp    10d055 <_svfprintf_r+0x4b5>
  10d042:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  10d047:	48 8b 02             	mov    (%rdx),%rax
  10d04a:	48 8d 48 08          	lea    0x8(%rax),%rcx
  10d04e:	48 89 0a             	mov    %rcx,(%rdx)
  10d051:	f3 0f 7e 00          	movq   (%rax),%xmm0
  10d055:	66 0f 7f 84 24 80 00 	movdqa %xmm0,0x80(%rsp)
  10d05c:	00 00 
  10d05e:	e8 4d 1d 00 00       	call   10edb0 <__fpclassifyd>
  10d063:	83 f8 01             	cmp    $0x1,%eax
  10d066:	75 33                	jne    10d09b <_svfprintf_r+0x4fb>
  10d068:	66 0f ef c0          	pxor   %xmm0,%xmm0
  10d06c:	66 0f 6f 8c 24 80 00 	movdqa 0x80(%rsp),%xmm1
  10d073:	00 00 
  10d075:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  10d079:	66 0f 6f d1          	movdqa %xmm1,%xmm2
  10d07d:	76 05                	jbe    10d084 <_svfprintf_r+0x4e4>
  10d07f:	c6 44 24 07 2d       	movb   $0x2d,0x7(%rsp)
  10d084:	41 83 ff 48          	cmp    $0x48,%r15d
  10d088:	48 8d 05 6b 38 ff ff 	lea    -0xc795(%rip),%rax        # 1008fa <__dso_handle+0x8fa>
  10d08f:	48 8d 0d 6c 32 ff ff 	lea    -0xcd94(%rip),%rcx        # 100302 <__dso_handle+0x302>
  10d096:	e9 2b 03 00 00       	jmp    10d3c6 <_svfprintf_r+0x826>
  10d09b:	0f 28 84 24 80 00 00 	movaps 0x80(%rsp),%xmm0
  10d0a2:	00 
  10d0a3:	e8 08 1d 00 00       	call   10edb0 <__fpclassifyd>
  10d0a8:	85 c0                	test   %eax,%eax
  10d0aa:	0f 84 e8 02 00 00    	je     10d398 <_svfprintf_r+0x7f8>
  10d0b0:	44 89 64 24 14       	mov    %r12d,0x14(%rsp)
  10d0b5:	45 89 fc             	mov    %r15d,%r12d
  10d0b8:	41 83 cc 20          	or     $0x20,%r12d
  10d0bc:	41 83 fd ff          	cmp    $0xffffffff,%r13d
  10d0c0:	0f 84 5b 03 00 00    	je     10d421 <_svfprintf_r+0x881>
  10d0c6:	44 89 e0             	mov    %r12d,%eax
  10d0c9:	83 f0 67             	xor    $0x67,%eax
  10d0cc:	44 09 e8             	or     %r13d,%eax
  10d0cf:	b8 01 00 00 00       	mov    $0x1,%eax
  10d0d4:	41 0f 45 c5          	cmovne %r13d,%eax
  10d0d8:	e9 49 03 00 00       	jmp    10d426 <_svfprintf_r+0x886>
  10d0dd:	41 83 cc 10          	or     $0x10,%r12d
  10d0e1:	44 89 e6             	mov    %r12d,%esi
  10d0e4:	48 89 5c 24 58       	mov    %rbx,0x58(%rsp)
  10d0e9:	44 89 e1             	mov    %r12d,%ecx
  10d0ec:	f6 c1 10             	test   $0x10,%cl
  10d0ef:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  10d0f6:	00 
  10d0f7:	49 89 f8             	mov    %rdi,%r8
  10d0fa:	75 38                	jne    10d134 <_svfprintf_r+0x594>
  10d0fc:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  10d101:	48 63 00             	movslq (%rax),%rax
  10d104:	f6 c1 40             	test   $0x40,%cl
  10d107:	48 8b 9c 24 c8 00 00 	mov    0xc8(%rsp),%rbx
  10d10e:	00 
  10d10f:	0f 85 d2 02 00 00    	jne    10d3e7 <_svfprintf_r+0x847>
  10d115:	83 f8 28             	cmp    $0x28,%eax
  10d118:	0f 87 99 05 00 00    	ja     10d6b7 <_svfprintf_r+0xb17>
  10d11e:	48 89 c1             	mov    %rax,%rcx
  10d121:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  10d126:	48 03 4a 10          	add    0x10(%rdx),%rcx
  10d12a:	8d 40 08             	lea    0x8(%rax),%eax
  10d12d:	89 02                	mov    %eax,(%rdx)
  10d12f:	e9 92 05 00 00       	jmp    10d6c6 <_svfprintf_r+0xb26>
  10d134:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  10d139:	48 63 02             	movslq (%rdx),%rax
  10d13c:	48 83 f8 28          	cmp    $0x28,%rax
  10d140:	48 8b 9c 24 c8 00 00 	mov    0xc8(%rsp),%rbx
  10d147:	00 
  10d148:	0f 87 bc 02 00 00    	ja     10d40a <_svfprintf_r+0x86a>
  10d14e:	48 89 c1             	mov    %rax,%rcx
  10d151:	48 03 4a 10          	add    0x10(%rdx),%rcx
  10d155:	8d 40 08             	lea    0x8(%rax),%eax
  10d158:	89 02                	mov    %eax,(%rdx)
  10d15a:	48 8b 09             	mov    (%rcx),%rcx
  10d15d:	e9 7c 05 00 00       	jmp    10d6de <_svfprintf_r+0xb3e>
  10d162:	48 89 5c 24 58       	mov    %rbx,0x58(%rsp)
  10d167:	41 83 cc 10          	or     $0x10,%r12d
  10d16b:	41 bf 4f 00 00 00    	mov    $0x4f,%r15d
  10d171:	eb 4d                	jmp    10d1c0 <_svfprintf_r+0x620>
  10d173:	48 89 5c 24 58       	mov    %rbx,0x58(%rsp)
  10d178:	41 83 cc 10          	or     $0x10,%r12d
  10d17c:	41 bf 55 00 00 00    	mov    $0x55,%r15d
  10d182:	e9 dd 00 00 00       	jmp    10d264 <_svfprintf_r+0x6c4>
  10d187:	48 89 5c 24 58       	mov    %rbx,0x58(%rsp)
  10d18c:	48 8d 1d 9b 39 ff ff 	lea    -0xc665(%rip),%rbx        # 100b2e <__dso_handle+0xb2e>
  10d193:	e9 29 01 00 00       	jmp    10d2c1 <_svfprintf_r+0x721>
  10d198:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  10d19d:	48 63 0a             	movslq (%rdx),%rcx
  10d1a0:	48 83 f9 28          	cmp    $0x28,%rcx
  10d1a4:	0f 87 67 03 00 00    	ja     10d511 <_svfprintf_r+0x971>
  10d1aa:	48 89 c8             	mov    %rcx,%rax
  10d1ad:	48 03 42 10          	add    0x10(%rdx),%rax
  10d1b1:	8d 49 08             	lea    0x8(%rcx),%ecx
  10d1b4:	89 0a                	mov    %ecx,(%rdx)
  10d1b6:	e9 65 03 00 00       	jmp    10d520 <_svfprintf_r+0x980>
  10d1bb:	48 89 5c 24 58       	mov    %rbx,0x58(%rsp)
  10d1c0:	41 f6 c4 10          	test   $0x10,%r12b
  10d1c4:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  10d1cb:	00 
  10d1cc:	49 89 f8             	mov    %rdi,%r8
  10d1cf:	48 8b 9c 24 c8 00 00 	mov    0xc8(%rsp),%rbx
  10d1d6:	00 
  10d1d7:	0f 85 2d 01 00 00    	jne    10d30a <_svfprintf_r+0x76a>
  10d1dd:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  10d1e2:	48 63 00             	movslq (%rax),%rax
  10d1e5:	44 89 e6             	mov    %r12d,%esi
  10d1e8:	41 f6 c4 40          	test   $0x40,%r12b
  10d1ec:	0f 85 63 03 00 00    	jne    10d555 <_svfprintf_r+0x9b5>
  10d1f2:	83 f8 28             	cmp    $0x28,%eax
  10d1f5:	0f 87 2c 05 00 00    	ja     10d727 <_svfprintf_r+0xb87>
  10d1fb:	48 89 c1             	mov    %rax,%rcx
  10d1fe:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  10d203:	48 03 4a 10          	add    0x10(%rdx),%rcx
  10d207:	8d 40 08             	lea    0x8(%rax),%eax
  10d20a:	89 02                	mov    %eax,(%rdx)
  10d20c:	e9 25 05 00 00       	jmp    10d736 <_svfprintf_r+0xb96>
  10d211:	44 89 e6             	mov    %r12d,%esi
  10d214:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  10d219:	48 63 0a             	movslq (%rdx),%rcx
  10d21c:	48 83 f9 28          	cmp    $0x28,%rcx
  10d220:	48 89 5c 24 58       	mov    %rbx,0x58(%rsp)
  10d225:	0f 87 49 03 00 00    	ja     10d574 <_svfprintf_r+0x9d4>
  10d22b:	48 89 c8             	mov    %rcx,%rax
  10d22e:	48 03 42 10          	add    0x10(%rdx),%rax
  10d232:	8d 49 08             	lea    0x8(%rcx),%ecx
  10d235:	89 0a                	mov    %ecx,(%rdx)
  10d237:	e9 47 03 00 00       	jmp    10d583 <_svfprintf_r+0x9e3>
  10d23c:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  10d241:	48 63 0a             	movslq (%rdx),%rcx
  10d244:	48 83 f9 28          	cmp    $0x28,%rcx
  10d248:	0f 87 64 03 00 00    	ja     10d5b2 <_svfprintf_r+0xa12>
  10d24e:	48 89 c8             	mov    %rcx,%rax
  10d251:	48 03 42 10          	add    0x10(%rdx),%rax
  10d255:	8d 49 08             	lea    0x8(%rcx),%ecx
  10d258:	89 0a                	mov    %ecx,(%rdx)
  10d25a:	e9 62 03 00 00       	jmp    10d5c1 <_svfprintf_r+0xa21>
  10d25f:	48 89 5c 24 58       	mov    %rbx,0x58(%rsp)
  10d264:	41 f6 c4 10          	test   $0x10,%r12b
  10d268:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  10d26f:	00 
  10d270:	49 89 f8             	mov    %rdi,%r8
  10d273:	48 8b 9c 24 c8 00 00 	mov    0xc8(%rsp),%rbx
  10d27a:	00 
  10d27b:	0f 85 af 00 00 00    	jne    10d330 <_svfprintf_r+0x790>
  10d281:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  10d286:	48 63 00             	movslq (%rax),%rax
  10d289:	44 89 e6             	mov    %r12d,%esi
  10d28c:	41 f6 c4 40          	test   $0x40,%r12b
  10d290:	0f 85 80 03 00 00    	jne    10d616 <_svfprintf_r+0xa76>
  10d296:	83 f8 28             	cmp    $0x28,%eax
  10d299:	0f 87 a0 04 00 00    	ja     10d73f <_svfprintf_r+0xb9f>
  10d29f:	48 89 c1             	mov    %rax,%rcx
  10d2a2:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  10d2a7:	48 03 4a 10          	add    0x10(%rdx),%rcx
  10d2ab:	8d 40 08             	lea    0x8(%rax),%eax
  10d2ae:	89 02                	mov    %eax,(%rdx)
  10d2b0:	e9 99 04 00 00       	jmp    10d74e <_svfprintf_r+0xbae>
  10d2b5:	48 89 5c 24 58       	mov    %rbx,0x58(%rsp)
  10d2ba:	48 8d 1d 69 37 ff ff 	lea    -0xc897(%rip),%rbx        # 100a2a <__dso_handle+0xa2a>
  10d2c1:	41 f6 c4 10          	test   $0x10,%r12b
  10d2c5:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  10d2cc:	00 
  10d2cd:	49 89 f8             	mov    %rdi,%r8
  10d2d0:	0f 85 80 00 00 00    	jne    10d356 <_svfprintf_r+0x7b6>
  10d2d6:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  10d2db:	48 63 00             	movslq (%rax),%rax
  10d2de:	44 89 e6             	mov    %r12d,%esi
  10d2e1:	41 f6 c4 40          	test   $0x40,%r12b
  10d2e5:	0f 85 4a 03 00 00    	jne    10d635 <_svfprintf_r+0xa95>
  10d2eb:	83 f8 28             	cmp    $0x28,%eax
  10d2ee:	0f 87 63 04 00 00    	ja     10d757 <_svfprintf_r+0xbb7>
  10d2f4:	48 89 c1             	mov    %rax,%rcx
  10d2f7:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  10d2fc:	48 03 4a 10          	add    0x10(%rdx),%rcx
  10d300:	8d 40 08             	lea    0x8(%rax),%eax
  10d303:	89 02                	mov    %eax,(%rdx)
  10d305:	e9 5c 04 00 00       	jmp    10d766 <_svfprintf_r+0xbc6>
  10d30a:	44 89 e6             	mov    %r12d,%esi
  10d30d:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  10d312:	48 63 0a             	movslq (%rdx),%rcx
  10d315:	48 83 f9 28          	cmp    $0x28,%rcx
  10d319:	0f 87 35 03 00 00    	ja     10d654 <_svfprintf_r+0xab4>
  10d31f:	48 89 c8             	mov    %rcx,%rax
  10d322:	48 03 42 10          	add    0x10(%rdx),%rax
  10d326:	8d 49 08             	lea    0x8(%rcx),%ecx
  10d329:	89 0a                	mov    %ecx,(%rdx)
  10d32b:	e9 33 03 00 00       	jmp    10d663 <_svfprintf_r+0xac3>
  10d330:	44 89 e6             	mov    %r12d,%esi
  10d333:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  10d338:	48 63 0a             	movslq (%rdx),%rcx
  10d33b:	48 83 f9 28          	cmp    $0x28,%rcx
  10d33f:	0f 87 28 03 00 00    	ja     10d66d <_svfprintf_r+0xacd>
  10d345:	48 89 c8             	mov    %rcx,%rax
  10d348:	48 03 42 10          	add    0x10(%rdx),%rax
  10d34c:	8d 49 08             	lea    0x8(%rcx),%ecx
  10d34f:	89 0a                	mov    %ecx,(%rdx)
  10d351:	e9 26 03 00 00       	jmp    10d67c <_svfprintf_r+0xadc>
  10d356:	44 89 e6             	mov    %r12d,%esi
  10d359:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  10d35e:	48 63 02             	movslq (%rdx),%rax
  10d361:	48 83 f8 28          	cmp    $0x28,%rax
  10d365:	0f 87 1e 03 00 00    	ja     10d689 <_svfprintf_r+0xae9>
  10d36b:	48 89 c1             	mov    %rax,%rcx
  10d36e:	48 03 4a 10          	add    0x10(%rdx),%rcx
  10d372:	8d 40 08             	lea    0x8(%rax),%eax
  10d375:	89 02                	mov    %eax,(%rdx)
  10d377:	48 8b 09             	mov    (%rcx),%rcx
  10d37a:	e9 2c 04 00 00       	jmp    10d7ab <_svfprintf_r+0xc0b>
  10d37f:	44 88 bc 24 e0 00 00 	mov    %r15b,0xe0(%rsp)
  10d386:	00 
  10d387:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
  10d38c:	31 c0                	xor    %eax,%eax
  10d38e:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  10d393:	e9 a3 01 00 00       	jmp    10d53b <_svfprintf_r+0x99b>
  10d398:	66 0f 6f 84 24 80 00 	movdqa 0x80(%rsp),%xmm0
  10d39f:	00 00 
  10d3a1:	66 48 0f 7e c0       	movq   %xmm0,%rax
  10d3a6:	48 85 c0             	test   %rax,%rax
  10d3a9:	66 0f 6f d0          	movdqa %xmm0,%xmm2
  10d3ad:	79 05                	jns    10d3b4 <_svfprintf_r+0x814>
  10d3af:	c6 44 24 07 2d       	movb   $0x2d,0x7(%rsp)
  10d3b4:	41 83 ff 48          	cmp    $0x48,%r15d
  10d3b8:	48 8d 05 67 36 ff ff 	lea    -0xc999(%rip),%rax        # 100a26 <__dso_handle+0xa26>
  10d3bf:	48 8d 0d fd 35 ff ff 	lea    -0xca03(%rip),%rcx        # 1009c3 <__dso_handle+0x9c3>
  10d3c6:	48 0f 4c c8          	cmovl  %rax,%rcx
  10d3ca:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  10d3cf:	41 81 e4 7f ff ff ff 	and    $0xffffff7f,%r12d
  10d3d6:	31 c0                	xor    %eax,%eax
  10d3d8:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  10d3dd:	b8 03 00 00 00       	mov    $0x3,%eax
  10d3e2:	e9 66 01 00 00       	jmp    10d54d <_svfprintf_r+0x9ad>
  10d3e7:	83 f8 28             	cmp    $0x28,%eax
  10d3ea:	0f 87 db 02 00 00    	ja     10d6cb <_svfprintf_r+0xb2b>
  10d3f0:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  10d3f5:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  10d3f9:	48 01 c1             	add    %rax,%rcx
  10d3fc:	83 c0 08             	add    $0x8,%eax
  10d3ff:	89 02                	mov    %eax,(%rdx)
  10d401:	48 0f bf 09          	movswq (%rcx),%rcx
  10d405:	e9 d4 02 00 00       	jmp    10d6de <_svfprintf_r+0xb3e>
  10d40a:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  10d40f:	48 8b 02             	mov    (%rdx),%rax
  10d412:	48 8d 48 08          	lea    0x8(%rax),%rcx
  10d416:	48 89 0a             	mov    %rcx,(%rdx)
  10d419:	48 8b 08             	mov    (%rax),%rcx
  10d41c:	e9 bd 02 00 00       	jmp    10d6de <_svfprintf_r+0xb3e>
  10d421:	b8 06 00 00 00       	mov    $0x6,%eax
  10d426:	66 0f 6f 8c 24 80 00 	movdqa 0x80(%rsp),%xmm1
  10d42d:	00 00 
  10d42f:	66 48 0f 7e c9       	movq   %xmm1,%rcx
  10d434:	48 85 c9             	test   %rcx,%rcx
  10d437:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  10d43c:	78 06                	js     10d444 <_svfprintf_r+0x8a4>
  10d43e:	66 0f 6f c1          	movdqa %xmm1,%xmm0
  10d442:	eb 0c                	jmp    10d450 <_svfprintf_r+0x8b0>
  10d444:	66 0f 6f 05 64 2d ff 	movdqa -0xd29c(%rip),%xmm0        # 1001b0 <__dso_handle+0x1b0>
  10d44b:	ff 
  10d44c:	66 0f ef c1          	pxor   %xmm1,%xmm0
  10d450:	31 f6                	xor    %esi,%esi
  10d452:	41 83 fc 66          	cmp    $0x66,%r12d
  10d456:	40 0f 94 c6          	sete   %sil
  10d45a:	31 d2                	xor    %edx,%edx
  10d45c:	41 83 fc 65          	cmp    $0x65,%r12d
  10d460:	0f 94 c2             	sete   %dl
  10d463:	83 ce 02             	or     $0x2,%esi
  10d466:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  10d46d:	00 
  10d46e:	01 c2                	add    %eax,%edx
  10d470:	48 8d 4c 24 44       	lea    0x44(%rsp),%rcx
  10d475:	4c 8d 84 24 1c 01 00 	lea    0x11c(%rsp),%r8
  10d47c:	00 
  10d47d:	4c 8d 8c 24 98 00 00 	lea    0x98(%rsp),%r9
  10d484:	00 
  10d485:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10d48a:	66 0f 7f 84 24 b0 00 	movdqa %xmm0,0xb0(%rsp)
  10d491:	00 00 
  10d493:	41 89 d5             	mov    %edx,%r13d
  10d496:	e8 b5 32 00 00       	call   110750 <_dtoa_r>
  10d49b:	44 8b 54 24 14       	mov    0x14(%rsp),%r10d
  10d4a0:	41 83 e2 01          	and    $0x1,%r10d
  10d4a4:	75 1c                	jne    10d4c2 <_svfprintf_r+0x922>
  10d4a6:	41 83 fc 67          	cmp    $0x67,%r12d
  10d4aa:	75 16                	jne    10d4c2 <_svfprintf_r+0x922>
  10d4ac:	48 8b 94 24 98 00 00 	mov    0x98(%rsp),%rdx
  10d4b3:	00 
  10d4b4:	66 0f 6f 94 24 80 00 	movdqa 0x80(%rsp),%xmm2
  10d4bb:	00 00 
  10d4bd:	e9 7a 10 00 00       	jmp    10e53c <_svfprintf_r+0x199c>
  10d4c2:	49 63 cd             	movslq %r13d,%rcx
  10d4c5:	48 89 c6             	mov    %rax,%rsi
  10d4c8:	48 01 ce             	add    %rcx,%rsi
  10d4cb:	41 83 fc 66          	cmp    $0x66,%r12d
  10d4cf:	0f 85 cb 01 00 00    	jne    10d6a0 <_svfprintf_r+0xb00>
  10d4d5:	66 0f ef c0          	pxor   %xmm0,%xmm0
  10d4d9:	66 0f 6f 8c 24 b0 00 	movdqa 0xb0(%rsp),%xmm1
  10d4e0:	00 00 
  10d4e2:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
  10d4e6:	66 0f 6f 94 24 80 00 	movdqa 0x80(%rsp),%xmm2
  10d4ed:	00 00 
  10d4ef:	75 06                	jne    10d4f7 <_svfprintf_r+0x957>
  10d4f1:	0f 8b 02 10 00 00    	jnp    10e4f9 <_svfprintf_r+0x1959>
  10d4f7:	80 38 30             	cmpb   $0x30,(%rax)
  10d4fa:	0f 85 f9 0f 00 00    	jne    10e4f9 <_svfprintf_r+0x1959>
  10d500:	b9 01 00 00 00       	mov    $0x1,%ecx
  10d505:	44 29 e9             	sub    %r13d,%ecx
  10d508:	89 4c 24 44          	mov    %ecx,0x44(%rsp)
  10d50c:	e9 ec 0f 00 00       	jmp    10e4fd <_svfprintf_r+0x195d>
  10d511:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  10d516:	48 8b 02             	mov    (%rdx),%rax
  10d519:	48 8d 48 08          	lea    0x8(%rax),%rcx
  10d51d:	48 89 0a             	mov    %rcx,(%rdx)
  10d520:	8a 00                	mov    (%rax),%al
  10d522:	88 84 24 e0 00 00 00 	mov    %al,0xe0(%rsp)
  10d529:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
  10d52e:	31 c0                	xor    %eax,%eax
  10d530:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  10d535:	41 bf 63 00 00 00    	mov    $0x63,%r15d
  10d53b:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
  10d542:	00 
  10d543:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  10d548:	b8 01 00 00 00       	mov    $0x1,%eax
  10d54d:	45 31 ed             	xor    %r13d,%r13d
  10d550:	e9 02 04 00 00       	jmp    10d957 <_svfprintf_r+0xdb7>
  10d555:	83 f8 28             	cmp    $0x28,%eax
  10d558:	0f 87 0c 02 00 00    	ja     10d76a <_svfprintf_r+0xbca>
  10d55e:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  10d563:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  10d567:	48 01 c1             	add    %rax,%rcx
  10d56a:	83 c0 08             	add    $0x8,%eax
  10d56d:	89 02                	mov    %eax,(%rdx)
  10d56f:	e9 05 02 00 00       	jmp    10d779 <_svfprintf_r+0xbd9>
  10d574:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  10d579:	48 8b 02             	mov    (%rdx),%rax
  10d57c:	48 8d 48 08          	lea    0x8(%rax),%rcx
  10d580:	48 89 0a             	mov    %rcx,(%rdx)
  10d583:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  10d58a:	00 
  10d58b:	49 89 f8             	mov    %rdi,%r8
  10d58e:	48 8b 08             	mov    (%rax),%rcx
  10d591:	83 ce 02             	or     $0x2,%esi
  10d594:	66 c7 44 24 7e 30 78 	movw   $0x7830,0x7e(%rsp)
  10d59b:	48 8d 1d 88 34 ff ff 	lea    -0xcb78(%rip),%rbx        # 100a2a <__dso_handle+0xa2a>
  10d5a2:	b8 02 00 00 00       	mov    $0x2,%eax
  10d5a7:	41 bf 78 00 00 00    	mov    $0x78,%r15d
  10d5ad:	e9 1e 02 00 00       	jmp    10d7d0 <_svfprintf_r+0xc30>
  10d5b2:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  10d5b7:	48 8b 02             	mov    (%rdx),%rax
  10d5ba:	48 8d 48 08          	lea    0x8(%rax),%rcx
  10d5be:	48 89 0a             	mov    %rcx,(%rdx)
  10d5c1:	48 8b 00             	mov    (%rax),%rax
  10d5c4:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
  10d5c9:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  10d5ce:	48 85 c0             	test   %rax,%rax
  10d5d1:	0f 84 22 01 00 00    	je     10d6f9 <_svfprintf_r+0xb59>
  10d5d7:	66 0f 7f 94 24 80 00 	movdqa %xmm2,0x80(%rsp)
  10d5de:	00 00 
  10d5e0:	45 85 ed             	test   %r13d,%r13d
  10d5e3:	0f 88 5f 0e 00 00    	js     10e448 <_svfprintf_r+0x18a8>
  10d5e9:	49 63 d5             	movslq %r13d,%rdx
  10d5ec:	31 c0                	xor    %eax,%eax
  10d5ee:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  10d5f3:	31 f6                	xor    %esi,%esi
  10d5f5:	4c 8b 7c 24 60       	mov    0x60(%rsp),%r15
  10d5fa:	4c 89 ff             	mov    %r15,%rdi
  10d5fd:	e8 0e 30 00 00       	call   110610 <memchr>
  10d602:	89 c1                	mov    %eax,%ecx
  10d604:	44 29 f9             	sub    %r15d,%ecx
  10d607:	48 85 c0             	test   %rax,%rax
  10d60a:	48 89 c8             	mov    %rcx,%rax
  10d60d:	41 0f 44 c5          	cmove  %r13d,%eax
  10d611:	e9 49 0e 00 00       	jmp    10e45f <_svfprintf_r+0x18bf>
  10d616:	83 f8 28             	cmp    $0x28,%eax
  10d619:	0f 87 61 01 00 00    	ja     10d780 <_svfprintf_r+0xbe0>
  10d61f:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  10d624:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  10d628:	48 01 c1             	add    %rax,%rcx
  10d62b:	83 c0 08             	add    $0x8,%eax
  10d62e:	89 02                	mov    %eax,(%rdx)
  10d630:	e9 5a 01 00 00       	jmp    10d78f <_svfprintf_r+0xbef>
  10d635:	83 f8 28             	cmp    $0x28,%eax
  10d638:	0f 87 5b 01 00 00    	ja     10d799 <_svfprintf_r+0xbf9>
  10d63e:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  10d643:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  10d647:	48 01 c1             	add    %rax,%rcx
  10d64a:	83 c0 08             	add    $0x8,%eax
  10d64d:	89 02                	mov    %eax,(%rdx)
  10d64f:	e9 54 01 00 00       	jmp    10d7a8 <_svfprintf_r+0xc08>
  10d654:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  10d659:	48 8b 02             	mov    (%rdx),%rax
  10d65c:	48 8d 48 08          	lea    0x8(%rax),%rcx
  10d660:	48 89 0a             	mov    %rcx,(%rdx)
  10d663:	48 8b 08             	mov    (%rax),%rcx
  10d666:	31 c0                	xor    %eax,%eax
  10d668:	e9 63 01 00 00       	jmp    10d7d0 <_svfprintf_r+0xc30>
  10d66d:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  10d672:	48 8b 02             	mov    (%rdx),%rax
  10d675:	48 8d 48 08          	lea    0x8(%rax),%rcx
  10d679:	48 89 0a             	mov    %rcx,(%rdx)
  10d67c:	48 8b 08             	mov    (%rax),%rcx
  10d67f:	b8 01 00 00 00       	mov    $0x1,%eax
  10d684:	e9 47 01 00 00       	jmp    10d7d0 <_svfprintf_r+0xc30>
  10d689:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  10d68e:	48 8b 02             	mov    (%rdx),%rax
  10d691:	48 8d 48 08          	lea    0x8(%rax),%rcx
  10d695:	48 89 0a             	mov    %rcx,(%rdx)
  10d698:	48 8b 08             	mov    (%rax),%rcx
  10d69b:	e9 0b 01 00 00       	jmp    10d7ab <_svfprintf_r+0xc0b>
  10d6a0:	66 0f 6f 94 24 80 00 	movdqa 0x80(%rsp),%xmm2
  10d6a7:	00 00 
  10d6a9:	66 0f 6f 8c 24 b0 00 	movdqa 0xb0(%rsp),%xmm1
  10d6b0:	00 00 
  10d6b2:	e9 4c 0e 00 00       	jmp    10e503 <_svfprintf_r+0x1963>
  10d6b7:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  10d6bc:	48 8b 0a             	mov    (%rdx),%rcx
  10d6bf:	48 8d 41 08          	lea    0x8(%rcx),%rax
  10d6c3:	48 89 02             	mov    %rax,(%rdx)
  10d6c6:	48 63 09             	movslq (%rcx),%rcx
  10d6c9:	eb 13                	jmp    10d6de <_svfprintf_r+0xb3e>
  10d6cb:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  10d6d0:	48 8b 02             	mov    (%rdx),%rax
  10d6d3:	48 8d 48 08          	lea    0x8(%rax),%rcx
  10d6d7:	48 89 0a             	mov    %rcx,(%rdx)
  10d6da:	48 0f bf 08          	movswq (%rax),%rcx
  10d6de:	b8 01 00 00 00       	mov    $0x1,%eax
  10d6e3:	48 85 c9             	test   %rcx,%rcx
  10d6e6:	0f 89 e9 00 00 00    	jns    10d7d5 <_svfprintf_r+0xc35>
  10d6ec:	48 f7 d9             	neg    %rcx
  10d6ef:	c6 44 24 07 2d       	movb   $0x2d,0x7(%rsp)
  10d6f4:	e9 dc 00 00 00       	jmp    10d7d5 <_svfprintf_r+0xc35>
  10d6f9:	41 83 fd 06          	cmp    $0x6,%r13d
  10d6fd:	b9 06 00 00 00       	mov    $0x6,%ecx
  10d702:	41 0f 42 cd          	cmovb  %r13d,%ecx
  10d706:	31 c0                	xor    %eax,%eax
  10d708:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  10d70d:	41 bf 73 00 00 00    	mov    $0x73,%r15d
  10d713:	48 8d 05 af 35 ff ff 	lea    -0xca51(%rip),%rax        # 100cc9 <__dso_handle+0xcc9>
  10d71a:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  10d71f:	48 89 c8             	mov    %rcx,%rax
  10d722:	e9 26 fe ff ff       	jmp    10d54d <_svfprintf_r+0x9ad>
  10d727:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  10d72c:	48 8b 0a             	mov    (%rdx),%rcx
  10d72f:	48 8d 41 08          	lea    0x8(%rcx),%rax
  10d733:	48 89 02             	mov    %rax,(%rdx)
  10d736:	8b 09                	mov    (%rcx),%ecx
  10d738:	31 c0                	xor    %eax,%eax
  10d73a:	e9 91 00 00 00       	jmp    10d7d0 <_svfprintf_r+0xc30>
  10d73f:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  10d744:	48 8b 0a             	mov    (%rdx),%rcx
  10d747:	48 8d 41 08          	lea    0x8(%rcx),%rax
  10d74b:	48 89 02             	mov    %rax,(%rdx)
  10d74e:	8b 09                	mov    (%rcx),%ecx
  10d750:	b8 01 00 00 00       	mov    $0x1,%eax
  10d755:	eb 79                	jmp    10d7d0 <_svfprintf_r+0xc30>
  10d757:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  10d75c:	48 8b 0a             	mov    (%rdx),%rcx
  10d75f:	48 8d 41 08          	lea    0x8(%rcx),%rax
  10d763:	48 89 02             	mov    %rax,(%rdx)
  10d766:	8b 09                	mov    (%rcx),%ecx
  10d768:	eb 41                	jmp    10d7ab <_svfprintf_r+0xc0b>
  10d76a:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  10d76f:	48 8b 0a             	mov    (%rdx),%rcx
  10d772:	48 8d 41 08          	lea    0x8(%rcx),%rax
  10d776:	48 89 02             	mov    %rax,(%rdx)
  10d779:	0f b7 09             	movzwl (%rcx),%ecx
  10d77c:	31 c0                	xor    %eax,%eax
  10d77e:	eb 50                	jmp    10d7d0 <_svfprintf_r+0xc30>
  10d780:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  10d785:	48 8b 0a             	mov    (%rdx),%rcx
  10d788:	48 8d 41 08          	lea    0x8(%rcx),%rax
  10d78c:	48 89 02             	mov    %rax,(%rdx)
  10d78f:	0f b7 09             	movzwl (%rcx),%ecx
  10d792:	b8 01 00 00 00       	mov    $0x1,%eax
  10d797:	eb 37                	jmp    10d7d0 <_svfprintf_r+0xc30>
  10d799:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  10d79e:	48 8b 0a             	mov    (%rdx),%rcx
  10d7a1:	48 8d 41 08          	lea    0x8(%rcx),%rax
  10d7a5:	48 89 02             	mov    %rax,(%rdx)
  10d7a8:	0f b7 09             	movzwl (%rcx),%ecx
  10d7ab:	b8 02 00 00 00       	mov    $0x2,%eax
  10d7b0:	40 f6 c6 01          	test   $0x1,%sil
  10d7b4:	74 1a                	je     10d7d0 <_svfprintf_r+0xc30>
  10d7b6:	48 85 c9             	test   %rcx,%rcx
  10d7b9:	74 15                	je     10d7d0 <_svfprintf_r+0xc30>
  10d7bb:	c6 44 24 7e 30       	movb   $0x30,0x7e(%rsp)
  10d7c0:	44 88 7c 24 7f       	mov    %r15b,0x7f(%rsp)
  10d7c5:	83 ce 02             	or     $0x2,%esi
  10d7c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10d7cf:	00 
  10d7d0:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
  10d7d5:	41 89 f4             	mov    %esi,%r12d
  10d7d8:	89 f2                	mov    %esi,%edx
  10d7da:	41 81 e4 7f ff ff ff 	and    $0xffffff7f,%r12d
  10d7e1:	45 85 ed             	test   %r13d,%r13d
  10d7e4:	44 0f 48 e6          	cmovs  %esi,%r12d
  10d7e8:	48 89 9c 24 c8 00 00 	mov    %rbx,0xc8(%rsp)
  10d7ef:	00 
  10d7f0:	75 3e                	jne    10d830 <_svfprintf_r+0xc90>
  10d7f2:	48 85 c9             	test   %rcx,%rcx
  10d7f5:	75 39                	jne    10d830 <_svfprintf_r+0xc90>
  10d7f7:	4c 89 c7             	mov    %r8,%rdi
  10d7fa:	85 c0                	test   %eax,%eax
  10d7fc:	0f 85 3e 01 00 00    	jne    10d940 <_svfprintf_r+0xda0>
  10d802:	44 89 e0             	mov    %r12d,%eax
  10d805:	4c 89 c7             	mov    %r8,%rdi
  10d808:	83 e0 01             	and    $0x1,%eax
  10d80b:	0f 84 2f 01 00 00    	je     10d940 <_svfprintf_r+0xda0>
  10d811:	c6 84 24 07 01 00 00 	movb   $0x30,0x107(%rsp)
  10d818:	30 
  10d819:	48 8d 84 24 07 01 00 	lea    0x107(%rsp),%rax
  10d820:	00 
  10d821:	48 89 c7             	mov    %rax,%rdi
  10d824:	e9 17 01 00 00       	jmp    10d940 <_svfprintf_r+0xda0>
  10d829:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  10d830:	85 c0                	test   %eax,%eax
  10d832:	74 37                	je     10d86b <_svfprintf_r+0xccb>
  10d834:	83 f8 01             	cmp    $0x1,%eax
  10d837:	74 7d                	je     10d8b6 <_svfprintf_r+0xd16>
  10d839:	4c 89 c7             	mov    %r8,%rdi
  10d83c:	83 f8 02             	cmp    $0x2,%eax
  10d83f:	0f 85 86 00 00 00    	jne    10d8cb <_svfprintf_r+0xd2b>
  10d845:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10d84c:	00 00 00 
  10d84f:	90                   	nop
  10d850:	89 c8                	mov    %ecx,%eax
  10d852:	83 e0 0f             	and    $0xf,%eax
  10d855:	0f b6 04 03          	movzbl (%rbx,%rax,1),%eax
  10d859:	88 47 ff             	mov    %al,-0x1(%rdi)
  10d85c:	48 83 c7 ff          	add    $0xffffffffffffffff,%rdi
  10d860:	48 c1 e9 04          	shr    $0x4,%rcx
  10d864:	75 ea                	jne    10d850 <_svfprintf_r+0xcb0>
  10d866:	e9 d5 00 00 00       	jmp    10d940 <_svfprintf_r+0xda0>
  10d86b:	48 8d 84 24 07 01 00 	lea    0x107(%rsp),%rax
  10d872:	00 
  10d873:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10d87a:	00 00 00 
  10d87d:	0f 1f 00             	nopl   (%rax)
  10d880:	89 ca                	mov    %ecx,%edx
  10d882:	80 e2 07             	and    $0x7,%dl
  10d885:	80 ca 30             	or     $0x30,%dl
  10d888:	88 10                	mov    %dl,(%rax)
  10d88a:	48 c1 e9 03          	shr    $0x3,%rcx
  10d88e:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
  10d892:	48 85 c9             	test   %rcx,%rcx
  10d895:	75 e9                	jne    10d880 <_svfprintf_r+0xce0>
  10d897:	48 8d 78 01          	lea    0x1(%rax),%rdi
  10d89b:	41 f6 c4 01          	test   $0x1,%r12b
  10d89f:	0f 84 9b 00 00 00    	je     10d940 <_svfprintf_r+0xda0>
  10d8a5:	80 fa 30             	cmp    $0x30,%dl
  10d8a8:	0f 84 92 00 00 00    	je     10d940 <_svfprintf_r+0xda0>
  10d8ae:	c6 00 30             	movb   $0x30,(%rax)
  10d8b1:	e9 6b ff ff ff       	jmp    10d821 <_svfprintf_r+0xc81>
  10d8b6:	48 83 f9 0a          	cmp    $0xa,%rcx
  10d8ba:	73 41                	jae    10d8fd <_svfprintf_r+0xd5d>
  10d8bc:	80 c1 30             	add    $0x30,%cl
  10d8bf:	88 8c 24 07 01 00 00 	mov    %cl,0x107(%rsp)
  10d8c6:	e9 4e ff ff ff       	jmp    10d819 <_svfprintf_r+0xc79>
  10d8cb:	48 8d 3d d5 2e ff ff 	lea    -0xd12b(%rip),%rdi        # 1007a7 <__dso_handle+0x7a7>
  10d8d2:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  10d8d7:	66 0f 7f 94 24 80 00 	movdqa %xmm2,0x80(%rsp)
  10d8de:	00 00 
  10d8e0:	e8 db 2d 00 00       	call   1106c0 <strlen>
  10d8e5:	66 0f 6f 94 24 80 00 	movdqa 0x80(%rsp),%xmm2
  10d8ec:	00 00 
  10d8ee:	48 89 c1             	mov    %rax,%rcx
  10d8f1:	31 c0                	xor    %eax,%eax
  10d8f3:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  10d8f8:	48 89 c8             	mov    %rcx,%rax
  10d8fb:	eb 55                	jmp    10d952 <_svfprintf_r+0xdb2>
  10d8fd:	4c 89 c7             	mov    %r8,%rdi
  10d900:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
  10d907:	cc cc cc 
  10d90a:	48 89 c8             	mov    %rcx,%rax
  10d90d:	48 f7 e2             	mul    %rdx
  10d910:	89 d0                	mov    %edx,%eax
  10d912:	c1 e8 02             	shr    $0x2,%eax
  10d915:	83 e0 fe             	and    $0xfffffffe,%eax
  10d918:	8d 04 80             	lea    (%rax,%rax,4),%eax
  10d91b:	89 ce                	mov    %ecx,%esi
  10d91d:	29 c6                	sub    %eax,%esi
  10d91f:	40 80 ce 30          	or     $0x30,%sil
  10d923:	40 88 77 ff          	mov    %sil,-0x1(%rdi)
  10d927:	48 83 c7 ff          	add    $0xffffffffffffffff,%rdi
  10d92b:	48 c1 ea 03          	shr    $0x3,%rdx
  10d92f:	48 83 f9 09          	cmp    $0x9,%rcx
  10d933:	48 89 d1             	mov    %rdx,%rcx
  10d936:	77 c8                	ja     10d900 <_svfprintf_r+0xd60>
  10d938:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10d93f:	00 
  10d940:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  10d945:	41 29 f8             	sub    %edi,%r8d
  10d948:	31 c0                	xor    %eax,%eax
  10d94a:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  10d94f:	4c 89 c0             	mov    %r8,%rax
  10d952:	48 8b 5c 24 58       	mov    0x58(%rsp),%rbx
  10d957:	41 39 c5             	cmp    %eax,%r13d
  10d95a:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  10d961:	00 
  10d962:	41 0f 4d c5          	cmovge %r13d,%eax
  10d966:	80 7c 24 07 01       	cmpb   $0x1,0x7(%rsp)
  10d96b:	83 d8 ff             	sbb    $0xffffffff,%eax
  10d96e:	8d 48 02             	lea    0x2(%rax),%ecx
  10d971:	41 f6 c4 02          	test   $0x2,%r12b
  10d975:	0f 44 c8             	cmove  %eax,%ecx
  10d978:	44 89 64 24 14       	mov    %r12d,0x14(%rsp)
  10d97d:	41 81 e4 84 00 00 00 	and    $0x84,%r12d
  10d984:	66 0f 7f 94 24 80 00 	movdqa %xmm2,0x80(%rsp)
  10d98b:	00 00 
  10d98d:	48 89 5c 24 58       	mov    %rbx,0x58(%rsp)
  10d992:	89 4c 24 70          	mov    %ecx,0x70(%rsp)
  10d996:	74 68                	je     10da00 <_svfprintf_r+0xe60>
  10d998:	80 7c 24 07 00       	cmpb   $0x0,0x7(%rsp)
  10d99d:	0f 84 7d 01 00 00    	je     10db20 <_svfprintf_r+0xf80>
  10d9a3:	48 8d 44 24 07       	lea    0x7(%rsp),%rax
  10d9a8:	49 89 06             	mov    %rax,(%r14)
  10d9ab:	49 c7 46 08 01 00 00 	movq   $0x1,0x8(%r14)
  10d9b2:	00 
  10d9b3:	48 83 44 24 28 01    	addq   $0x1,0x28(%rsp)
  10d9b9:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10d9bd:	8d 48 01             	lea    0x1(%rax),%ecx
  10d9c0:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10d9c4:	83 f8 07             	cmp    $0x7,%eax
  10d9c7:	0f 8c 23 01 00 00    	jl     10daf0 <_svfprintf_r+0xf50>
  10d9cd:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10d9d2:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10d9d7:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10d9dc:	e8 3f 14 00 00       	call   10ee20 <__ssprint_r>
  10d9e1:	66 0f 6f 94 24 80 00 	movdqa 0x80(%rsp),%xmm2
  10d9e8:	00 00 
  10d9ea:	4c 8d b4 24 20 01 00 	lea    0x120(%rsp),%r14
  10d9f1:	00 
  10d9f2:	85 c0                	test   %eax,%eax
  10d9f4:	0f 84 26 01 00 00    	je     10db20 <_svfprintf_r+0xf80>
  10d9fa:	e9 64 13 00 00       	jmp    10ed63 <_svfprintf_r+0x21c3>
  10d9ff:	90                   	nop
  10da00:	29 cb                	sub    %ecx,%ebx
  10da02:	0f 8e f9 00 00 00    	jle    10db01 <_svfprintf_r+0xf61>
  10da08:	48 8d 05 d1 40 ff ff 	lea    -0xbf2f(%rip),%rax        # 101ae0 <_svfprintf_r.blanks>
  10da0f:	49 89 06             	mov    %rax,(%r14)
  10da12:	83 fb 11             	cmp    $0x11,%ebx
  10da15:	0f 8c 7e 00 00 00    	jl     10da99 <_svfprintf_r+0xef9>
  10da1b:	bb 10 00 00 00       	mov    $0x10,%ebx
  10da20:	2b 5c 24 70          	sub    0x70(%rsp),%ebx
  10da24:	03 5c 24 58          	add    0x58(%rsp),%ebx
  10da28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10da2f:	00 
  10da30:	49 c7 46 08 10 00 00 	movq   $0x10,0x8(%r14)
  10da37:	00 
  10da38:	48 83 44 24 28 10    	addq   $0x10,0x28(%rsp)
  10da3e:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10da42:	8d 48 01             	lea    0x1(%rax),%ecx
  10da45:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10da49:	83 f8 07             	cmp    $0x7,%eax
  10da4c:	7c 32                	jl     10da80 <_svfprintf_r+0xee0>
  10da4e:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10da53:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10da58:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10da5d:	e8 be 13 00 00       	call   10ee20 <__ssprint_r>
  10da62:	66 0f 6f 94 24 80 00 	movdqa 0x80(%rsp),%xmm2
  10da69:	00 00 
  10da6b:	4c 8d b4 24 20 01 00 	lea    0x120(%rsp),%r14
  10da72:	00 
  10da73:	85 c0                	test   %eax,%eax
  10da75:	74 0d                	je     10da84 <_svfprintf_r+0xee4>
  10da77:	e9 e7 12 00 00       	jmp    10ed63 <_svfprintf_r+0x21c3>
  10da7c:	0f 1f 40 00          	nopl   0x0(%rax)
  10da80:	49 83 c6 10          	add    $0x10,%r14
  10da84:	48 8d 05 55 40 ff ff 	lea    -0xbfab(%rip),%rax        # 101ae0 <_svfprintf_r.blanks>
  10da8b:	49 89 06             	mov    %rax,(%r14)
  10da8e:	83 c3 f0             	add    $0xfffffff0,%ebx
  10da91:	83 fb 20             	cmp    $0x20,%ebx
  10da94:	7f 9a                	jg     10da30 <_svfprintf_r+0xe90>
  10da96:	83 c3 f0             	add    $0xfffffff0,%ebx
  10da99:	48 63 c3             	movslq %ebx,%rax
  10da9c:	49 89 46 08          	mov    %rax,0x8(%r14)
  10daa0:	48 01 44 24 28       	add    %rax,0x28(%rsp)
  10daa5:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10daa9:	8d 48 01             	lea    0x1(%rax),%ecx
  10daac:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10dab0:	83 f8 07             	cmp    $0x7,%eax
  10dab3:	7c 48                	jl     10dafd <_svfprintf_r+0xf5d>
  10dab5:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10daba:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10dabf:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10dac4:	e8 57 13 00 00       	call   10ee20 <__ssprint_r>
  10dac9:	66 0f 6f 94 24 80 00 	movdqa 0x80(%rsp),%xmm2
  10dad0:	00 00 
  10dad2:	4c 8d b4 24 20 01 00 	lea    0x120(%rsp),%r14
  10dad9:	00 
  10dada:	85 c0                	test   %eax,%eax
  10dadc:	48 8b 5c 24 58       	mov    0x58(%rsp),%rbx
  10dae1:	0f 84 b1 fe ff ff    	je     10d998 <_svfprintf_r+0xdf8>
  10dae7:	e9 77 12 00 00       	jmp    10ed63 <_svfprintf_r+0x21c3>
  10daec:	0f 1f 40 00          	nopl   0x0(%rax)
  10daf0:	49 83 c6 10          	add    $0x10,%r14
  10daf4:	f6 44 24 14 02       	testb  $0x2,0x14(%rsp)
  10daf9:	74 7f                	je     10db7a <_svfprintf_r+0xfda>
  10dafb:	eb 2a                	jmp    10db27 <_svfprintf_r+0xf87>
  10dafd:	49 83 c6 10          	add    $0x10,%r14
  10db01:	48 8b 5c 24 58       	mov    0x58(%rsp),%rbx
  10db06:	80 7c 24 07 00       	cmpb   $0x0,0x7(%rsp)
  10db0b:	0f 85 92 fe ff ff    	jne    10d9a3 <_svfprintf_r+0xe03>
  10db11:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10db18:	00 00 00 
  10db1b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10db20:	f6 44 24 14 02       	testb  $0x2,0x14(%rsp)
  10db25:	74 53                	je     10db7a <_svfprintf_r+0xfda>
  10db27:	48 8d 44 24 7e       	lea    0x7e(%rsp),%rax
  10db2c:	49 89 06             	mov    %rax,(%r14)
  10db2f:	49 c7 46 08 02 00 00 	movq   $0x2,0x8(%r14)
  10db36:	00 
  10db37:	48 83 44 24 28 02    	addq   $0x2,0x28(%rsp)
  10db3d:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10db41:	8d 48 01             	lea    0x1(%rax),%ecx
  10db44:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10db48:	83 f8 07             	cmp    $0x7,%eax
  10db4b:	7c 43                	jl     10db90 <_svfprintf_r+0xff0>
  10db4d:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10db52:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10db57:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10db5c:	e8 bf 12 00 00       	call   10ee20 <__ssprint_r>
  10db61:	66 0f 6f 94 24 80 00 	movdqa 0x80(%rsp),%xmm2
  10db68:	00 00 
  10db6a:	4c 8d b4 24 20 01 00 	lea    0x120(%rsp),%r14
  10db71:	00 
  10db72:	85 c0                	test   %eax,%eax
  10db74:	0f 85 e9 11 00 00    	jne    10ed63 <_svfprintf_r+0x21c3>
  10db7a:	41 81 fc 80 00 00 00 	cmp    $0x80,%r12d
  10db81:	74 1e                	je     10dba1 <_svfprintf_r+0x1001>
  10db83:	e9 08 01 00 00       	jmp    10dc90 <_svfprintf_r+0x10f0>
  10db88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10db8f:	00 
  10db90:	49 83 c6 10          	add    $0x10,%r14
  10db94:	41 81 fc 80 00 00 00 	cmp    $0x80,%r12d
  10db9b:	0f 85 ef 00 00 00    	jne    10dc90 <_svfprintf_r+0x10f0>
  10dba1:	2b 5c 24 70          	sub    0x70(%rsp),%ebx
  10dba5:	4c 8b 64 24 08       	mov    0x8(%rsp),%r12
  10dbaa:	0f 8e e0 00 00 00    	jle    10dc90 <_svfprintf_r+0x10f0>
  10dbb0:	48 8d 05 39 3f ff ff 	lea    -0xc0c7(%rip),%rax        # 101af0 <_svfprintf_r.zeroes>
  10dbb7:	49 89 06             	mov    %rax,(%r14)
  10dbba:	83 fb 11             	cmp    $0x11,%ebx
  10dbbd:	0f 8c 76 00 00 00    	jl     10dc39 <_svfprintf_r+0x1099>
  10dbc3:	bb 10 00 00 00       	mov    $0x10,%ebx
  10dbc8:	2b 5c 24 70          	sub    0x70(%rsp),%ebx
  10dbcc:	03 5c 24 58          	add    0x58(%rsp),%ebx
  10dbd0:	49 c7 46 08 10 00 00 	movq   $0x10,0x8(%r14)
  10dbd7:	00 
  10dbd8:	48 83 44 24 28 10    	addq   $0x10,0x28(%rsp)
  10dbde:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10dbe2:	8d 48 01             	lea    0x1(%rax),%ecx
  10dbe5:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10dbe9:	83 f8 07             	cmp    $0x7,%eax
  10dbec:	7c 32                	jl     10dc20 <_svfprintf_r+0x1080>
  10dbee:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10dbf3:	4c 89 e6             	mov    %r12,%rsi
  10dbf6:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10dbfb:	e8 20 12 00 00       	call   10ee20 <__ssprint_r>
  10dc00:	66 0f 6f 94 24 80 00 	movdqa 0x80(%rsp),%xmm2
  10dc07:	00 00 
  10dc09:	4c 8d b4 24 20 01 00 	lea    0x120(%rsp),%r14
  10dc10:	00 
  10dc11:	85 c0                	test   %eax,%eax
  10dc13:	74 0f                	je     10dc24 <_svfprintf_r+0x1084>
  10dc15:	e9 4e 11 00 00       	jmp    10ed68 <_svfprintf_r+0x21c8>
  10dc1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10dc20:	49 83 c6 10          	add    $0x10,%r14
  10dc24:	48 8d 05 c5 3e ff ff 	lea    -0xc13b(%rip),%rax        # 101af0 <_svfprintf_r.zeroes>
  10dc2b:	49 89 06             	mov    %rax,(%r14)
  10dc2e:	83 c3 f0             	add    $0xfffffff0,%ebx
  10dc31:	83 fb 20             	cmp    $0x20,%ebx
  10dc34:	7f 9a                	jg     10dbd0 <_svfprintf_r+0x1030>
  10dc36:	83 c3 f0             	add    $0xfffffff0,%ebx
  10dc39:	48 63 c3             	movslq %ebx,%rax
  10dc3c:	49 89 46 08          	mov    %rax,0x8(%r14)
  10dc40:	48 01 44 24 28       	add    %rax,0x28(%rsp)
  10dc45:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10dc49:	8d 48 01             	lea    0x1(%rax),%ecx
  10dc4c:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10dc50:	83 f8 07             	cmp    $0x7,%eax
  10dc53:	7c 2c                	jl     10dc81 <_svfprintf_r+0x10e1>
  10dc55:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10dc5a:	4c 89 e6             	mov    %r12,%rsi
  10dc5d:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10dc62:	e8 b9 11 00 00       	call   10ee20 <__ssprint_r>
  10dc67:	66 0f 6f 94 24 80 00 	movdqa 0x80(%rsp),%xmm2
  10dc6e:	00 00 
  10dc70:	4c 8d b4 24 20 01 00 	lea    0x120(%rsp),%r14
  10dc77:	00 
  10dc78:	85 c0                	test   %eax,%eax
  10dc7a:	74 14                	je     10dc90 <_svfprintf_r+0x10f0>
  10dc7c:	e9 e7 10 00 00       	jmp    10ed68 <_svfprintf_r+0x21c8>
  10dc81:	49 83 c6 10          	add    $0x10,%r14
  10dc85:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10dc8c:	00 00 00 
  10dc8f:	90                   	nop
  10dc90:	44 89 e8             	mov    %r13d,%eax
  10dc93:	2b 84 24 a0 00 00 00 	sub    0xa0(%rsp),%eax
  10dc9a:	0f 8e 50 01 00 00    	jle    10ddf0 <_svfprintf_r+0x1250>
  10dca0:	48 8d 0d 49 3e ff ff 	lea    -0xc1b7(%rip),%rcx        # 101af0 <_svfprintf_r.zeroes>
  10dca7:	49 89 0e             	mov    %rcx,(%r14)
  10dcaa:	83 f8 11             	cmp    $0x11,%eax
  10dcad:	44 8b 64 24 14       	mov    0x14(%rsp),%r12d
  10dcb2:	7c 7b                	jl     10dd2f <_svfprintf_r+0x118f>
  10dcb4:	41 83 c5 10          	add    $0x10,%r13d
  10dcb8:	44 2b ac 24 a0 00 00 	sub    0xa0(%rsp),%r13d
  10dcbf:	00 
  10dcc0:	49 c7 46 08 10 00 00 	movq   $0x10,0x8(%r14)
  10dcc7:	00 
  10dcc8:	48 83 44 24 28 10    	addq   $0x10,0x28(%rsp)
  10dcce:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10dcd2:	8d 48 01             	lea    0x1(%rax),%ecx
  10dcd5:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10dcd9:	83 f8 07             	cmp    $0x7,%eax
  10dcdc:	7c 32                	jl     10dd10 <_svfprintf_r+0x1170>
  10dcde:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10dce3:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10dce8:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10dced:	e8 2e 11 00 00       	call   10ee20 <__ssprint_r>
  10dcf2:	66 0f 6f 94 24 80 00 	movdqa 0x80(%rsp),%xmm2
  10dcf9:	00 00 
  10dcfb:	4c 8d b4 24 20 01 00 	lea    0x120(%rsp),%r14
  10dd02:	00 
  10dd03:	85 c0                	test   %eax,%eax
  10dd05:	74 0d                	je     10dd14 <_svfprintf_r+0x1174>
  10dd07:	e9 20 10 00 00       	jmp    10ed2c <_svfprintf_r+0x218c>
  10dd0c:	0f 1f 40 00          	nopl   0x0(%rax)
  10dd10:	49 83 c6 10          	add    $0x10,%r14
  10dd14:	48 8d 05 d5 3d ff ff 	lea    -0xc22b(%rip),%rax        # 101af0 <_svfprintf_r.zeroes>
  10dd1b:	49 89 06             	mov    %rax,(%r14)
  10dd1e:	41 83 c5 f0          	add    $0xfffffff0,%r13d
  10dd22:	41 83 fd 20          	cmp    $0x20,%r13d
  10dd26:	7f 98                	jg     10dcc0 <_svfprintf_r+0x1120>
  10dd28:	41 83 c5 f0          	add    $0xfffffff0,%r13d
  10dd2c:	44 89 e8             	mov    %r13d,%eax
  10dd2f:	48 98                	cltq   
  10dd31:	49 89 46 08          	mov    %rax,0x8(%r14)
  10dd35:	48 01 44 24 28       	add    %rax,0x28(%rsp)
  10dd3a:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10dd3e:	8d 48 01             	lea    0x1(%rax),%ecx
  10dd41:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10dd45:	83 f8 07             	cmp    $0x7,%eax
  10dd48:	44 8b 6c 24 38       	mov    0x38(%rsp),%r13d
  10dd4d:	0f 8c 3d 01 00 00    	jl     10de90 <_svfprintf_r+0x12f0>
  10dd53:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10dd58:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10dd5d:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10dd62:	e8 b9 10 00 00       	call   10ee20 <__ssprint_r>
  10dd67:	66 0f 6f 94 24 80 00 	movdqa 0x80(%rsp),%xmm2
  10dd6e:	00 00 
  10dd70:	4c 8d b4 24 20 01 00 	lea    0x120(%rsp),%r14
  10dd77:	00 
  10dd78:	85 c0                	test   %eax,%eax
  10dd7a:	0f 85 0f 10 00 00    	jne    10ed8f <_svfprintf_r+0x21ef>
  10dd80:	41 f7 c4 00 01 00 00 	test   $0x100,%r12d
  10dd87:	75 7a                	jne    10de03 <_svfprintf_r+0x1263>
  10dd89:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  10dd8e:	49 89 06             	mov    %rax,(%r14)
  10dd91:	48 63 84 24 a0 00 00 	movslq 0xa0(%rsp),%rax
  10dd98:	00 
  10dd99:	49 89 46 08          	mov    %rax,0x8(%r14)
  10dd9d:	48 01 44 24 28       	add    %rax,0x28(%rsp)
  10dda2:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10dda6:	8d 48 01             	lea    0x1(%rax),%ecx
  10dda9:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10ddad:	83 f8 07             	cmp    $0x7,%eax
  10ddb0:	0f 8c f0 00 00 00    	jl     10dea6 <_svfprintf_r+0x1306>
  10ddb6:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10ddbb:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10ddc0:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10ddc5:	e8 56 10 00 00       	call   10ee20 <__ssprint_r>
  10ddca:	4c 8d bc 24 20 01 00 	lea    0x120(%rsp),%r15
  10ddd1:	00 
  10ddd2:	4d 89 fe             	mov    %r15,%r14
  10ddd5:	85 c0                	test   %eax,%eax
  10ddd7:	0f 84 33 0b 00 00    	je     10e910 <_svfprintf_r+0x1d70>
  10dddd:	e9 ad 0f 00 00       	jmp    10ed8f <_svfprintf_r+0x21ef>
  10dde2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10dde9:	00 00 00 
  10ddec:	0f 1f 40 00          	nopl   0x0(%rax)
  10ddf0:	44 8b 6c 24 38       	mov    0x38(%rsp),%r13d
  10ddf5:	44 8b 64 24 14       	mov    0x14(%rsp),%r12d
  10ddfa:	41 f7 c4 00 01 00 00 	test   $0x100,%r12d
  10de01:	74 86                	je     10dd89 <_svfprintf_r+0x11e9>
  10de03:	41 83 ff 66          	cmp    $0x66,%r15d
  10de07:	0f 8c aa 00 00 00    	jl     10deb7 <_svfprintf_r+0x1317>
  10de0d:	66 0f 2e 15 cb 3a ff 	ucomisd -0xc535(%rip),%xmm2        # 1018e0 <_ZTVN3usb14HIDMouseDriverE+0xb0>
  10de14:	ff 
  10de15:	4c 8d bc 24 20 01 00 	lea    0x120(%rsp),%r15
  10de1c:	00 
  10de1d:	0f 85 7c 01 00 00    	jne    10df9f <_svfprintf_r+0x13ff>
  10de23:	0f 8a 76 01 00 00    	jp     10df9f <_svfprintf_r+0x13ff>
  10de29:	48 8d 05 91 29 ff ff 	lea    -0xd66f(%rip),%rax        # 1007c1 <__dso_handle+0x7c1>
  10de30:	49 89 06             	mov    %rax,(%r14)
  10de33:	49 c7 46 08 01 00 00 	movq   $0x1,0x8(%r14)
  10de3a:	00 
  10de3b:	48 83 44 24 28 01    	addq   $0x1,0x28(%rsp)
  10de41:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10de45:	8d 48 01             	lea    0x1(%rax),%ecx
  10de48:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10de4c:	83 f8 07             	cmp    $0x7,%eax
  10de4f:	0f 8c c6 01 00 00    	jl     10e01b <_svfprintf_r+0x147b>
  10de55:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10de5a:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10de5f:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10de64:	e8 b7 0f 00 00       	call   10ee20 <__ssprint_r>
  10de69:	4d 89 fe             	mov    %r15,%r14
  10de6c:	85 c0                	test   %eax,%eax
  10de6e:	44 8b 64 24 14       	mov    0x14(%rsp),%r12d
  10de73:	0f 85 16 0f 00 00    	jne    10ed8f <_svfprintf_r+0x21ef>
  10de79:	41 f6 c4 01          	test   $0x1,%r12b
  10de7d:	0f 84 a7 01 00 00    	je     10e02a <_svfprintf_r+0x148a>
  10de83:	e9 b4 01 00 00       	jmp    10e03c <_svfprintf_r+0x149c>
  10de88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10de8f:	00 
  10de90:	49 83 c6 10          	add    $0x10,%r14
  10de94:	41 f7 c4 00 01 00 00 	test   $0x100,%r12d
  10de9b:	0f 84 e8 fe ff ff    	je     10dd89 <_svfprintf_r+0x11e9>
  10dea1:	e9 5d ff ff ff       	jmp    10de03 <_svfprintf_r+0x1263>
  10dea6:	49 83 c6 10          	add    $0x10,%r14
  10deaa:	4c 8d bc 24 20 01 00 	lea    0x120(%rsp),%r15
  10deb1:	00 
  10deb2:	e9 59 0a 00 00       	jmp    10e910 <_svfprintf_r+0x1d70>
  10deb7:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  10debc:	49 89 06             	mov    %rax,(%r14)
  10debf:	49 c7 46 08 01 00 00 	movq   $0x1,0x8(%r14)
  10dec6:	00 
  10dec7:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  10decc:	48 83 c0 01          	add    $0x1,%rax
  10ded0:	49 83 c6 10          	add    $0x10,%r14
  10ded4:	8b 54 24 20          	mov    0x20(%rsp),%edx
  10ded8:	8d 4a 01             	lea    0x1(%rdx),%ecx
  10dedb:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  10dee0:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10dee4:	83 bc 24 b0 00 00 00 	cmpl   $0x1,0xb0(%rsp)
  10deeb:	01 
  10deec:	4c 8d bc 24 20 01 00 	lea    0x120(%rsp),%r15
  10def3:	00 
  10def4:	7f 17                	jg     10df0d <_svfprintf_r+0x136d>
  10def6:	8b 74 24 14          	mov    0x14(%rsp),%esi
  10defa:	83 e6 01             	and    $0x1,%esi
  10defd:	75 0e                	jne    10df0d <_svfprintf_r+0x136d>
  10deff:	83 fa 07             	cmp    $0x7,%edx
  10df02:	0f 8c 86 02 00 00    	jl     10e18e <_svfprintf_r+0x15ee>
  10df08:	e9 c4 01 00 00       	jmp    10e0d1 <_svfprintf_r+0x1531>
  10df0d:	83 fa 07             	cmp    $0x7,%edx
  10df10:	7c 31                	jl     10df43 <_svfprintf_r+0x13a3>
  10df12:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10df17:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10df1c:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10df21:	e8 fa 0e 00 00       	call   10ee20 <__ssprint_r>
  10df26:	85 c0                	test   %eax,%eax
  10df28:	0f 85 61 0e 00 00    	jne    10ed8f <_svfprintf_r+0x21ef>
  10df2e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  10df33:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
  10df37:	4d 89 fe             	mov    %r15,%r14
  10df3a:	66 0f 6f 94 24 80 00 	movdqa 0x80(%rsp),%xmm2
  10df41:	00 00 
  10df43:	48 8b 94 24 d0 00 00 	mov    0xd0(%rsp),%rdx
  10df4a:	00 
  10df4b:	49 89 16             	mov    %rdx,(%r14)
  10df4e:	48 8b 94 24 a8 00 00 	mov    0xa8(%rsp),%rdx
  10df55:	00 
  10df56:	49 89 56 08          	mov    %rdx,0x8(%r14)
  10df5a:	48 01 d0             	add    %rdx,%rax
  10df5d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  10df62:	8d 41 01             	lea    0x1(%rcx),%eax
  10df65:	89 44 24 20          	mov    %eax,0x20(%rsp)
  10df69:	83 f9 07             	cmp    $0x7,%ecx
  10df6c:	0f 8c 1e 01 00 00    	jl     10e090 <_svfprintf_r+0x14f0>
  10df72:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10df77:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10df7c:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10df81:	e8 9a 0e 00 00       	call   10ee20 <__ssprint_r>
  10df86:	66 0f 6f 94 24 80 00 	movdqa 0x80(%rsp),%xmm2
  10df8d:	00 00 
  10df8f:	4d 89 fe             	mov    %r15,%r14
  10df92:	85 c0                	test   %eax,%eax
  10df94:	0f 84 fa 00 00 00    	je     10e094 <_svfprintf_r+0x14f4>
  10df9a:	e9 f0 0d 00 00       	jmp    10ed8f <_svfprintf_r+0x21ef>
  10df9f:	8b 44 24 44          	mov    0x44(%rsp),%eax
  10dfa3:	85 c0                	test   %eax,%eax
  10dfa5:	0f 8e d0 02 00 00    	jle    10e27b <_svfprintf_r+0x16db>
  10dfab:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  10dfb2:	00 
  10dfb3:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  10dfb8:	39 c8                	cmp    %ecx,%eax
  10dfba:	41 89 c7             	mov    %eax,%r15d
  10dfbd:	44 0f 4f f9          	cmovg  %ecx,%r15d
  10dfc1:	45 85 ff             	test   %r15d,%r15d
  10dfc4:	0f 8e 14 03 00 00    	jle    10e2de <_svfprintf_r+0x173e>
  10dfca:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  10dfcf:	49 89 06             	mov    %rax,(%r14)
  10dfd2:	49 63 c7             	movslq %r15d,%rax
  10dfd5:	49 89 46 08          	mov    %rax,0x8(%r14)
  10dfd9:	48 01 44 24 28       	add    %rax,0x28(%rsp)
  10dfde:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10dfe2:	8d 48 01             	lea    0x1(%rax),%ecx
  10dfe5:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10dfe9:	83 f8 07             	cmp    $0x7,%eax
  10dfec:	0f 8c e8 02 00 00    	jl     10e2da <_svfprintf_r+0x173a>
  10dff2:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10dff7:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10dffc:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10e001:	e8 1a 0e 00 00       	call   10ee20 <__ssprint_r>
  10e006:	4c 8d b4 24 20 01 00 	lea    0x120(%rsp),%r14
  10e00d:	00 
  10e00e:	85 c0                	test   %eax,%eax
  10e010:	0f 84 c8 02 00 00    	je     10e2de <_svfprintf_r+0x173e>
  10e016:	e9 74 0d 00 00       	jmp    10ed8f <_svfprintf_r+0x21ef>
  10e01b:	49 83 c6 10          	add    $0x10,%r14
  10e01f:	44 8b 64 24 14       	mov    0x14(%rsp),%r12d
  10e024:	41 f6 c4 01          	test   $0x1,%r12b
  10e028:	75 12                	jne    10e03c <_svfprintf_r+0x149c>
  10e02a:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  10e031:	00 
  10e032:	39 44 24 44          	cmp    %eax,0x44(%rsp)
  10e036:	0f 8d d4 08 00 00    	jge    10e910 <_svfprintf_r+0x1d70>
  10e03c:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  10e043:	00 
  10e044:	49 89 06             	mov    %rax,(%r14)
  10e047:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  10e04e:	00 
  10e04f:	49 89 46 08          	mov    %rax,0x8(%r14)
  10e053:	48 01 44 24 28       	add    %rax,0x28(%rsp)
  10e058:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10e05c:	8d 48 01             	lea    0x1(%rax),%ecx
  10e05f:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10e063:	83 f8 07             	cmp    $0x7,%eax
  10e066:	0f 8c 7d 01 00 00    	jl     10e1e9 <_svfprintf_r+0x1649>
  10e06c:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10e071:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10e076:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10e07b:	e8 a0 0d 00 00       	call   10ee20 <__ssprint_r>
  10e080:	4d 89 fe             	mov    %r15,%r14
  10e083:	85 c0                	test   %eax,%eax
  10e085:	0f 84 62 01 00 00    	je     10e1ed <_svfprintf_r+0x164d>
  10e08b:	e9 ff 0c 00 00       	jmp    10ed8f <_svfprintf_r+0x21ef>
  10e090:	49 83 c6 10          	add    $0x10,%r14
  10e094:	66 0f 2e 15 44 38 ff 	ucomisd -0xc7bc(%rip),%xmm2        # 1018e0 <_ZTVN3usb14HIDMouseDriverE+0xb0>
  10e09b:	ff 
  10e09c:	75 02                	jne    10e0a0 <_svfprintf_r+0x1500>
  10e09e:	7b 5e                	jnp    10e0fe <_svfprintf_r+0x155e>
  10e0a0:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  10e0a5:	48 83 c0 01          	add    $0x1,%rax
  10e0a9:	49 89 06             	mov    %rax,(%r14)
  10e0ac:	48 63 84 24 b0 00 00 	movslq 0xb0(%rsp),%rax
  10e0b3:	00 
  10e0b4:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
  10e0b8:	49 89 46 08          	mov    %rax,0x8(%r14)
  10e0bc:	48 01 44 24 28       	add    %rax,0x28(%rsp)
  10e0c1:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10e0c5:	8d 48 01             	lea    0x1(%rax),%ecx
  10e0c8:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10e0cc:	83 f8 07             	cmp    $0x7,%eax
  10e0cf:	7c 24                	jl     10e0f5 <_svfprintf_r+0x1555>
  10e0d1:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10e0d6:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10e0db:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10e0e0:	e8 3b 0d 00 00       	call   10ee20 <__ssprint_r>
  10e0e5:	4d 89 fe             	mov    %r15,%r14
  10e0e8:	85 c0                	test   %eax,%eax
  10e0ea:	0f 84 9e 00 00 00    	je     10e18e <_svfprintf_r+0x15ee>
  10e0f0:	e9 9a 0c 00 00       	jmp    10ed8f <_svfprintf_r+0x21ef>
  10e0f5:	49 83 c6 10          	add    $0x10,%r14
  10e0f9:	e9 90 00 00 00       	jmp    10e18e <_svfprintf_r+0x15ee>
  10e0fe:	48 8b 8c 24 b0 00 00 	mov    0xb0(%rsp),%rcx
  10e105:	00 
  10e106:	83 f9 02             	cmp    $0x2,%ecx
  10e109:	0f 8c 7f 00 00 00    	jl     10e18e <_svfprintf_r+0x15ee>
  10e10f:	48 8d 05 da 39 ff ff 	lea    -0xc626(%rip),%rax        # 101af0 <_svfprintf_r.zeroes>
  10e116:	49 89 06             	mov    %rax,(%r14)
  10e119:	83 f9 12             	cmp    $0x12,%ecx
  10e11c:	0f 8c 5c 09 00 00    	jl     10ea7e <_svfprintf_r+0x1ede>
  10e122:	8d 59 0f             	lea    0xf(%rcx),%ebx
  10e125:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10e12c:	00 00 00 
  10e12f:	90                   	nop
  10e130:	49 c7 46 08 10 00 00 	movq   $0x10,0x8(%r14)
  10e137:	00 
  10e138:	48 83 44 24 28 10    	addq   $0x10,0x28(%rsp)
  10e13e:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10e142:	8d 48 01             	lea    0x1(%rax),%ecx
  10e145:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10e149:	83 f8 07             	cmp    $0x7,%eax
  10e14c:	7c 22                	jl     10e170 <_svfprintf_r+0x15d0>
  10e14e:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10e153:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10e158:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10e15d:	e8 be 0c 00 00       	call   10ee20 <__ssprint_r>
  10e162:	4d 89 fe             	mov    %r15,%r14
  10e165:	85 c0                	test   %eax,%eax
  10e167:	74 0b                	je     10e174 <_svfprintf_r+0x15d4>
  10e169:	e9 21 0c 00 00       	jmp    10ed8f <_svfprintf_r+0x21ef>
  10e16e:	66 90                	xchg   %ax,%ax
  10e170:	49 83 c6 10          	add    $0x10,%r14
  10e174:	48 8d 05 75 39 ff ff 	lea    -0xc68b(%rip),%rax        # 101af0 <_svfprintf_r.zeroes>
  10e17b:	49 89 06             	mov    %rax,(%r14)
  10e17e:	83 c3 f0             	add    $0xfffffff0,%ebx
  10e181:	83 fb 20             	cmp    $0x20,%ebx
  10e184:	7f aa                	jg     10e130 <_svfprintf_r+0x1590>
  10e186:	83 c3 f0             	add    $0xfffffff0,%ebx
  10e189:	e9 f3 08 00 00       	jmp    10ea81 <_svfprintf_r+0x1ee1>
  10e18e:	48 8d 44 24 3d       	lea    0x3d(%rsp),%rax
  10e193:	49 89 06             	mov    %rax,(%r14)
  10e196:	48 63 84 24 d8 00 00 	movslq 0xd8(%rsp),%rax
  10e19d:	00 
  10e19e:	49 89 46 08          	mov    %rax,0x8(%r14)
  10e1a2:	48 01 44 24 28       	add    %rax,0x28(%rsp)
  10e1a7:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10e1ab:	8d 48 01             	lea    0x1(%rax),%ecx
  10e1ae:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10e1b2:	83 f8 07             	cmp    $0x7,%eax
  10e1b5:	7c 29                	jl     10e1e0 <_svfprintf_r+0x1640>
  10e1b7:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10e1bc:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10e1c1:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10e1c6:	e8 55 0c 00 00       	call   10ee20 <__ssprint_r>
  10e1cb:	4d 89 fe             	mov    %r15,%r14
  10e1ce:	85 c0                	test   %eax,%eax
  10e1d0:	44 8b 64 24 14       	mov    0x14(%rsp),%r12d
  10e1d5:	0f 84 35 07 00 00    	je     10e910 <_svfprintf_r+0x1d70>
  10e1db:	e9 af 0b 00 00       	jmp    10ed8f <_svfprintf_r+0x21ef>
  10e1e0:	49 83 c6 10          	add    $0x10,%r14
  10e1e4:	e9 22 07 00 00       	jmp    10e90b <_svfprintf_r+0x1d6b>
  10e1e9:	49 83 c6 10          	add    $0x10,%r14
  10e1ed:	48 8b 8c 24 b0 00 00 	mov    0xb0(%rsp),%rcx
  10e1f4:	00 
  10e1f5:	83 f9 02             	cmp    $0x2,%ecx
  10e1f8:	0f 8c 0d 07 00 00    	jl     10e90b <_svfprintf_r+0x1d6b>
  10e1fe:	48 8d 05 eb 38 ff ff 	lea    -0xc715(%rip),%rax        # 101af0 <_svfprintf_r.zeroes>
  10e205:	49 89 06             	mov    %rax,(%r14)
  10e208:	83 f9 12             	cmp    $0x12,%ecx
  10e20b:	0f 8c be 00 00 00    	jl     10e2cf <_svfprintf_r+0x172f>
  10e211:	8d 59 0f             	lea    0xf(%rcx),%ebx
  10e214:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10e21b:	00 00 00 
  10e21e:	66 90                	xchg   %ax,%ax
  10e220:	49 c7 46 08 10 00 00 	movq   $0x10,0x8(%r14)
  10e227:	00 
  10e228:	48 83 44 24 28 10    	addq   $0x10,0x28(%rsp)
  10e22e:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10e232:	8d 48 01             	lea    0x1(%rax),%ecx
  10e235:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10e239:	83 f8 07             	cmp    $0x7,%eax
  10e23c:	7c 22                	jl     10e260 <_svfprintf_r+0x16c0>
  10e23e:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10e243:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10e248:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10e24d:	e8 ce 0b 00 00       	call   10ee20 <__ssprint_r>
  10e252:	4d 89 fe             	mov    %r15,%r14
  10e255:	85 c0                	test   %eax,%eax
  10e257:	74 0b                	je     10e264 <_svfprintf_r+0x16c4>
  10e259:	e9 31 0b 00 00       	jmp    10ed8f <_svfprintf_r+0x21ef>
  10e25e:	66 90                	xchg   %ax,%ax
  10e260:	49 83 c6 10          	add    $0x10,%r14
  10e264:	48 8d 05 85 38 ff ff 	lea    -0xc77b(%rip),%rax        # 101af0 <_svfprintf_r.zeroes>
  10e26b:	49 89 06             	mov    %rax,(%r14)
  10e26e:	83 c3 f0             	add    $0xfffffff0,%ebx
  10e271:	83 fb 20             	cmp    $0x20,%ebx
  10e274:	7f aa                	jg     10e220 <_svfprintf_r+0x1680>
  10e276:	83 c3 f0             	add    $0xfffffff0,%ebx
  10e279:	eb 57                	jmp    10e2d2 <_svfprintf_r+0x1732>
  10e27b:	48 8d 0d 3f 25 ff ff 	lea    -0xdac1(%rip),%rcx        # 1007c1 <__dso_handle+0x7c1>
  10e282:	49 89 0e             	mov    %rcx,(%r14)
  10e285:	49 c7 46 08 01 00 00 	movq   $0x1,0x8(%r14)
  10e28c:	00 
  10e28d:	48 83 44 24 28 01    	addq   $0x1,0x28(%rsp)
  10e293:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
  10e297:	8d 51 01             	lea    0x1(%rcx),%edx
  10e29a:	89 54 24 20          	mov    %edx,0x20(%rsp)
  10e29e:	83 f9 07             	cmp    $0x7,%ecx
  10e2a1:	0f 8c 27 01 00 00    	jl     10e3ce <_svfprintf_r+0x182e>
  10e2a7:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10e2ac:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10e2b1:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10e2b6:	e8 65 0b 00 00       	call   10ee20 <__ssprint_r>
  10e2bb:	85 c0                	test   %eax,%eax
  10e2bd:	0f 85 cc 0a 00 00    	jne    10ed8f <_svfprintf_r+0x21ef>
  10e2c3:	8b 44 24 44          	mov    0x44(%rsp),%eax
  10e2c7:	4d 89 fe             	mov    %r15,%r14
  10e2ca:	e9 03 01 00 00       	jmp    10e3d2 <_svfprintf_r+0x1832>
  10e2cf:	8d 59 ff             	lea    -0x1(%rcx),%ebx
  10e2d2:	48 63 c3             	movslq %ebx,%rax
  10e2d5:	e9 c4 fe ff ff       	jmp    10e19e <_svfprintf_r+0x15fe>
  10e2da:	49 83 c6 10          	add    $0x10,%r14
  10e2de:	45 85 ff             	test   %r15d,%r15d
  10e2e1:	b8 00 00 00 00       	mov    $0x0,%eax
  10e2e6:	44 0f 48 f8          	cmovs  %eax,%r15d
  10e2ea:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  10e2ef:	89 c3                	mov    %eax,%ebx
  10e2f1:	44 29 fb             	sub    %r15d,%ebx
  10e2f4:	0f 8e 80 01 00 00    	jle    10e47a <_svfprintf_r+0x18da>
  10e2fa:	48 8d 05 ef 37 ff ff 	lea    -0xc811(%rip),%rax        # 101af0 <_svfprintf_r.zeroes>
  10e301:	49 89 06             	mov    %rax,(%r14)
  10e304:	83 fb 11             	cmp    $0x11,%ebx
  10e307:	7c 72                	jl     10e37b <_svfprintf_r+0x17db>
  10e309:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  10e30e:	8d 58 10             	lea    0x10(%rax),%ebx
  10e311:	44 29 fb             	sub    %r15d,%ebx
  10e314:	4c 8d bc 24 20 01 00 	lea    0x120(%rsp),%r15
  10e31b:	00 
  10e31c:	0f 1f 40 00          	nopl   0x0(%rax)
  10e320:	49 c7 46 08 10 00 00 	movq   $0x10,0x8(%r14)
  10e327:	00 
  10e328:	48 83 44 24 28 10    	addq   $0x10,0x28(%rsp)
  10e32e:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10e332:	8d 48 01             	lea    0x1(%rax),%ecx
  10e335:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10e339:	83 f8 07             	cmp    $0x7,%eax
  10e33c:	7c 22                	jl     10e360 <_svfprintf_r+0x17c0>
  10e33e:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10e343:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10e348:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10e34d:	e8 ce 0a 00 00       	call   10ee20 <__ssprint_r>
  10e352:	4d 89 fe             	mov    %r15,%r14
  10e355:	85 c0                	test   %eax,%eax
  10e357:	74 0b                	je     10e364 <_svfprintf_r+0x17c4>
  10e359:	e9 31 0a 00 00       	jmp    10ed8f <_svfprintf_r+0x21ef>
  10e35e:	66 90                	xchg   %ax,%ax
  10e360:	49 83 c6 10          	add    $0x10,%r14
  10e364:	48 8d 05 85 37 ff ff 	lea    -0xc87b(%rip),%rax        # 101af0 <_svfprintf_r.zeroes>
  10e36b:	49 89 06             	mov    %rax,(%r14)
  10e36e:	83 c3 f0             	add    $0xfffffff0,%ebx
  10e371:	83 fb 20             	cmp    $0x20,%ebx
  10e374:	7f aa                	jg     10e320 <_svfprintf_r+0x1780>
  10e376:	83 c3 f0             	add    $0xfffffff0,%ebx
  10e379:	eb 08                	jmp    10e383 <_svfprintf_r+0x17e3>
  10e37b:	4c 8d bc 24 20 01 00 	lea    0x120(%rsp),%r15
  10e382:	00 
  10e383:	48 63 c3             	movslq %ebx,%rax
  10e386:	49 89 46 08          	mov    %rax,0x8(%r14)
  10e38a:	48 01 44 24 28       	add    %rax,0x28(%rsp)
  10e38f:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10e393:	8d 48 01             	lea    0x1(%rax),%ecx
  10e396:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10e39a:	83 f8 07             	cmp    $0x7,%eax
  10e39d:	0f 8c d3 00 00 00    	jl     10e476 <_svfprintf_r+0x18d6>
  10e3a3:	48 8b 5c 24 30       	mov    0x30(%rsp),%rbx
  10e3a8:	48 89 df             	mov    %rbx,%rdi
  10e3ab:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10e3b0:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10e3b5:	e8 66 0a 00 00       	call   10ee20 <__ssprint_r>
  10e3ba:	4d 89 fe             	mov    %r15,%r14
  10e3bd:	85 c0                	test   %eax,%eax
  10e3bf:	8b 44 24 14          	mov    0x14(%rsp),%eax
  10e3c3:	0f 84 ba 00 00 00    	je     10e483 <_svfprintf_r+0x18e3>
  10e3c9:	e9 c1 09 00 00       	jmp    10ed8f <_svfprintf_r+0x21ef>
  10e3ce:	49 83 c6 10          	add    $0x10,%r14
  10e3d2:	8b 4c 24 14          	mov    0x14(%rsp),%ecx
  10e3d6:	83 e1 01             	and    $0x1,%ecx
  10e3d9:	0b 8c 24 b0 00 00 00 	or     0xb0(%rsp),%ecx
  10e3e0:	09 c1                	or     %eax,%ecx
  10e3e2:	0f 84 23 05 00 00    	je     10e90b <_svfprintf_r+0x1d6b>
  10e3e8:	48 8b 8c 24 d0 00 00 	mov    0xd0(%rsp),%rcx
  10e3ef:	00 
  10e3f0:	49 89 0e             	mov    %rcx,(%r14)
  10e3f3:	48 8b 8c 24 a8 00 00 	mov    0xa8(%rsp),%rcx
  10e3fa:	00 
  10e3fb:	49 89 4e 08          	mov    %rcx,0x8(%r14)
  10e3ff:	48 01 4c 24 28       	add    %rcx,0x28(%rsp)
  10e404:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
  10e408:	8d 51 01             	lea    0x1(%rcx),%edx
  10e40b:	89 54 24 20          	mov    %edx,0x20(%rsp)
  10e40f:	83 f9 07             	cmp    $0x7,%ecx
  10e412:	0f 8c 71 06 00 00    	jl     10ea89 <_svfprintf_r+0x1ee9>
  10e418:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10e41d:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10e422:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10e427:	e8 f4 09 00 00       	call   10ee20 <__ssprint_r>
  10e42c:	85 c0                	test   %eax,%eax
  10e42e:	0f 85 5b 09 00 00    	jne    10ed8f <_svfprintf_r+0x21ef>
  10e434:	8b 44 24 44          	mov    0x44(%rsp),%eax
  10e438:	4d 89 fe             	mov    %r15,%r14
  10e43b:	85 c0                	test   %eax,%eax
  10e43d:	0f 89 2d 07 00 00    	jns    10eb70 <_svfprintf_r+0x1fd0>
  10e443:	e9 4d 06 00 00       	jmp    10ea95 <_svfprintf_r+0x1ef5>
  10e448:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  10e44d:	e8 6e 22 00 00       	call   1106c0 <strlen>
  10e452:	48 89 c1             	mov    %rax,%rcx
  10e455:	31 c0                	xor    %eax,%eax
  10e457:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  10e45c:	48 89 c8             	mov    %rcx,%rax
  10e45f:	41 bf 73 00 00 00    	mov    $0x73,%r15d
  10e465:	45 31 ed             	xor    %r13d,%r13d
  10e468:	66 0f 6f 94 24 80 00 	movdqa 0x80(%rsp),%xmm2
  10e46f:	00 00 
  10e471:	e9 e1 f4 ff ff       	jmp    10d957 <_svfprintf_r+0xdb7>
  10e476:	49 83 c6 10          	add    $0x10,%r14
  10e47a:	48 8b 5c 24 30       	mov    0x30(%rsp),%rbx
  10e47f:	8b 44 24 14          	mov    0x14(%rsp),%eax
  10e483:	44 8b 7c 24 44       	mov    0x44(%rsp),%r15d
  10e488:	a8 01                	test   $0x1,%al
  10e48a:	75 0e                	jne    10e49a <_svfprintf_r+0x18fa>
  10e48c:	44 3b bc 24 b0 00 00 	cmp    0xb0(%rsp),%r15d
  10e493:	00 
  10e494:	0f 8d 10 03 00 00    	jge    10e7aa <_svfprintf_r+0x1c0a>
  10e49a:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  10e4a1:	00 
  10e4a2:	49 89 06             	mov    %rax,(%r14)
  10e4a5:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  10e4ac:	00 
  10e4ad:	49 89 46 08          	mov    %rax,0x8(%r14)
  10e4b1:	48 01 44 24 28       	add    %rax,0x28(%rsp)
  10e4b6:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10e4ba:	8d 48 01             	lea    0x1(%rax),%ecx
  10e4bd:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10e4c1:	83 f8 07             	cmp    $0x7,%eax
  10e4c4:	0f 8c dc 02 00 00    	jl     10e7a6 <_svfprintf_r+0x1c06>
  10e4ca:	48 89 df             	mov    %rbx,%rdi
  10e4cd:	4c 8b 64 24 08       	mov    0x8(%rsp),%r12
  10e4d2:	4c 89 e6             	mov    %r12,%rsi
  10e4d5:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10e4da:	e8 41 09 00 00       	call   10ee20 <__ssprint_r>
  10e4df:	85 c0                	test   %eax,%eax
  10e4e1:	0f 85 86 08 00 00    	jne    10ed6d <_svfprintf_r+0x21cd>
  10e4e7:	44 8b 7c 24 44       	mov    0x44(%rsp),%r15d
  10e4ec:	4c 8d b4 24 20 01 00 	lea    0x120(%rsp),%r14
  10e4f3:	00 
  10e4f4:	e9 b1 02 00 00       	jmp    10e7aa <_svfprintf_r+0x1c0a>
  10e4f9:	8b 4c 24 44          	mov    0x44(%rsp),%ecx
  10e4fd:	48 63 c9             	movslq %ecx,%rcx
  10e500:	48 01 ce             	add    %rcx,%rsi
  10e503:	66 0f ef c0          	pxor   %xmm0,%xmm0
  10e507:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
  10e50b:	75 22                	jne    10e52f <_svfprintf_r+0x198f>
  10e50d:	7a 20                	jp     10e52f <_svfprintf_r+0x198f>
  10e50f:	48 89 b4 24 98 00 00 	mov    %rsi,0x98(%rsp)
  10e516:	00 
  10e517:	48 89 f2             	mov    %rsi,%rdx
  10e51a:	eb 20                	jmp    10e53c <_svfprintf_r+0x199c>
  10e51c:	0f 1f 40 00          	nopl   0x0(%rax)
  10e520:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  10e524:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  10e52b:	00 
  10e52c:	c6 02 30             	movb   $0x30,(%rdx)
  10e52f:	48 8b 94 24 98 00 00 	mov    0x98(%rsp),%rdx
  10e536:	00 
  10e537:	48 39 f2             	cmp    %rsi,%rdx
  10e53a:	72 e4                	jb     10e520 <_svfprintf_r+0x1980>
  10e53c:	29 c2                	sub    %eax,%edx
  10e53e:	41 83 fc 67          	cmp    $0x67,%r12d
  10e542:	48 89 94 24 b0 00 00 	mov    %rdx,0xb0(%rsp)
  10e549:	00 
  10e54a:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  10e54f:	0f 85 33 01 00 00    	jne    10e688 <_svfprintf_r+0x1ae8>
  10e555:	8b 7c 24 44          	mov    0x44(%rsp),%edi
  10e559:	41 83 c7 fe          	add    $0xfffffffe,%r15d
  10e55d:	83 ff fd             	cmp    $0xfffffffd,%edi
  10e560:	48 8b b4 24 d8 00 00 	mov    0xd8(%rsp),%rsi
  10e567:	00 
  10e568:	44 8b 64 24 14       	mov    0x14(%rsp),%r12d
  10e56d:	7c 13                	jl     10e582 <_svfprintf_r+0x19e2>
  10e56f:	41 b8 67 00 00 00    	mov    $0x67,%r8d
  10e575:	3b bc 24 a0 00 00 00 	cmp    0xa0(%rsp),%edi
  10e57c:	0f 8e c3 01 00 00    	jle    10e745 <_svfprintf_r+0x1ba5>
  10e582:	41 83 ff 65          	cmp    $0x65,%r15d
  10e586:	0f 8f 13 01 00 00    	jg     10e69f <_svfprintf_r+0x1aff>
  10e58c:	49 89 d9             	mov    %rbx,%r9
  10e58f:	8b 44 24 44          	mov    0x44(%rsp),%eax
  10e593:	8d 48 ff             	lea    -0x1(%rax),%ecx
  10e596:	89 4c 24 44          	mov    %ecx,0x44(%rsp)
  10e59a:	44 88 7c 24 3d       	mov    %r15b,0x3d(%rsp)
  10e59f:	bb 01 00 00 00       	mov    $0x1,%ebx
  10e5a4:	29 c3                	sub    %eax,%ebx
  10e5a6:	85 c0                	test   %eax,%eax
  10e5a8:	0f 9e c0             	setle  %al
  10e5ab:	0f 4f d9             	cmovg  %ecx,%ebx
  10e5ae:	00 c0                	add    %al,%al
  10e5b0:	04 2b                	add    $0x2b,%al
  10e5b2:	88 44 24 3e          	mov    %al,0x3e(%rsp)
  10e5b6:	83 fb 0a             	cmp    $0xa,%ebx
  10e5b9:	0f 8c 28 01 00 00    	jl     10e6e7 <_svfprintf_r+0x1b47>
  10e5bf:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  10e5c6:	45 31 e4             	xor    %r12d,%r12d
  10e5c9:	48 8d 94 24 b0 00 00 	lea    0xb0(%rsp),%rdx
  10e5d0:	00 
  10e5d1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10e5d8:	00 00 00 
  10e5db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10e5e0:	4c 89 e6             	mov    %r12,%rsi
  10e5e3:	48 63 fb             	movslq %ebx,%rdi
  10e5e6:	48 69 df 67 66 66 66 	imul   $0x66666667,%rdi,%rbx
  10e5ed:	48 89 d8             	mov    %rbx,%rax
  10e5f0:	48 c1 e8 3f          	shr    $0x3f,%rax
  10e5f4:	48 c1 fb 22          	sar    $0x22,%rbx
  10e5f8:	01 c3                	add    %eax,%ebx
  10e5fa:	8d 04 1b             	lea    (%rbx,%rbx,1),%eax
  10e5fd:	8d 0c 80             	lea    (%rax,%rax,4),%ecx
  10e600:	89 f8                	mov    %edi,%eax
  10e602:	29 c8                	sub    %ecx,%eax
  10e604:	04 30                	add    $0x30,%al
  10e606:	4d 8d 64 24 ff       	lea    -0x1(%r12),%r12
  10e60b:	88 84 34 9e 00 00 00 	mov    %al,0x9e(%rsp,%rsi,1)
  10e612:	49 83 c5 01          	add    $0x1,%r13
  10e616:	48 83 c2 ff          	add    $0xffffffffffffffff,%rdx
  10e61a:	83 ff 63             	cmp    $0x63,%edi
  10e61d:	7f c1                	jg     10e5e0 <_svfprintf_r+0x1a40>
  10e61f:	80 c3 30             	add    $0x30,%bl
  10e622:	42 88 9c 24 9e 00 00 	mov    %bl,0x9e(%rsp,%r12,1)
  10e629:	00 
  10e62a:	4d 8d 44 24 01       	lea    0x1(%r12),%r8
  10e62f:	48 8d 4c 24 3f       	lea    0x3f(%rsp),%rcx
  10e634:	48 89 cf             	mov    %rcx,%rdi
  10e637:	49 83 f8 01          	cmp    $0x1,%r8
  10e63b:	0f 8f ba 00 00 00    	jg     10e6fb <_svfprintf_r+0x1b5b>
  10e641:	88 5c 24 3f          	mov    %bl,0x3f(%rsp)
  10e645:	48 8d 4c 24 40       	lea    0x40(%rsp),%rcx
  10e64a:	48 89 cf             	mov    %rcx,%rdi
  10e64d:	4d 85 e4             	test   %r12,%r12
  10e650:	0f 84 a5 00 00 00    	je     10e6fb <_svfprintf_r+0x1b5b>
  10e656:	88 44 24 40          	mov    %al,0x40(%rsp)
  10e65a:	48 8d 44 24 41       	lea    0x41(%rsp),%rax
  10e65f:	48 89 c7             	mov    %rax,%rdi
  10e662:	4d 85 c0             	test   %r8,%r8
  10e665:	0f 89 90 00 00 00    	jns    10e6fb <_svfprintf_r+0x1b5b>
  10e66b:	4c 89 e3             	mov    %r12,%rbx
  10e66e:	48 f7 d3             	not    %rbx
  10e671:	48 8d 44 24 41       	lea    0x41(%rsp),%rax
  10e676:	48 83 fb 20          	cmp    $0x20,%rbx
  10e67a:	0f 83 1a 05 00 00    	jae    10eb9a <_svfprintf_r+0x1ffa>
  10e680:	48 89 c7             	mov    %rax,%rdi
  10e683:	e9 82 06 00 00       	jmp    10ed0a <_svfprintf_r+0x216a>
  10e688:	48 8b b4 24 d8 00 00 	mov    0xd8(%rsp),%rsi
  10e68f:	00 
  10e690:	44 8b 64 24 14       	mov    0x14(%rsp),%r12d
  10e695:	41 83 ff 65          	cmp    $0x65,%r15d
  10e699:	0f 8e ed fe ff ff    	jle    10e58c <_svfprintf_r+0x19ec>
  10e69f:	8b 7c 24 44          	mov    0x44(%rsp),%edi
  10e6a3:	41 83 ff 66          	cmp    $0x66,%r15d
  10e6a7:	0f 85 95 00 00 00    	jne    10e742 <_svfprintf_r+0x1ba2>
  10e6ad:	44 0b 94 24 a0 00 00 	or     0xa0(%rsp),%r10d
  10e6b4:	00 
  10e6b5:	85 ff                	test   %edi,%edi
  10e6b7:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  10e6bc:	0f 8e 48 04 00 00    	jle    10eb0a <_svfprintf_r+0x1f6a>
  10e6c2:	41 bf 66 00 00 00    	mov    $0x66,%r15d
  10e6c8:	45 85 d2             	test   %r10d,%r10d
  10e6cb:	0f 84 57 04 00 00    	je     10eb28 <_svfprintf_r+0x1f88>
  10e6d1:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  10e6d8:	00 
  10e6d9:	03 84 24 a8 00 00 00 	add    0xa8(%rsp),%eax
  10e6e0:	01 f8                	add    %edi,%eax
  10e6e2:	e9 95 00 00 00       	jmp    10e77c <_svfprintf_r+0x1bdc>
  10e6e7:	c6 44 24 3f 30       	movb   $0x30,0x3f(%rsp)
  10e6ec:	80 c3 30             	add    $0x30,%bl
  10e6ef:	88 5c 24 40          	mov    %bl,0x40(%rsp)
  10e6f3:	48 8d 44 24 41       	lea    0x41(%rsp),%rax
  10e6f8:	48 89 c7             	mov    %rax,%rdi
  10e6fb:	48 8d 44 24 3d       	lea    0x3d(%rsp),%rax
  10e700:	29 c7                	sub    %eax,%edi
  10e702:	48 8b 8c 24 b0 00 00 	mov    0xb0(%rsp),%rcx
  10e709:	00 
  10e70a:	8d 04 0f             	lea    (%rdi,%rcx,1),%eax
  10e70d:	31 f6                	xor    %esi,%esi
  10e70f:	83 f9 02             	cmp    $0x2,%ecx
  10e712:	48 8b 8c 24 a8 00 00 	mov    0xa8(%rsp),%rcx
  10e719:	00 
  10e71a:	48 89 cb             	mov    %rcx,%rbx
  10e71d:	ba 00 00 00 00       	mov    $0x0,%edx
  10e722:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
  10e727:	0f 4c ce             	cmovl  %esi,%ecx
  10e72a:	45 85 d2             	test   %r10d,%r10d
  10e72d:	0f 45 cb             	cmovne %ebx,%ecx
  10e730:	01 c1                	add    %eax,%ecx
  10e732:	48 89 c8             	mov    %rcx,%rax
  10e735:	48 89 fe             	mov    %rdi,%rsi
  10e738:	4c 89 cb             	mov    %r9,%rbx
  10e73b:	44 8b 64 24 14       	mov    0x14(%rsp),%r12d
  10e740:	eb 3a                	jmp    10e77c <_svfprintf_r+0x1bdc>
  10e742:	45 89 f8             	mov    %r15d,%r8d
  10e745:	39 d7                	cmp    %edx,%edi
  10e747:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  10e74c:	7d 19                	jge    10e767 <_svfprintf_r+0x1bc7>
  10e74e:	48 8b 8c 24 a8 00 00 	mov    0xa8(%rsp),%rcx
  10e755:	00 
  10e756:	8d 04 0a             	lea    (%rdx,%rcx,1),%eax
  10e759:	85 ff                	test   %edi,%edi
  10e75b:	7f 05                	jg     10e762 <_svfprintf_r+0x1bc2>
  10e75d:	83 c0 01             	add    $0x1,%eax
  10e760:	29 f8                	sub    %edi,%eax
  10e762:	45 89 c7             	mov    %r8d,%r15d
  10e765:	eb 15                	jmp    10e77c <_svfprintf_r+0x1bdc>
  10e767:	45 85 d2             	test   %r10d,%r10d
  10e76a:	44 0f 45 94 24 a8 00 	cmovne 0xa8(%rsp),%r10d
  10e771:	00 00 
  10e773:	41 01 fa             	add    %edi,%r10d
  10e776:	45 89 c7             	mov    %r8d,%r15d
  10e779:	44 89 d0             	mov    %r10d,%eax
  10e77c:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  10e781:	48 89 b4 24 d8 00 00 	mov    %rsi,0xd8(%rsp)
  10e788:	00 
  10e789:	41 81 cc 00 01 00 00 	or     $0x100,%r12d
  10e790:	45 31 ed             	xor    %r13d,%r13d
  10e793:	48 85 c9             	test   %rcx,%rcx
  10e796:	0f 89 bb f1 ff ff    	jns    10d957 <_svfprintf_r+0xdb7>
  10e79c:	c6 44 24 07 2d       	movb   $0x2d,0x7(%rsp)
  10e7a1:	e9 b1 f1 ff ff       	jmp    10d957 <_svfprintf_r+0xdb7>
  10e7a6:	49 83 c6 10          	add    $0x10,%r14
  10e7aa:	4c 63 64 24 68       	movslq 0x68(%rsp),%r12
  10e7af:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  10e7b4:	49 01 cc             	add    %rcx,%r12
  10e7b7:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  10e7be:	00 
  10e7bf:	4c 63 e8             	movslq %eax,%r13
  10e7c2:	49 01 cd             	add    %rcx,%r13
  10e7c5:	44 89 eb             	mov    %r13d,%ebx
  10e7c8:	44 29 e3             	sub    %r12d,%ebx
  10e7cb:	44 29 f8             	sub    %r15d,%eax
  10e7ce:	39 d8                	cmp    %ebx,%eax
  10e7d0:	0f 4e d8             	cmovle %eax,%ebx
  10e7d3:	85 db                	test   %ebx,%ebx
  10e7d5:	7e 55                	jle    10e82c <_svfprintf_r+0x1c8c>
  10e7d7:	4d 89 26             	mov    %r12,(%r14)
  10e7da:	48 63 cb             	movslq %ebx,%rcx
  10e7dd:	49 89 4e 08          	mov    %rcx,0x8(%r14)
  10e7e1:	48 01 4c 24 28       	add    %rcx,0x28(%rsp)
  10e7e6:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
  10e7ea:	8d 51 01             	lea    0x1(%rcx),%edx
  10e7ed:	89 54 24 20          	mov    %edx,0x20(%rsp)
  10e7f1:	83 f9 07             	cmp    $0x7,%ecx
  10e7f4:	7c 32                	jl     10e828 <_svfprintf_r+0x1c88>
  10e7f6:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10e7fb:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10e800:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10e805:	e8 16 06 00 00       	call   10ee20 <__ssprint_r>
  10e80a:	85 c0                	test   %eax,%eax
  10e80c:	0f 85 51 05 00 00    	jne    10ed63 <_svfprintf_r+0x21c3>
  10e812:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  10e819:	00 
  10e81a:	2b 44 24 44          	sub    0x44(%rsp),%eax
  10e81e:	4c 8d b4 24 20 01 00 	lea    0x120(%rsp),%r14
  10e825:	00 
  10e826:	eb 04                	jmp    10e82c <_svfprintf_r+0x1c8c>
  10e828:	49 83 c6 10          	add    $0x10,%r14
  10e82c:	89 d9                	mov    %ebx,%ecx
  10e82e:	f7 d9                	neg    %ecx
  10e830:	85 db                	test   %ebx,%ebx
  10e832:	bb 00 00 00 00       	mov    $0x0,%ebx
  10e837:	0f 4f d9             	cmovg  %ecx,%ebx
  10e83a:	01 c3                	add    %eax,%ebx
  10e83c:	85 db                	test   %ebx,%ebx
  10e83e:	0f 8e ba 00 00 00    	jle    10e8fe <_svfprintf_r+0x1d5e>
  10e844:	48 8d 15 a5 32 ff ff 	lea    -0xcd5b(%rip),%rdx        # 101af0 <_svfprintf_r.zeroes>
  10e84b:	49 89 16             	mov    %rdx,(%r14)
  10e84e:	83 fb 11             	cmp    $0x11,%ebx
  10e851:	0f 8c d7 01 00 00    	jl     10ea2e <_svfprintf_r+0x1e8e>
  10e857:	8d 1c 08             	lea    (%rax,%rcx,1),%ebx
  10e85a:	83 c3 0f             	add    $0xf,%ebx
  10e85d:	41 83 c7 ff          	add    $0xffffffff,%r15d
  10e861:	44 2b bc 24 b0 00 00 	sub    0xb0(%rsp),%r15d
  10e868:	00 
  10e869:	41 83 c4 ff          	add    $0xffffffff,%r12d
  10e86d:	45 29 ec             	sub    %r13d,%r12d
  10e870:	45 39 e7             	cmp    %r12d,%r15d
  10e873:	45 0f 4d e7          	cmovge %r15d,%r12d
  10e877:	41 83 fc fe          	cmp    $0xfffffffe,%r12d
  10e87b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  10e880:	44 0f 4e e0          	cmovle %eax,%r12d
  10e884:	44 29 e3             	sub    %r12d,%ebx
  10e887:	44 8b 6c 24 38       	mov    0x38(%rsp),%r13d
  10e88c:	4c 8d bc 24 20 01 00 	lea    0x120(%rsp),%r15
  10e893:	00 
  10e894:	44 8b 64 24 14       	mov    0x14(%rsp),%r12d
  10e899:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  10e8a0:	49 c7 46 08 10 00 00 	movq   $0x10,0x8(%r14)
  10e8a7:	00 
  10e8a8:	48 83 44 24 28 10    	addq   $0x10,0x28(%rsp)
  10e8ae:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10e8b2:	8d 48 01             	lea    0x1(%rax),%ecx
  10e8b5:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10e8b9:	83 f8 07             	cmp    $0x7,%eax
  10e8bc:	7c 22                	jl     10e8e0 <_svfprintf_r+0x1d40>
  10e8be:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10e8c3:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10e8c8:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10e8cd:	e8 4e 05 00 00       	call   10ee20 <__ssprint_r>
  10e8d2:	4d 89 fe             	mov    %r15,%r14
  10e8d5:	85 c0                	test   %eax,%eax
  10e8d7:	74 0b                	je     10e8e4 <_svfprintf_r+0x1d44>
  10e8d9:	e9 b1 04 00 00       	jmp    10ed8f <_svfprintf_r+0x21ef>
  10e8de:	66 90                	xchg   %ax,%ax
  10e8e0:	49 83 c6 10          	add    $0x10,%r14
  10e8e4:	48 8d 05 05 32 ff ff 	lea    -0xcdfb(%rip),%rax        # 101af0 <_svfprintf_r.zeroes>
  10e8eb:	49 89 06             	mov    %rax,(%r14)
  10e8ee:	83 c3 f0             	add    $0xfffffff0,%ebx
  10e8f1:	83 fb 20             	cmp    $0x20,%ebx
  10e8f4:	7f aa                	jg     10e8a0 <_svfprintf_r+0x1d00>
  10e8f6:	83 c3 f0             	add    $0xfffffff0,%ebx
  10e8f9:	e9 42 01 00 00       	jmp    10ea40 <_svfprintf_r+0x1ea0>
  10e8fe:	44 8b 6c 24 38       	mov    0x38(%rsp),%r13d
  10e903:	4c 8d bc 24 20 01 00 	lea    0x120(%rsp),%r15
  10e90a:	00 
  10e90b:	44 8b 64 24 14       	mov    0x14(%rsp),%r12d
  10e910:	41 f6 c4 04          	test   $0x4,%r12b
  10e914:	4c 8b 64 24 08       	mov    0x8(%rsp),%r12
  10e919:	0f 84 d1 00 00 00    	je     10e9f0 <_svfprintf_r+0x1e50>
  10e91f:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  10e924:	89 c3                	mov    %eax,%ebx
  10e926:	2b 5c 24 70          	sub    0x70(%rsp),%ebx
  10e92a:	0f 8e c0 00 00 00    	jle    10e9f0 <_svfprintf_r+0x1e50>
  10e930:	48 8d 05 a9 31 ff ff 	lea    -0xce57(%rip),%rax        # 101ae0 <_svfprintf_r.blanks>
  10e937:	49 89 06             	mov    %rax,(%r14)
  10e93a:	83 fb 11             	cmp    $0x11,%ebx
  10e93d:	7c 6a                	jl     10e9a9 <_svfprintf_r+0x1e09>
  10e93f:	bb 10 00 00 00       	mov    $0x10,%ebx
  10e944:	2b 5c 24 70          	sub    0x70(%rsp),%ebx
  10e948:	03 5c 24 58          	add    0x58(%rsp),%ebx
  10e94c:	0f 1f 40 00          	nopl   0x0(%rax)
  10e950:	49 c7 46 08 10 00 00 	movq   $0x10,0x8(%r14)
  10e957:	00 
  10e958:	48 83 44 24 28 10    	addq   $0x10,0x28(%rsp)
  10e95e:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10e962:	8d 48 01             	lea    0x1(%rax),%ecx
  10e965:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10e969:	83 f8 07             	cmp    $0x7,%eax
  10e96c:	7c 22                	jl     10e990 <_svfprintf_r+0x1df0>
  10e96e:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10e973:	4c 89 e6             	mov    %r12,%rsi
  10e976:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10e97b:	e8 a0 04 00 00       	call   10ee20 <__ssprint_r>
  10e980:	4d 89 fe             	mov    %r15,%r14
  10e983:	85 c0                	test   %eax,%eax
  10e985:	74 0d                	je     10e994 <_svfprintf_r+0x1df4>
  10e987:	e9 e1 03 00 00       	jmp    10ed6d <_svfprintf_r+0x21cd>
  10e98c:	0f 1f 40 00          	nopl   0x0(%rax)
  10e990:	49 83 c6 10          	add    $0x10,%r14
  10e994:	48 8d 05 45 31 ff ff 	lea    -0xcebb(%rip),%rax        # 101ae0 <_svfprintf_r.blanks>
  10e99b:	49 89 06             	mov    %rax,(%r14)
  10e99e:	83 c3 f0             	add    $0xfffffff0,%ebx
  10e9a1:	83 fb 20             	cmp    $0x20,%ebx
  10e9a4:	7f aa                	jg     10e950 <_svfprintf_r+0x1db0>
  10e9a6:	83 c3 f0             	add    $0xfffffff0,%ebx
  10e9a9:	48 63 c3             	movslq %ebx,%rax
  10e9ac:	49 89 46 08          	mov    %rax,0x8(%r14)
  10e9b0:	48 03 44 24 28       	add    0x28(%rsp),%rax
  10e9b5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  10e9ba:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
  10e9be:	8d 51 01             	lea    0x1(%rcx),%edx
  10e9c1:	89 54 24 20          	mov    %edx,0x20(%rsp)
  10e9c5:	83 f9 07             	cmp    $0x7,%ecx
  10e9c8:	7c 2b                	jl     10e9f5 <_svfprintf_r+0x1e55>
  10e9ca:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10e9cf:	4c 89 e6             	mov    %r12,%rsi
  10e9d2:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10e9d7:	e8 44 04 00 00       	call   10ee20 <__ssprint_r>
  10e9dc:	85 c0                	test   %eax,%eax
  10e9de:	0f 85 89 03 00 00    	jne    10ed6d <_svfprintf_r+0x21cd>
  10e9e4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10e9eb:	00 00 00 
  10e9ee:	66 90                	xchg   %ax,%ax
  10e9f0:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  10e9f5:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
  10e9fa:	8b 5c 24 70          	mov    0x70(%rsp),%ebx
  10e9fe:	39 d9                	cmp    %ebx,%ecx
  10ea00:	0f 4d d9             	cmovge %ecx,%ebx
  10ea03:	44 01 eb             	add    %r13d,%ebx
  10ea06:	48 85 c0             	test   %rax,%rax
  10ea09:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10ea0e:	0f 84 6c e2 ff ff    	je     10cc80 <_svfprintf_r+0xe0>
  10ea14:	4c 89 e6             	mov    %r12,%rsi
  10ea17:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10ea1c:	e8 ff 03 00 00       	call   10ee20 <__ssprint_r>
  10ea21:	85 c0                	test   %eax,%eax
  10ea23:	0f 84 57 e2 ff ff    	je     10cc80 <_svfprintf_r+0xe0>
  10ea29:	e9 75 03 00 00       	jmp    10eda3 <_svfprintf_r+0x2203>
  10ea2e:	44 8b 6c 24 38       	mov    0x38(%rsp),%r13d
  10ea33:	4c 8d bc 24 20 01 00 	lea    0x120(%rsp),%r15
  10ea3a:	00 
  10ea3b:	44 8b 64 24 14       	mov    0x14(%rsp),%r12d
  10ea40:	48 63 c3             	movslq %ebx,%rax
  10ea43:	49 89 46 08          	mov    %rax,0x8(%r14)
  10ea47:	48 01 44 24 28       	add    %rax,0x28(%rsp)
  10ea4c:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10ea50:	8d 48 01             	lea    0x1(%rax),%ecx
  10ea53:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10ea57:	83 f8 07             	cmp    $0x7,%eax
  10ea5a:	7c 19                	jl     10ea75 <_svfprintf_r+0x1ed5>
  10ea5c:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10ea61:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10ea66:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10ea6b:	e8 b0 03 00 00       	call   10ee20 <__ssprint_r>
  10ea70:	e9 5d f3 ff ff       	jmp    10ddd2 <_svfprintf_r+0x1232>
  10ea75:	49 83 c6 10          	add    $0x10,%r14
  10ea79:	e9 92 fe ff ff       	jmp    10e910 <_svfprintf_r+0x1d70>
  10ea7e:	8d 59 ff             	lea    -0x1(%rcx),%ebx
  10ea81:	48 63 c3             	movslq %ebx,%rax
  10ea84:	e9 2f f6 ff ff       	jmp    10e0b8 <_svfprintf_r+0x1518>
  10ea89:	49 83 c6 10          	add    $0x10,%r14
  10ea8d:	85 c0                	test   %eax,%eax
  10ea8f:	0f 89 db 00 00 00    	jns    10eb70 <_svfprintf_r+0x1fd0>
  10ea95:	48 8d 0d 54 30 ff ff 	lea    -0xcfac(%rip),%rcx        # 101af0 <_svfprintf_r.zeroes>
  10ea9c:	49 89 0e             	mov    %rcx,(%r14)
  10ea9f:	83 f8 ef             	cmp    $0xffffffef,%eax
  10eaa2:	0f 8f 87 00 00 00    	jg     10eb2f <_svfprintf_r+0x1f8f>
  10eaa8:	bb 10 00 00 00       	mov    $0x10,%ebx
  10eaad:	29 c3                	sub    %eax,%ebx
  10eaaf:	49 c7 46 08 10 00 00 	movq   $0x10,0x8(%r14)
  10eab6:	00 
  10eab7:	48 83 44 24 28 10    	addq   $0x10,0x28(%rsp)
  10eabd:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10eac1:	8d 48 01             	lea    0x1(%rax),%ecx
  10eac4:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10eac8:	83 f8 07             	cmp    $0x7,%eax
  10eacb:	7c 20                	jl     10eaed <_svfprintf_r+0x1f4d>
  10eacd:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10ead2:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10ead7:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10eadc:	e8 3f 03 00 00       	call   10ee20 <__ssprint_r>
  10eae1:	4d 89 fe             	mov    %r15,%r14
  10eae4:	85 c0                	test   %eax,%eax
  10eae6:	74 09                	je     10eaf1 <_svfprintf_r+0x1f51>
  10eae8:	e9 a2 02 00 00       	jmp    10ed8f <_svfprintf_r+0x21ef>
  10eaed:	49 83 c6 10          	add    $0x10,%r14
  10eaf1:	48 8d 05 f8 2f ff ff 	lea    -0xd008(%rip),%rax        # 101af0 <_svfprintf_r.zeroes>
  10eaf8:	49 89 06             	mov    %rax,(%r14)
  10eafb:	83 c3 f0             	add    $0xfffffff0,%ebx
  10eafe:	83 fb 20             	cmp    $0x20,%ebx
  10eb01:	7f ac                	jg     10eaaf <_svfprintf_r+0x1f0f>
  10eb03:	83 c3 f0             	add    $0xfffffff0,%ebx
  10eb06:	89 d8                	mov    %ebx,%eax
  10eb08:	eb 27                	jmp    10eb31 <_svfprintf_r+0x1f91>
  10eb0a:	45 85 d2             	test   %r10d,%r10d
  10eb0d:	74 76                	je     10eb85 <_svfprintf_r+0x1fe5>
  10eb0f:	48 63 84 24 a0 00 00 	movslq 0xa0(%rsp),%rax
  10eb16:	00 
  10eb17:	48 8b 8c 24 a8 00 00 	mov    0xa8(%rsp),%rcx
  10eb1e:	00 
  10eb1f:	48 01 c8             	add    %rcx,%rax
  10eb22:	48 83 c0 01          	add    $0x1,%rax
  10eb26:	eb 62                	jmp    10eb8a <_svfprintf_r+0x1fea>
  10eb28:	89 f8                	mov    %edi,%eax
  10eb2a:	e9 4d fc ff ff       	jmp    10e77c <_svfprintf_r+0x1bdc>
  10eb2f:	f7 d8                	neg    %eax
  10eb31:	48 98                	cltq   
  10eb33:	49 89 46 08          	mov    %rax,0x8(%r14)
  10eb37:	48 01 44 24 28       	add    %rax,0x28(%rsp)
  10eb3c:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10eb40:	8d 48 01             	lea    0x1(%rax),%ecx
  10eb43:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10eb47:	83 f8 07             	cmp    $0x7,%eax
  10eb4a:	7c 20                	jl     10eb6c <_svfprintf_r+0x1fcc>
  10eb4c:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10eb51:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10eb56:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10eb5b:	e8 c0 02 00 00       	call   10ee20 <__ssprint_r>
  10eb60:	4d 89 fe             	mov    %r15,%r14
  10eb63:	85 c0                	test   %eax,%eax
  10eb65:	74 09                	je     10eb70 <_svfprintf_r+0x1fd0>
  10eb67:	e9 23 02 00 00       	jmp    10ed8f <_svfprintf_r+0x21ef>
  10eb6c:	49 83 c6 10          	add    $0x10,%r14
  10eb70:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  10eb75:	49 89 06             	mov    %rax,(%r14)
  10eb78:	48 63 84 24 b0 00 00 	movslq 0xb0(%rsp),%rax
  10eb7f:	00 
  10eb80:	e9 19 f6 ff ff       	jmp    10e19e <_svfprintf_r+0x15fe>
  10eb85:	b8 01 00 00 00       	mov    $0x1,%eax
  10eb8a:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  10eb8f:	41 bf 66 00 00 00    	mov    $0x66,%r15d
  10eb95:	e9 e7 fb ff ff       	jmp    10e781 <_svfprintf_r+0x1be1>
  10eb9a:	48 8d 8c 24 9f 00 00 	lea    0x9f(%rsp),%rcx
  10eba1:	00 
  10eba2:	48 39 c8             	cmp    %rcx,%rax
  10eba5:	73 21                	jae    10ebc8 <_svfprintf_r+0x2028>
  10eba7:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
  10ebac:	4c 29 e0             	sub    %r12,%rax
  10ebaf:	4a 8d 0c 24          	lea    (%rsp,%r12,1),%rcx
  10ebb3:	48 81 c1 a0 00 00 00 	add    $0xa0,%rcx
  10ebba:	48 8d 7c 24 41       	lea    0x41(%rsp),%rdi
  10ebbf:	48 39 c1             	cmp    %rax,%rcx
  10ebc2:	0f 82 42 01 00 00    	jb     10ed0a <_svfprintf_r+0x216a>
  10ebc8:	48 89 9c 24 a0 00 00 	mov    %rbx,0xa0(%rsp)
  10ebcf:	00 
  10ebd0:	49 89 d8             	mov    %rbx,%r8
  10ebd3:	49 83 e0 e0          	and    $0xffffffffffffffe0,%r8
  10ebd7:	49 8d 40 e0          	lea    -0x20(%r8),%rax
  10ebdb:	49 89 c3             	mov    %rax,%r11
  10ebde:	49 c1 eb 05          	shr    $0x5,%r11
  10ebe2:	49 83 c3 01          	add    $0x1,%r11
  10ebe6:	48 83 f8 60          	cmp    $0x60,%rax
  10ebea:	73 11                	jae    10ebfd <_svfprintf_r+0x205d>
  10ebec:	31 f6                	xor    %esi,%esi
  10ebee:	41 f6 c3 03          	test   $0x3,%r11b
  10ebf2:	0f 85 a3 00 00 00    	jne    10ec9b <_svfprintf_r+0x20fb>
  10ebf8:	e9 ea 00 00 00       	jmp    10ece7 <_svfprintf_r+0x2147>
  10ebfd:	48 8d 84 24 10 01 00 	lea    0x110(%rsp),%rax
  10ec04:	00 
  10ec05:	4a 8d 04 20          	lea    (%rax,%r12,1),%rax
  10ec09:	48 f7 de             	neg    %rsi
  10ec0c:	48 83 e6 e0          	and    $0xffffffffffffffe0,%rsi
  10ec10:	48 83 c6 e0          	add    $0xffffffffffffffe0,%rsi
  10ec14:	48 c1 ee 05          	shr    $0x5,%rsi
  10ec18:	89 f1                	mov    %esi,%ecx
  10ec1a:	80 c1 01             	add    $0x1,%cl
  10ec1d:	0f b6 d9             	movzbl %cl,%ebx
  10ec20:	83 e3 03             	and    $0x3,%ebx
  10ec23:	48 83 c3 ff          	add    $0xffffffffffffffff,%rbx
  10ec27:	48 29 f3             	sub    %rsi,%rbx
  10ec2a:	31 f6                	xor    %esi,%esi
  10ec2c:	0f 10 44 30 90       	movups -0x70(%rax,%rsi,1),%xmm0
  10ec31:	0f 10 4c 30 a0       	movups -0x60(%rax,%rsi,1),%xmm1
  10ec36:	0f 11 44 34 41       	movups %xmm0,0x41(%rsp,%rsi,1)
  10ec3b:	0f 11 4c 34 51       	movups %xmm1,0x51(%rsp,%rsi,1)
  10ec40:	0f 10 44 30 b0       	movups -0x50(%rax,%rsi,1),%xmm0
  10ec45:	0f 10 4c 30 c0       	movups -0x40(%rax,%rsi,1),%xmm1
  10ec4a:	0f 11 44 34 61       	movups %xmm0,0x61(%rsp,%rsi,1)
  10ec4f:	0f 11 4c 34 71       	movups %xmm1,0x71(%rsp,%rsi,1)
  10ec54:	0f 10 44 30 d0       	movups -0x30(%rax,%rsi,1),%xmm0
  10ec59:	0f 10 4c 30 e0       	movups -0x20(%rax,%rsi,1),%xmm1
  10ec5e:	0f 11 84 34 81 00 00 	movups %xmm0,0x81(%rsp,%rsi,1)
  10ec65:	00 
  10ec66:	0f 11 8c 34 91 00 00 	movups %xmm1,0x91(%rsp,%rsi,1)
  10ec6d:	00 
  10ec6e:	f3 0f 6f 44 30 f0    	movdqu -0x10(%rax,%rsi,1),%xmm0
  10ec74:	f3 0f 6f 0c 30       	movdqu (%rax,%rsi,1),%xmm1
  10ec79:	f3 0f 7f 84 34 a1 00 	movdqu %xmm0,0xa1(%rsp,%rsi,1)
  10ec80:	00 00 
  10ec82:	f3 0f 7f 8c 34 b1 00 	movdqu %xmm1,0xb1(%rsp,%rsi,1)
  10ec89:	00 00 
  10ec8b:	48 83 ee 80          	sub    $0xffffffffffffff80,%rsi
  10ec8f:	48 83 c3 04          	add    $0x4,%rbx
  10ec93:	75 97                	jne    10ec2c <_svfprintf_r+0x208c>
  10ec95:	41 f6 c3 03          	test   $0x3,%r11b
  10ec99:	74 4c                	je     10ece7 <_svfprintf_r+0x2147>
  10ec9b:	48 01 f2             	add    %rsi,%rdx
  10ec9e:	48 8d 44 24 51       	lea    0x51(%rsp),%rax
  10eca3:	48 8d 04 30          	lea    (%rax,%rsi,1),%rax
  10eca7:	44 89 e9             	mov    %r13d,%ecx
  10ecaa:	83 e1 60             	and    $0x60,%ecx
  10ecad:	83 c1 e0             	add    $0xffffffe0,%ecx
  10ecb0:	c0 e9 05             	shr    $0x5,%cl
  10ecb3:	80 c1 01             	add    $0x1,%cl
  10ecb6:	44 0f b6 d9          	movzbl %cl,%r11d
  10ecba:	41 83 e3 03          	and    $0x3,%r11d
  10ecbe:	49 c1 e3 05          	shl    $0x5,%r11
  10ecc2:	31 db                	xor    %ebx,%ebx
  10ecc4:	f3 0f 6f 44 1a f0    	movdqu -0x10(%rdx,%rbx,1),%xmm0
  10ecca:	f3 0f 6f 0c 1a       	movdqu (%rdx,%rbx,1),%xmm1
  10eccf:	f3 0f 7f 44 18 f0    	movdqu %xmm0,-0x10(%rax,%rbx,1)
  10ecd5:	f3 0f 7f 0c 18       	movdqu %xmm1,(%rax,%rbx,1)
  10ecda:	48 83 c6 20          	add    $0x20,%rsi
  10ecde:	48 83 c3 20          	add    $0x20,%rbx
  10ece2:	49 39 db             	cmp    %rbx,%r11
  10ece5:	75 dd                	jne    10ecc4 <_svfprintf_r+0x2124>
  10ece7:	48 8d 44 24 41       	lea    0x41(%rsp),%rax
  10ecec:	4a 8d 3c 00          	lea    (%rax,%r8,1),%rdi
  10ecf0:	4c 39 84 24 a0 00 00 	cmp    %r8,0xa0(%rsp)
  10ecf7:	00 
  10ecf8:	0f 84 fd f9 ff ff    	je     10e6fb <_svfprintf_r+0x1b5b>
  10ecfe:	49 83 e5 e0          	and    $0xffffffffffffffe0,%r13
  10ed02:	4f 8d 04 2c          	lea    (%r12,%r13,1),%r8
  10ed06:	49 83 c0 01          	add    $0x1,%r8
  10ed0a:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  10ed0e:	42 0f b6 84 04 a0 00 	movzbl 0xa0(%rsp,%r8,1),%eax
  10ed15:	00 00 
  10ed17:	88 07                	mov    %al,(%rdi)
  10ed19:	48 83 c7 01          	add    $0x1,%rdi
  10ed1d:	49 83 c0 01          	add    $0x1,%r8
  10ed21:	49 83 f8 ff          	cmp    $0xffffffffffffffff,%r8
  10ed25:	7c e7                	jl     10ed0e <_svfprintf_r+0x216e>
  10ed27:	e9 cf f9 ff ff       	jmp    10e6fb <_svfprintf_r+0x1b5b>
  10ed2c:	44 8b 6c 24 38       	mov    0x38(%rsp),%r13d
  10ed31:	4c 8b 64 24 08       	mov    0x8(%rsp),%r12
  10ed36:	eb 35                	jmp    10ed6d <_svfprintf_r+0x21cd>
  10ed38:	48 83 7c 24 28 00    	cmpq   $0x0,0x28(%rsp)
  10ed3e:	49 89 fc             	mov    %rdi,%r12
  10ed41:	74 16                	je     10ed59 <_svfprintf_r+0x21b9>
  10ed43:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10ed48:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10ed4d:	4c 89 e6             	mov    %r12,%rsi
  10ed50:	e8 cb 00 00 00       	call   10ee20 <__ssprint_r>
  10ed55:	85 c0                	test   %eax,%eax
  10ed57:	75 0f                	jne    10ed68 <_svfprintf_r+0x21c8>
  10ed59:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%rsp)
  10ed60:	00 
  10ed61:	eb 05                	jmp    10ed68 <_svfprintf_r+0x21c8>
  10ed63:	4c 8b 64 24 08       	mov    0x8(%rsp),%r12
  10ed68:	44 8b 6c 24 38       	mov    0x38(%rsp),%r13d
  10ed6d:	41 8a 44 24 10       	mov    0x10(%r12),%al
  10ed72:	24 40                	and    $0x40,%al
  10ed74:	3c 01                	cmp    $0x1,%al
  10ed76:	19 c0                	sbb    %eax,%eax
  10ed78:	f7 d0                	not    %eax
  10ed7a:	44 09 e8             	or     %r13d,%eax
  10ed7d:	48 81 c4 a8 01 00 00 	add    $0x1a8,%rsp
  10ed84:	5b                   	pop    %rbx
  10ed85:	41 5c                	pop    %r12
  10ed87:	41 5d                	pop    %r13
  10ed89:	41 5e                	pop    %r14
  10ed8b:	41 5f                	pop    %r15
  10ed8d:	5d                   	pop    %rbp
  10ed8e:	c3                   	ret    
  10ed8f:	4c 8b 64 24 08       	mov    0x8(%rsp),%r12
  10ed94:	eb d7                	jmp    10ed6d <_svfprintf_r+0x21cd>
  10ed96:	c7 03 0c 00 00 00    	movl   $0xc,(%rbx)
  10ed9c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  10eda1:	eb da                	jmp    10ed7d <_svfprintf_r+0x21dd>
  10eda3:	41 89 dd             	mov    %ebx,%r13d
  10eda6:	eb c5                	jmp    10ed6d <_svfprintf_r+0x21cd>
  10eda8:	cc                   	int3   
  10eda9:	cc                   	int3   
  10edaa:	cc                   	int3   
  10edab:	cc                   	int3   
  10edac:	cc                   	int3   
  10edad:	cc                   	int3   
  10edae:	cc                   	int3   
  10edaf:	cc                   	int3   

000000000010edb0 <__fpclassifyd>:
  10edb0:	66 48 0f 7e c6       	movq   %xmm0,%rsi
  10edb5:	48 89 f2             	mov    %rsi,%rdx
  10edb8:	48 c1 ea 20          	shr    $0x20,%rdx
  10edbc:	89 d0                	mov    %edx,%eax
  10edbe:	35 00 00 00 80       	xor    $0x80000000,%eax
  10edc3:	09 f0                	or     %esi,%eax
  10edc5:	0f 94 c1             	sete   %cl
  10edc8:	89 d0                	mov    %edx,%eax
  10edca:	09 f0                	or     %esi,%eax
  10edcc:	b8 02 00 00 00       	mov    $0x2,%eax
  10edd1:	74 38                	je     10ee0b <__fpclassifyd+0x5b>
  10edd3:	84 c9                	test   %cl,%cl
  10edd5:	75 34                	jne    10ee0b <__fpclassifyd+0x5b>
  10edd7:	89 d1                	mov    %edx,%ecx
  10edd9:	81 e1 ff ff ff 7f    	and    $0x7fffffff,%ecx
  10eddf:	81 c1 00 00 f0 ff    	add    $0xfff00000,%ecx
  10ede5:	b8 04 00 00 00       	mov    $0x4,%eax
  10edea:	81 f9 00 00 e0 7f    	cmp    $0x7fe00000,%ecx
  10edf0:	72 19                	jb     10ee0b <__fpclassifyd+0x5b>
  10edf2:	b8 03 00 00 00       	mov    $0x3,%eax
  10edf7:	81 fa 00 00 10 00    	cmp    $0x100000,%edx
  10edfd:	72 0c                	jb     10ee0b <__fpclassifyd+0x5b>
  10edff:	85 d2                	test   %edx,%edx
  10ee01:	79 09                	jns    10ee0c <__fpclassifyd+0x5c>
  10ee03:	81 fa 00 00 10 80    	cmp    $0x80100000,%edx
  10ee09:	73 01                	jae    10ee0c <__fpclassifyd+0x5c>
  10ee0b:	c3                   	ret    
  10ee0c:	81 ca 00 00 00 80    	or     $0x80000000,%edx
  10ee12:	81 f2 00 00 f0 ff    	xor    $0xfff00000,%edx
  10ee18:	31 c0                	xor    %eax,%eax
  10ee1a:	09 d6                	or     %edx,%esi
  10ee1c:	0f 94 c0             	sete   %al
  10ee1f:	c3                   	ret    

000000000010ee20 <__ssprint_r>:
  10ee20:	55                   	push   %rbp
  10ee21:	41 57                	push   %r15
  10ee23:	41 56                	push   %r14
  10ee25:	41 55                	push   %r13
  10ee27:	41 54                	push   %r12
  10ee29:	53                   	push   %rbx
  10ee2a:	48 83 ec 18          	sub    $0x18,%rsp
  10ee2e:	49 89 d5             	mov    %rdx,%r13
  10ee31:	48 89 3c 24          	mov    %rdi,(%rsp)
  10ee35:	48 83 7a 10 00       	cmpq   $0x0,0x10(%rdx)
  10ee3a:	0f 84 61 01 00 00    	je     10efa1 <__ssprint_r+0x181>
  10ee40:	49 89 f4             	mov    %rsi,%r12
  10ee43:	4d 8b 7d 00          	mov    0x0(%r13),%r15
  10ee47:	45 31 f6             	xor    %r14d,%r14d
  10ee4a:	31 db                	xor    %ebx,%ebx
  10ee4c:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
  10ee51:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10ee58:	00 00 00 
  10ee5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10ee60:	4d 85 f6             	test   %r14,%r14
  10ee63:	75 1c                	jne    10ee81 <__ssprint_r+0x61>
  10ee65:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10ee6c:	00 00 00 
  10ee6f:	90                   	nop
  10ee70:	4d 8b 77 08          	mov    0x8(%r15),%r14
  10ee74:	49 83 c7 10          	add    $0x10,%r15
  10ee78:	4d 85 f6             	test   %r14,%r14
  10ee7b:	74 f3                	je     10ee70 <__ssprint_r+0x50>
  10ee7d:	49 8b 5f f0          	mov    -0x10(%r15),%rbx
  10ee81:	41 8b 4c 24 0c       	mov    0xc(%r12),%ecx
  10ee86:	48 63 d1             	movslq %ecx,%rdx
  10ee89:	49 39 d6             	cmp    %rdx,%r14
  10ee8c:	0f 82 d6 00 00 00    	jb     10ef68 <__ssprint_r+0x148>
  10ee92:	41 0f b7 44 24 10    	movzwl 0x10(%r12),%eax
  10ee98:	a9 80 04 00 00       	test   $0x480,%eax
  10ee9d:	0f 84 c5 00 00 00    	je     10ef68 <__ssprint_r+0x148>
  10eea3:	49 8b 0c 24          	mov    (%r12),%rcx
  10eea7:	49 8b 74 24 18       	mov    0x18(%r12),%rsi
  10eeac:	48 29 f1             	sub    %rsi,%rcx
  10eeaf:	41 8b 54 24 20       	mov    0x20(%r12),%edx
  10eeb4:	8d 14 52             	lea    (%rdx,%rdx,2),%edx
  10eeb7:	89 d7                	mov    %edx,%edi
  10eeb9:	c1 ef 1f             	shr    $0x1f,%edi
  10eebc:	01 d7                	add    %edx,%edi
  10eebe:	d1 ff                	sar    %edi
  10eec0:	4c 63 ef             	movslq %edi,%r13
  10eec3:	48 63 c9             	movslq %ecx,%rcx
  10eec6:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  10eecb:	4c 01 f1             	add    %r14,%rcx
  10eece:	48 83 c1 01          	add    $0x1,%rcx
  10eed2:	4c 39 e9             	cmp    %r13,%rcx
  10eed5:	44 0f 47 e9          	cmova  %ecx,%r13d
  10eed9:	a9 00 04 00 00       	test   $0x400,%eax
  10eede:	75 1e                	jne    10eefe <__ssprint_r+0xde>
  10eee0:	49 63 d5             	movslq %r13d,%rdx
  10eee3:	48 8b 3c 24          	mov    (%rsp),%rdi
  10eee7:	e8 04 11 00 00       	call   10fff0 <_realloc_r>
  10eeec:	48 89 c5             	mov    %rax,%rbp
  10eeef:	48 85 c0             	test   %rax,%rax
  10eef2:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  10eef7:	75 4b                	jne    10ef44 <__ssprint_r+0x124>
  10eef9:	e9 a7 00 00 00       	jmp    10efa5 <__ssprint_r+0x185>
  10eefe:	49 63 f5             	movslq %r13d,%rsi
  10ef01:	48 8b 3c 24          	mov    (%rsp),%rdi
  10ef05:	e8 46 ce ff ff       	call   10bd50 <_malloc_r>
  10ef0a:	48 85 c0             	test   %rax,%rax
  10ef0d:	0f 84 a0 00 00 00    	je     10efb3 <__ssprint_r+0x193>
  10ef13:	48 89 c5             	mov    %rax,%rbp
  10ef16:	49 8b 74 24 18       	mov    0x18(%r12),%rsi
  10ef1b:	48 89 c7             	mov    %rax,%rdi
  10ef1e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  10ef23:	e8 d8 c1 ff ff       	call   10b100 <memcpy>
  10ef28:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  10ef2d:	41 8b 44 24 10       	mov    0x10(%r12),%eax
  10ef32:	b9 7f fb ff ff       	mov    $0xfffffb7f,%ecx
  10ef37:	21 c8                	and    %ecx,%eax
  10ef39:	0d 80 00 00 00       	or     $0x80,%eax
  10ef3e:	66 41 89 44 24 10    	mov    %ax,0x10(%r12)
  10ef44:	49 89 6c 24 18       	mov    %rbp,0x18(%r12)
  10ef49:	48 01 d5             	add    %rdx,%rbp
  10ef4c:	49 89 2c 24          	mov    %rbp,(%r12)
  10ef50:	45 89 6c 24 20       	mov    %r13d,0x20(%r12)
  10ef55:	41 29 d5             	sub    %edx,%r13d
  10ef58:	45 89 6c 24 0c       	mov    %r13d,0xc(%r12)
  10ef5d:	49 63 d6             	movslq %r14d,%rdx
  10ef60:	44 89 f1             	mov    %r14d,%ecx
  10ef63:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
  10ef68:	49 39 d6             	cmp    %rdx,%r14
  10ef6b:	41 0f 42 ce          	cmovb  %r14d,%ecx
  10ef6f:	49 8b 3c 24          	mov    (%r12),%rdi
  10ef73:	48 63 e9             	movslq %ecx,%rbp
  10ef76:	48 89 de             	mov    %rbx,%rsi
  10ef79:	48 89 ea             	mov    %rbp,%rdx
  10ef7c:	e8 af c2 ff ff       	call   10b230 <memmove>
  10ef81:	41 29 6c 24 0c       	sub    %ebp,0xc(%r12)
  10ef86:	49 01 2c 24          	add    %rbp,(%r12)
  10ef8a:	49 63 c6             	movslq %r14d,%rax
  10ef8d:	48 01 c3             	add    %rax,%rbx
  10ef90:	49 29 c6             	sub    %rax,%r14
  10ef93:	49 29 45 10          	sub    %rax,0x10(%r13)
  10ef97:	0f 85 c3 fe ff ff    	jne    10ee60 <__ssprint_r+0x40>
  10ef9d:	31 c0                	xor    %eax,%eax
  10ef9f:	eb 2c                	jmp    10efcd <__ssprint_r+0x1ad>
  10efa1:	31 c0                	xor    %eax,%eax
  10efa3:	eb 30                	jmp    10efd5 <__ssprint_r+0x1b5>
  10efa5:	49 8b 74 24 18       	mov    0x18(%r12),%rsi
  10efaa:	48 8b 3c 24          	mov    (%rsp),%rdi
  10efae:	e8 ad d5 ff ff       	call   10c560 <_free_r>
  10efb3:	48 8b 04 24          	mov    (%rsp),%rax
  10efb7:	c7 00 0c 00 00 00    	movl   $0xc,(%rax)
  10efbd:	41 80 4c 24 10 40    	orb    $0x40,0x10(%r12)
  10efc3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  10efc8:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
  10efcd:	49 c7 45 10 00 00 00 	movq   $0x0,0x10(%r13)
  10efd4:	00 
  10efd5:	41 c7 45 08 00 00 00 	movl   $0x0,0x8(%r13)
  10efdc:	00 
  10efdd:	48 83 c4 18          	add    $0x18,%rsp
  10efe1:	5b                   	pop    %rbx
  10efe2:	41 5c                	pop    %r12
  10efe4:	41 5d                	pop    %r13
  10efe6:	41 5e                	pop    %r14
  10efe8:	41 5f                	pop    %r15
  10efea:	5d                   	pop    %rbp
  10efeb:	c3                   	ret    
  10efec:	0f 1f 40 00          	nopl   0x0(%rax)

000000000010eff0 <_svfiprintf_r>:
  10eff0:	55                   	push   %rbp
  10eff1:	41 57                	push   %r15
  10eff3:	41 56                	push   %r14
  10eff5:	41 55                	push   %r13
  10eff7:	41 54                	push   %r12
  10eff9:	53                   	push   %rbx
  10effa:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
  10f001:	49 89 cd             	mov    %rcx,%r13
  10f004:	48 89 d5             	mov    %rdx,%rbp
  10f007:	48 89 f3             	mov    %rsi,%rbx
  10f00a:	49 89 fc             	mov    %rdi,%r12
  10f00d:	80 7e 10 00          	cmpb   $0x0,0x10(%rsi)
  10f011:	79 2b                	jns    10f03e <_svfiprintf_r+0x4e>
  10f013:	48 83 7b 18 00       	cmpq   $0x0,0x18(%rbx)
  10f018:	75 24                	jne    10f03e <_svfiprintf_r+0x4e>
  10f01a:	be 40 00 00 00       	mov    $0x40,%esi
  10f01f:	4c 89 e7             	mov    %r12,%rdi
  10f022:	e8 29 cd ff ff       	call   10bd50 <_malloc_r>
  10f027:	48 89 03             	mov    %rax,(%rbx)
  10f02a:	48 89 43 18          	mov    %rax,0x18(%rbx)
  10f02e:	48 85 c0             	test   %rax,%rax
  10f031:	0f 84 99 0f 00 00    	je     10ffd0 <_svfiprintf_r+0xfe0>
  10f037:	c7 43 20 40 00 00 00 	movl   $0x40,0x20(%rbx)
  10f03e:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
  10f043:	4c 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%r15
  10f04a:	00 
  10f04b:	4c 89 7c 24 18       	mov    %r15,0x18(%rsp)
  10f050:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  10f057:	00 00 
  10f059:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%rsp)
  10f060:	00 
  10f061:	49 8d 45 08          	lea    0x8(%r13),%rax
  10f065:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  10f06a:	31 db                	xor    %ebx,%ebx
  10f06c:	31 c0                	xor    %eax,%eax
  10f06e:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  10f073:	4c 89 64 24 30       	mov    %r12,0x30(%rsp)
  10f078:	4c 89 6c 24 68       	mov    %r13,0x68(%rsp)
  10f07d:	eb 11                	jmp    10f090 <_svfiprintf_r+0xa0>
  10f07f:	90                   	nop
  10f080:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%rsp)
  10f087:	00 
  10f088:	4c 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%r15
  10f08f:	00 
  10f090:	89 d8                	mov    %ebx,%eax
  10f092:	89 5c 24 40          	mov    %ebx,0x40(%rsp)
  10f096:	eb 28                	jmp    10f0c0 <_svfiprintf_r+0xd0>
  10f098:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
  10f09d:	48 8b 09             	mov    (%rcx),%rcx
  10f0a0:	48 89 01             	mov    %rax,(%rcx)
  10f0a3:	eb 1b                	jmp    10f0c0 <_svfiprintf_r+0xd0>
  10f0a5:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  10f0aa:	48 8b 0e             	mov    (%rsi),%rcx
  10f0ad:	48 8d 51 08          	lea    0x8(%rcx),%rdx
  10f0b1:	48 89 16             	mov    %rdx,(%rsi)
  10f0b4:	eb e2                	jmp    10f098 <_svfiprintf_r+0xa8>
  10f0b6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10f0bd:	00 00 00 
  10f0c0:	48 89 eb             	mov    %rbp,%rbx
  10f0c3:	eb 0f                	jmp    10f0d4 <_svfiprintf_r+0xe4>
  10f0c5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10f0cc:	00 00 00 
  10f0cf:	90                   	nop
  10f0d0:	48 83 c3 01          	add    $0x1,%rbx
  10f0d4:	0f b6 03             	movzbl (%rbx),%eax
  10f0d7:	84 c0                	test   %al,%al
  10f0d9:	74 04                	je     10f0df <_svfiprintf_r+0xef>
  10f0db:	3c 25                	cmp    $0x25,%al
  10f0dd:	75 f1                	jne    10f0d0 <_svfiprintf_r+0xe0>
  10f0df:	49 89 de             	mov    %rbx,%r14
  10f0e2:	49 29 ee             	sub    %rbp,%r14
  10f0e5:	45 85 f6             	test   %r14d,%r14d
  10f0e8:	74 51                	je     10f13b <_svfiprintf_r+0x14b>
  10f0ea:	49 89 2f             	mov    %rbp,(%r15)
  10f0ed:	49 63 c6             	movslq %r14d,%rax
  10f0f0:	49 89 47 08          	mov    %rax,0x8(%r15)
  10f0f4:	48 01 44 24 28       	add    %rax,0x28(%rsp)
  10f0f9:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10f0fd:	8d 48 01             	lea    0x1(%rax),%ecx
  10f100:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10f104:	83 f8 07             	cmp    $0x7,%eax
  10f107:	7c 27                	jl     10f130 <_svfiprintf_r+0x140>
  10f109:	4c 89 e7             	mov    %r12,%rdi
  10f10c:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10f111:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10f116:	e8 05 fd ff ff       	call   10ee20 <__ssprint_r>
  10f11b:	4c 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%r15
  10f122:	00 
  10f123:	85 c0                	test   %eax,%eax
  10f125:	74 0d                	je     10f134 <_svfiprintf_r+0x144>
  10f127:	e9 51 0e 00 00       	jmp    10ff7d <_svfiprintf_r+0xf8d>
  10f12c:	0f 1f 40 00          	nopl   0x0(%rax)
  10f130:	49 83 c7 10          	add    $0x10,%r15
  10f134:	44 01 74 24 40       	add    %r14d,0x40(%rsp)
  10f139:	8a 03                	mov    (%rbx),%al
  10f13b:	84 c0                	test   %al,%al
  10f13d:	0f 84 41 0e 00 00    	je     10ff84 <_svfiprintf_r+0xf94>
  10f143:	48 83 c3 01          	add    $0x1,%rbx
  10f147:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
  10f14c:	41 bc ff ff ff ff    	mov    $0xffffffff,%r12d
  10f152:	31 c0                	xor    %eax,%eax
  10f154:	48 89 dd             	mov    %rbx,%rbp
  10f157:	31 ff                	xor    %edi,%edi
  10f159:	45 31 f6             	xor    %r14d,%r14d
  10f15c:	eb 12                	jmp    10f170 <_svfiprintf_r+0x180>
  10f15e:	66 90                	xchg   %ax,%ax
  10f160:	44 8b 21             	mov    (%rcx),%r12d
  10f163:	41 83 fc fe          	cmp    $0xfffffffe,%r12d
  10f167:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  10f16c:	44 0f 4e e1          	cmovle %ecx,%r12d
  10f170:	8a 55 00             	mov    0x0(%rbp),%dl
  10f173:	48 83 c5 01          	add    $0x1,%rbp
  10f177:	eb 27                	jmp    10f1a0 <_svfiprintf_r+0x1b0>
  10f179:	45 31 f6             	xor    %r14d,%r14d
  10f17c:	0f 1f 40 00          	nopl   0x0(%rax)
  10f180:	43 8d 14 b6          	lea    (%r14,%r14,4),%edx
  10f184:	44 8d 34 51          	lea    (%rcx,%rdx,2),%r14d
  10f188:	41 83 c6 d0          	add    $0xffffffd0,%r14d
  10f18c:	0f b6 55 00          	movzbl 0x0(%rbp),%edx
  10f190:	48 83 c5 01          	add    $0x1,%rbp
  10f194:	0f be ca             	movsbl %dl,%ecx
  10f197:	8d 71 d0             	lea    -0x30(%rcx),%esi
  10f19a:	83 fe 0a             	cmp    $0xa,%esi
  10f19d:	72 e1                	jb     10f180 <_svfiprintf_r+0x190>
  10f19f:	90                   	nop
  10f1a0:	0f be ca             	movsbl %dl,%ecx
  10f1a3:	eb 0e                	jmp    10f1b3 <_svfiprintf_r+0x1c3>
  10f1a5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10f1ac:	00 00 00 
  10f1af:	90                   	nop
  10f1b0:	41 89 d4             	mov    %edx,%r12d
  10f1b3:	83 f9 2e             	cmp    $0x2e,%ecx
  10f1b6:	75 58                	jne    10f210 <_svfiprintf_r+0x220>
  10f1b8:	0f be 4d 00          	movsbl 0x0(%rbp),%ecx
  10f1bc:	48 83 c5 01          	add    $0x1,%rbp
  10f1c0:	83 f9 2a             	cmp    $0x2a,%ecx
  10f1c3:	74 7b                	je     10f240 <_svfiprintf_r+0x250>
  10f1c5:	8d 71 d0             	lea    -0x30(%rcx),%esi
  10f1c8:	31 d2                	xor    %edx,%edx
  10f1ca:	83 fe 09             	cmp    $0x9,%esi
  10f1cd:	77 e1                	ja     10f1b0 <_svfiprintf_r+0x1c0>
  10f1cf:	31 d2                	xor    %edx,%edx
  10f1d1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10f1d8:	00 00 00 
  10f1db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10f1e0:	8d 0c 92             	lea    (%rdx,%rdx,4),%ecx
  10f1e3:	8d 14 4e             	lea    (%rsi,%rcx,2),%edx
  10f1e6:	0f be 4d 00          	movsbl 0x0(%rbp),%ecx
  10f1ea:	48 83 c5 01          	add    $0x1,%rbp
  10f1ee:	8d 71 d0             	lea    -0x30(%rcx),%esi
  10f1f1:	83 fe 0a             	cmp    $0xa,%esi
  10f1f4:	72 ea                	jb     10f1e0 <_svfiprintf_r+0x1f0>
  10f1f6:	41 bc ff ff ff ff    	mov    $0xffffffff,%r12d
  10f1fc:	85 d2                	test   %edx,%edx
  10f1fe:	78 b3                	js     10f1b3 <_svfiprintf_r+0x1c3>
  10f200:	eb ae                	jmp    10f1b0 <_svfiprintf_r+0x1c0>
  10f202:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10f209:	00 00 00 
  10f20c:	0f 1f 40 00          	nopl   0x0(%rax)
  10f210:	83 f9 78             	cmp    $0x78,%ecx
  10f213:	0f 87 84 03 00 00    	ja     10f59d <_svfiprintf_r+0x5ad>
  10f219:	89 ca                	mov    %ecx,%edx
  10f21b:	48 8d 35 de 28 ff ff 	lea    -0xd722(%rip),%rsi        # 101b00 <_svfprintf_r.zeroes+0x10>
  10f222:	48 63 14 96          	movslq (%rsi,%rdx,4),%rdx
  10f226:	48 01 f2             	add    %rsi,%rdx
  10f229:	ff e2                	jmp    *%rdx
  10f22b:	83 cf 10             	or     $0x10,%edi
  10f22e:	e9 3d ff ff ff       	jmp    10f170 <_svfiprintf_r+0x180>
  10f233:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10f23a:	00 00 00 
  10f23d:	0f 1f 00             	nopl   (%rax)
  10f240:	49 63 55 00          	movslq 0x0(%r13),%rdx
  10f244:	48 83 fa 28          	cmp    $0x28,%rdx
  10f248:	77 16                	ja     10f260 <_svfiprintf_r+0x270>
  10f24a:	48 89 d1             	mov    %rdx,%rcx
  10f24d:	49 03 4d 10          	add    0x10(%r13),%rcx
  10f251:	8d 52 08             	lea    0x8(%rdx),%edx
  10f254:	41 89 55 00          	mov    %edx,0x0(%r13)
  10f258:	e9 03 ff ff ff       	jmp    10f160 <_svfiprintf_r+0x170>
  10f25d:	0f 1f 00             	nopl   (%rax)
  10f260:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  10f265:	48 8b 0e             	mov    (%rsi),%rcx
  10f268:	48 8d 51 08          	lea    0x8(%rcx),%rdx
  10f26c:	48 89 16             	mov    %rdx,(%rsi)
  10f26f:	e9 ec fe ff ff       	jmp    10f160 <_svfiprintf_r+0x170>
  10f274:	84 c0                	test   %al,%al
  10f276:	0f 85 f4 fe ff ff    	jne    10f170 <_svfiprintf_r+0x180>
  10f27c:	c6 44 24 07 20       	movb   $0x20,0x7(%rsp)
  10f281:	b0 20                	mov    $0x20,%al
  10f283:	e9 e8 fe ff ff       	jmp    10f170 <_svfiprintf_r+0x180>
  10f288:	83 cf 01             	or     $0x1,%edi
  10f28b:	e9 e0 fe ff ff       	jmp    10f170 <_svfiprintf_r+0x180>
  10f290:	49 63 55 00          	movslq 0x0(%r13),%rdx
  10f294:	48 83 fa 28          	cmp    $0x28,%rdx
  10f298:	77 2f                	ja     10f2c9 <_svfiprintf_r+0x2d9>
  10f29a:	48 89 d1             	mov    %rdx,%rcx
  10f29d:	49 03 4d 10          	add    0x10(%r13),%rcx
  10f2a1:	8d 52 08             	lea    0x8(%rdx),%edx
  10f2a4:	41 89 55 00          	mov    %edx,0x0(%r13)
  10f2a8:	eb 2e                	jmp    10f2d8 <_svfiprintf_r+0x2e8>
  10f2aa:	c6 44 24 07 2b       	movb   $0x2b,0x7(%rsp)
  10f2af:	b0 2b                	mov    $0x2b,%al
  10f2b1:	e9 ba fe ff ff       	jmp    10f170 <_svfiprintf_r+0x180>
  10f2b6:	81 cf 80 00 00 00    	or     $0x80,%edi
  10f2bc:	e9 af fe ff ff       	jmp    10f170 <_svfiprintf_r+0x180>
  10f2c1:	83 cf 40             	or     $0x40,%edi
  10f2c4:	e9 a7 fe ff ff       	jmp    10f170 <_svfiprintf_r+0x180>
  10f2c9:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  10f2ce:	48 8b 0e             	mov    (%rsi),%rcx
  10f2d1:	48 8d 51 08          	lea    0x8(%rcx),%rdx
  10f2d5:	48 89 16             	mov    %rdx,(%rsi)
  10f2d8:	44 8b 31             	mov    (%rcx),%r14d
  10f2db:	45 85 f6             	test   %r14d,%r14d
  10f2de:	0f 89 8c fe ff ff    	jns    10f170 <_svfiprintf_r+0x180>
  10f2e4:	41 f7 de             	neg    %r14d
  10f2e7:	83 cf 04             	or     $0x4,%edi
  10f2ea:	e9 81 fe ff ff       	jmp    10f170 <_svfiprintf_r+0x180>
  10f2ef:	40 f6 c7 10          	test   $0x10,%dil
  10f2f3:	75 20                	jne    10f315 <_svfiprintf_r+0x325>
  10f2f5:	40 f6 c7 40          	test   $0x40,%dil
  10f2f9:	75 40                	jne    10f33b <_svfiprintf_r+0x34b>
  10f2fb:	49 63 4d 00          	movslq 0x0(%r13),%rcx
  10f2ff:	48 83 f9 28          	cmp    $0x28,%rcx
  10f303:	77 50                	ja     10f355 <_svfiprintf_r+0x365>
  10f305:	48 89 c8             	mov    %rcx,%rax
  10f308:	49 03 45 10          	add    0x10(%r13),%rax
  10f30c:	8d 49 08             	lea    0x8(%rcx),%ecx
  10f30f:	41 89 4d 00          	mov    %ecx,0x0(%r13)
  10f313:	eb 4f                	jmp    10f364 <_svfiprintf_r+0x374>
  10f315:	48 63 44 24 40       	movslq 0x40(%rsp),%rax
  10f31a:	49 63 55 00          	movslq 0x0(%r13),%rdx
  10f31e:	48 83 fa 28          	cmp    $0x28,%rdx
  10f322:	0f 87 7d fd ff ff    	ja     10f0a5 <_svfiprintf_r+0xb5>
  10f328:	48 89 d1             	mov    %rdx,%rcx
  10f32b:	49 03 4d 10          	add    0x10(%r13),%rcx
  10f32f:	8d 52 08             	lea    0x8(%rdx),%edx
  10f332:	41 89 55 00          	mov    %edx,0x0(%r13)
  10f336:	e9 5d fd ff ff       	jmp    10f098 <_svfiprintf_r+0xa8>
  10f33b:	49 63 4d 00          	movslq 0x0(%r13),%rcx
  10f33f:	48 83 f9 28          	cmp    $0x28,%rcx
  10f343:	77 32                	ja     10f377 <_svfiprintf_r+0x387>
  10f345:	48 89 c8             	mov    %rcx,%rax
  10f348:	49 03 45 10          	add    0x10(%r13),%rax
  10f34c:	8d 49 08             	lea    0x8(%rcx),%ecx
  10f34f:	41 89 4d 00          	mov    %ecx,0x0(%r13)
  10f353:	eb 31                	jmp    10f386 <_svfiprintf_r+0x396>
  10f355:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  10f35a:	48 8b 02             	mov    (%rdx),%rax
  10f35d:	48 8d 48 08          	lea    0x8(%rax),%rcx
  10f361:	48 89 0a             	mov    %rcx,(%rdx)
  10f364:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
  10f369:	48 8b 00             	mov    (%rax),%rax
  10f36c:	8b 4c 24 40          	mov    0x40(%rsp),%ecx
  10f370:	89 08                	mov    %ecx,(%rax)
  10f372:	e9 49 fd ff ff       	jmp    10f0c0 <_svfiprintf_r+0xd0>
  10f377:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  10f37c:	48 8b 02             	mov    (%rdx),%rax
  10f37f:	48 8d 48 08          	lea    0x8(%rax),%rcx
  10f383:	48 89 0a             	mov    %rcx,(%rdx)
  10f386:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
  10f38b:	48 8b 00             	mov    (%rax),%rax
  10f38e:	8b 4c 24 40          	mov    0x40(%rsp),%ecx
  10f392:	66 89 08             	mov    %cx,(%rax)
  10f395:	e9 26 fd ff ff       	jmp    10f0c0 <_svfiprintf_r+0xd0>
  10f39a:	83 cf 10             	or     $0x10,%edi
  10f39d:	40 f6 c7 10          	test   $0x10,%dil
  10f3a1:	75 2c                	jne    10f3cf <_svfiprintf_r+0x3df>
  10f3a3:	49 63 45 00          	movslq 0x0(%r13),%rax
  10f3a7:	89 fe                	mov    %edi,%esi
  10f3a9:	40 f6 c7 40          	test   $0x40,%dil
  10f3ad:	0f 85 f7 01 00 00    	jne    10f5aa <_svfiprintf_r+0x5ba>
  10f3b3:	83 f8 28             	cmp    $0x28,%eax
  10f3b6:	0f 87 9f 03 00 00    	ja     10f75b <_svfiprintf_r+0x76b>
  10f3bc:	48 89 c1             	mov    %rax,%rcx
  10f3bf:	49 03 4d 10          	add    0x10(%r13),%rcx
  10f3c3:	8d 40 08             	lea    0x8(%rax),%eax
  10f3c6:	41 89 45 00          	mov    %eax,0x0(%r13)
  10f3ca:	e9 9b 03 00 00       	jmp    10f76a <_svfiprintf_r+0x77a>
  10f3cf:	49 63 45 00          	movslq 0x0(%r13),%rax
  10f3d3:	89 fe                	mov    %edi,%esi
  10f3d5:	48 83 f8 28          	cmp    $0x28,%rax
  10f3d9:	0f 87 eb 01 00 00    	ja     10f5ca <_svfiprintf_r+0x5da>
  10f3df:	48 89 c1             	mov    %rax,%rcx
  10f3e2:	49 03 4d 10          	add    0x10(%r13),%rcx
  10f3e6:	8d 40 08             	lea    0x8(%rax),%eax
  10f3e9:	41 89 45 00          	mov    %eax,0x0(%r13)
  10f3ed:	48 8b 09             	mov    (%rcx),%rcx
  10f3f0:	e9 92 03 00 00       	jmp    10f787 <_svfiprintf_r+0x797>
  10f3f5:	83 cf 10             	or     $0x10,%edi
  10f3f8:	40 f6 c7 10          	test   $0x10,%dil
  10f3fc:	0f 85 2a 01 00 00    	jne    10f52c <_svfiprintf_r+0x53c>
  10f402:	49 63 45 00          	movslq 0x0(%r13),%rax
  10f406:	89 fe                	mov    %edi,%esi
  10f408:	40 f6 c7 40          	test   $0x40,%dil
  10f40c:	0f 85 cf 01 00 00    	jne    10f5e1 <_svfiprintf_r+0x5f1>
  10f412:	83 f8 28             	cmp    $0x28,%eax
  10f415:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  10f41a:	0f 87 a8 03 00 00    	ja     10f7c8 <_svfiprintf_r+0x7d8>
  10f420:	48 89 c1             	mov    %rax,%rcx
  10f423:	49 03 4d 10          	add    0x10(%r13),%rcx
  10f427:	8d 40 08             	lea    0x8(%rax),%eax
  10f42a:	41 89 45 00          	mov    %eax,0x0(%r13)
  10f42e:	e9 a4 03 00 00       	jmp    10f7d7 <_svfiprintf_r+0x7e7>
  10f433:	83 cf 10             	or     $0x10,%edi
  10f436:	40 f6 c7 10          	test   $0x10,%dil
  10f43a:	0f 85 0f 01 00 00    	jne    10f54f <_svfiprintf_r+0x55f>
  10f440:	49 63 45 00          	movslq 0x0(%r13),%rax
  10f444:	89 fe                	mov    %edi,%esi
  10f446:	40 f6 c7 40          	test   $0x40,%dil
  10f44a:	0f 85 b2 01 00 00    	jne    10f602 <_svfiprintf_r+0x612>
  10f450:	83 f8 28             	cmp    $0x28,%eax
  10f453:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  10f458:	0f 87 82 03 00 00    	ja     10f7e0 <_svfiprintf_r+0x7f0>
  10f45e:	48 89 c1             	mov    %rax,%rcx
  10f461:	49 03 4d 10          	add    0x10(%r13),%rcx
  10f465:	8d 40 08             	lea    0x8(%rax),%eax
  10f468:	41 89 45 00          	mov    %eax,0x0(%r13)
  10f46c:	e9 7e 03 00 00       	jmp    10f7ef <_svfiprintf_r+0x7ff>
  10f471:	b2 58                	mov    $0x58,%dl
  10f473:	48 8d 05 b4 16 ff ff 	lea    -0xe94c(%rip),%rax        # 100b2e <__dso_handle+0xb2e>
  10f47a:	eb 74                	jmp    10f4f0 <_svfiprintf_r+0x500>
  10f47c:	49 63 4d 00          	movslq 0x0(%r13),%rcx
  10f480:	48 83 f9 28          	cmp    $0x28,%rcx
  10f484:	89 7c 24 3c          	mov    %edi,0x3c(%rsp)
  10f488:	0f 87 95 01 00 00    	ja     10f623 <_svfiprintf_r+0x633>
  10f48e:	48 89 c8             	mov    %rcx,%rax
  10f491:	49 03 45 10          	add    0x10(%r13),%rax
  10f495:	8d 49 08             	lea    0x8(%rcx),%ecx
  10f498:	41 89 4d 00          	mov    %ecx,0x0(%r13)
  10f49c:	e9 91 01 00 00       	jmp    10f632 <_svfiprintf_r+0x642>
  10f4a1:	49 63 4d 00          	movslq 0x0(%r13),%rcx
  10f4a5:	48 83 f9 28          	cmp    $0x28,%rcx
  10f4a9:	0f 87 a5 01 00 00    	ja     10f654 <_svfiprintf_r+0x664>
  10f4af:	48 89 c8             	mov    %rcx,%rax
  10f4b2:	49 03 45 10          	add    0x10(%r13),%rax
  10f4b6:	8d 49 08             	lea    0x8(%rcx),%ecx
  10f4b9:	41 89 4d 00          	mov    %ecx,0x0(%r13)
  10f4bd:	e9 a1 01 00 00       	jmp    10f663 <_svfiprintf_r+0x673>
  10f4c2:	49 63 4d 00          	movslq 0x0(%r13),%rcx
  10f4c6:	48 83 f9 28          	cmp    $0x28,%rcx
  10f4ca:	89 7c 24 3c          	mov    %edi,0x3c(%rsp)
  10f4ce:	0f 87 b9 01 00 00    	ja     10f68d <_svfiprintf_r+0x69d>
  10f4d4:	48 89 c8             	mov    %rcx,%rax
  10f4d7:	49 03 45 10          	add    0x10(%r13),%rax
  10f4db:	8d 49 08             	lea    0x8(%rcx),%ecx
  10f4de:	41 89 4d 00          	mov    %ecx,0x0(%r13)
  10f4e2:	e9 b5 01 00 00       	jmp    10f69c <_svfiprintf_r+0x6ac>
  10f4e7:	b2 78                	mov    $0x78,%dl
  10f4e9:	48 8d 05 3a 15 ff ff 	lea    -0xeac6(%rip),%rax        # 100a2a <__dso_handle+0xa2a>
  10f4f0:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  10f4f5:	40 f6 c7 10          	test   $0x10,%dil
  10f4f9:	75 77                	jne    10f572 <_svfiprintf_r+0x582>
  10f4fb:	49 63 45 00          	movslq 0x0(%r13),%rax
  10f4ff:	89 fe                	mov    %edi,%esi
  10f501:	40 f6 c7 40          	test   $0x40,%dil
  10f505:	0f 85 d4 01 00 00    	jne    10f6df <_svfiprintf_r+0x6ef>
  10f50b:	83 f8 28             	cmp    $0x28,%eax
  10f50e:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  10f513:	0f 87 df 02 00 00    	ja     10f7f8 <_svfiprintf_r+0x808>
  10f519:	48 89 c1             	mov    %rax,%rcx
  10f51c:	49 03 4d 10          	add    0x10(%r13),%rcx
  10f520:	8d 40 08             	lea    0x8(%rax),%eax
  10f523:	41 89 45 00          	mov    %eax,0x0(%r13)
  10f527:	e9 db 02 00 00       	jmp    10f807 <_svfiprintf_r+0x817>
  10f52c:	89 fe                	mov    %edi,%esi
  10f52e:	49 63 4d 00          	movslq 0x0(%r13),%rcx
  10f532:	48 83 f9 28          	cmp    $0x28,%rcx
  10f536:	0f 87 c4 01 00 00    	ja     10f700 <_svfiprintf_r+0x710>
  10f53c:	48 89 c8             	mov    %rcx,%rax
  10f53f:	49 03 45 10          	add    0x10(%r13),%rax
  10f543:	8d 49 08             	lea    0x8(%rcx),%ecx
  10f546:	41 89 4d 00          	mov    %ecx,0x0(%r13)
  10f54a:	e9 c0 01 00 00       	jmp    10f70f <_svfiprintf_r+0x71f>
  10f54f:	89 fe                	mov    %edi,%esi
  10f551:	49 63 4d 00          	movslq 0x0(%r13),%rcx
  10f555:	48 83 f9 28          	cmp    $0x28,%rcx
  10f559:	0f 87 bf 01 00 00    	ja     10f71e <_svfiprintf_r+0x72e>
  10f55f:	48 89 c8             	mov    %rcx,%rax
  10f562:	49 03 45 10          	add    0x10(%r13),%rax
  10f566:	8d 49 08             	lea    0x8(%rcx),%ecx
  10f569:	41 89 4d 00          	mov    %ecx,0x0(%r13)
  10f56d:	e9 bb 01 00 00       	jmp    10f72d <_svfiprintf_r+0x73d>
  10f572:	89 fe                	mov    %edi,%esi
  10f574:	49 63 45 00          	movslq 0x0(%r13),%rax
  10f578:	48 83 f8 28          	cmp    $0x28,%rax
  10f57c:	0f 87 bd 01 00 00    	ja     10f73f <_svfiprintf_r+0x74f>
  10f582:	48 89 c1             	mov    %rax,%rcx
  10f585:	49 03 4d 10          	add    0x10(%r13),%rcx
  10f589:	8d 40 08             	lea    0x8(%rax),%eax
  10f58c:	41 89 45 00          	mov    %eax,0x0(%r13)
  10f590:	48 8b 09             	mov    (%rcx),%rcx
  10f593:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  10f598:	e9 af 02 00 00       	jmp    10f84c <_svfiprintf_r+0x85c>
  10f59d:	89 7c 24 3c          	mov    %edi,0x3c(%rsp)
  10f5a1:	88 4c 24 70          	mov    %cl,0x70(%rsp)
  10f5a5:	e9 8e 00 00 00       	jmp    10f638 <_svfiprintf_r+0x648>
  10f5aa:	83 f8 28             	cmp    $0x28,%eax
  10f5ad:	0f 87 c1 01 00 00    	ja     10f774 <_svfiprintf_r+0x784>
  10f5b3:	49 8b 4d 10          	mov    0x10(%r13),%rcx
  10f5b7:	48 01 c1             	add    %rax,%rcx
  10f5ba:	83 c0 08             	add    $0x8,%eax
  10f5bd:	41 89 45 00          	mov    %eax,0x0(%r13)
  10f5c1:	48 0f bf 09          	movswq (%rcx),%rcx
  10f5c5:	e9 bd 01 00 00       	jmp    10f787 <_svfiprintf_r+0x797>
  10f5ca:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  10f5cf:	48 8b 02             	mov    (%rdx),%rax
  10f5d2:	48 8d 48 08          	lea    0x8(%rax),%rcx
  10f5d6:	48 89 0a             	mov    %rcx,(%rdx)
  10f5d9:	48 8b 08             	mov    (%rax),%rcx
  10f5dc:	e9 a6 01 00 00       	jmp    10f787 <_svfiprintf_r+0x797>
  10f5e1:	83 f8 28             	cmp    $0x28,%eax
  10f5e4:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  10f5e9:	0f 87 1c 02 00 00    	ja     10f80b <_svfiprintf_r+0x81b>
  10f5ef:	49 8b 4d 10          	mov    0x10(%r13),%rcx
  10f5f3:	48 01 c1             	add    %rax,%rcx
  10f5f6:	83 c0 08             	add    $0x8,%eax
  10f5f9:	41 89 45 00          	mov    %eax,0x0(%r13)
  10f5fd:	e9 18 02 00 00       	jmp    10f81a <_svfiprintf_r+0x82a>
  10f602:	83 f8 28             	cmp    $0x28,%eax
  10f605:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  10f60a:	0f 87 11 02 00 00    	ja     10f821 <_svfiprintf_r+0x831>
  10f610:	49 8b 4d 10          	mov    0x10(%r13),%rcx
  10f614:	48 01 c1             	add    %rax,%rcx
  10f617:	83 c0 08             	add    $0x8,%eax
  10f61a:	41 89 45 00          	mov    %eax,0x0(%r13)
  10f61e:	e9 0d 02 00 00       	jmp    10f830 <_svfiprintf_r+0x840>
  10f623:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  10f628:	48 8b 02             	mov    (%rdx),%rax
  10f62b:	48 8d 48 08          	lea    0x8(%rax),%rcx
  10f62f:	48 89 0a             	mov    %rcx,(%rdx)
  10f632:	8a 00                	mov    (%rax),%al
  10f634:	88 44 24 70          	mov    %al,0x70(%rsp)
  10f638:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
  10f63d:	b8 01 00 00 00       	mov    $0x1,%eax
  10f642:	45 31 e4             	xor    %r12d,%r12d
  10f645:	4c 8d 6c 24 70       	lea    0x70(%rsp),%r13
  10f64a:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  10f64f:	e9 1f 03 00 00       	jmp    10f973 <_svfiprintf_r+0x983>
  10f654:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  10f659:	48 8b 02             	mov    (%rdx),%rax
  10f65c:	48 8d 48 08          	lea    0x8(%rax),%rcx
  10f660:	48 89 0a             	mov    %rcx,(%rdx)
  10f663:	48 8b 08             	mov    (%rax),%rcx
  10f666:	83 cf 02             	or     $0x2,%edi
  10f669:	89 fe                	mov    %edi,%esi
  10f66b:	66 c7 44 24 46 30 78 	movw   $0x7830,0x46(%rsp)
  10f672:	b8 02 00 00 00       	mov    $0x2,%eax
  10f677:	48 8d 15 ac 13 ff ff 	lea    -0xec54(%rip),%rdx        # 100a2a <__dso_handle+0xa2a>
  10f67e:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  10f683:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  10f688:	e9 e3 01 00 00       	jmp    10f870 <_svfiprintf_r+0x880>
  10f68d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  10f692:	48 8b 02             	mov    (%rdx),%rax
  10f695:	48 8d 48 08          	lea    0x8(%rax),%rcx
  10f699:	48 89 0a             	mov    %rcx,(%rdx)
  10f69c:	4c 8b 28             	mov    (%rax),%r13
  10f69f:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
  10f6a4:	4d 85 ed             	test   %r13,%r13
  10f6a7:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  10f6ac:	0f 84 f5 00 00 00    	je     10f7a7 <_svfiprintf_r+0x7b7>
  10f6b2:	45 85 e4             	test   %r12d,%r12d
  10f6b5:	0f 88 b2 08 00 00    	js     10ff6d <_svfiprintf_r+0xf7d>
  10f6bb:	49 63 d4             	movslq %r12d,%rdx
  10f6be:	31 f6                	xor    %esi,%esi
  10f6c0:	4c 89 ef             	mov    %r13,%rdi
  10f6c3:	e8 48 0f 00 00       	call   110610 <memchr>
  10f6c8:	89 c1                	mov    %eax,%ecx
  10f6ca:	44 29 e9             	sub    %r13d,%ecx
  10f6cd:	48 85 c0             	test   %rax,%rax
  10f6d0:	48 89 c8             	mov    %rcx,%rax
  10f6d3:	41 0f 44 c4          	cmove  %r12d,%eax
  10f6d7:	45 31 e4             	xor    %r12d,%r12d
  10f6da:	e9 94 02 00 00       	jmp    10f973 <_svfiprintf_r+0x983>
  10f6df:	83 f8 28             	cmp    $0x28,%eax
  10f6e2:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  10f6e7:	0f 87 4d 01 00 00    	ja     10f83a <_svfiprintf_r+0x84a>
  10f6ed:	49 8b 4d 10          	mov    0x10(%r13),%rcx
  10f6f1:	48 01 c1             	add    %rax,%rcx
  10f6f4:	83 c0 08             	add    $0x8,%eax
  10f6f7:	41 89 45 00          	mov    %eax,0x0(%r13)
  10f6fb:	e9 49 01 00 00       	jmp    10f849 <_svfiprintf_r+0x859>
  10f700:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  10f705:	48 8b 02             	mov    (%rdx),%rax
  10f708:	48 8d 48 08          	lea    0x8(%rax),%rcx
  10f70c:	48 89 0a             	mov    %rcx,(%rdx)
  10f70f:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  10f714:	48 8b 08             	mov    (%rax),%rcx
  10f717:	31 c0                	xor    %eax,%eax
  10f719:	e9 52 01 00 00       	jmp    10f870 <_svfiprintf_r+0x880>
  10f71e:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  10f723:	48 8b 02             	mov    (%rdx),%rax
  10f726:	48 8d 48 08          	lea    0x8(%rax),%rcx
  10f72a:	48 89 0a             	mov    %rcx,(%rdx)
  10f72d:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  10f732:	48 8b 08             	mov    (%rax),%rcx
  10f735:	b8 01 00 00 00       	mov    $0x1,%eax
  10f73a:	e9 31 01 00 00       	jmp    10f870 <_svfiprintf_r+0x880>
  10f73f:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  10f744:	48 8b 07             	mov    (%rdi),%rax
  10f747:	48 8d 48 08          	lea    0x8(%rax),%rcx
  10f74b:	48 89 0f             	mov    %rcx,(%rdi)
  10f74e:	48 8b 08             	mov    (%rax),%rcx
  10f751:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  10f756:	e9 f1 00 00 00       	jmp    10f84c <_svfiprintf_r+0x85c>
  10f75b:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  10f760:	48 8b 0a             	mov    (%rdx),%rcx
  10f763:	48 8d 41 08          	lea    0x8(%rcx),%rax
  10f767:	48 89 02             	mov    %rax,(%rdx)
  10f76a:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  10f76f:	48 63 09             	movslq (%rcx),%rcx
  10f772:	eb 18                	jmp    10f78c <_svfiprintf_r+0x79c>
  10f774:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  10f779:	48 8b 02             	mov    (%rdx),%rax
  10f77c:	48 8d 48 08          	lea    0x8(%rax),%rcx
  10f780:	48 89 0a             	mov    %rcx,(%rdx)
  10f783:	48 0f bf 08          	movswq (%rax),%rcx
  10f787:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  10f78c:	b8 01 00 00 00       	mov    $0x1,%eax
  10f791:	48 85 c9             	test   %rcx,%rcx
  10f794:	0f 89 db 00 00 00    	jns    10f875 <_svfiprintf_r+0x885>
  10f79a:	48 f7 d9             	neg    %rcx
  10f79d:	c6 44 24 07 2d       	movb   $0x2d,0x7(%rsp)
  10f7a2:	e9 ce 00 00 00       	jmp    10f875 <_svfiprintf_r+0x885>
  10f7a7:	41 83 fc 06          	cmp    $0x6,%r12d
  10f7ab:	44 89 e1             	mov    %r12d,%ecx
  10f7ae:	b8 06 00 00 00       	mov    $0x6,%eax
  10f7b3:	0f 43 c8             	cmovae %eax,%ecx
  10f7b6:	48 89 c8             	mov    %rcx,%rax
  10f7b9:	45 31 e4             	xor    %r12d,%r12d
  10f7bc:	4c 8d 2d 06 15 ff ff 	lea    -0xeafa(%rip),%r13        # 100cc9 <__dso_handle+0xcc9>
  10f7c3:	e9 ab 01 00 00       	jmp    10f973 <_svfiprintf_r+0x983>
  10f7c8:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  10f7cd:	48 8b 0a             	mov    (%rdx),%rcx
  10f7d0:	48 8d 41 08          	lea    0x8(%rcx),%rax
  10f7d4:	48 89 02             	mov    %rax,(%rdx)
  10f7d7:	8b 09                	mov    (%rcx),%ecx
  10f7d9:	31 c0                	xor    %eax,%eax
  10f7db:	e9 90 00 00 00       	jmp    10f870 <_svfiprintf_r+0x880>
  10f7e0:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  10f7e5:	48 8b 0a             	mov    (%rdx),%rcx
  10f7e8:	48 8d 41 08          	lea    0x8(%rcx),%rax
  10f7ec:	48 89 02             	mov    %rax,(%rdx)
  10f7ef:	8b 09                	mov    (%rcx),%ecx
  10f7f1:	b8 01 00 00 00       	mov    $0x1,%eax
  10f7f6:	eb 78                	jmp    10f870 <_svfiprintf_r+0x880>
  10f7f8:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  10f7fd:	48 8b 0f             	mov    (%rdi),%rcx
  10f800:	48 8d 41 08          	lea    0x8(%rcx),%rax
  10f804:	48 89 07             	mov    %rax,(%rdi)
  10f807:	8b 09                	mov    (%rcx),%ecx
  10f809:	eb 41                	jmp    10f84c <_svfiprintf_r+0x85c>
  10f80b:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  10f810:	48 8b 0a             	mov    (%rdx),%rcx
  10f813:	48 8d 41 08          	lea    0x8(%rcx),%rax
  10f817:	48 89 02             	mov    %rax,(%rdx)
  10f81a:	0f b7 09             	movzwl (%rcx),%ecx
  10f81d:	31 c0                	xor    %eax,%eax
  10f81f:	eb 4f                	jmp    10f870 <_svfiprintf_r+0x880>
  10f821:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  10f826:	48 8b 0a             	mov    (%rdx),%rcx
  10f829:	48 8d 41 08          	lea    0x8(%rcx),%rax
  10f82d:	48 89 02             	mov    %rax,(%rdx)
  10f830:	0f b7 09             	movzwl (%rcx),%ecx
  10f833:	b8 01 00 00 00       	mov    $0x1,%eax
  10f838:	eb 36                	jmp    10f870 <_svfiprintf_r+0x880>
  10f83a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  10f83f:	48 8b 0f             	mov    (%rdi),%rcx
  10f842:	48 8d 41 08          	lea    0x8(%rcx),%rax
  10f846:	48 89 07             	mov    %rax,(%rdi)
  10f849:	0f b7 09             	movzwl (%rcx),%ecx
  10f84c:	b8 02 00 00 00       	mov    $0x2,%eax
  10f851:	40 f6 c6 01          	test   $0x1,%sil
  10f855:	74 19                	je     10f870 <_svfiprintf_r+0x880>
  10f857:	48 85 c9             	test   %rcx,%rcx
  10f85a:	74 14                	je     10f870 <_svfiprintf_r+0x880>
  10f85c:	c6 44 24 46 30       	movb   $0x30,0x46(%rsp)
  10f861:	88 54 24 47          	mov    %dl,0x47(%rsp)
  10f865:	83 ce 02             	or     $0x2,%esi
  10f868:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10f86f:	00 
  10f870:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
  10f875:	89 f2                	mov    %esi,%edx
  10f877:	81 e6 7f ff ff ff    	and    $0xffffff7f,%esi
  10f87d:	45 85 e4             	test   %r12d,%r12d
  10f880:	0f 48 f2             	cmovs  %edx,%esi
  10f883:	89 74 24 3c          	mov    %esi,0x3c(%rsp)
  10f887:	75 37                	jne    10f8c0 <_svfiprintf_r+0x8d0>
  10f889:	48 85 c9             	test   %rcx,%rcx
  10f88c:	75 32                	jne    10f8c0 <_svfiprintf_r+0x8d0>
  10f88e:	4c 8d ac 24 98 00 00 	lea    0x98(%rsp),%r13
  10f895:	00 
  10f896:	85 c0                	test   %eax,%eax
  10f898:	0f 85 ca 00 00 00    	jne    10f968 <_svfiprintf_r+0x978>
  10f89e:	8b 44 24 3c          	mov    0x3c(%rsp),%eax
  10f8a2:	4c 8d ac 24 98 00 00 	lea    0x98(%rsp),%r13
  10f8a9:	00 
  10f8aa:	83 e0 01             	and    $0x1,%eax
  10f8ad:	0f 84 b5 00 00 00    	je     10f968 <_svfiprintf_r+0x978>
  10f8b3:	c6 84 24 97 00 00 00 	movb   $0x30,0x97(%rsp)
  10f8ba:	30 
  10f8bb:	e9 a0 00 00 00       	jmp    10f960 <_svfiprintf_r+0x970>
  10f8c0:	85 c0                	test   %eax,%eax
  10f8c2:	74 3a                	je     10f8fe <_svfiprintf_r+0x90e>
  10f8c4:	83 f8 01             	cmp    $0x1,%eax
  10f8c7:	74 76                	je     10f93f <_svfiprintf_r+0x94f>
  10f8c9:	4c 8d ac 24 98 00 00 	lea    0x98(%rsp),%r13
  10f8d0:	00 
  10f8d1:	83 f8 02             	cmp    $0x2,%eax
  10f8d4:	0f 85 36 06 00 00    	jne    10ff10 <_svfiprintf_r+0xf20>
  10f8da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10f8e0:	89 c8                	mov    %ecx,%eax
  10f8e2:	83 e0 0f             	and    $0xf,%eax
  10f8e5:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  10f8ea:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  10f8ee:	41 88 45 ff          	mov    %al,-0x1(%r13)
  10f8f2:	49 83 c5 ff          	add    $0xffffffffffffffff,%r13
  10f8f6:	48 c1 e9 04          	shr    $0x4,%rcx
  10f8fa:	75 e4                	jne    10f8e0 <_svfiprintf_r+0x8f0>
  10f8fc:	eb 6a                	jmp    10f968 <_svfiprintf_r+0x978>
  10f8fe:	48 8d 84 24 97 00 00 	lea    0x97(%rsp),%rax
  10f905:	00 
  10f906:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10f90d:	00 00 00 
  10f910:	89 ca                	mov    %ecx,%edx
  10f912:	80 e2 07             	and    $0x7,%dl
  10f915:	80 ca 30             	or     $0x30,%dl
  10f918:	88 10                	mov    %dl,(%rax)
  10f91a:	48 c1 e9 03          	shr    $0x3,%rcx
  10f91e:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
  10f922:	48 85 c9             	test   %rcx,%rcx
  10f925:	75 e9                	jne    10f910 <_svfiprintf_r+0x920>
  10f927:	4c 8d 68 01          	lea    0x1(%rax),%r13
  10f92b:	f6 44 24 3c 01       	testb  $0x1,0x3c(%rsp)
  10f930:	74 36                	je     10f968 <_svfiprintf_r+0x978>
  10f932:	80 fa 30             	cmp    $0x30,%dl
  10f935:	74 31                	je     10f968 <_svfiprintf_r+0x978>
  10f937:	c6 00 30             	movb   $0x30,(%rax)
  10f93a:	49 89 c5             	mov    %rax,%r13
  10f93d:	eb 29                	jmp    10f968 <_svfiprintf_r+0x978>
  10f93f:	48 83 f9 0a          	cmp    $0xa,%rcx
  10f943:	0f 83 db 05 00 00    	jae    10ff24 <_svfiprintf_r+0xf34>
  10f949:	80 c1 30             	add    $0x30,%cl
  10f94c:	88 8c 24 97 00 00 00 	mov    %cl,0x97(%rsp)
  10f953:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10f95a:	00 00 00 
  10f95d:	0f 1f 00             	nopl   (%rax)
  10f960:	4c 8d ac 24 97 00 00 	lea    0x97(%rsp),%r13
  10f967:	00 
  10f968:	48 8d 84 24 98 00 00 	lea    0x98(%rsp),%rax
  10f96f:	00 
  10f970:	44 29 e8             	sub    %r13d,%eax
  10f973:	41 39 c4             	cmp    %eax,%r12d
  10f976:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  10f97b:	41 0f 4d c4          	cmovge %r12d,%eax
  10f97f:	80 7c 24 07 01       	cmpb   $0x1,0x7(%rsp)
  10f984:	83 d8 ff             	sbb    $0xffffffff,%eax
  10f987:	8d 50 02             	lea    0x2(%rax),%edx
  10f98a:	8b 4c 24 3c          	mov    0x3c(%rsp),%ecx
  10f98e:	f6 c1 02             	test   $0x2,%cl
  10f991:	0f 44 d0             	cmove  %eax,%edx
  10f994:	81 e1 84 00 00 00    	and    $0x84,%ecx
  10f99a:	89 4c 24 64          	mov    %ecx,0x64(%rsp)
  10f99e:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  10f9a3:	74 6b                	je     10fa10 <_svfiprintf_r+0xa20>
  10f9a5:	80 7c 24 07 00       	cmpb   $0x0,0x7(%rsp)
  10f9aa:	0f 84 80 01 00 00    	je     10fb30 <_svfiprintf_r+0xb40>
  10f9b0:	48 8d 44 24 07       	lea    0x7(%rsp),%rax
  10f9b5:	49 89 07             	mov    %rax,(%r15)
  10f9b8:	49 c7 47 08 01 00 00 	movq   $0x1,0x8(%r15)
  10f9bf:	00 
  10f9c0:	48 83 44 24 28 01    	addq   $0x1,0x28(%rsp)
  10f9c6:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10f9ca:	8d 48 01             	lea    0x1(%rax),%ecx
  10f9cd:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10f9d1:	83 f8 07             	cmp    $0x7,%eax
  10f9d4:	0f 8c 26 01 00 00    	jl     10fb00 <_svfiprintf_r+0xb10>
  10f9da:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10f9df:	48 89 de             	mov    %rbx,%rsi
  10f9e2:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10f9e7:	e8 34 f4 ff ff       	call   10ee20 <__ssprint_r>
  10f9ec:	4c 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%r15
  10f9f3:	00 
  10f9f4:	85 c0                	test   %eax,%eax
  10f9f6:	0f 84 34 01 00 00    	je     10fb30 <_svfiprintf_r+0xb40>
  10f9fc:	e9 ae 05 00 00       	jmp    10ffaf <_svfiprintf_r+0xfbf>
  10fa01:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10fa08:	00 00 00 
  10fa0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10fa10:	44 89 f3             	mov    %r14d,%ebx
  10fa13:	29 d3                	sub    %edx,%ebx
  10fa15:	0f 8e f6 00 00 00    	jle    10fb11 <_svfiprintf_r+0xb21>
  10fa1b:	48 8d 05 ce 22 ff ff 	lea    -0xdd32(%rip),%rax        # 101cf0 <_svfiprintf_r.blanks>
  10fa22:	49 89 07             	mov    %rax,(%r15)
  10fa25:	83 fb 11             	cmp    $0x11,%ebx
  10fa28:	7c 7f                	jl     10faa9 <_svfiprintf_r+0xab9>
  10fa2a:	bb 10 00 00 00       	mov    $0x10,%ebx
  10fa2f:	2b 5c 24 48          	sub    0x48(%rsp),%ebx
  10fa33:	44 01 f3             	add    %r14d,%ebx
  10fa36:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10fa3d:	00 00 00 
  10fa40:	49 c7 47 08 10 00 00 	movq   $0x10,0x8(%r15)
  10fa47:	00 
  10fa48:	48 83 44 24 28 10    	addq   $0x10,0x28(%rsp)
  10fa4e:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10fa52:	8d 48 01             	lea    0x1(%rax),%ecx
  10fa55:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10fa59:	83 f8 07             	cmp    $0x7,%eax
  10fa5c:	7c 32                	jl     10fa90 <_svfiprintf_r+0xaa0>
  10fa5e:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10fa63:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10fa68:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10fa6d:	e8 ae f3 ff ff       	call   10ee20 <__ssprint_r>
  10fa72:	4c 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%r15
  10fa79:	00 
  10fa7a:	85 c0                	test   %eax,%eax
  10fa7c:	74 16                	je     10fa94 <_svfiprintf_r+0xaa4>
  10fa7e:	e9 fa 04 00 00       	jmp    10ff7d <_svfiprintf_r+0xf8d>
  10fa83:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10fa8a:	00 00 00 
  10fa8d:	0f 1f 00             	nopl   (%rax)
  10fa90:	49 83 c7 10          	add    $0x10,%r15
  10fa94:	48 8d 05 55 22 ff ff 	lea    -0xddab(%rip),%rax        # 101cf0 <_svfiprintf_r.blanks>
  10fa9b:	49 89 07             	mov    %rax,(%r15)
  10fa9e:	83 c3 f0             	add    $0xfffffff0,%ebx
  10faa1:	83 fb 20             	cmp    $0x20,%ebx
  10faa4:	7f 9a                	jg     10fa40 <_svfiprintf_r+0xa50>
  10faa6:	83 c3 f0             	add    $0xfffffff0,%ebx
  10faa9:	48 63 c3             	movslq %ebx,%rax
  10faac:	49 89 47 08          	mov    %rax,0x8(%r15)
  10fab0:	48 01 44 24 28       	add    %rax,0x28(%rsp)
  10fab5:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10fab9:	8d 48 01             	lea    0x1(%rax),%ecx
  10fabc:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10fac0:	83 f8 07             	cmp    $0x7,%eax
  10fac3:	7c 48                	jl     10fb0d <_svfiprintf_r+0xb1d>
  10fac5:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10faca:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  10facf:	48 89 de             	mov    %rbx,%rsi
  10fad2:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10fad7:	e8 44 f3 ff ff       	call   10ee20 <__ssprint_r>
  10fadc:	4c 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%r15
  10fae3:	00 
  10fae4:	85 c0                	test   %eax,%eax
  10fae6:	0f 84 b9 fe ff ff    	je     10f9a5 <_svfiprintf_r+0x9b5>
  10faec:	e9 be 04 00 00       	jmp    10ffaf <_svfiprintf_r+0xfbf>
  10faf1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10faf8:	00 00 00 
  10fafb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10fb00:	49 83 c7 10          	add    $0x10,%r15
  10fb04:	f6 44 24 3c 02       	testb  $0x2,0x3c(%rsp)
  10fb09:	74 74                	je     10fb7f <_svfiprintf_r+0xb8f>
  10fb0b:	eb 2a                	jmp    10fb37 <_svfiprintf_r+0xb47>
  10fb0d:	49 83 c7 10          	add    $0x10,%r15
  10fb11:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  10fb16:	80 7c 24 07 00       	cmpb   $0x0,0x7(%rsp)
  10fb1b:	0f 85 8f fe ff ff    	jne    10f9b0 <_svfiprintf_r+0x9c0>
  10fb21:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10fb28:	00 00 00 
  10fb2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10fb30:	f6 44 24 3c 02       	testb  $0x2,0x3c(%rsp)
  10fb35:	74 48                	je     10fb7f <_svfiprintf_r+0xb8f>
  10fb37:	48 8d 44 24 46       	lea    0x46(%rsp),%rax
  10fb3c:	49 89 07             	mov    %rax,(%r15)
  10fb3f:	49 c7 47 08 02 00 00 	movq   $0x2,0x8(%r15)
  10fb46:	00 
  10fb47:	48 83 44 24 28 02    	addq   $0x2,0x28(%rsp)
  10fb4d:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10fb51:	8d 48 01             	lea    0x1(%rax),%ecx
  10fb54:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10fb58:	83 f8 07             	cmp    $0x7,%eax
  10fb5b:	7c 33                	jl     10fb90 <_svfiprintf_r+0xba0>
  10fb5d:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10fb62:	48 89 de             	mov    %rbx,%rsi
  10fb65:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10fb6a:	e8 b1 f2 ff ff       	call   10ee20 <__ssprint_r>
  10fb6f:	4c 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%r15
  10fb76:	00 
  10fb77:	85 c0                	test   %eax,%eax
  10fb79:	0f 85 30 04 00 00    	jne    10ffaf <_svfiprintf_r+0xfbf>
  10fb7f:	81 7c 24 64 80 00 00 	cmpl   $0x80,0x64(%rsp)
  10fb86:	00 
  10fb87:	74 19                	je     10fba2 <_svfiprintf_r+0xbb2>
  10fb89:	e9 f8 00 00 00       	jmp    10fc86 <_svfiprintf_r+0xc96>
  10fb8e:	66 90                	xchg   %ax,%ax
  10fb90:	49 83 c7 10          	add    $0x10,%r15
  10fb94:	81 7c 24 64 80 00 00 	cmpl   $0x80,0x64(%rsp)
  10fb9b:	00 
  10fb9c:	0f 85 e4 00 00 00    	jne    10fc86 <_svfiprintf_r+0xc96>
  10fba2:	44 89 f3             	mov    %r14d,%ebx
  10fba5:	2b 5c 24 48          	sub    0x48(%rsp),%ebx
  10fba9:	0f 8e d2 00 00 00    	jle    10fc81 <_svfiprintf_r+0xc91>
  10fbaf:	48 8d 05 4a 21 ff ff 	lea    -0xdeb6(%rip),%rax        # 101d00 <_svfiprintf_r.zeroes>
  10fbb6:	49 89 07             	mov    %rax,(%r15)
  10fbb9:	83 fb 11             	cmp    $0x11,%ebx
  10fbbc:	7c 7b                	jl     10fc39 <_svfiprintf_r+0xc49>
  10fbbe:	bb 10 00 00 00       	mov    $0x10,%ebx
  10fbc3:	2b 5c 24 48          	sub    0x48(%rsp),%ebx
  10fbc7:	44 01 f3             	add    %r14d,%ebx
  10fbca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10fbd0:	49 c7 47 08 10 00 00 	movq   $0x10,0x8(%r15)
  10fbd7:	00 
  10fbd8:	48 83 44 24 28 10    	addq   $0x10,0x28(%rsp)
  10fbde:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10fbe2:	8d 48 01             	lea    0x1(%rax),%ecx
  10fbe5:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10fbe9:	83 f8 07             	cmp    $0x7,%eax
  10fbec:	7c 32                	jl     10fc20 <_svfiprintf_r+0xc30>
  10fbee:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10fbf3:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10fbf8:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10fbfd:	e8 1e f2 ff ff       	call   10ee20 <__ssprint_r>
  10fc02:	4c 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%r15
  10fc09:	00 
  10fc0a:	85 c0                	test   %eax,%eax
  10fc0c:	74 16                	je     10fc24 <_svfiprintf_r+0xc34>
  10fc0e:	e9 6a 03 00 00       	jmp    10ff7d <_svfiprintf_r+0xf8d>
  10fc13:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10fc1a:	00 00 00 
  10fc1d:	0f 1f 00             	nopl   (%rax)
  10fc20:	49 83 c7 10          	add    $0x10,%r15
  10fc24:	48 8d 05 d5 20 ff ff 	lea    -0xdf2b(%rip),%rax        # 101d00 <_svfiprintf_r.zeroes>
  10fc2b:	49 89 07             	mov    %rax,(%r15)
  10fc2e:	83 c3 f0             	add    $0xfffffff0,%ebx
  10fc31:	83 fb 20             	cmp    $0x20,%ebx
  10fc34:	7f 9a                	jg     10fbd0 <_svfiprintf_r+0xbe0>
  10fc36:	83 c3 f0             	add    $0xfffffff0,%ebx
  10fc39:	48 63 c3             	movslq %ebx,%rax
  10fc3c:	49 89 47 08          	mov    %rax,0x8(%r15)
  10fc40:	48 01 44 24 28       	add    %rax,0x28(%rsp)
  10fc45:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10fc49:	8d 48 01             	lea    0x1(%rax),%ecx
  10fc4c:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10fc50:	83 f8 07             	cmp    $0x7,%eax
  10fc53:	7c 28                	jl     10fc7d <_svfiprintf_r+0xc8d>
  10fc55:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10fc5a:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  10fc5f:	48 89 de             	mov    %rbx,%rsi
  10fc62:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10fc67:	e8 b4 f1 ff ff       	call   10ee20 <__ssprint_r>
  10fc6c:	4c 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%r15
  10fc73:	00 
  10fc74:	85 c0                	test   %eax,%eax
  10fc76:	74 0e                	je     10fc86 <_svfiprintf_r+0xc96>
  10fc78:	e9 32 03 00 00       	jmp    10ffaf <_svfiprintf_r+0xfbf>
  10fc7d:	49 83 c7 10          	add    $0x10,%r15
  10fc81:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  10fc86:	44 89 e0             	mov    %r12d,%eax
  10fc89:	2b 44 24 50          	sub    0x50(%rsp),%eax
  10fc8d:	0f 8e dd 00 00 00    	jle    10fd70 <_svfiprintf_r+0xd80>
  10fc93:	48 8d 0d 66 20 ff ff 	lea    -0xdf9a(%rip),%rcx        # 101d00 <_svfiprintf_r.zeroes>
  10fc9a:	49 89 0f             	mov    %rcx,(%r15)
  10fc9d:	83 f8 11             	cmp    $0x11,%eax
  10fca0:	7c 7d                	jl     10fd1f <_svfiprintf_r+0xd2f>
  10fca2:	41 83 c4 10          	add    $0x10,%r12d
  10fca6:	44 2b 64 24 50       	sub    0x50(%rsp),%r12d
  10fcab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10fcb0:	49 c7 47 08 10 00 00 	movq   $0x10,0x8(%r15)
  10fcb7:	00 
  10fcb8:	48 83 44 24 28 10    	addq   $0x10,0x28(%rsp)
  10fcbe:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10fcc2:	8d 48 01             	lea    0x1(%rax),%ecx
  10fcc5:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10fcc9:	83 f8 07             	cmp    $0x7,%eax
  10fccc:	7c 32                	jl     10fd00 <_svfiprintf_r+0xd10>
  10fcce:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10fcd3:	48 89 de             	mov    %rbx,%rsi
  10fcd6:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10fcdb:	e8 40 f1 ff ff       	call   10ee20 <__ssprint_r>
  10fce0:	4c 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%r15
  10fce7:	00 
  10fce8:	85 c0                	test   %eax,%eax
  10fcea:	74 18                	je     10fd04 <_svfiprintf_r+0xd14>
  10fcec:	e9 be 02 00 00       	jmp    10ffaf <_svfiprintf_r+0xfbf>
  10fcf1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10fcf8:	00 00 00 
  10fcfb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10fd00:	49 83 c7 10          	add    $0x10,%r15
  10fd04:	48 8d 05 f5 1f ff ff 	lea    -0xe00b(%rip),%rax        # 101d00 <_svfiprintf_r.zeroes>
  10fd0b:	49 89 07             	mov    %rax,(%r15)
  10fd0e:	41 83 c4 f0          	add    $0xfffffff0,%r12d
  10fd12:	41 83 fc 20          	cmp    $0x20,%r12d
  10fd16:	7f 98                	jg     10fcb0 <_svfiprintf_r+0xcc0>
  10fd18:	41 83 c4 f0          	add    $0xfffffff0,%r12d
  10fd1c:	44 89 e0             	mov    %r12d,%eax
  10fd1f:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
  10fd24:	48 98                	cltq   
  10fd26:	49 89 47 08          	mov    %rax,0x8(%r15)
  10fd2a:	48 01 44 24 28       	add    %rax,0x28(%rsp)
  10fd2f:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10fd33:	8d 48 01             	lea    0x1(%rax),%ecx
  10fd36:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10fd3a:	83 f8 07             	cmp    $0x7,%eax
  10fd3d:	7c 41                	jl     10fd80 <_svfiprintf_r+0xd90>
  10fd3f:	4c 89 e7             	mov    %r12,%rdi
  10fd42:	48 89 de             	mov    %rbx,%rsi
  10fd45:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10fd4a:	e8 d1 f0 ff ff       	call   10ee20 <__ssprint_r>
  10fd4f:	4c 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%r15
  10fd56:	00 
  10fd57:	85 c0                	test   %eax,%eax
  10fd59:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  10fd5e:	74 29                	je     10fd89 <_svfiprintf_r+0xd99>
  10fd60:	e9 4a 02 00 00       	jmp    10ffaf <_svfiprintf_r+0xfbf>
  10fd65:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10fd6c:	00 00 00 
  10fd6f:	90                   	nop
  10fd70:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
  10fd75:	eb 0d                	jmp    10fd84 <_svfiprintf_r+0xd94>
  10fd77:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10fd7e:	00 00 
  10fd80:	49 83 c7 10          	add    $0x10,%r15
  10fd84:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  10fd89:	4d 89 2f             	mov    %r13,(%r15)
  10fd8c:	48 98                	cltq   
  10fd8e:	49 89 47 08          	mov    %rax,0x8(%r15)
  10fd92:	48 01 44 24 28       	add    %rax,0x28(%rsp)
  10fd97:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10fd9b:	8d 48 01             	lea    0x1(%rax),%ecx
  10fd9e:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10fda2:	83 f8 07             	cmp    $0x7,%eax
  10fda5:	7c 39                	jl     10fde0 <_svfiprintf_r+0xdf0>
  10fda7:	4c 89 e7             	mov    %r12,%rdi
  10fdaa:	48 89 de             	mov    %rbx,%rsi
  10fdad:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10fdb2:	e8 69 f0 ff ff       	call   10ee20 <__ssprint_r>
  10fdb7:	4c 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%r15
  10fdbe:	00 
  10fdbf:	85 c0                	test   %eax,%eax
  10fdc1:	4c 8b 6c 24 68       	mov    0x68(%rsp),%r13
  10fdc6:	0f 85 e3 01 00 00    	jne    10ffaf <_svfiprintf_r+0xfbf>
  10fdcc:	f6 44 24 3c 04       	testb  $0x4,0x3c(%rsp)
  10fdd1:	75 21                	jne    10fdf4 <_svfiprintf_r+0xe04>
  10fdd3:	e9 f8 00 00 00       	jmp    10fed0 <_svfiprintf_r+0xee0>
  10fdd8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10fddf:	00 
  10fde0:	49 83 c7 10          	add    $0x10,%r15
  10fde4:	4c 8b 6c 24 68       	mov    0x68(%rsp),%r13
  10fde9:	f6 44 24 3c 04       	testb  $0x4,0x3c(%rsp)
  10fdee:	0f 84 dc 00 00 00    	je     10fed0 <_svfiprintf_r+0xee0>
  10fdf4:	44 89 f3             	mov    %r14d,%ebx
  10fdf7:	2b 5c 24 48          	sub    0x48(%rsp),%ebx
  10fdfb:	0f 8e cf 00 00 00    	jle    10fed0 <_svfiprintf_r+0xee0>
  10fe01:	48 8d 05 e8 1e ff ff 	lea    -0xe118(%rip),%rax        # 101cf0 <_svfiprintf_r.blanks>
  10fe08:	49 89 07             	mov    %rax,(%r15)
  10fe0b:	83 fb 11             	cmp    $0x11,%ebx
  10fe0e:	7c 79                	jl     10fe89 <_svfiprintf_r+0xe99>
  10fe10:	bb 10 00 00 00       	mov    $0x10,%ebx
  10fe15:	2b 5c 24 48          	sub    0x48(%rsp),%ebx
  10fe19:	44 01 f3             	add    %r14d,%ebx
  10fe1c:	0f 1f 40 00          	nopl   0x0(%rax)
  10fe20:	49 c7 47 08 10 00 00 	movq   $0x10,0x8(%r15)
  10fe27:	00 
  10fe28:	48 83 44 24 28 10    	addq   $0x10,0x28(%rsp)
  10fe2e:	8b 44 24 20          	mov    0x20(%rsp),%eax
  10fe32:	8d 48 01             	lea    0x1(%rax),%ecx
  10fe35:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  10fe39:	83 f8 07             	cmp    $0x7,%eax
  10fe3c:	7c 32                	jl     10fe70 <_svfiprintf_r+0xe80>
  10fe3e:	4c 89 e7             	mov    %r12,%rdi
  10fe41:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  10fe46:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10fe4b:	e8 d0 ef ff ff       	call   10ee20 <__ssprint_r>
  10fe50:	4c 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%r15
  10fe57:	00 
  10fe58:	85 c0                	test   %eax,%eax
  10fe5a:	74 18                	je     10fe74 <_svfiprintf_r+0xe84>
  10fe5c:	e9 1c 01 00 00       	jmp    10ff7d <_svfiprintf_r+0xf8d>
  10fe61:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10fe68:	00 00 00 
  10fe6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10fe70:	49 83 c7 10          	add    $0x10,%r15
  10fe74:	48 8d 05 75 1e ff ff 	lea    -0xe18b(%rip),%rax        # 101cf0 <_svfiprintf_r.blanks>
  10fe7b:	49 89 07             	mov    %rax,(%r15)
  10fe7e:	83 c3 f0             	add    $0xfffffff0,%ebx
  10fe81:	83 fb 20             	cmp    $0x20,%ebx
  10fe84:	7f 9a                	jg     10fe20 <_svfiprintf_r+0xe30>
  10fe86:	83 c3 f0             	add    $0xfffffff0,%ebx
  10fe89:	48 63 c3             	movslq %ebx,%rax
  10fe8c:	49 89 47 08          	mov    %rax,0x8(%r15)
  10fe90:	48 03 44 24 28       	add    0x28(%rsp),%rax
  10fe95:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  10fe9a:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
  10fe9e:	8d 51 01             	lea    0x1(%rcx),%edx
  10fea1:	89 54 24 20          	mov    %edx,0x20(%rsp)
  10fea5:	83 f9 07             	cmp    $0x7,%ecx
  10fea8:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
  10fead:	7c 2b                	jl     10feda <_svfiprintf_r+0xeea>
  10feaf:	4c 89 e7             	mov    %r12,%rdi
  10feb2:	4c 89 fe             	mov    %r15,%rsi
  10feb5:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10feba:	e8 61 ef ff ff       	call   10ee20 <__ssprint_r>
  10febf:	85 c0                	test   %eax,%eax
  10fec1:	0f 85 b6 00 00 00    	jne    10ff7d <_svfiprintf_r+0xf8d>
  10fec7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10fece:	00 00 
  10fed0:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  10fed5:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
  10feda:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
  10fedf:	41 39 de             	cmp    %ebx,%r14d
  10fee2:	41 0f 4d de          	cmovge %r14d,%ebx
  10fee6:	03 5c 24 40          	add    0x40(%rsp),%ebx
  10feea:	48 85 c0             	test   %rax,%rax
  10feed:	0f 84 8d f1 ff ff    	je     10f080 <_svfiprintf_r+0x90>
  10fef3:	4c 89 e7             	mov    %r12,%rdi
  10fef6:	4c 89 fe             	mov    %r15,%rsi
  10fef9:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10fefe:	e8 1d ef ff ff       	call   10ee20 <__ssprint_r>
  10ff03:	85 c0                	test   %eax,%eax
  10ff05:	0f 84 75 f1 ff ff    	je     10f080 <_svfiprintf_r+0x90>
  10ff0b:	e9 cf 00 00 00       	jmp    10ffdf <_svfiprintf_r+0xfef>
  10ff10:	4c 8d 2d 90 08 ff ff 	lea    -0xf770(%rip),%r13        # 1007a7 <__dso_handle+0x7a7>
  10ff17:	4c 89 ef             	mov    %r13,%rdi
  10ff1a:	e8 a1 07 00 00       	call   1106c0 <strlen>
  10ff1f:	e9 4f fa ff ff       	jmp    10f973 <_svfiprintf_r+0x983>
  10ff24:	4c 8d ac 24 98 00 00 	lea    0x98(%rsp),%r13
  10ff2b:	00 
  10ff2c:	0f 1f 40 00          	nopl   0x0(%rax)
  10ff30:	48 89 c8             	mov    %rcx,%rax
  10ff33:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
  10ff3a:	cc cc cc 
  10ff3d:	48 f7 e2             	mul    %rdx
  10ff40:	89 d0                	mov    %edx,%eax
  10ff42:	c1 e8 02             	shr    $0x2,%eax
  10ff45:	83 e0 fe             	and    $0xfffffffe,%eax
  10ff48:	8d 04 80             	lea    (%rax,%rax,4),%eax
  10ff4b:	89 ce                	mov    %ecx,%esi
  10ff4d:	29 c6                	sub    %eax,%esi
  10ff4f:	40 80 ce 30          	or     $0x30,%sil
  10ff53:	41 88 75 ff          	mov    %sil,-0x1(%r13)
  10ff57:	49 83 c5 ff          	add    $0xffffffffffffffff,%r13
  10ff5b:	48 c1 ea 03          	shr    $0x3,%rdx
  10ff5f:	48 83 f9 09          	cmp    $0x9,%rcx
  10ff63:	48 89 d1             	mov    %rdx,%rcx
  10ff66:	77 c8                	ja     10ff30 <_svfiprintf_r+0xf40>
  10ff68:	e9 fb f9 ff ff       	jmp    10f968 <_svfiprintf_r+0x978>
  10ff6d:	4c 89 ef             	mov    %r13,%rdi
  10ff70:	e8 4b 07 00 00       	call   1106c0 <strlen>
  10ff75:	45 31 e4             	xor    %r12d,%r12d
  10ff78:	e9 f6 f9 ff ff       	jmp    10f973 <_svfiprintf_r+0x983>
  10ff7d:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  10ff82:	eb 2b                	jmp    10ffaf <_svfiprintf_r+0xfbf>
  10ff84:	48 83 7c 24 28 00    	cmpq   $0x0,0x28(%rsp)
  10ff8a:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  10ff8f:	74 16                	je     10ffa7 <_svfiprintf_r+0xfb7>
  10ff91:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  10ff96:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  10ff9b:	48 89 de             	mov    %rbx,%rsi
  10ff9e:	e8 7d ee ff ff       	call   10ee20 <__ssprint_r>
  10ffa3:	85 c0                	test   %eax,%eax
  10ffa5:	75 08                	jne    10ffaf <_svfiprintf_r+0xfbf>
  10ffa7:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%rsp)
  10ffae:	00 
  10ffaf:	8a 43 10             	mov    0x10(%rbx),%al
  10ffb2:	24 40                	and    $0x40,%al
  10ffb4:	3c 01                	cmp    $0x1,%al
  10ffb6:	19 c0                	sbb    %eax,%eax
  10ffb8:	f7 d0                	not    %eax
  10ffba:	0b 44 24 40          	or     0x40(%rsp),%eax
  10ffbe:	48 81 c4 28 01 00 00 	add    $0x128,%rsp
  10ffc5:	5b                   	pop    %rbx
  10ffc6:	41 5c                	pop    %r12
  10ffc8:	41 5d                	pop    %r13
  10ffca:	41 5e                	pop    %r14
  10ffcc:	41 5f                	pop    %r15
  10ffce:	5d                   	pop    %rbp
  10ffcf:	c3                   	ret    
  10ffd0:	41 c7 04 24 0c 00 00 	movl   $0xc,(%r12)
  10ffd7:	00 
  10ffd8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  10ffdd:	eb df                	jmp    10ffbe <_svfiprintf_r+0xfce>
  10ffdf:	89 d8                	mov    %ebx,%eax
  10ffe1:	89 5c 24 40          	mov    %ebx,0x40(%rsp)
  10ffe5:	4c 89 fb             	mov    %r15,%rbx
  10ffe8:	eb c5                	jmp    10ffaf <_svfiprintf_r+0xfbf>
  10ffea:	cc                   	int3   
  10ffeb:	cc                   	int3   
  10ffec:	cc                   	int3   
  10ffed:	cc                   	int3   
  10ffee:	cc                   	int3   
  10ffef:	cc                   	int3   

000000000010fff0 <_realloc_r>:
  10fff0:	55                   	push   %rbp
  10fff1:	41 57                	push   %r15
  10fff3:	41 56                	push   %r14
  10fff5:	41 55                	push   %r13
  10fff7:	41 54                	push   %r12
  10fff9:	53                   	push   %rbx
  10fffa:	48 83 ec 18          	sub    $0x18,%rsp
  10fffe:	48 89 d3             	mov    %rdx,%rbx
  110001:	49 89 fc             	mov    %rdi,%r12
  110004:	48 85 f6             	test   %rsi,%rsi
  110007:	0f 84 b5 00 00 00    	je     1100c2 <_realloc_r+0xd2>
  11000d:	48 89 f5             	mov    %rsi,%rbp
  110010:	4c 89 e7             	mov    %r12,%rdi
  110013:	e8 28 c5 ff ff       	call   10c540 <__malloc_lock>
  110018:	48 8d 43 17          	lea    0x17(%rbx),%rax
  11001c:	48 89 c1             	mov    %rax,%rcx
  11001f:	48 83 e1 f0          	and    $0xfffffffffffffff0,%rcx
  110023:	48 83 f8 2f          	cmp    $0x2f,%rax
  110027:	41 bf 20 00 00 00    	mov    $0x20,%r15d
  11002d:	4c 0f 43 f9          	cmovae %rcx,%r15
  110031:	49 81 ff ff ff ff 7f 	cmp    $0x7fffffff,%r15
  110038:	0f 87 9d 00 00 00    	ja     1100db <_realloc_r+0xeb>
  11003e:	49 39 df             	cmp    %rbx,%r15
  110041:	0f 82 94 00 00 00    	jb     1100db <_realloc_r+0xeb>
  110047:	4c 8d 75 f0          	lea    -0x10(%rbp),%r14
  11004b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  11004f:	49 89 cd             	mov    %rcx,%r13
  110052:	49 83 e5 fc          	and    $0xfffffffffffffffc,%r13
  110056:	4d 39 fd             	cmp    %r15,%r13
  110059:	0f 8d 89 00 00 00    	jge    1100e8 <_realloc_r+0xf8>
  11005f:	4b 8d 34 2e          	lea    (%r14,%r13,1),%rsi
  110063:	4c 8b 1d ce 6c 00 00 	mov    0x6cce(%rip),%r11        # 116d38 <_global_impure_ptr+0x20>
  11006a:	4d 8b 43 10          	mov    0x10(%r11),%r8
  11006e:	4b 8b 7c 2e 08       	mov    0x8(%r14,%r13,1),%rdi
  110073:	49 39 f0             	cmp    %rsi,%r8
  110076:	0f 84 e2 00 00 00    	je     11015e <_realloc_r+0x16e>
  11007c:	48 89 f8             	mov    %rdi,%rax
  11007f:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  110083:	45 31 d2             	xor    %r10d,%r10d
  110086:	f6 44 06 08 01       	testb  $0x1,0x8(%rsi,%rax,1)
  11008b:	ba 00 00 00 00       	mov    $0x0,%edx
  110090:	0f 85 e3 00 00 00    	jne    110179 <_realloc_r+0x189>
  110096:	48 83 e7 fc          	and    $0xfffffffffffffffc,%rdi
  11009a:	4a 8d 04 2f          	lea    (%rdi,%r13,1),%rax
  11009e:	49 89 fa             	mov    %rdi,%r10
  1100a1:	48 89 f2             	mov    %rsi,%rdx
  1100a4:	4c 39 f8             	cmp    %r15,%rax
  1100a7:	0f 8c cc 00 00 00    	jl     110179 <_realloc_r+0x189>
  1100ad:	48 8b 4e 10          	mov    0x10(%rsi),%rcx
  1100b1:	48 8b 56 18          	mov    0x18(%rsi),%rdx
  1100b5:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  1100b9:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
  1100bd:	49 89 c2             	mov    %rax,%r10
  1100c0:	eb 29                	jmp    1100eb <_realloc_r+0xfb>
  1100c2:	4c 89 e7             	mov    %r12,%rdi
  1100c5:	48 89 de             	mov    %rbx,%rsi
  1100c8:	48 83 c4 18          	add    $0x18,%rsp
  1100cc:	5b                   	pop    %rbx
  1100cd:	41 5c                	pop    %r12
  1100cf:	41 5d                	pop    %r13
  1100d1:	41 5e                	pop    %r14
  1100d3:	41 5f                	pop    %r15
  1100d5:	5d                   	pop    %rbp
  1100d6:	e9 75 bc ff ff       	jmp    10bd50 <_malloc_r>
  1100db:	41 c7 04 24 0c 00 00 	movl   $0xc,(%r12)
  1100e2:	00 
  1100e3:	45 31 e4             	xor    %r12d,%r12d
  1100e6:	eb 64                	jmp    11014c <_realloc_r+0x15c>
  1100e8:	4d 89 ea             	mov    %r13,%r10
  1100eb:	4c 89 f5             	mov    %r14,%rbp
  1100ee:	4c 89 d0             	mov    %r10,%rax
  1100f1:	4c 29 f8             	sub    %r15,%rax
  1100f4:	48 83 f8 20          	cmp    $0x20,%rax
  1100f8:	72 2f                	jb     110129 <_realloc_r+0x139>
  1100fa:	49 8b 4e 08          	mov    0x8(%r14),%rcx
  1100fe:	83 e1 01             	and    $0x1,%ecx
  110101:	4c 09 f9             	or     %r15,%rcx
  110104:	49 89 4e 08          	mov    %rcx,0x8(%r14)
  110108:	48 83 c8 01          	or     $0x1,%rax
  11010c:	4a 89 44 3d 08       	mov    %rax,0x8(%rbp,%r15,1)
  110111:	42 80 4c 15 08 01    	orb    $0x1,0x8(%rbp,%r10,1)
  110117:	49 8d 34 2f          	lea    (%r15,%rbp,1),%rsi
  11011b:	48 83 c6 10          	add    $0x10,%rsi
  11011f:	4c 89 e7             	mov    %r12,%rdi
  110122:	e8 39 c4 ff ff       	call   10c560 <_free_r>
  110127:	eb 14                	jmp    11013d <_realloc_r+0x14d>
  110129:	49 8b 46 08          	mov    0x8(%r14),%rax
  11012d:	83 e0 01             	and    $0x1,%eax
  110130:	4c 09 d0             	or     %r10,%rax
  110133:	49 89 46 08          	mov    %rax,0x8(%r14)
  110137:	42 80 4c 15 08 01    	orb    $0x1,0x8(%rbp,%r10,1)
  11013d:	4c 89 e7             	mov    %r12,%rdi
  110140:	e8 0b c4 ff ff       	call   10c550 <__malloc_unlock>
  110145:	48 83 c5 10          	add    $0x10,%rbp
  110149:	49 89 ec             	mov    %rbp,%r12
  11014c:	4c 89 e0             	mov    %r12,%rax
  11014f:	48 83 c4 18          	add    $0x18,%rsp
  110153:	5b                   	pop    %rbx
  110154:	41 5c                	pop    %r12
  110156:	41 5d                	pop    %r13
  110158:	41 5e                	pop    %r14
  11015a:	41 5f                	pop    %r15
  11015c:	5d                   	pop    %rbp
  11015d:	c3                   	ret    
  11015e:	48 83 e7 fc          	and    $0xfffffffffffffffc,%rdi
  110162:	4a 8d 04 2f          	lea    (%rdi,%r13,1),%rax
  110166:	4d 8d 4f 20          	lea    0x20(%r15),%r9
  11016a:	49 89 fa             	mov    %rdi,%r10
  11016d:	48 89 f2             	mov    %rsi,%rdx
  110170:	4c 39 c8             	cmp    %r9,%rax
  110173:	0f 8d e4 00 00 00    	jge    11025d <_realloc_r+0x26d>
  110179:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
  11017e:	4c 89 64 24 10       	mov    %r12,0x10(%rsp)
  110183:	f6 c1 01             	test   $0x1,%cl
  110186:	0f 85 15 01 00 00    	jne    1102a1 <_realloc_r+0x2b1>
  11018c:	49 8b 06             	mov    (%r14),%rax
  11018f:	4c 89 f5             	mov    %r14,%rbp
  110192:	48 29 c5             	sub    %rax,%rbp
  110195:	48 f7 d8             	neg    %rax
  110198:	4d 8b 64 06 08       	mov    0x8(%r14,%rax,1),%r12
  11019d:	49 83 e4 fc          	and    $0xfffffffffffffffc,%r12
  1101a1:	4d 01 ec             	add    %r13,%r12
  1101a4:	48 85 d2             	test   %rdx,%rdx
  1101a7:	0f 84 eb 00 00 00    	je     110298 <_realloc_r+0x2a8>
  1101ad:	4d 01 e2             	add    %r12,%r10
  1101b0:	4c 39 c2             	cmp    %r8,%rdx
  1101b3:	0f 84 d2 00 00 00    	je     11028b <_realloc_r+0x29b>
  1101b9:	4d 39 fa             	cmp    %r15,%r10
  1101bc:	0f 8c d6 00 00 00    	jl     110298 <_realloc_r+0x2a8>
  1101c2:	48 8b 42 10          	mov    0x10(%rdx),%rax
  1101c6:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  1101ca:	48 89 48 18          	mov    %rcx,0x18(%rax)
  1101ce:	48 89 41 10          	mov    %rax,0x10(%rcx)
  1101d2:	48 8b 45 10          	mov    0x10(%rbp),%rax
  1101d6:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
  1101da:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  1101de:	48 89 48 18          	mov    %rcx,0x18(%rax)
  1101e2:	48 89 41 10          	mov    %rax,0x10(%rcx)
  1101e6:	49 83 c5 f8          	add    $0xfffffffffffffff8,%r13
  1101ea:	49 83 fd 48          	cmp    $0x48,%r13
  1101ee:	0f 87 ca 02 00 00    	ja     1104be <_realloc_r+0x4ce>
  1101f4:	49 83 fd 28          	cmp    $0x28,%r13
  1101f8:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  1101fd:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  110202:	0f 82 93 03 00 00    	jb     11059b <_realloc_r+0x5ab>
  110208:	48 8b 01             	mov    (%rcx),%rax
  11020b:	48 89 07             	mov    %rax,(%rdi)
  11020e:	48 8b 41 08          	mov    0x8(%rcx),%rax
  110212:	48 89 47 08          	mov    %rax,0x8(%rdi)
  110216:	48 83 c7 10          	add    $0x10,%rdi
  11021a:	49 83 fd 38          	cmp    $0x38,%r13
  11021e:	0f 82 3d 03 00 00    	jb     110561 <_realloc_r+0x571>
  110224:	48 8b 41 10          	mov    0x10(%rcx),%rax
  110228:	48 89 07             	mov    %rax,(%rdi)
  11022b:	48 8b 41 18          	mov    0x18(%rcx),%rax
  11022f:	48 89 47 08          	mov    %rax,0x8(%rdi)
  110233:	48 83 c7 10          	add    $0x10,%rdi
  110237:	49 83 fd 48          	cmp    $0x48,%r13
  11023b:	0f 82 56 03 00 00    	jb     110597 <_realloc_r+0x5a7>
  110241:	48 8b 41 20          	mov    0x20(%rcx),%rax
  110245:	48 89 07             	mov    %rax,(%rdi)
  110248:	48 8b 41 28          	mov    0x28(%rcx),%rax
  11024c:	48 83 c1 30          	add    $0x30,%rcx
  110250:	48 89 47 08          	mov    %rax,0x8(%rdi)
  110254:	48 83 c7 10          	add    $0x10,%rdi
  110258:	e9 3e 03 00 00       	jmp    11059b <_realloc_r+0x5ab>
  11025d:	4d 01 fe             	add    %r15,%r14
  110260:	4d 89 73 10          	mov    %r14,0x10(%r11)
  110264:	4c 29 f8             	sub    %r15,%rax
  110267:	48 83 c8 01          	or     $0x1,%rax
  11026b:	4a 89 44 3d f8       	mov    %rax,-0x8(%rbp,%r15,1)
  110270:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  110274:	83 e0 01             	and    $0x1,%eax
  110277:	4c 09 f8             	or     %r15,%rax
  11027a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  11027e:	4c 89 e7             	mov    %r12,%rdi
  110281:	e8 ca c2 ff ff       	call   10c550 <__malloc_unlock>
  110286:	e9 be fe ff ff       	jmp    110149 <_realloc_r+0x159>
  11028b:	49 8d 47 20          	lea    0x20(%r15),%rax
  11028f:	49 39 c2             	cmp    %rax,%r10
  110292:	0f 8d 9d 01 00 00    	jge    110435 <_realloc_r+0x445>
  110298:	4d 39 fc             	cmp    %r15,%r12
  11029b:	0f 8d be 00 00 00    	jge    11035f <_realloc_r+0x36f>
  1102a1:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  1102a6:	48 89 ef             	mov    %rbp,%rdi
  1102a9:	48 89 de             	mov    %rbx,%rsi
  1102ac:	e8 9f ba ff ff       	call   10bd50 <_malloc_r>
  1102b1:	48 85 c0             	test   %rax,%rax
  1102b4:	0f 84 95 00 00 00    	je     11034f <_realloc_r+0x35f>
  1102ba:	49 89 c4             	mov    %rax,%r12
  1102bd:	48 8d 40 f0          	lea    -0x10(%rax),%rax
  1102c1:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  1102c6:	48 8b 49 f8          	mov    -0x8(%rcx),%rcx
  1102ca:	48 83 e1 fe          	and    $0xfffffffffffffffe,%rcx
  1102ce:	4c 01 f1             	add    %r14,%rcx
  1102d1:	48 39 c8             	cmp    %rcx,%rax
  1102d4:	0f 84 0b 01 00 00    	je     1103e5 <_realloc_r+0x3f5>
  1102da:	49 83 c5 f8          	add    $0xfffffffffffffff8,%r13
  1102de:	49 83 fd 48          	cmp    $0x48,%r13
  1102e2:	0f 87 16 01 00 00    	ja     1103fe <_realloc_r+0x40e>
  1102e8:	49 83 fd 28          	cmp    $0x28,%r13
  1102ec:	0f 82 36 01 00 00    	jb     110428 <_realloc_r+0x438>
  1102f2:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  1102f7:	48 8b 01             	mov    (%rcx),%rax
  1102fa:	49 89 04 24          	mov    %rax,(%r12)
  1102fe:	48 8b 41 08          	mov    0x8(%rcx),%rax
  110302:	49 89 44 24 08       	mov    %rax,0x8(%r12)
  110307:	49 83 fd 38          	cmp    $0x38,%r13
  11030b:	0f 82 cf 01 00 00    	jb     1104e0 <_realloc_r+0x4f0>
  110311:	48 8b 41 10          	mov    0x10(%rcx),%rax
  110315:	49 89 44 24 10       	mov    %rax,0x10(%r12)
  11031a:	48 8b 41 18          	mov    0x18(%rcx),%rax
  11031e:	49 89 44 24 18       	mov    %rax,0x18(%r12)
  110323:	49 83 fd 48          	cmp    $0x48,%r13
  110327:	0f 82 e7 01 00 00    	jb     110514 <_realloc_r+0x524>
  11032d:	48 8b 41 20          	mov    0x20(%rcx),%rax
  110331:	49 89 44 24 20       	mov    %rax,0x20(%r12)
  110336:	48 8d 41 30          	lea    0x30(%rcx),%rax
  11033a:	48 8b 51 28          	mov    0x28(%rcx),%rdx
  11033e:	4c 89 e1             	mov    %r12,%rcx
  110341:	48 83 c1 30          	add    $0x30,%rcx
  110345:	49 89 54 24 28       	mov    %rdx,0x28(%r12)
  11034a:	e9 d0 01 00 00       	jmp    11051f <_realloc_r+0x52f>
  11034f:	48 89 ef             	mov    %rbp,%rdi
  110352:	e8 f9 c1 ff ff       	call   10c550 <__malloc_unlock>
  110357:	45 31 e4             	xor    %r12d,%r12d
  11035a:	e9 ed fd ff ff       	jmp    11014c <_realloc_r+0x15c>
  11035f:	48 8b 45 10          	mov    0x10(%rbp),%rax
  110363:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
  110367:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  11036b:	48 89 48 18          	mov    %rcx,0x18(%rax)
  11036f:	48 89 41 10          	mov    %rax,0x10(%rcx)
  110373:	49 83 c5 f8          	add    $0xfffffffffffffff8,%r13
  110377:	49 83 fd 48          	cmp    $0x48,%r13
  11037b:	0f 87 95 00 00 00    	ja     110416 <_realloc_r+0x426>
  110381:	49 83 fd 28          	cmp    $0x28,%r13
  110385:	0f 82 4b 01 00 00    	jb     1104d6 <_realloc_r+0x4e6>
  11038b:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  110390:	48 8b 01             	mov    (%rcx),%rax
  110393:	48 89 07             	mov    %rax,(%rdi)
  110396:	48 8b 41 08          	mov    0x8(%rcx),%rax
  11039a:	48 89 47 08          	mov    %rax,0x8(%rdi)
  11039e:	48 83 c7 10          	add    $0x10,%rdi
  1103a2:	49 83 fd 38          	cmp    $0x38,%r13
  1103a6:	0f 82 62 01 00 00    	jb     11050e <_realloc_r+0x51e>
  1103ac:	48 8b 41 10          	mov    0x10(%rcx),%rax
  1103b0:	48 89 07             	mov    %rax,(%rdi)
  1103b3:	48 8b 41 18          	mov    0x18(%rcx),%rax
  1103b7:	48 89 47 08          	mov    %rax,0x8(%rdi)
  1103bb:	48 83 c7 10          	add    $0x10,%rdi
  1103bf:	49 83 fd 48          	cmp    $0x48,%r13
  1103c3:	0f 82 9e 01 00 00    	jb     110567 <_realloc_r+0x577>
  1103c9:	48 8b 41 20          	mov    0x20(%rcx),%rax
  1103cd:	48 89 07             	mov    %rax,(%rdi)
  1103d0:	48 8b 41 28          	mov    0x28(%rcx),%rax
  1103d4:	48 83 c1 30          	add    $0x30,%rcx
  1103d8:	48 89 47 08          	mov    %rax,0x8(%rdi)
  1103dc:	48 83 c7 10          	add    $0x10,%rdi
  1103e0:	e9 86 01 00 00       	jmp    11056b <_realloc_r+0x57b>
  1103e5:	4d 8b 54 24 f8       	mov    -0x8(%r12),%r10
  1103ea:	49 83 e2 fc          	and    $0xfffffffffffffffc,%r10
  1103ee:	4d 01 ea             	add    %r13,%r10
  1103f1:	4c 89 f5             	mov    %r14,%rbp
  1103f4:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  1103f9:	e9 f0 fc ff ff       	jmp    1100ee <_realloc_r+0xfe>
  1103fe:	4c 89 e7             	mov    %r12,%rdi
  110401:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
  110406:	48 89 ee             	mov    %rbp,%rsi
  110409:	4c 89 ea             	mov    %r13,%rdx
  11040c:	e8 1f ae ff ff       	call   10b230 <memmove>
  110411:	e9 24 01 00 00       	jmp    11053a <_realloc_r+0x54a>
  110416:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  11041b:	4c 89 ea             	mov    %r13,%rdx
  11041e:	e8 0d ae ff ff       	call   10b230 <memmove>
  110423:	e9 59 01 00 00       	jmp    110581 <_realloc_r+0x591>
  110428:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  11042d:	4c 89 e1             	mov    %r12,%rcx
  110430:	e9 ea 00 00 00       	jmp    11051f <_realloc_r+0x52f>
  110435:	48 8b 45 10          	mov    0x10(%rbp),%rax
  110439:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
  11043d:	4c 8d 65 10          	lea    0x10(%rbp),%r12
  110441:	48 89 48 18          	mov    %rcx,0x18(%rax)
  110445:	48 89 41 10          	mov    %rax,0x10(%rcx)
  110449:	49 83 c5 f8          	add    $0xfffffffffffffff8,%r13
  11044d:	49 83 fd 48          	cmp    $0x48,%r13
  110451:	0f 87 96 00 00 00    	ja     1104ed <_realloc_r+0x4fd>
  110457:	49 83 fd 28          	cmp    $0x28,%r13
  11045b:	0f 82 f6 00 00 00    	jb     110557 <_realloc_r+0x567>
  110461:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  110466:	48 8b 02             	mov    (%rdx),%rax
  110469:	49 89 04 24          	mov    %rax,(%r12)
  11046d:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  110471:	49 8d 44 24 10       	lea    0x10(%r12),%rax
  110476:	49 89 4c 24 08       	mov    %rcx,0x8(%r12)
  11047b:	49 83 fd 38          	cmp    $0x38,%r13
  11047f:	0f 82 0c 01 00 00    	jb     110591 <_realloc_r+0x5a1>
  110485:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  110489:	48 89 08             	mov    %rcx,(%rax)
  11048c:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  110490:	48 89 48 08          	mov    %rcx,0x8(%rax)
  110494:	48 83 c0 10          	add    $0x10,%rax
  110498:	49 83 fd 48          	cmp    $0x48,%r13
  11049c:	0f 82 17 01 00 00    	jb     1105b9 <_realloc_r+0x5c9>
  1104a2:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  1104a6:	48 89 08             	mov    %rcx,(%rax)
  1104a9:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  1104ad:	48 83 c2 30          	add    $0x30,%rdx
  1104b1:	48 89 48 08          	mov    %rcx,0x8(%rax)
  1104b5:	48 83 c0 10          	add    $0x10,%rax
  1104b9:	e9 ff 00 00 00       	jmp    1105bd <_realloc_r+0x5cd>
  1104be:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  1104c3:	4c 89 ea             	mov    %r13,%rdx
  1104c6:	4c 89 d3             	mov    %r10,%rbx
  1104c9:	e8 62 ad ff ff       	call   10b230 <memmove>
  1104ce:	49 89 da             	mov    %rbx,%r10
  1104d1:	e9 ae 00 00 00       	jmp    110584 <_realloc_r+0x594>
  1104d6:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  1104db:	e9 8b 00 00 00       	jmp    11056b <_realloc_r+0x57b>
  1104e0:	48 8d 41 10          	lea    0x10(%rcx),%rax
  1104e4:	4c 89 e1             	mov    %r12,%rcx
  1104e7:	48 83 c1 10          	add    $0x10,%rcx
  1104eb:	eb 32                	jmp    11051f <_realloc_r+0x52f>
  1104ed:	4c 89 e7             	mov    %r12,%rdi
  1104f0:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  1104f5:	4c 89 ea             	mov    %r13,%rdx
  1104f8:	4c 89 d3             	mov    %r10,%rbx
  1104fb:	4d 89 de             	mov    %r11,%r14
  1104fe:	e8 2d ad ff ff       	call   10b230 <memmove>
  110503:	4d 89 f3             	mov    %r14,%r11
  110506:	49 89 da             	mov    %rbx,%r10
  110509:	e9 c5 00 00 00       	jmp    1105d3 <_realloc_r+0x5e3>
  11050e:	48 83 c1 10          	add    $0x10,%rcx
  110512:	eb 57                	jmp    11056b <_realloc_r+0x57b>
  110514:	48 8d 41 20          	lea    0x20(%rcx),%rax
  110518:	4c 89 e1             	mov    %r12,%rcx
  11051b:	48 83 c1 20          	add    $0x20,%rcx
  11051f:	48 8b 10             	mov    (%rax),%rdx
  110522:	48 89 11             	mov    %rdx,(%rcx)
  110525:	48 8b 50 08          	mov    0x8(%rax),%rdx
  110529:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  11052d:	48 8b 40 10          	mov    0x10(%rax),%rax
  110531:	48 89 41 10          	mov    %rax,0x10(%rcx)
  110535:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
  11053a:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
  11053f:	48 89 df             	mov    %rbx,%rdi
  110542:	48 89 ee             	mov    %rbp,%rsi
  110545:	e8 16 c0 ff ff       	call   10c560 <_free_r>
  11054a:	48 89 df             	mov    %rbx,%rdi
  11054d:	e8 fe bf ff ff       	call   10c550 <__malloc_unlock>
  110552:	e9 f5 fb ff ff       	jmp    11014c <_realloc_r+0x15c>
  110557:	4c 89 e0             	mov    %r12,%rax
  11055a:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  11055f:	eb 5c                	jmp    1105bd <_realloc_r+0x5cd>
  110561:	48 83 c1 10          	add    $0x10,%rcx
  110565:	eb 34                	jmp    11059b <_realloc_r+0x5ab>
  110567:	48 83 c1 20          	add    $0x20,%rcx
  11056b:	48 8b 01             	mov    (%rcx),%rax
  11056e:	48 89 07             	mov    %rax,(%rdi)
  110571:	48 8b 41 08          	mov    0x8(%rcx),%rax
  110575:	48 89 47 08          	mov    %rax,0x8(%rdi)
  110579:	48 8b 41 10          	mov    0x10(%rcx),%rax
  11057d:	48 89 47 10          	mov    %rax,0x10(%rdi)
  110581:	4d 89 e2             	mov    %r12,%r10
  110584:	49 89 ee             	mov    %rbp,%r14
  110587:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  11058c:	e9 5d fb ff ff       	jmp    1100ee <_realloc_r+0xfe>
  110591:	48 83 c2 10          	add    $0x10,%rdx
  110595:	eb 26                	jmp    1105bd <_realloc_r+0x5cd>
  110597:	48 83 c1 20          	add    $0x20,%rcx
  11059b:	48 8b 01             	mov    (%rcx),%rax
  11059e:	48 89 07             	mov    %rax,(%rdi)
  1105a1:	48 8b 41 08          	mov    0x8(%rcx),%rax
  1105a5:	48 89 47 08          	mov    %rax,0x8(%rdi)
  1105a9:	48 8b 41 10          	mov    0x10(%rcx),%rax
  1105ad:	48 89 47 10          	mov    %rax,0x10(%rdi)
  1105b1:	49 89 ee             	mov    %rbp,%r14
  1105b4:	e9 35 fb ff ff       	jmp    1100ee <_realloc_r+0xfe>
  1105b9:	48 83 c2 20          	add    $0x20,%rdx
  1105bd:	48 8b 0a             	mov    (%rdx),%rcx
  1105c0:	48 89 08             	mov    %rcx,(%rax)
  1105c3:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  1105c7:	48 89 48 08          	mov    %rcx,0x8(%rax)
  1105cb:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  1105cf:	48 89 48 10          	mov    %rcx,0x10(%rax)
  1105d3:	49 8d 04 2f          	lea    (%r15,%rbp,1),%rax
  1105d7:	49 89 43 10          	mov    %rax,0x10(%r11)
  1105db:	4d 29 fa             	sub    %r15,%r10
  1105de:	49 83 ca 01          	or     $0x1,%r10
  1105e2:	4e 89 54 3d 08       	mov    %r10,0x8(%rbp,%r15,1)
  1105e7:	48 8b 45 08          	mov    0x8(%rbp),%rax
  1105eb:	83 e0 01             	and    $0x1,%eax
  1105ee:	4c 09 f8             	or     %r15,%rax
  1105f1:	48 89 45 08          	mov    %rax,0x8(%rbp)
  1105f5:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  1105fa:	e8 51 bf ff ff       	call   10c550 <__malloc_unlock>
  1105ff:	e9 48 fb ff ff       	jmp    11014c <_realloc_r+0x15c>
  110604:	cc                   	int3   
  110605:	cc                   	int3   
  110606:	cc                   	int3   
  110607:	cc                   	int3   
  110608:	cc                   	int3   
  110609:	cc                   	int3   
  11060a:	cc                   	int3   
  11060b:	cc                   	int3   
  11060c:	cc                   	int3   
  11060d:	cc                   	int3   
  11060e:	cc                   	int3   
  11060f:	cc                   	int3   

0000000000110610 <memchr>:
  110610:	40 f6 c7 07          	test   $0x7,%dil
  110614:	75 78                	jne    11068e <memchr+0x7e>
  110616:	48 83 fa 08          	cmp    $0x8,%rdx
  11061a:	0f 82 88 00 00 00    	jb     1106a8 <memchr+0x98>
  110620:	49 b8 80 80 80 80 80 	movabs $0x8080808080808080,%r8
  110627:	80 80 80 
  11062a:	40 0f b6 c6          	movzbl %sil,%eax
  11062e:	89 c1                	mov    %eax,%ecx
  110630:	c1 e1 08             	shl    $0x8,%ecx
  110633:	09 c1                	or     %eax,%ecx
  110635:	89 c8                	mov    %ecx,%eax
  110637:	c1 e0 10             	shl    $0x10,%eax
  11063a:	09 c8                	or     %ecx,%eax
  11063c:	49 89 c2             	mov    %rax,%r10
  11063f:	49 c1 e2 20          	shl    $0x20,%r10
  110643:	49 09 c2             	or     %rax,%r10
  110646:	49 b9 ff fe fe fe fe 	movabs $0xfefefefefefefeff,%r9
  11064d:	fe fe fe 
  110650:	48 8b 07             	mov    (%rdi),%rax
  110653:	4c 31 d0             	xor    %r10,%rax
  110656:	48 89 c1             	mov    %rax,%rcx
  110659:	48 f7 d1             	not    %rcx
  11065c:	4c 21 c1             	and    %r8,%rcx
  11065f:	4c 01 c8             	add    %r9,%rax
  110662:	48 85 c1             	test   %rax,%rcx
  110665:	75 41                	jne    1106a8 <memchr+0x98>
  110667:	48 83 c2 f8          	add    $0xfffffffffffffff8,%rdx
  11066b:	48 83 c7 08          	add    $0x8,%rdi
  11066f:	48 83 fa 07          	cmp    $0x7,%rdx
  110673:	77 db                	ja     110650 <memchr+0x40>
  110675:	eb 31                	jmp    1106a8 <memchr+0x98>
  110677:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  11067e:	00 00 
  110680:	48 83 c2 ff          	add    $0xffffffffffffffff,%rdx
  110684:	48 83 c7 01          	add    $0x1,%rdi
  110688:	40 f6 c7 07          	test   $0x7,%dil
  11068c:	74 88                	je     110616 <memchr+0x6>
  11068e:	48 85 d2             	test   %rdx,%rdx
  110691:	74 23                	je     1106b6 <memchr+0xa6>
  110693:	40 38 37             	cmp    %sil,(%rdi)
  110696:	75 e8                	jne    110680 <memchr+0x70>
  110698:	eb 18                	jmp    1106b2 <memchr+0xa2>
  11069a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  1106a0:	48 83 c2 ff          	add    $0xffffffffffffffff,%rdx
  1106a4:	48 83 c7 01          	add    $0x1,%rdi
  1106a8:	48 85 d2             	test   %rdx,%rdx
  1106ab:	74 09                	je     1106b6 <memchr+0xa6>
  1106ad:	40 38 37             	cmp    %sil,(%rdi)
  1106b0:	75 ee                	jne    1106a0 <memchr+0x90>
  1106b2:	48 89 f8             	mov    %rdi,%rax
  1106b5:	c3                   	ret    
  1106b6:	31 ff                	xor    %edi,%edi
  1106b8:	48 89 f8             	mov    %rdi,%rax
  1106bb:	c3                   	ret    
  1106bc:	cc                   	int3   
  1106bd:	cc                   	int3   
  1106be:	cc                   	int3   
  1106bf:	cc                   	int3   

00000000001106c0 <strlen>:
  1106c0:	48 89 f8             	mov    %rdi,%rax
  1106c3:	40 f6 c7 07          	test   $0x7,%dil
  1106c7:	74 2c                	je     1106f5 <strlen+0x35>
  1106c9:	80 3f 00             	cmpb   $0x0,(%rdi)
  1106cc:	74 70                	je     11073e <strlen+0x7e>
  1106ce:	48 8d 47 01          	lea    0x1(%rdi),%rax
  1106d2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1106d9:	00 00 00 
  1106dc:	0f 1f 40 00          	nopl   0x0(%rax)
  1106e0:	a8 07                	test   $0x7,%al
  1106e2:	74 11                	je     1106f5 <strlen+0x35>
  1106e4:	80 38 00             	cmpb   $0x0,(%rax)
  1106e7:	48 8d 40 01          	lea    0x1(%rax),%rax
  1106eb:	75 f3                	jne    1106e0 <strlen+0x20>
  1106ed:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
  1106f1:	48 29 f8             	sub    %rdi,%rax
  1106f4:	c3                   	ret    
  1106f5:	49 b8 80 80 80 80 80 	movabs $0x8080808080808080,%r8
  1106fc:	80 80 80 
  1106ff:	48 83 c0 f8          	add    $0xfffffffffffffff8,%rax
  110703:	49 b9 ff fe fe fe fe 	movabs $0xfefefefefefefeff,%r9
  11070a:	fe fe fe 
  11070d:	0f 1f 00             	nopl   (%rax)
  110710:	48 8b 48 08          	mov    0x8(%rax),%rcx
  110714:	48 83 c0 08          	add    $0x8,%rax
  110718:	48 89 ce             	mov    %rcx,%rsi
  11071b:	48 f7 d6             	not    %rsi
  11071e:	4c 21 c6             	and    %r8,%rsi
  110721:	4a 8d 14 09          	lea    (%rcx,%r9,1),%rdx
  110725:	48 85 d6             	test   %rdx,%rsi
  110728:	74 e6                	je     110710 <strlen+0x50>
  11072a:	84 c9                	test   %cl,%cl
  11072c:	74 0c                	je     11073a <strlen+0x7a>
  11072e:	66 90                	xchg   %ax,%ax
  110730:	80 78 01 00          	cmpb   $0x0,0x1(%rax)
  110734:	48 8d 40 01          	lea    0x1(%rax),%rax
  110738:	75 f6                	jne    110730 <strlen+0x70>
  11073a:	48 29 f8             	sub    %rdi,%rax
  11073d:	c3                   	ret    
  11073e:	48 89 f8             	mov    %rdi,%rax
  110741:	48 29 f8             	sub    %rdi,%rax
  110744:	c3                   	ret    
  110745:	cc                   	int3   
  110746:	cc                   	int3   
  110747:	cc                   	int3   
  110748:	cc                   	int3   
  110749:	cc                   	int3   
  11074a:	cc                   	int3   
  11074b:	cc                   	int3   
  11074c:	cc                   	int3   
  11074d:	cc                   	int3   
  11074e:	cc                   	int3   
  11074f:	cc                   	int3   

0000000000110750 <_dtoa_r>:
  110750:	55                   	push   %rbp
  110751:	41 57                	push   %r15
  110753:	41 56                	push   %r14
  110755:	41 55                	push   %r13
  110757:	41 54                	push   %r12
  110759:	53                   	push   %rbx
  11075a:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  110761:	4d 89 cf             	mov    %r9,%r15
  110764:	4c 89 c3             	mov    %r8,%rbx
  110767:	49 89 cd             	mov    %rcx,%r13
  11076a:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
  11076f:	41 89 f6             	mov    %esi,%r14d
  110772:	48 89 fd             	mov    %rdi,%rbp
  110775:	48 8b 77 60          	mov    0x60(%rdi),%rsi
  110779:	48 85 f6             	test   %rsi,%rsi
  11077c:	74 2c                	je     1107aa <_dtoa_r+0x5a>
  11077e:	8b 4d 68             	mov    0x68(%rbp),%ecx
  110781:	89 4e 08             	mov    %ecx,0x8(%rsi)
  110784:	b8 01 00 00 00       	mov    $0x1,%eax
  110789:	d3 e0                	shl    %cl,%eax
  11078b:	89 46 0c             	mov    %eax,0xc(%rsi)
  11078e:	48 89 ef             	mov    %rbp,%rdi
  110791:	f2 0f 11 44 24 20    	movsd  %xmm0,0x20(%rsp)
  110797:	e8 34 14 00 00       	call   111bd0 <_Bfree>
  11079c:	f3 0f 7e 44 24 20    	movq   0x20(%rsp),%xmm0
  1107a2:	48 c7 45 60 00 00 00 	movq   $0x0,0x60(%rbp)
  1107a9:	00 
  1107aa:	48 89 6c 24 10       	mov    %rbp,0x10(%rsp)
  1107af:	66 48 0f 7e c5       	movq   %xmm0,%rbp
  1107b4:	49 89 ec             	mov    %rbp,%r12
  1107b7:	49 c1 ec 20          	shr    $0x20,%r12
  1107bb:	45 85 e4             	test   %r12d,%r12d
  1107be:	78 08                	js     1107c8 <_dtoa_r+0x78>
  1107c0:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
  1107c6:	eb 1f                	jmp    1107e7 <_dtoa_r+0x97>
  1107c8:	c7 03 01 00 00 00    	movl   $0x1,(%rbx)
  1107ce:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
  1107d5:	ff ff 7f 
  1107d8:	48 21 c5             	and    %rax,%rbp
  1107db:	66 48 0f 6e c5       	movq   %rbp,%xmm0
  1107e0:	49 89 ec             	mov    %rbp,%r12
  1107e3:	49 c1 ec 20          	shr    $0x20,%r12
  1107e7:	44 89 e0             	mov    %r12d,%eax
  1107ea:	25 00 00 f0 7f       	and    $0x7ff00000,%eax
  1107ef:	3d 00 00 f0 7f       	cmp    $0x7ff00000,%eax
  1107f4:	75 25                	jne    11081b <_dtoa_r+0xcb>
  1107f6:	41 c7 45 00 0f 27 00 	movl   $0x270f,0x0(%r13)
  1107fd:	00 
  1107fe:	85 ed                	test   %ebp,%ebp
  110800:	0f 84 95 00 00 00    	je     11089b <_dtoa_r+0x14b>
  110806:	4c 8d 35 06 03 ff ff 	lea    -0xfcfa(%rip),%r14        # 100b13 <__dso_handle+0xb13>
  11080d:	4d 85 ff             	test   %r15,%r15
  110810:	0f 85 a7 00 00 00    	jne    1108bd <_dtoa_r+0x16d>
  110816:	e9 2f 0f 00 00       	jmp    11174a <_dtoa_r+0xffa>
  11081b:	66 0f 57 c9          	xorpd  %xmm1,%xmm1
  11081f:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  110823:	75 06                	jne    11082b <_dtoa_r+0xdb>
  110825:	0f 8b ab 00 00 00    	jnp    1108d6 <_dtoa_r+0x186>
  11082b:	89 84 24 88 00 00 00 	mov    %eax,0x88(%rsp)
  110832:	48 8d b4 24 8c 00 00 	lea    0x8c(%rsp),%rsi
  110839:	00 
  11083a:	48 8d 94 24 84 00 00 	lea    0x84(%rsp),%rdx
  110841:	00 
  110842:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  110847:	66 0f d6 44 24 20    	movq   %xmm0,0x20(%rsp)
  11084d:	e8 ce 26 00 00       	call   112f20 <__d2b>
  110852:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  110857:	48 89 e8             	mov    %rbp,%rax
  11085a:	48 c1 e8 34          	shr    $0x34,%rax
  11085e:	25 ff 07 00 00       	and    $0x7ff,%eax
  110863:	0f 84 94 00 00 00    	je     1108fd <_dtoa_r+0x1ad>
  110869:	48 ba ff ff ff ff ff 	movabs $0xfffffffffffff,%rdx
  110870:	ff 0f 00 
  110873:	48 21 ea             	and    %rbp,%rdx
  110876:	48 b9 00 00 00 00 00 	movabs $0x3ff0000000000000,%rcx
  11087d:	00 f0 3f 
  110880:	48 09 d1             	or     %rdx,%rcx
  110883:	05 01 fc ff ff       	add    $0xfffffc01,%eax
  110888:	c7 44 24 38 00 00 00 	movl   $0x0,0x38(%rsp)
  11088f:	00 
  110890:	f2 0f 10 54 24 20    	movsd  0x20(%rsp),%xmm2
  110896:	e9 c9 00 00 00       	jmp    110964 <_dtoa_r+0x214>
  11089b:	41 f7 c4 ff ff 0f 00 	test   $0xfffff,%r12d
  1108a2:	48 8d 05 5d fa fe ff 	lea    -0x105a3(%rip),%rax        # 100306 <__dso_handle+0x306>
  1108a9:	4c 8d 35 63 02 ff ff 	lea    -0xfd9d(%rip),%r14        # 100b13 <__dso_handle+0xb13>
  1108b0:	4c 0f 44 f0          	cmove  %rax,%r14
  1108b4:	4d 85 ff             	test   %r15,%r15
  1108b7:	0f 84 8d 0e 00 00    	je     11174a <_dtoa_r+0xffa>
  1108bd:	49 8d 46 03          	lea    0x3(%r14),%rax
  1108c1:	41 80 7e 03 00       	cmpb   $0x0,0x3(%r14)
  1108c6:	49 8d 4e 08          	lea    0x8(%r14),%rcx
  1108ca:	48 0f 44 c8          	cmove  %rax,%rcx
  1108ce:	49 89 0f             	mov    %rcx,(%r15)
  1108d1:	e9 74 0e 00 00       	jmp    11174a <_dtoa_r+0xffa>
  1108d6:	41 c7 45 00 01 00 00 	movl   $0x1,0x0(%r13)
  1108dd:	00 
  1108de:	4c 8d 35 dc fe fe ff 	lea    -0x10124(%rip),%r14        # 1007c1 <__dso_handle+0x7c1>
  1108e5:	4d 85 ff             	test   %r15,%r15
  1108e8:	0f 84 5c 0e 00 00    	je     11174a <_dtoa_r+0xffa>
  1108ee:	48 8d 05 cd fe fe ff 	lea    -0x10133(%rip),%rax        # 1007c2 <__dso_handle+0x7c2>
  1108f5:	49 89 07             	mov    %rax,(%r15)
  1108f8:	e9 4d 0e 00 00       	jmp    11174a <_dtoa_r+0xffa>
  1108fd:	8b 84 24 8c 00 00 00 	mov    0x8c(%rsp),%eax
  110904:	03 84 24 84 00 00 00 	add    0x84(%rsp),%eax
  11090b:	3d ef fb ff ff       	cmp    $0xfffffbef,%eax
  110910:	7c 1a                	jl     11092c <_dtoa_r+0x1dc>
  110912:	b9 0e fc ff ff       	mov    $0xfffffc0e,%ecx
  110917:	29 c1                	sub    %eax,%ecx
  110919:	44 89 e6             	mov    %r12d,%esi
  11091c:	d3 e6                	shl    %cl,%esi
  11091e:	8d 88 12 04 00 00    	lea    0x412(%rax),%ecx
  110924:	89 ea                	mov    %ebp,%edx
  110926:	d3 ea                	shr    %cl,%edx
  110928:	09 f2                	or     %esi,%edx
  11092a:	eb 0b                	jmp    110937 <_dtoa_r+0x1e7>
  11092c:	b9 ee fb ff ff       	mov    $0xfffffbee,%ecx
  110931:	29 c1                	sub    %eax,%ecx
  110933:	89 ea                	mov    %ebp,%edx
  110935:	d3 e2                	shl    %cl,%edx
  110937:	f2 0f 10 54 24 20    	movsd  0x20(%rsp),%xmm2
  11093d:	89 d1                	mov    %edx,%ecx
  11093f:	0f 57 c0             	xorps  %xmm0,%xmm0
  110942:	f2 48 0f 2a c1       	cvtsi2sd %rcx,%xmm0
  110947:	66 48 0f 7e c2       	movq   %xmm0,%rdx
  11094c:	48 b9 00 00 00 00 00 	movabs $0xfe10000000000000,%rcx
  110953:	00 10 fe 
  110956:	48 01 d1             	add    %rdx,%rcx
  110959:	83 c0 ff             	add    $0xffffffff,%eax
  11095c:	c7 44 24 38 01 00 00 	movl   $0x1,0x38(%rsp)
  110963:	00 
  110964:	66 48 0f 6e c1       	movq   %rcx,%xmm0
  110969:	f2 0f 58 05 5f 0f ff 	addsd  -0xf0a1(%rip),%xmm0        # 1018d0 <_ZTVN3usb14HIDMouseDriverE+0xa0>
  110970:	ff 
  110971:	f2 0f 59 05 6f 0f ff 	mulsd  -0xf091(%rip),%xmm0        # 1018e8 <_ZTVN3usb14HIDMouseDriverE+0xb8>
  110978:	ff 
  110979:	f2 0f 58 05 1f 0f ff 	addsd  -0xf0e1(%rip),%xmm0        # 1018a0 <_ZTVN3usb14HIDMouseDriverE+0x70>
  110980:	ff 
  110981:	0f 57 c9             	xorps  %xmm1,%xmm1
  110984:	f2 0f 2a c8          	cvtsi2sd %eax,%xmm1
  110988:	f2 0f 59 0d 20 0f ff 	mulsd  -0xf0e0(%rip),%xmm1        # 1018b0 <_ZTVN3usb14HIDMouseDriverE+0x80>
  11098f:	ff 
  110990:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  110994:	f2 0f 2c f1          	cvttsd2si %xmm1,%esi
  110998:	66 0f 57 c0          	xorpd  %xmm0,%xmm0
  11099c:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  1109a0:	0f 97 c1             	seta   %cl
  1109a3:	0f 57 c0             	xorps  %xmm0,%xmm0
  1109a6:	f2 0f 2a c6          	cvtsi2sd %esi,%xmm0
  1109aa:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
  1109ae:	0f 9a c2             	setp   %dl
  1109b1:	0f 95 c3             	setne  %bl
  1109b4:	08 d3                	or     %dl,%bl
  1109b6:	20 cb                	and    %cl,%bl
  1109b8:	0f b6 cb             	movzbl %bl,%ecx
  1109bb:	29 ce                	sub    %ecx,%esi
  1109bd:	83 fe 16             	cmp    $0x16,%esi
  1109c0:	4c 89 7c 24 30       	mov    %r15,0x30(%rsp)
  1109c5:	77 22                	ja     1109e9 <_dtoa_r+0x299>
  1109c7:	48 63 ce             	movslq %esi,%rcx
  1109ca:	48 8b 15 a7 63 00 00 	mov    0x63a7(%rip),%rdx        # 116d78 <_global_impure_ptr+0x60>
  1109d1:	f2 0f 10 04 ca       	movsd  (%rdx,%rcx,8),%xmm0
  1109d6:	66 0f 2e c2          	ucomisd %xmm2,%xmm0
  1109da:	76 17                	jbe    1109f3 <_dtoa_r+0x2a3>
  1109dc:	c7 44 24 5c 00 00 00 	movl   $0x0,0x5c(%rsp)
  1109e3:	00 
  1109e4:	83 c6 ff             	add    $0xffffffff,%esi
  1109e7:	eb 12                	jmp    1109fb <_dtoa_r+0x2ab>
  1109e9:	c7 44 24 5c 01 00 00 	movl   $0x1,0x5c(%rsp)
  1109f0:	00 
  1109f1:	eb 08                	jmp    1109fb <_dtoa_r+0x2ab>
  1109f3:	c7 44 24 5c 00 00 00 	movl   $0x0,0x5c(%rsp)
  1109fa:	00 
  1109fb:	41 89 c7             	mov    %eax,%r15d
  1109fe:	41 f7 d7             	not    %r15d
  110a01:	44 03 bc 24 84 00 00 	add    0x84(%rsp),%r15d
  110a08:	00 
  110a09:	44 89 f9             	mov    %r15d,%ecx
  110a0c:	f7 d9                	neg    %ecx
  110a0e:	31 ff                	xor    %edi,%edi
  110a10:	45 85 ff             	test   %r15d,%r15d
  110a13:	44 0f 48 ff          	cmovs  %edi,%r15d
  110a17:	0f 49 cf             	cmovns %edi,%ecx
  110a1a:	85 f6                	test   %esi,%esi
  110a1c:	4c 89 6c 24 50       	mov    %r13,0x50(%rsp)
  110a21:	78 14                	js     110a37 <_dtoa_r+0x2e7>
  110a23:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  110a28:	41 01 f7             	add    %esi,%r15d
  110a2b:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%rsp)
  110a32:	00 
  110a33:	89 f7                	mov    %esi,%edi
  110a35:	eb 0f                	jmp    110a46 <_dtoa_r+0x2f6>
  110a37:	29 f1                	sub    %esi,%ecx
  110a39:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  110a3e:	89 f1                	mov    %esi,%ecx
  110a40:	f7 d9                	neg    %ecx
  110a42:	89 4c 24 18          	mov    %ecx,0x18(%rsp)
  110a46:	31 c9                	xor    %ecx,%ecx
  110a48:	41 83 fe 09          	cmp    $0x9,%r14d
  110a4c:	44 0f 47 f1          	cmova  %ecx,%r14d
  110a50:	41 83 fe 06          	cmp    $0x6,%r14d
  110a54:	0f 9c c3             	setl   %bl
  110a57:	41 8d 56 fc          	lea    -0x4(%r14),%edx
  110a5b:	41 83 fe 05          	cmp    $0x5,%r14d
  110a5f:	41 0f 4e d6          	cmovle %r14d,%edx
  110a63:	c7 44 24 2c 01 00 00 	movl   $0x1,0x2c(%rsp)
  110a6a:	00 
  110a6b:	41 bd ff ff ff ff    	mov    $0xffffffff,%r13d
  110a71:	83 fa 05             	cmp    $0x5,%edx
  110a74:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  110a79:	48 89 ac 24 90 00 00 	mov    %rbp,0x90(%rsp)
  110a80:	00 
  110a81:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  110a86:	89 bc 24 80 00 00 00 	mov    %edi,0x80(%rsp)
  110a8d:	77 42                	ja     110ad1 <_dtoa_r+0x381>
  110a8f:	48 8d 05 7a 12 ff ff 	lea    -0xed86(%rip),%rax        # 101d10 <_svfiprintf_r.zeroes+0x10>
  110a96:	48 63 14 90          	movslq (%rax,%rdx,4),%rdx
  110a9a:	48 01 c2             	add    %rax,%rdx
  110a9d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  110aa2:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  110aa7:	ff e2                	jmp    *%rdx
  110aa9:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%rsp)
  110ab0:	00 
  110ab1:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  110ab6:	85 c9                	test   %ecx,%ecx
  110ab8:	b8 01 00 00 00       	mov    $0x1,%eax
  110abd:	0f 4f c1             	cmovg  %ecx,%eax
  110ac0:	41 89 c5             	mov    %eax,%r13d
  110ac3:	89 c1                	mov    %eax,%ecx
  110ac5:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  110aca:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  110acf:	eb 2e                	jmp    110aff <_dtoa_r+0x3af>
  110ad1:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  110ad6:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  110adb:	eb 22                	jmp    110aff <_dtoa_r+0x3af>
  110add:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%rsp)
  110ae4:	00 
  110ae5:	89 f1                	mov    %esi,%ecx
  110ae7:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  110aec:	01 c1                	add    %eax,%ecx
  110aee:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  110af3:	44 8d 6c 06 01       	lea    0x1(%rsi,%rax,1),%r13d
  110af8:	89 c1                	mov    %eax,%ecx
  110afa:	44 89 e8             	mov    %r13d,%eax
  110afd:	78 1a                	js     110b19 <_dtoa_r+0x3c9>
  110aff:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  110b04:	c7 41 68 00 00 00 00 	movl   $0x0,0x68(%rcx)
  110b0b:	31 f6                	xor    %esi,%esi
  110b0d:	83 f8 20             	cmp    $0x20,%eax
  110b10:	73 1e                	jae    110b30 <_dtoa_r+0x3e0>
  110b12:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  110b17:	eb 40                	jmp    110b59 <_dtoa_r+0x409>
  110b19:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  110b1e:	c7 45 68 00 00 00 00 	movl   $0x0,0x68(%rbp)
  110b25:	31 f6                	xor    %esi,%esi
  110b27:	89 c8                	mov    %ecx,%eax
  110b29:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  110b2e:	eb 29                	jmp    110b59 <_dtoa_r+0x409>
  110b30:	48 98                	cltq   
  110b32:	b9 04 00 00 00       	mov    $0x4,%ecx
  110b37:	31 f6                	xor    %esi,%esi
  110b39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  110b40:	83 c6 01             	add    $0x1,%esi
  110b43:	01 c9                	add    %ecx,%ecx
  110b45:	48 63 d1             	movslq %ecx,%rdx
  110b48:	48 83 c2 1c          	add    $0x1c,%rdx
  110b4c:	48 39 c2             	cmp    %rax,%rdx
  110b4f:	76 ef                	jbe    110b40 <_dtoa_r+0x3f0>
  110b51:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  110b56:	89 75 68             	mov    %esi,0x68(%rbp)
  110b59:	48 89 ef             	mov    %rbp,%rdi
  110b5c:	e8 df 0f 00 00       	call   111b40 <_Balloc>
  110b61:	49 89 c6             	mov    %rax,%r14
  110b64:	48 89 45 60          	mov    %rax,0x60(%rbp)
  110b68:	41 83 fd 0e          	cmp    $0xe,%r13d
  110b6c:	0f 97 c0             	seta   %al
  110b6f:	80 f3 01             	xor    $0x1,%bl
  110b72:	08 c3                	or     %al,%bl
  110b74:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
  110b79:	f2 0f 10 6c 24 20    	movsd  0x20(%rsp),%xmm5
  110b7f:	0f 85 47 03 00 00    	jne    110ecc <_dtoa_r+0x77c>
  110b85:	45 85 c0             	test   %r8d,%r8d
  110b88:	7e 27                	jle    110bb1 <_dtoa_r+0x461>
  110b8a:	44 89 c2             	mov    %r8d,%edx
  110b8d:	83 e2 0f             	and    $0xf,%edx
  110b90:	48 8b 35 e1 61 00 00 	mov    0x61e1(%rip),%rsi        # 116d78 <_global_impure_ptr+0x60>
  110b97:	44 89 c0             	mov    %r8d,%eax
  110b9a:	c1 e8 04             	shr    $0x4,%eax
  110b9d:	b9 02 00 00 00       	mov    $0x2,%ecx
  110ba2:	41 f7 c0 00 01 00 00 	test   $0x100,%r8d
  110ba9:	75 5c                	jne    110c07 <_dtoa_r+0x4b7>
  110bab:	66 0f 28 c5          	movapd %xmm5,%xmm0
  110baf:	eb 6e                	jmp    110c1f <_dtoa_r+0x4cf>
  110bb1:	b9 02 00 00 00       	mov    $0x2,%ecx
  110bb6:	45 85 c0             	test   %r8d,%r8d
  110bb9:	0f 84 c5 00 00 00    	je     110c84 <_dtoa_r+0x534>
  110bbf:	44 89 c0             	mov    %r8d,%eax
  110bc2:	f7 d8                	neg    %eax
  110bc4:	89 c2                	mov    %eax,%edx
  110bc6:	83 e2 0f             	and    $0xf,%edx
  110bc9:	48 8b 35 a8 61 00 00 	mov    0x61a8(%rip),%rsi        # 116d78 <_global_impure_ptr+0x60>
  110bd0:	f2 0f 10 04 d6       	movsd  (%rsi,%rdx,8),%xmm0
  110bd5:	f2 0f 59 c5          	mulsd  %xmm5,%xmm0
  110bd9:	c1 f8 04             	sar    $0x4,%eax
  110bdc:	74 6b                	je     110c49 <_dtoa_r+0x4f9>
  110bde:	b9 02 00 00 00       	mov    $0x2,%ecx
  110be3:	48 8b 15 86 61 00 00 	mov    0x6186(%rip),%rdx        # 116d70 <_global_impure_ptr+0x58>
  110bea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  110bf0:	a8 01                	test   $0x1,%al
  110bf2:	74 07                	je     110bfb <_dtoa_r+0x4ab>
  110bf4:	83 c1 01             	add    $0x1,%ecx
  110bf7:	f2 0f 59 02          	mulsd  (%rdx),%xmm0
  110bfb:	d1 f8                	sar    %eax
  110bfd:	48 83 c2 08          	add    $0x8,%rdx
  110c01:	85 c0                	test   %eax,%eax
  110c03:	75 eb                	jne    110bf0 <_dtoa_r+0x4a0>
  110c05:	eb 42                	jmp    110c49 <_dtoa_r+0x4f9>
  110c07:	83 e0 0f             	and    $0xf,%eax
  110c0a:	48 8b 0d 5f 61 00 00 	mov    0x615f(%rip),%rcx        # 116d70 <_global_impure_ptr+0x58>
  110c11:	66 0f 28 c5          	movapd %xmm5,%xmm0
  110c15:	f2 0f 5e 41 20       	divsd  0x20(%rcx),%xmm0
  110c1a:	b9 03 00 00 00       	mov    $0x3,%ecx
  110c1f:	f2 0f 10 0c d6       	movsd  (%rsi,%rdx,8),%xmm1
  110c24:	85 c0                	test   %eax,%eax
  110c26:	74 1d                	je     110c45 <_dtoa_r+0x4f5>
  110c28:	48 8b 15 41 61 00 00 	mov    0x6141(%rip),%rdx        # 116d70 <_global_impure_ptr+0x58>
  110c2f:	90                   	nop
  110c30:	a8 01                	test   $0x1,%al
  110c32:	74 07                	je     110c3b <_dtoa_r+0x4eb>
  110c34:	83 c1 01             	add    $0x1,%ecx
  110c37:	f2 0f 59 0a          	mulsd  (%rdx),%xmm1
  110c3b:	d1 f8                	sar    %eax
  110c3d:	48 83 c2 08          	add    $0x8,%rdx
  110c41:	85 c0                	test   %eax,%eax
  110c43:	75 eb                	jne    110c30 <_dtoa_r+0x4e0>
  110c45:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
  110c49:	83 7c 24 5c 00       	cmpl   $0x0,0x5c(%rsp)
  110c4e:	74 3f                	je     110c8f <_dtoa_r+0x53f>
  110c50:	45 85 ed             	test   %r13d,%r13d
  110c53:	7e 3a                	jle    110c8f <_dtoa_r+0x53f>
  110c55:	f2 0f 10 0d 5b 0c ff 	movsd  -0xf3a5(%rip),%xmm1        # 1018b8 <_ZTVN3usb14HIDMouseDriverE+0x88>
  110c5c:	ff 
  110c5d:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
  110c61:	76 2c                	jbe    110c8f <_dtoa_r+0x53f>
  110c63:	83 7c 24 60 00       	cmpl   $0x0,0x60(%rsp)
  110c68:	0f 8e 5e 02 00 00    	jle    110ecc <_dtoa_r+0x77c>
  110c6e:	41 8d 40 ff          	lea    -0x1(%r8),%eax
  110c72:	f2 0f 59 05 16 0c ff 	mulsd  -0xf3ea(%rip),%xmm0        # 101890 <_ZTVN3usb14HIDMouseDriverE+0x60>
  110c79:	ff 
  110c7a:	83 c1 01             	add    $0x1,%ecx
  110c7d:	48 8b 54 24 60       	mov    0x60(%rsp),%rdx
  110c82:	eb 11                	jmp    110c95 <_dtoa_r+0x545>
  110c84:	66 0f 28 c5          	movapd %xmm5,%xmm0
  110c88:	83 7c 24 5c 00       	cmpl   $0x0,0x5c(%rsp)
  110c8d:	75 c1                	jne    110c50 <_dtoa_r+0x500>
  110c8f:	44 89 ea             	mov    %r13d,%edx
  110c92:	44 89 c0             	mov    %r8d,%eax
  110c95:	0f 57 c9             	xorps  %xmm1,%xmm1
  110c98:	f2 0f 2a c9          	cvtsi2sd %ecx,%xmm1
  110c9c:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  110ca0:	f2 0f 58 0d 18 0c ff 	addsd  -0xf3e8(%rip),%xmm1        # 1018c0 <_ZTVN3usb14HIDMouseDriverE+0x90>
  110ca7:	ff 
  110ca8:	66 48 0f 7e c9       	movq   %xmm1,%rcx
  110cad:	48 be 00 00 00 00 00 	movabs $0xfcc0000000000000,%rsi
  110cb4:	00 c0 fc 
  110cb7:	48 01 ce             	add    %rcx,%rsi
  110cba:	66 48 0f 6e de       	movq   %rsi,%xmm3
  110cbf:	85 d2                	test   %edx,%edx
  110cc1:	74 52                	je     110d15 <_dtoa_r+0x5c5>
  110cc3:	48 63 ca             	movslq %edx,%rcx
  110cc6:	48 8b 35 ab 60 00 00 	mov    0x60ab(%rip),%rsi        # 116d78 <_global_impure_ptr+0x60>
  110ccd:	f2 0f 10 4c ce f8    	movsd  -0x8(%rsi,%rcx,8),%xmm1
  110cd3:	83 7c 24 2c 00       	cmpl   $0x0,0x2c(%rsp)
  110cd8:	74 64                	je     110d3e <_dtoa_r+0x5ee>
  110cda:	f2 0f 10 15 e6 0b ff 	movsd  -0xf41a(%rip),%xmm2        # 1018c8 <_ZTVN3usb14HIDMouseDriverE+0x98>
  110ce1:	ff 
  110ce2:	f2 0f 5e d1          	divsd  %xmm1,%xmm2
  110ce6:	f2 0f 2c c8          	cvttsd2si %xmm0,%ecx
  110cea:	f2 0f 5c d3          	subsd  %xmm3,%xmm2
  110cee:	0f 57 c9             	xorps  %xmm1,%xmm1
  110cf1:	f2 0f 2a c9          	cvtsi2sd %ecx,%xmm1
  110cf5:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  110cf9:	80 c1 30             	add    $0x30,%cl
  110cfc:	41 88 0e             	mov    %cl,(%r14)
  110cff:	66 0f 2e d0          	ucomisd %xmm0,%xmm2
  110d03:	0f 86 28 01 00 00    	jbe    110e31 <_dtoa_r+0x6e1>
  110d09:	4c 89 f3             	mov    %r14,%rbx
  110d0c:	48 83 c3 01          	add    $0x1,%rbx
  110d10:	e9 7c 01 00 00       	jmp    110e91 <_dtoa_r+0x741>
  110d15:	f2 0f 58 05 7b 0b ff 	addsd  -0xf485(%rip),%xmm0        # 101898 <_ZTVN3usb14HIDMouseDriverE+0x68>
  110d1c:	ff 
  110d1d:	66 0f 2e c3          	ucomisd %xmm3,%xmm0
  110d21:	0f 86 88 01 00 00    	jbe    110eaf <_dtoa_r+0x75f>
  110d27:	45 31 ff             	xor    %r15d,%r15d
  110d2a:	41 89 c0             	mov    %eax,%r8d
  110d2d:	31 c9                	xor    %ecx,%ecx
  110d2f:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
  110d34:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
  110d39:	e9 2a 06 00 00       	jmp    111368 <_dtoa_r+0xc18>
  110d3e:	f2 0f 2c c8          	cvttsd2si %xmm0,%ecx
  110d42:	f2 0f 59 cb          	mulsd  %xmm3,%xmm1
  110d46:	f2 0f 2a d1          	cvtsi2sd %ecx,%xmm2
  110d4a:	f2 0f 5c c2          	subsd  %xmm2,%xmm0
  110d4e:	80 c1 30             	add    $0x30,%cl
  110d51:	49 8d 5e 01          	lea    0x1(%r14),%rbx
  110d55:	41 88 0e             	mov    %cl,(%r14)
  110d58:	83 fa 01             	cmp    $0x1,%edx
  110d5b:	0f 84 85 00 00 00    	je     110de6 <_dtoa_r+0x696>
  110d61:	8d 4a fe             	lea    -0x2(%rdx),%ecx
  110d64:	8d 72 ff             	lea    -0x1(%rdx),%esi
  110d67:	83 e6 01             	and    $0x1,%esi
  110d6a:	85 c9                	test   %ecx,%ecx
  110d6c:	74 4e                	je     110dbc <_dtoa_r+0x66c>
  110d6e:	8d 7e 01             	lea    0x1(%rsi),%edi
  110d71:	29 d7                	sub    %edx,%edi
  110d73:	f2 0f 10 15 15 0b ff 	movsd  -0xf4eb(%rip),%xmm2        # 101890 <_ZTVN3usb14HIDMouseDriverE+0x60>
  110d7a:	ff 
  110d7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  110d80:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  110d84:	f2 0f 2c d0          	cvttsd2si %xmm0,%edx
  110d88:	0f 57 db             	xorps  %xmm3,%xmm3
  110d8b:	f2 0f 2a da          	cvtsi2sd %edx,%xmm3
  110d8f:	f2 0f 5c c3          	subsd  %xmm3,%xmm0
  110d93:	80 c2 30             	add    $0x30,%dl
  110d96:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  110d9a:	f2 0f 2c e8          	cvttsd2si %xmm0,%ebp
  110d9e:	88 13                	mov    %dl,(%rbx)
  110da0:	0f 57 db             	xorps  %xmm3,%xmm3
  110da3:	f2 0f 2a dd          	cvtsi2sd %ebp,%xmm3
  110da7:	f2 0f 5c c3          	subsd  %xmm3,%xmm0
  110dab:	40 80 c5 30          	add    $0x30,%bpl
  110daf:	40 88 6b 01          	mov    %bpl,0x1(%rbx)
  110db3:	48 83 c3 02          	add    $0x2,%rbx
  110db7:	83 c7 02             	add    $0x2,%edi
  110dba:	75 c4                	jne    110d80 <_dtoa_r+0x630>
  110dbc:	48 8d 49 02          	lea    0x2(%rcx),%rcx
  110dc0:	85 f6                	test   %esi,%esi
  110dc2:	74 1c                	je     110de0 <_dtoa_r+0x690>
  110dc4:	f2 0f 59 05 c4 0a ff 	mulsd  -0xf53c(%rip),%xmm0        # 101890 <_ZTVN3usb14HIDMouseDriverE+0x60>
  110dcb:	ff 
  110dcc:	f2 0f 2c d0          	cvttsd2si %xmm0,%edx
  110dd0:	0f 57 d2             	xorps  %xmm2,%xmm2
  110dd3:	f2 0f 2a d2          	cvtsi2sd %edx,%xmm2
  110dd7:	80 c2 30             	add    $0x30,%dl
  110dda:	88 13                	mov    %dl,(%rbx)
  110ddc:	f2 0f 5c c2          	subsd  %xmm2,%xmm0
  110de0:	4c 01 f1             	add    %r14,%rcx
  110de3:	48 89 cb             	mov    %rcx,%rbx
  110de6:	f2 0f 10 15 da 0a ff 	movsd  -0xf526(%rip),%xmm2        # 1018c8 <_ZTVN3usb14HIDMouseDriverE+0x98>
  110ded:	ff 
  110dee:	f2 0f 58 d1          	addsd  %xmm1,%xmm2
  110df2:	66 0f 2e c2          	ucomisd %xmm2,%xmm0
  110df6:	0f 87 98 09 00 00    	ja     111794 <_dtoa_r+0x1044>
  110dfc:	f2 0f 10 15 c4 0a ff 	movsd  -0xf53c(%rip),%xmm2        # 1018c8 <_ZTVN3usb14HIDMouseDriverE+0x98>
  110e03:	ff 
  110e04:	f2 0f 5c d1          	subsd  %xmm1,%xmm2
  110e08:	66 0f 2e d0          	ucomisd %xmm0,%xmm2
  110e0c:	0f 86 ba 00 00 00    	jbe    110ecc <_dtoa_r+0x77c>
  110e12:	48 83 c3 01          	add    $0x1,%rbx
  110e16:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
  110e1b:	4c 8b 7c 24 50       	mov    0x50(%rsp),%r15
  110e20:	80 7b fe 30          	cmpb   $0x30,-0x2(%rbx)
  110e24:	48 8d 5b ff          	lea    -0x1(%rbx),%rbx
  110e28:	74 f6                	je     110e20 <_dtoa_r+0x6d0>
  110e2a:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  110e2f:	eb 6f                	jmp    110ea0 <_dtoa_r+0x750>
  110e31:	bb 01 00 00 00       	mov    $0x1,%ebx
  110e36:	f2 0f 10 0d 7a 0a ff 	movsd  -0xf586(%rip),%xmm1        # 1018b8 <_ZTVN3usb14HIDMouseDriverE+0x88>
  110e3d:	ff 
  110e3e:	f2 0f 10 1d 4a 0a ff 	movsd  -0xf5b6(%rip),%xmm3        # 101890 <_ZTVN3usb14HIDMouseDriverE+0x60>
  110e45:	ff 
  110e46:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  110e4d:	00 00 00 
  110e50:	66 0f 28 e1          	movapd %xmm1,%xmm4
  110e54:	f2 0f 5c e0          	subsd  %xmm0,%xmm4
  110e58:	66 0f 2e d4          	ucomisd %xmm4,%xmm2
  110e5c:	0f 87 2f 09 00 00    	ja     111791 <_dtoa_r+0x1041>
  110e62:	39 d3                	cmp    %edx,%ebx
  110e64:	7d 66                	jge    110ecc <_dtoa_r+0x77c>
  110e66:	f2 0f 59 d3          	mulsd  %xmm3,%xmm2
  110e6a:	f2 0f 59 c3          	mulsd  %xmm3,%xmm0
  110e6e:	f2 0f 2c c8          	cvttsd2si %xmm0,%ecx
  110e72:	0f 57 e4             	xorps  %xmm4,%xmm4
  110e75:	f2 0f 2a e1          	cvtsi2sd %ecx,%xmm4
  110e79:	f2 0f 5c c4          	subsd  %xmm4,%xmm0
  110e7d:	80 c1 30             	add    $0x30,%cl
  110e80:	41 88 0c 1e          	mov    %cl,(%r14,%rbx,1)
  110e84:	48 83 c3 01          	add    $0x1,%rbx
  110e88:	66 0f 2e d0          	ucomisd %xmm0,%xmm2
  110e8c:	76 c2                	jbe    110e50 <_dtoa_r+0x700>
  110e8e:	4c 01 f3             	add    %r14,%rbx
  110e91:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  110e96:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
  110e9b:	4c 8b 7c 24 50       	mov    0x50(%rsp),%r15
  110ea0:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  110ea5:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
  110eaa:	e9 79 08 00 00       	jmp    111728 <_dtoa_r+0xfd8>
  110eaf:	66 0f 57 1d f9 f2 fe 	xorpd  -0x10d07(%rip),%xmm3        # 1001b0 <__dso_handle+0x1b0>
  110eb6:	ff 
  110eb7:	66 0f 2e d8          	ucomisd %xmm0,%xmm3
  110ebb:	76 0f                	jbe    110ecc <_dtoa_r+0x77c>
  110ebd:	45 31 ff             	xor    %r15d,%r15d
  110ec0:	31 ed                	xor    %ebp,%ebp
  110ec2:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
  110ec7:	e9 fa 07 00 00       	jmp    1116c6 <_dtoa_r+0xf76>
  110ecc:	8b 8c 24 8c 00 00 00 	mov    0x8c(%rsp),%ecx
  110ed3:	41 83 f8 0e          	cmp    $0xe,%r8d
  110ed7:	7f 56                	jg     110f2f <_dtoa_r+0x7df>
  110ed9:	85 c9                	test   %ecx,%ecx
  110edb:	78 52                	js     110f2f <_dtoa_r+0x7df>
  110edd:	49 63 c0             	movslq %r8d,%rax
  110ee0:	48 8b 0d 91 5e 00 00 	mov    0x5e91(%rip),%rcx        # 116d78 <_global_impure_ptr+0x60>
  110ee7:	f2 0f 10 04 c1       	movsd  (%rcx,%rax,8),%xmm0
  110eec:	45 85 ed             	test   %r13d,%r13d
  110eef:	7f 7e                	jg     110f6f <_dtoa_r+0x81f>
  110ef1:	83 7c 24 68 00       	cmpl   $0x0,0x68(%rsp)
  110ef6:	79 77                	jns    110f6f <_dtoa_r+0x81f>
  110ef8:	45 31 ff             	xor    %r15d,%r15d
  110efb:	45 85 ed             	test   %r13d,%r13d
  110efe:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
  110f03:	0f 88 bb 07 00 00    	js     1116c4 <_dtoa_r+0xf74>
  110f09:	f2 0f 59 05 97 09 ff 	mulsd  -0xf669(%rip),%xmm0        # 1018a8 <_ZTVN3usb14HIDMouseDriverE+0x78>
  110f10:	ff 
  110f11:	66 0f 2e c5          	ucomisd %xmm5,%xmm0
  110f15:	bd 00 00 00 00       	mov    $0x0,%ebp
  110f1a:	b9 00 00 00 00       	mov    $0x0,%ecx
  110f1f:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
  110f24:	0f 82 3e 04 00 00    	jb     111368 <_dtoa_r+0xc18>
  110f2a:	e9 9c 07 00 00       	jmp    1116cb <_dtoa_r+0xf7b>
  110f2f:	83 7c 24 2c 00       	cmpl   $0x0,0x2c(%rsp)
  110f34:	0f 84 da 00 00 00    	je     111014 <_dtoa_r+0x8c4>
  110f3a:	83 7c 24 70 01       	cmpl   $0x1,0x70(%rsp)
  110f3f:	0f 8f f1 00 00 00    	jg     111036 <_dtoa_r+0x8e6>
  110f45:	b8 36 00 00 00       	mov    $0x36,%eax
  110f4a:	2b 84 24 84 00 00 00 	sub    0x84(%rsp),%eax
  110f51:	81 c1 33 04 00 00    	add    $0x433,%ecx
  110f57:	83 7c 24 38 00       	cmpl   $0x0,0x38(%rsp)
  110f5c:	0f 45 c1             	cmovne %ecx,%eax
  110f5f:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
  110f64:	89 d3                	mov    %edx,%ebx
  110f66:	8b 6c 24 18          	mov    0x18(%rsp),%ebp
  110f6a:	e9 06 01 00 00       	jmp    111075 <_dtoa_r+0x925>
  110f6f:	66 0f 28 cd          	movapd %xmm5,%xmm1
  110f73:	f2 0f 5e c8          	divsd  %xmm0,%xmm1
  110f77:	f2 0f 2c c1          	cvttsd2si %xmm1,%eax
  110f7b:	0f 57 c9             	xorps  %xmm1,%xmm1
  110f7e:	f2 0f 2a c8          	cvtsi2sd %eax,%xmm1
  110f82:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  110f86:	f2 0f 5c e9          	subsd  %xmm1,%xmm5
  110f8a:	89 c1                	mov    %eax,%ecx
  110f8c:	80 c1 30             	add    $0x30,%cl
  110f8f:	49 8d 5e 01          	lea    0x1(%r14),%rbx
  110f93:	41 88 0e             	mov    %cl,(%r14)
  110f96:	41 83 fd 01          	cmp    $0x1,%r13d
  110f9a:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
  110f9f:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  110fa4:	74 56                	je     110ffc <_dtoa_r+0x8ac>
  110fa6:	41 83 c5 ff          	add    $0xffffffff,%r13d
  110faa:	f2 0f 10 0d de 08 ff 	movsd  -0xf722(%rip),%xmm1        # 101890 <_ZTVN3usb14HIDMouseDriverE+0x60>
  110fb1:	ff 
  110fb2:	66 0f 57 d2          	xorpd  %xmm2,%xmm2
  110fb6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  110fbd:	00 00 00 
  110fc0:	f2 0f 59 e9          	mulsd  %xmm1,%xmm5
  110fc4:	66 0f 2e ea          	ucomisd %xmm2,%xmm5
  110fc8:	75 06                	jne    110fd0 <_dtoa_r+0x880>
  110fca:	0f 8b 6e 06 00 00    	jnp    11163e <_dtoa_r+0xeee>
  110fd0:	66 0f 28 dd          	movapd %xmm5,%xmm3
  110fd4:	f2 0f 5e d8          	divsd  %xmm0,%xmm3
  110fd8:	f2 0f 2c c3          	cvttsd2si %xmm3,%eax
  110fdc:	0f 57 db             	xorps  %xmm3,%xmm3
  110fdf:	f2 0f 2a d8          	cvtsi2sd %eax,%xmm3
  110fe3:	f2 0f 59 d8          	mulsd  %xmm0,%xmm3
  110fe7:	f2 0f 5c eb          	subsd  %xmm3,%xmm5
  110feb:	89 c1                	mov    %eax,%ecx
  110fed:	80 c1 30             	add    $0x30,%cl
  110ff0:	88 0b                	mov    %cl,(%rbx)
  110ff2:	48 83 c3 01          	add    $0x1,%rbx
  110ff6:	41 83 c5 ff          	add    $0xffffffff,%r13d
  110ffa:	75 c4                	jne    110fc0 <_dtoa_r+0x870>
  110ffc:	f2 0f 58 ed          	addsd  %xmm5,%xmm5
  111000:	66 0f 2e e8          	ucomisd %xmm0,%xmm5
  111004:	0f 86 11 06 00 00    	jbe    11161b <_dtoa_r+0xecb>
  11100a:	4c 8b 7c 24 50       	mov    0x50(%rsp),%r15
  11100f:	e9 92 07 00 00       	jmp    1117a6 <_dtoa_r+0x1056>
  111014:	31 c0                	xor    %eax,%eax
  111016:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  11101b:	8b 54 24 18          	mov    0x18(%rsp),%edx
  11101f:	89 d5                	mov    %edx,%ebp
  111021:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  111026:	89 c8                	mov    %ecx,%eax
  111028:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  11102d:	85 c9                	test   %ecx,%ecx
  11102f:	7f 6c                	jg     11109d <_dtoa_r+0x94d>
  111031:	e9 86 00 00 00       	jmp    1110bc <_dtoa_r+0x96c>
  111036:	41 8d 4d ff          	lea    -0x1(%r13),%ecx
  11103a:	89 ca                	mov    %ecx,%edx
  11103c:	8b 74 24 18          	mov    0x18(%rsp),%esi
  111040:	29 f2                	sub    %esi,%edx
  111042:	31 c0                	xor    %eax,%eax
  111044:	89 f5                	mov    %esi,%ebp
  111046:	29 cd                	sub    %ecx,%ebp
  111048:	0f 4c f1             	cmovl  %ecx,%esi
  11104b:	89 74 24 18          	mov    %esi,0x18(%rsp)
  11104f:	0f 4c e8             	cmovl  %eax,%ebp
  111052:	0f 4d d0             	cmovge %eax,%edx
  111055:	01 94 24 80 00 00 00 	add    %edx,0x80(%rsp)
  11105c:	45 85 ed             	test   %r13d,%r13d
  11105f:	41 0f 49 c5          	cmovns %r13d,%eax
  111063:	44 89 e9             	mov    %r13d,%ecx
  111066:	c1 f9 1f             	sar    $0x1f,%ecx
  111069:	44 21 e9             	and    %r13d,%ecx
  11106c:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
  111071:	89 d3                	mov    %edx,%ebx
  111073:	29 cb                	sub    %ecx,%ebx
  111075:	01 c2                	add    %eax,%edx
  111077:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  11107c:	41 01 c7             	add    %eax,%r15d
  11107f:	be 01 00 00 00       	mov    $0x1,%esi
  111084:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  111089:	e8 52 0f 00 00       	call   111fe0 <__i2b>
  11108e:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  111093:	89 d9                	mov    %ebx,%ecx
  111095:	8b 54 24 18          	mov    0x18(%rsp),%edx
  111099:	85 c9                	test   %ecx,%ecx
  11109b:	7e 1f                	jle    1110bc <_dtoa_r+0x96c>
  11109d:	45 85 ff             	test   %r15d,%r15d
  1110a0:	7e 1a                	jle    1110bc <_dtoa_r+0x96c>
  1110a2:	44 39 f9             	cmp    %r15d,%ecx
  1110a5:	44 89 f8             	mov    %r15d,%eax
  1110a8:	0f 4e c1             	cmovle %ecx,%eax
  1110ab:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  1110b0:	29 c6                	sub    %eax,%esi
  1110b2:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  1110b7:	29 c1                	sub    %eax,%ecx
  1110b9:	41 29 c7             	sub    %eax,%r15d
  1110bc:	85 d2                	test   %edx,%edx
  1110be:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  1110c3:	0f 8e 8a 00 00 00    	jle    111153 <_dtoa_r+0xa03>
  1110c9:	83 7c 24 2c 00       	cmpl   $0x0,0x2c(%rsp)
  1110ce:	74 6a                	je     11113a <_dtoa_r+0x9ea>
  1110d0:	85 ed                	test   %ebp,%ebp
  1110d2:	7e 62                	jle    111136 <_dtoa_r+0x9e6>
  1110d4:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
  1110d9:	48 89 df             	mov    %rbx,%rdi
  1110dc:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  1110e1:	89 54 24 18          	mov    %edx,0x18(%rsp)
  1110e5:	89 ea                	mov    %ebp,%edx
  1110e7:	e8 44 13 00 00       	call   112430 <__pow5mult>
  1110ec:	48 89 df             	mov    %rbx,%rdi
  1110ef:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  1110f4:	48 89 c6             	mov    %rax,%rsi
  1110f7:	89 ac 24 9c 00 00 00 	mov    %ebp,0x9c(%rsp)
  1110fe:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
  111103:	48 89 ea             	mov    %rbp,%rdx
  111106:	e8 65 0f 00 00       	call   112070 <__multiply>
  11110b:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  111112:	00 
  111113:	48 89 df             	mov    %rbx,%rdi
  111116:	48 89 ee             	mov    %rbp,%rsi
  111119:	8b ac 24 9c 00 00 00 	mov    0x9c(%rsp),%ebp
  111120:	e8 ab 0a 00 00       	call   111bd0 <_Bfree>
  111125:	8b 54 24 18          	mov    0x18(%rsp),%edx
  111129:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  111130:	00 
  111131:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  111136:	29 ea                	sub    %ebp,%edx
  111138:	74 19                	je     111153 <_dtoa_r+0xa03>
  11113a:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  11113f:	48 89 ef             	mov    %rbp,%rdi
  111142:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  111147:	e8 e4 12 00 00       	call   112430 <__pow5mult>
  11114c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  111151:	eb 05                	jmp    111158 <_dtoa_r+0xa08>
  111153:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  111158:	bb 01 00 00 00       	mov    $0x1,%ebx
  11115d:	be 01 00 00 00       	mov    $0x1,%esi
  111162:	48 89 ef             	mov    %rbp,%rdi
  111165:	e8 76 0e 00 00       	call   111fe0 <__i2b>
  11116a:	8b 94 24 80 00 00 00 	mov    0x80(%rsp),%edx
  111171:	85 d2                	test   %edx,%edx
  111173:	4c 89 74 24 48       	mov    %r14,0x48(%rsp)
  111178:	7e 12                	jle    11118c <_dtoa_r+0xa3c>
  11117a:	48 89 ef             	mov    %rbp,%rdi
  11117d:	48 89 c6             	mov    %rax,%rsi
  111180:	e8 ab 12 00 00       	call   112430 <__pow5mult>
  111185:	8b 94 24 80 00 00 00 	mov    0x80(%rsp),%edx
  11118c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  111191:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  111198:	00 
  111199:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  11119e:	8b b4 24 88 00 00 00 	mov    0x88(%rsp),%esi
  1111a5:	83 f8 01             	cmp    $0x1,%eax
  1111a8:	0f 9f c0             	setg   %al
  1111ab:	41 81 e4 ff ff 0f 00 	and    $0xfffff,%r12d
  1111b2:	41 09 cc             	or     %ecx,%r12d
  1111b5:	0f 95 c1             	setne  %cl
  1111b8:	85 f6                	test   %esi,%esi
  1111ba:	41 0f 94 c6          	sete   %r14b
  1111be:	41 08 c6             	or     %al,%r14b
  1111c1:	41 08 ce             	or     %cl,%r14b
  1111c4:	44 89 f0             	mov    %r14d,%eax
  1111c7:	34 01                	xor    $0x1,%al
  1111c9:	0f b6 e8             	movzbl %al,%ebp
  1111cc:	41 01 ef             	add    %ebp,%r15d
  1111cf:	85 d2                	test   %edx,%edx
  1111d1:	74 19                	je     1111ec <_dtoa_r+0xa9c>
  1111d3:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  1111d8:	48 63 41 14          	movslq 0x14(%rcx),%rax
  1111dc:	8b 7c 81 14          	mov    0x14(%rcx,%rax,4),%edi
  1111e0:	e8 fb 0c 00 00       	call   111ee0 <__hi0bits>
  1111e5:	bb 20 00 00 00       	mov    $0x20,%ebx
  1111ea:	29 c3                	sub    %eax,%ebx
  1111ec:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  1111f1:	01 ea                	add    %ebp,%edx
  1111f3:	44 01 fb             	add    %r15d,%ebx
  1111f6:	83 e3 1f             	and    $0x1f,%ebx
  1111f9:	b8 20 00 00 00       	mov    $0x20,%eax
  1111fe:	29 d8                	sub    %ebx,%eax
  111200:	85 db                	test   %ebx,%ebx
  111202:	0f 44 c3             	cmove  %ebx,%eax
  111205:	83 f8 05             	cmp    $0x5,%eax
  111208:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  11120d:	72 20                	jb     11122f <_dtoa_r+0xadf>
  11120f:	8d 14 10             	lea    (%rax,%rdx,1),%edx
  111212:	83 c2 fc             	add    $0xfffffffc,%edx
  111215:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  11121a:	8d 0c 08             	lea    (%rax,%rcx,1),%ecx
  11121d:	83 c1 fc             	add    $0xfffffffc,%ecx
  111220:	46 8d 3c 38          	lea    (%rax,%r15,1),%r15d
  111224:	41 83 c7 fc          	add    $0xfffffffc,%r15d
  111228:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  11122d:	eb 23                	jmp    111252 <_dtoa_r+0xb02>
  11122f:	83 f8 04             	cmp    $0x4,%eax
  111232:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  111237:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  11123c:	74 14                	je     111252 <_dtoa_r+0xb02>
  11123e:	8d 14 10             	lea    (%rax,%rdx,1),%edx
  111241:	83 c2 1c             	add    $0x1c,%edx
  111244:	8d 0c 08             	lea    (%rax,%rcx,1),%ecx
  111247:	83 c1 1c             	add    $0x1c,%ecx
  11124a:	46 8d 3c 38          	lea    (%rax,%r15,1),%r15d
  11124e:	41 83 c7 1c          	add    $0x1c,%r15d
  111252:	48 89 cb             	mov    %rcx,%rbx
  111255:	85 d2                	test   %edx,%edx
  111257:	7e 12                	jle    11126b <_dtoa_r+0xb1b>
  111259:	48 89 ef             	mov    %rbp,%rdi
  11125c:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  111261:	e8 fa 12 00 00       	call   112560 <__lshift>
  111266:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  11126b:	45 85 ff             	test   %r15d,%r15d
  11126e:	7e 13                	jle    111283 <_dtoa_r+0xb33>
  111270:	48 89 ef             	mov    %rbp,%rdi
  111273:	4c 89 e6             	mov    %r12,%rsi
  111276:	44 89 fa             	mov    %r15d,%edx
  111279:	e8 e2 12 00 00       	call   112560 <__lshift>
  11127e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  111283:	4c 8b 64 24 60       	mov    0x60(%rsp),%r12
  111288:	48 89 da             	mov    %rbx,%rdx
  11128b:	8b 44 24 5c          	mov    0x5c(%rsp),%eax
  11128f:	85 c0                	test   %eax,%eax
  111291:	74 21                	je     1112b4 <_dtoa_r+0xb64>
  111293:	49 89 d7             	mov    %rdx,%r15
  111296:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  11129b:	48 89 df             	mov    %rbx,%rdi
  11129e:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  1112a3:	e8 98 17 00 00       	call   112a40 <__mcmp>
  1112a8:	85 c0                	test   %eax,%eax
  1112aa:	78 1f                	js     1112cb <_dtoa_r+0xb7b>
  1112ac:	45 89 ec             	mov    %r13d,%r12d
  1112af:	49 89 dd             	mov    %rbx,%r13
  1112b2:	eb 59                	jmp    11130d <_dtoa_r+0xbbd>
  1112b4:	45 89 ec             	mov    %r13d,%r12d
  1112b7:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
  1112bc:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  1112c1:	83 f8 03             	cmp    $0x3,%eax
  1112c4:	7d 54                	jge    11131a <_dtoa_r+0xbca>
  1112c6:	e9 c0 00 00 00       	jmp    11138b <_dtoa_r+0xc3b>
  1112cb:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  1112d0:	83 c0 ff             	add    $0xffffffff,%eax
  1112d3:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  1112d8:	ba 0a 00 00 00       	mov    $0xa,%edx
  1112dd:	31 c9                	xor    %ecx,%ecx
  1112df:	48 89 ef             	mov    %rbp,%rdi
  1112e2:	48 89 de             	mov    %rbx,%rsi
  1112e5:	e8 06 09 00 00       	call   111bf0 <__multadd>
  1112ea:	49 89 c5             	mov    %rax,%r13
  1112ed:	83 7c 24 2c 00       	cmpl   $0x0,0x2c(%rsp)
  1112f2:	74 19                	je     11130d <_dtoa_r+0xbbd>
  1112f4:	ba 0a 00 00 00       	mov    $0xa,%edx
  1112f9:	31 c9                	xor    %ecx,%ecx
  1112fb:	48 89 ef             	mov    %rbp,%rdi
  1112fe:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  111303:	e8 e8 08 00 00       	call   111bf0 <__multadd>
  111308:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  11130d:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  111312:	4c 89 fa             	mov    %r15,%rdx
  111315:	83 f8 03             	cmp    $0x3,%eax
  111318:	7c 71                	jl     11138b <_dtoa_r+0xc3b>
  11131a:	45 85 e4             	test   %r12d,%r12d
  11131d:	7f 6c                	jg     11138b <_dtoa_r+0xc3b>
  11131f:	4c 8b 7c 24 38       	mov    0x38(%rsp),%r15
  111324:	0f 88 2a 02 00 00    	js     111554 <_dtoa_r+0xe04>
  11132a:	ba 05 00 00 00       	mov    $0x5,%edx
  11132f:	31 c9                	xor    %ecx,%ecx
  111331:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  111336:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  11133b:	e8 b0 08 00 00       	call   111bf0 <__multadd>
  111340:	48 89 c5             	mov    %rax,%rbp
  111343:	4c 89 ef             	mov    %r13,%rdi
  111346:	48 89 c6             	mov    %rax,%rsi
  111349:	e8 f2 16 00 00       	call   112a40 <__mcmp>
  11134e:	48 89 e9             	mov    %rbp,%rcx
  111351:	85 c0                	test   %eax,%eax
  111353:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
  111358:	4c 8b 74 24 48       	mov    0x48(%rsp),%r14
  11135d:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
  111362:	0f 8e 63 03 00 00    	jle    1116cb <_dtoa_r+0xf7b>
  111368:	4c 89 f3             	mov    %r14,%rbx
  11136b:	48 83 c3 01          	add    $0x1,%rbx
  11136f:	41 c6 06 31          	movb   $0x31,(%r14)
  111373:	41 83 c0 01          	add    $0x1,%r8d
  111377:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  11137c:	31 c0                	xor    %eax,%eax
  11137e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  111383:	48 89 cd             	mov    %rcx,%rbp
  111386:	e9 56 03 00 00       	jmp    1116e1 <_dtoa_r+0xf91>
  11138b:	83 7c 24 2c 00       	cmpl   $0x0,0x2c(%rsp)
  111390:	4c 8b 7c 24 38       	mov    0x38(%rsp),%r15
  111395:	0f 84 cd 01 00 00    	je     111568 <_dtoa_r+0xe18>
  11139b:	85 d2                	test   %edx,%edx
  11139d:	0f 8e bc 03 00 00    	jle    11175f <_dtoa_r+0x100f>
  1113a3:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  1113a8:	48 89 ef             	mov    %rbp,%rdi
  1113ab:	4c 89 fe             	mov    %r15,%rsi
  1113ae:	e8 ad 11 00 00       	call   112560 <__lshift>
  1113b3:	49 89 c7             	mov    %rax,%r15
  1113b6:	48 89 c1             	mov    %rax,%rcx
  1113b9:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  1113be:	45 84 f6             	test   %r14b,%r14b
  1113c1:	75 42                	jne    111405 <_dtoa_r+0xcb5>
  1113c3:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  1113c8:	48 89 c3             	mov    %rax,%rbx
  1113cb:	8b 70 08             	mov    0x8(%rax),%esi
  1113ce:	48 89 ef             	mov    %rbp,%rdi
  1113d1:	e8 6a 07 00 00       	call   111b40 <_Balloc>
  1113d6:	49 89 c6             	mov    %rax,%r14
  1113d9:	48 8d 78 10          	lea    0x10(%rax),%rdi
  1113dd:	48 8d 73 10          	lea    0x10(%rbx),%rsi
  1113e1:	48 63 43 14          	movslq 0x14(%rbx),%rax
  1113e5:	48 8d 14 85 08 00 00 	lea    0x8(,%rax,4),%rdx
  1113ec:	00 
  1113ed:	e8 0e 9d ff ff       	call   10b100 <memcpy>
  1113f2:	ba 01 00 00 00       	mov    $0x1,%edx
  1113f7:	48 89 ef             	mov    %rbp,%rdi
  1113fa:	4c 89 f6             	mov    %r14,%rsi
  1113fd:	e8 5e 11 00 00       	call   112560 <__lshift>
  111402:	49 89 c7             	mov    %rax,%r15
  111405:	41 83 c4 ff          	add    $0xffffffff,%r12d
  111409:	4c 89 64 24 60       	mov    %r12,0x60(%rsp)
  11140e:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  111413:	48 8d 58 01          	lea    0x1(%rax),%rbx
  111417:	eb 0f                	jmp    111428 <_dtoa_r+0xcd8>
  111419:	83 c5 ff             	add    $0xffffffff,%ebp
  11141c:	48 89 6c 24 60       	mov    %rbp,0x60(%rsp)
  111421:	48 83 c3 01          	add    $0x1,%rbx
  111425:	49 89 c7             	mov    %rax,%r15
  111428:	4c 89 ef             	mov    %r13,%rdi
  11142b:	48 8b 6c 24 18       	mov    0x18(%rsp),%rbp
  111430:	48 89 ee             	mov    %rbp,%rsi
  111433:	e8 28 05 00 00       	call   111960 <quorem>
  111438:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  11143d:	4c 89 ef             	mov    %r13,%rdi
  111440:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  111445:	e8 f6 15 00 00       	call   112a40 <__mcmp>
  11144a:	89 44 24 2c          	mov    %eax,0x2c(%rsp)
  11144e:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  111453:	4c 89 e7             	mov    %r12,%rdi
  111456:	48 89 ee             	mov    %rbp,%rsi
  111459:	4c 89 7c 24 38       	mov    %r15,0x38(%rsp)
  11145e:	4c 89 fa             	mov    %r15,%rdx
  111461:	e8 2a 16 00 00       	call   112a90 <__mdiff>
  111466:	49 89 c7             	mov    %rax,%r15
  111469:	41 be 01 00 00 00    	mov    $0x1,%r14d
  11146f:	83 78 10 00          	cmpl   $0x0,0x10(%rax)
  111473:	75 0e                	jne    111483 <_dtoa_r+0xd33>
  111475:	4c 89 ef             	mov    %r13,%rdi
  111478:	4c 89 fe             	mov    %r15,%rsi
  11147b:	e8 c0 15 00 00       	call   112a40 <__mcmp>
  111480:	41 89 c6             	mov    %eax,%r14d
  111483:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
  111488:	48 8b 6c 24 68       	mov    0x68(%rsp),%rbp
  11148d:	44 8d 6d 30          	lea    0x30(%rbp),%r13d
  111491:	4c 89 e7             	mov    %r12,%rdi
  111494:	4c 89 fe             	mov    %r15,%rsi
  111497:	e8 34 07 00 00       	call   111bd0 <_Bfree>
  11149c:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  1114a3:	00 
  1114a4:	f6 c1 01             	test   $0x1,%cl
  1114a7:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
  1114ac:	48 89 ee             	mov    %rbp,%rsi
  1114af:	75 0b                	jne    1114bc <_dtoa_r+0xd6c>
  1114b1:	44 89 f0             	mov    %r14d,%eax
  1114b4:	09 d0                	or     %edx,%eax
  1114b6:	0f 84 31 03 00 00    	je     1117ed <_dtoa_r+0x109d>
  1114bc:	8b 44 24 2c          	mov    0x2c(%rsp),%eax
  1114c0:	85 c0                	test   %eax,%eax
  1114c2:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
  1114c7:	0f 88 80 01 00 00    	js     11164d <_dtoa_r+0xefd>
  1114cd:	f6 c1 01             	test   $0x1,%cl
  1114d0:	75 08                	jne    1114da <_dtoa_r+0xd8a>
  1114d2:	09 d0                	or     %edx,%eax
  1114d4:	0f 84 73 01 00 00    	je     11164d <_dtoa_r+0xefd>
  1114da:	45 85 f6             	test   %r14d,%r14d
  1114dd:	0f 8f 2f 03 00 00    	jg     111812 <_dtoa_r+0x10c2>
  1114e3:	44 88 6b ff          	mov    %r13b,-0x1(%rbx)
  1114e7:	48 8b 6c 24 60       	mov    0x60(%rsp),%rbp
  1114ec:	85 ed                	test   %ebp,%ebp
  1114ee:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  1114f3:	4c 8b 7c 24 38       	mov    0x38(%rsp),%r15
  1114f8:	0f 84 3d 03 00 00    	je     11183b <_dtoa_r+0x10eb>
  1114fe:	ba 0a 00 00 00       	mov    $0xa,%edx
  111503:	31 c9                	xor    %ecx,%ecx
  111505:	4c 89 e7             	mov    %r12,%rdi
  111508:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  11150d:	e8 de 06 00 00       	call   111bf0 <__multadd>
  111512:	49 89 c5             	mov    %rax,%r13
  111515:	ba 0a 00 00 00       	mov    $0xa,%edx
  11151a:	31 c9                	xor    %ecx,%ecx
  11151c:	4c 89 e7             	mov    %r12,%rdi
  11151f:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  111524:	4c 89 f6             	mov    %r14,%rsi
  111527:	e8 c4 06 00 00       	call   111bf0 <__multadd>
  11152c:	4d 39 fe             	cmp    %r15,%r14
  11152f:	48 89 c1             	mov    %rax,%rcx
  111532:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  111537:	0f 84 dc fe ff ff    	je     111419 <_dtoa_r+0xcc9>
  11153d:	ba 0a 00 00 00       	mov    $0xa,%edx
  111542:	31 c9                	xor    %ecx,%ecx
  111544:	4c 89 e7             	mov    %r12,%rdi
  111547:	4c 89 fe             	mov    %r15,%rsi
  11154a:	e8 a1 06 00 00       	call   111bf0 <__multadd>
  11154f:	e9 c5 fe ff ff       	jmp    111419 <_dtoa_r+0xcc9>
  111554:	4c 8b 74 24 48       	mov    0x48(%rsp),%r14
  111559:	48 8b 6c 24 18       	mov    0x18(%rsp),%rbp
  11155e:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
  111563:	e9 63 01 00 00       	jmp    1116cb <_dtoa_r+0xf7b>
  111568:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
  11156d:	4c 89 ef             	mov    %r13,%rdi
  111570:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  111575:	e8 e6 03 00 00       	call   111960 <quorem>
  11157a:	41 89 c5             	mov    %eax,%r13d
  11157d:	41 83 c5 30          	add    $0x30,%r13d
  111581:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  111586:	44 88 28             	mov    %r13b,(%rax)
  111589:	41 83 fc 02          	cmp    $0x2,%r12d
  11158d:	0f 8c e4 01 00 00    	jl     111777 <_dtoa_r+0x1027>
  111593:	41 8d 5c 24 fe       	lea    -0x2(%r12),%ebx
  111598:	48 83 c3 02          	add    $0x2,%rbx
  11159c:	44 89 e0             	mov    %r12d,%eax
  11159f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  1115a4:	bd 01 00 00 00       	mov    $0x1,%ebp
  1115a9:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
  1115ae:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  1115b3:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
  1115b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  1115bf:	00 
  1115c0:	ba 0a 00 00 00       	mov    $0xa,%edx
  1115c5:	31 c9                	xor    %ecx,%ecx
  1115c7:	4c 89 f7             	mov    %r14,%rdi
  1115ca:	4c 89 fe             	mov    %r15,%rsi
  1115cd:	e8 1e 06 00 00       	call   111bf0 <__multadd>
  1115d2:	49 89 c7             	mov    %rax,%r15
  1115d5:	48 89 c7             	mov    %rax,%rdi
  1115d8:	4c 89 e6             	mov    %r12,%rsi
  1115db:	e8 80 03 00 00       	call   111960 <quorem>
  1115e0:	41 89 c5             	mov    %eax,%r13d
  1115e3:	41 83 c5 30          	add    $0x30,%r13d
  1115e7:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  1115ec:	44 88 2c 28          	mov    %r13b,(%rax,%rbp,1)
  1115f0:	48 83 c5 01          	add    $0x1,%rbp
  1115f4:	39 6c 24 20          	cmp    %ebp,0x20(%rsp)
  1115f8:	75 c6                	jne    1115c0 <_dtoa_r+0xe70>
  1115fa:	4c 89 7c 24 08       	mov    %r15,0x8(%rsp)
  1115ff:	48 03 5c 24 48       	add    0x48(%rsp),%rbx
  111604:	31 c0                	xor    %eax,%eax
  111606:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  11160b:	4c 8b 7c 24 38       	mov    0x38(%rsp),%r15
  111610:	4c 89 e5             	mov    %r12,%rbp
  111613:	4d 89 f4             	mov    %r14,%r12
  111616:	e9 25 02 00 00       	jmp    111840 <_dtoa_r+0x10f0>
  11161b:	a8 01                	test   $0x1,%al
  11161d:	74 1f                	je     11163e <_dtoa_r+0xeee>
  11161f:	66 0f 2e e8          	ucomisd %xmm0,%xmm5
  111623:	4c 8b 7c 24 50       	mov    0x50(%rsp),%r15
  111628:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
  11162d:	0f 85 f5 00 00 00    	jne    111728 <_dtoa_r+0xfd8>
  111633:	0f 8b 72 01 00 00    	jnp    1117ab <_dtoa_r+0x105b>
  111639:	e9 ea 00 00 00       	jmp    111728 <_dtoa_r+0xfd8>
  11163e:	4c 8b 7c 24 50       	mov    0x50(%rsp),%r15
  111643:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
  111648:	e9 db 00 00 00       	jmp    111728 <_dtoa_r+0xfd8>
  11164d:	45 85 f6             	test   %r14d,%r14d
  111650:	0f 8e 69 02 00 00    	jle    1118bf <_dtoa_r+0x116f>
  111656:	ba 01 00 00 00       	mov    $0x1,%edx
  11165b:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  111660:	4c 89 e7             	mov    %r12,%rdi
  111663:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  111668:	e8 f3 0e 00 00       	call   112560 <__lshift>
  11166d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  111672:	48 89 c7             	mov    %rax,%rdi
  111675:	48 8b 6c 24 18       	mov    0x18(%rsp),%rbp
  11167a:	48 89 ee             	mov    %rbp,%rsi
  11167d:	e8 be 13 00 00       	call   112a40 <__mcmp>
  111682:	85 c0                	test   %eax,%eax
  111684:	4c 8b 74 24 48       	mov    0x48(%rsp),%r14
  111689:	4c 8b 7c 24 38       	mov    0x38(%rsp),%r15
  11168e:	7f 12                	jg     1116a2 <_dtoa_r+0xf52>
  111690:	41 f6 c5 01          	test   $0x1,%r13b
  111694:	0f 84 72 02 00 00    	je     11190c <_dtoa_r+0x11bc>
  11169a:	85 c0                	test   %eax,%eax
  11169c:	0f 85 6a 02 00 00    	jne    11190c <_dtoa_r+0x11bc>
  1116a2:	41 83 fd 39          	cmp    $0x39,%r13d
  1116a6:	0f 85 55 02 00 00    	jne    111901 <_dtoa_r+0x11b1>
  1116ac:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
  1116b1:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  1116b6:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
  1116bb:	c6 43 ff 39          	movb   $0x39,-0x1(%rbx)
  1116bf:	e9 c6 01 00 00       	jmp    11188a <_dtoa_r+0x113a>
  1116c4:	31 ed                	xor    %ebp,%ebp
  1116c6:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
  1116cb:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  1116d0:	f7 d0                	not    %eax
  1116d2:	31 c9                	xor    %ecx,%ecx
  1116d4:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  1116d9:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  1116de:	4c 89 f3             	mov    %r14,%rbx
  1116e1:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  1116e6:	48 89 ee             	mov    %rbp,%rsi
  1116e9:	e8 e2 04 00 00       	call   111bd0 <_Bfree>
  1116ee:	4d 85 ff             	test   %r15,%r15
  1116f1:	74 2b                	je     11171e <_dtoa_r+0xfce>
  1116f3:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  1116f8:	48 85 f6             	test   %rsi,%rsi
  1116fb:	74 0f                	je     11170c <_dtoa_r+0xfbc>
  1116fd:	4c 39 fe             	cmp    %r15,%rsi
  111700:	74 0a                	je     11170c <_dtoa_r+0xfbc>
  111702:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  111707:	e8 c4 04 00 00       	call   111bd0 <_Bfree>
  11170c:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  111711:	48 89 ef             	mov    %rbp,%rdi
  111714:	4c 89 fe             	mov    %r15,%rsi
  111717:	e8 b4 04 00 00       	call   111bd0 <_Bfree>
  11171c:	eb 05                	jmp    111723 <_dtoa_r+0xfd3>
  11171e:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  111723:	4c 8b 7c 24 50       	mov    0x50(%rsp),%r15
  111728:	48 89 ef             	mov    %rbp,%rdi
  11172b:	4c 89 ee             	mov    %r13,%rsi
  11172e:	e8 9d 04 00 00       	call   111bd0 <_Bfree>
  111733:	c6 03 00             	movb   $0x0,(%rbx)
  111736:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  11173b:	83 c0 01             	add    $0x1,%eax
  11173e:	41 89 07             	mov    %eax,(%r15)
  111741:	4d 85 e4             	test   %r12,%r12
  111744:	74 04                	je     11174a <_dtoa_r+0xffa>
  111746:	49 89 1c 24          	mov    %rbx,(%r12)
  11174a:	4c 89 f0             	mov    %r14,%rax
  11174d:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  111754:	5b                   	pop    %rbx
  111755:	41 5c                	pop    %r12
  111757:	41 5d                	pop    %r13
  111759:	41 5e                	pop    %r14
  11175b:	41 5f                	pop    %r15
  11175d:	5d                   	pop    %rbp
  11175e:	c3                   	ret    
  11175f:	4c 89 7c 24 20       	mov    %r15,0x20(%rsp)
  111764:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  111769:	45 84 f6             	test   %r14b,%r14b
  11176c:	0f 85 93 fc ff ff    	jne    111405 <_dtoa_r+0xcb5>
  111772:	e9 4c fc ff ff       	jmp    1113c3 <_dtoa_r+0xc73>
  111777:	48 8d 58 01          	lea    0x1(%rax),%rbx
  11177b:	31 c0                	xor    %eax,%eax
  11177d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  111782:	48 8b 6c 24 18       	mov    0x18(%rsp),%rbp
  111787:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  11178c:	e9 af 00 00 00       	jmp    111840 <_dtoa_r+0x10f0>
  111791:	4c 01 f3             	add    %r14,%rbx
  111794:	41 89 c0             	mov    %eax,%r8d
  111797:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
  11179c:	4c 8b 7c 24 50       	mov    0x50(%rsp),%r15
  1117a1:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  1117a6:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
  1117ab:	48 89 d8             	mov    %rbx,%rax
  1117ae:	66 90                	xchg   %ax,%ax
  1117b0:	48 89 c3             	mov    %rax,%rbx
  1117b3:	0f b6 40 ff          	movzbl -0x1(%rax),%eax
  1117b7:	3c 39                	cmp    $0x39,%al
  1117b9:	75 20                	jne    1117db <_dtoa_r+0x108b>
  1117bb:	48 8d 43 ff          	lea    -0x1(%rbx),%rax
  1117bf:	49 39 c6             	cmp    %rax,%r14
  1117c2:	75 ec                	jne    1117b0 <_dtoa_r+0x1060>
  1117c4:	41 83 c0 01          	add    $0x1,%r8d
  1117c8:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  1117cd:	41 c6 06 30          	movb   $0x30,(%r14)
  1117d1:	b0 31                	mov    $0x31,%al
  1117d3:	41 88 06             	mov    %al,(%r14)
  1117d6:	e9 4d ff ff ff       	jmp    111728 <_dtoa_r+0xfd8>
  1117db:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  1117e0:	04 01                	add    $0x1,%al
  1117e2:	48 8d 4b ff          	lea    -0x1(%rbx),%rcx
  1117e6:	88 01                	mov    %al,(%rcx)
  1117e8:	e9 3b ff ff ff       	jmp    111728 <_dtoa_r+0xfd8>
  1117ed:	41 83 fd 39          	cmp    $0x39,%r13d
  1117f1:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
  1117f6:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  1117fb:	0f 85 ef 00 00 00    	jne    1118f0 <_dtoa_r+0x11a0>
  111801:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
  111806:	4c 8b 74 24 48       	mov    0x48(%rsp),%r14
  11180b:	4c 8b 7c 24 38       	mov    0x38(%rsp),%r15
  111810:	eb 1e                	jmp    111830 <_dtoa_r+0x10e0>
  111812:	41 83 fd 39          	cmp    $0x39,%r13d
  111816:	4c 8b 74 24 48       	mov    0x48(%rsp),%r14
  11181b:	4c 8b 7c 24 38       	mov    0x38(%rsp),%r15
  111820:	0f 85 f9 00 00 00    	jne    11191f <_dtoa_r+0x11cf>
  111826:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
  11182b:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  111830:	48 8b 6c 24 18       	mov    0x18(%rsp),%rbp
  111835:	c6 43 ff 39          	movb   $0x39,-0x1(%rbx)
  111839:	eb 4f                	jmp    11188a <_dtoa_r+0x113a>
  11183b:	48 8b 6c 24 18       	mov    0x18(%rsp),%rbp
  111840:	ba 01 00 00 00       	mov    $0x1,%edx
  111845:	4c 89 e7             	mov    %r12,%rdi
  111848:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  11184d:	e8 0e 0d 00 00       	call   112560 <__lshift>
  111852:	49 89 c6             	mov    %rax,%r14
  111855:	48 89 c7             	mov    %rax,%rdi
  111858:	48 89 ee             	mov    %rbp,%rsi
  11185b:	e8 e0 11 00 00       	call   112a40 <__mcmp>
  111860:	85 c0                	test   %eax,%eax
  111862:	7e 0a                	jle    11186e <_dtoa_r+0x111e>
  111864:	4d 89 f5             	mov    %r14,%r13
  111867:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  11186c:	eb 12                	jmp    111880 <_dtoa_r+0x1130>
  11186e:	41 f6 c5 01          	test   $0x1,%r13b
  111872:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  111877:	74 57                	je     1118d0 <_dtoa_r+0x1180>
  111879:	85 c0                	test   %eax,%eax
  11187b:	75 53                	jne    1118d0 <_dtoa_r+0x1180>
  11187d:	4d 89 f5             	mov    %r14,%r13
  111880:	4c 8b 74 24 48       	mov    0x48(%rsp),%r14
  111885:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
  11188a:	48 89 d8             	mov    %rbx,%rax
  11188d:	0f 1f 00             	nopl   (%rax)
  111890:	48 89 c3             	mov    %rax,%rbx
  111893:	0f b6 40 ff          	movzbl -0x1(%rax),%eax
  111897:	3c 39                	cmp    $0x39,%al
  111899:	75 1a                	jne    1118b5 <_dtoa_r+0x1165>
  11189b:	48 8d 43 ff          	lea    -0x1(%rbx),%rax
  11189f:	49 39 c6             	cmp    %rax,%r14
  1118a2:	75 ec                	jne    111890 <_dtoa_r+0x1140>
  1118a4:	83 c1 01             	add    $0x1,%ecx
  1118a7:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  1118ac:	41 c6 06 31          	movb   $0x31,(%r14)
  1118b0:	e9 2c fe ff ff       	jmp    1116e1 <_dtoa_r+0xf91>
  1118b5:	04 01                	add    $0x1,%al
  1118b7:	88 43 ff             	mov    %al,-0x1(%rbx)
  1118ba:	e9 22 fe ff ff       	jmp    1116e1 <_dtoa_r+0xf91>
  1118bf:	4c 8b 74 24 48       	mov    0x48(%rsp),%r14
  1118c4:	4c 8b 7c 24 38       	mov    0x38(%rsp),%r15
  1118c9:	48 8b 6c 24 18       	mov    0x18(%rsp),%rbp
  1118ce:	eb 41                	jmp    111911 <_dtoa_r+0x11c1>
  1118d0:	48 83 c3 01          	add    $0x1,%rbx
  1118d4:	80 7b fe 30          	cmpb   $0x30,-0x2(%rbx)
  1118d8:	48 8d 5b ff          	lea    -0x1(%rbx),%rbx
  1118dc:	74 f6                	je     1118d4 <_dtoa_r+0x1184>
  1118de:	4d 89 f5             	mov    %r14,%r13
  1118e1:	4c 8b 74 24 48       	mov    0x48(%rsp),%r14
  1118e6:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
  1118eb:	e9 f1 fd ff ff       	jmp    1116e1 <_dtoa_r+0xf91>
  1118f0:	83 7c 24 2c 00       	cmpl   $0x0,0x2c(%rsp)
  1118f5:	48 8b 6c 24 18       	mov    0x18(%rsp),%rbp
  1118fa:	7f 3a                	jg     111936 <_dtoa_r+0x11e6>
  1118fc:	44 89 e8             	mov    %r13d,%eax
  1118ff:	eb 3b                	jmp    11193c <_dtoa_r+0x11ec>
  111901:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  111906:	83 c0 31             	add    $0x31,%eax
  111909:	41 89 c5             	mov    %eax,%r13d
  11190c:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
  111911:	44 88 6b ff          	mov    %r13b,-0x1(%rbx)
  111915:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
  11191a:	e9 c2 fd ff ff       	jmp    1116e1 <_dtoa_r+0xf91>
  11191f:	40 80 c6 31          	add    $0x31,%sil
  111923:	40 88 73 ff          	mov    %sil,-0x1(%rbx)
  111927:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
  11192c:	48 8b 6c 24 18       	mov    0x18(%rsp),%rbp
  111931:	e9 ab fd ff ff       	jmp    1116e1 <_dtoa_r+0xf91>
  111936:	48 89 f0             	mov    %rsi,%rax
  111939:	83 c0 31             	add    $0x31,%eax
  11193c:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
  111941:	4c 8b 74 24 48       	mov    0x48(%rsp),%r14
  111946:	4c 8b 7c 24 38       	mov    0x38(%rsp),%r15
  11194b:	88 43 ff             	mov    %al,-0x1(%rbx)
  11194e:	e9 8e fd ff ff       	jmp    1116e1 <_dtoa_r+0xf91>
  111953:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11195a:	00 00 00 
  11195d:	0f 1f 00             	nopl   (%rax)

0000000000111960 <quorem>:
  111960:	55                   	push   %rbp
  111961:	41 57                	push   %r15
  111963:	41 56                	push   %r14
  111965:	41 55                	push   %r13
  111967:	41 54                	push   %r12
  111969:	53                   	push   %rbx
  11196a:	48 83 ec 18          	sub    $0x18,%rsp
  11196e:	48 89 fb             	mov    %rdi,%rbx
  111971:	48 63 7e 14          	movslq 0x14(%rsi),%rdi
  111975:	45 31 ed             	xor    %r13d,%r13d
  111978:	39 7b 14             	cmp    %edi,0x14(%rbx)
  11197b:	0f 8c a5 01 00 00    	jl     111b26 <quorem+0x1c6>
  111981:	4c 8d 76 18          	lea    0x18(%rsi),%r14
  111985:	4c 8d 67 ff          	lea    -0x1(%rdi),%r12
  111989:	4c 8d 3c be          	lea    (%rsi,%rdi,4),%r15
  11198d:	49 83 c7 14          	add    $0x14,%r15
  111991:	48 8d 6b 18          	lea    0x18(%rbx),%rbp
  111995:	44 8b 44 bb 14       	mov    0x14(%rbx,%rdi,4),%r8d
  11199a:	44 8b 4c be 14       	mov    0x14(%rsi,%rdi,4),%r9d
  11199f:	41 83 c1 01          	add    $0x1,%r9d
  1119a3:	31 c9                	xor    %ecx,%ecx
  1119a5:	31 d2                	xor    %edx,%edx
  1119a7:	44 89 c0             	mov    %r8d,%eax
  1119aa:	41 f7 f1             	div    %r9d
  1119ad:	41 89 c5             	mov    %eax,%r13d
  1119b0:	45 39 c1             	cmp    %r8d,%r9d
  1119b3:	0f 87 c5 00 00 00    	ja     111a7e <quorem+0x11e>
  1119b9:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
  1119be:	4c 8d 04 bb          	lea    (%rbx,%rdi,4),%r8
  1119c2:	49 83 c0 14          	add    $0x14,%r8
  1119c6:	31 c0                	xor    %eax,%eax
  1119c8:	48 89 6c 24 10       	mov    %rbp,0x10(%rsp)
  1119cd:	49 89 ea             	mov    %rbp,%r10
  1119d0:	4c 89 f2             	mov    %r14,%rdx
  1119d3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1119da:	00 00 00 
  1119dd:	0f 1f 00             	nopl   (%rax)
  1119e0:	8b 2a                	mov    (%rdx),%ebp
  1119e2:	48 83 c2 04          	add    $0x4,%rdx
  1119e6:	0f b7 dd             	movzwl %bp,%ebx
  1119e9:	41 0f af dd          	imul   %r13d,%ebx
  1119ed:	01 c3                	add    %eax,%ebx
  1119ef:	c1 ed 10             	shr    $0x10,%ebp
  1119f2:	41 0f af ed          	imul   %r13d,%ebp
  1119f6:	44 0f b7 cb          	movzwl %bx,%r9d
  1119fa:	c1 eb 10             	shr    $0x10,%ebx
  1119fd:	01 eb                	add    %ebp,%ebx
  1119ff:	44 0f b7 db          	movzwl %bx,%r11d
  111a03:	89 d8                	mov    %ebx,%eax
  111a05:	c1 e8 10             	shr    $0x10,%eax
  111a08:	41 8b 3a             	mov    (%r10),%edi
  111a0b:	0f b7 df             	movzwl %di,%ebx
  111a0e:	44 29 cb             	sub    %r9d,%ebx
  111a11:	01 cb                	add    %ecx,%ebx
  111a13:	0f b7 eb             	movzwl %bx,%ebp
  111a16:	c1 fb 10             	sar    $0x10,%ebx
  111a19:	c1 ef 10             	shr    $0x10,%edi
  111a1c:	44 29 df             	sub    %r11d,%edi
  111a1f:	01 df                	add    %ebx,%edi
  111a21:	89 f9                	mov    %edi,%ecx
  111a23:	c1 f9 10             	sar    $0x10,%ecx
  111a26:	c1 e7 10             	shl    $0x10,%edi
  111a29:	09 fd                	or     %edi,%ebp
  111a2b:	41 89 2a             	mov    %ebp,(%r10)
  111a2e:	49 83 c2 04          	add    $0x4,%r10
  111a32:	4c 39 fa             	cmp    %r15,%rdx
  111a35:	76 a9                	jbe    1119e0 <quorem+0x80>
  111a37:	41 83 38 00          	cmpl   $0x0,(%r8)
  111a3b:	74 0c                	je     111a49 <quorem+0xe9>
  111a3d:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  111a42:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  111a47:	eb 35                	jmp    111a7e <quorem+0x11e>
  111a49:	49 83 c0 fc          	add    $0xfffffffffffffffc,%r8
  111a4d:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  111a52:	49 39 e8             	cmp    %rbp,%r8
  111a55:	76 1e                	jbe    111a75 <quorem+0x115>
  111a57:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  111a5c:	0f 1f 40 00          	nopl   0x0(%rax)
  111a60:	41 83 38 00          	cmpl   $0x0,(%r8)
  111a64:	75 14                	jne    111a7a <quorem+0x11a>
  111a66:	41 83 c4 ff          	add    $0xffffffff,%r12d
  111a6a:	49 83 c0 fc          	add    $0xfffffffffffffffc,%r8
  111a6e:	49 39 e8             	cmp    %rbp,%r8
  111a71:	77 ed                	ja     111a60 <quorem+0x100>
  111a73:	eb 05                	jmp    111a7a <quorem+0x11a>
  111a75:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  111a7a:	44 89 63 14          	mov    %r12d,0x14(%rbx)
  111a7e:	48 89 df             	mov    %rbx,%rdi
  111a81:	e8 ba 0f 00 00       	call   112a40 <__mcmp>
  111a86:	85 c0                	test   %eax,%eax
  111a88:	0f 88 98 00 00 00    	js     111b26 <quorem+0x1c6>
  111a8e:	49 89 d8             	mov    %rbx,%r8
  111a91:	31 c9                	xor    %ecx,%ecx
  111a93:	31 d2                	xor    %edx,%edx
  111a95:	49 89 e9             	mov    %rbp,%r9
  111a98:	48 89 e8             	mov    %rbp,%rax
  111a9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  111aa0:	41 8b 36             	mov    (%r14),%esi
  111aa3:	49 83 c6 04          	add    $0x4,%r14
  111aa7:	0f b7 fe             	movzwl %si,%edi
  111aaa:	01 d7                	add    %edx,%edi
  111aac:	c1 ee 10             	shr    $0x10,%esi
  111aaf:	0f b7 ef             	movzwl %di,%ebp
  111ab2:	c1 ef 10             	shr    $0x10,%edi
  111ab5:	01 f7                	add    %esi,%edi
  111ab7:	0f b7 f7             	movzwl %di,%esi
  111aba:	89 fa                	mov    %edi,%edx
  111abc:	c1 ea 10             	shr    $0x10,%edx
  111abf:	8b 38                	mov    (%rax),%edi
  111ac1:	0f b7 df             	movzwl %di,%ebx
  111ac4:	29 eb                	sub    %ebp,%ebx
  111ac6:	01 cb                	add    %ecx,%ebx
  111ac8:	0f b7 eb             	movzwl %bx,%ebp
  111acb:	c1 fb 10             	sar    $0x10,%ebx
  111ace:	c1 ef 10             	shr    $0x10,%edi
  111ad1:	29 f7                	sub    %esi,%edi
  111ad3:	01 df                	add    %ebx,%edi
  111ad5:	89 f9                	mov    %edi,%ecx
  111ad7:	c1 f9 10             	sar    $0x10,%ecx
  111ada:	c1 e7 10             	shl    $0x10,%edi
  111add:	09 fd                	or     %edi,%ebp
  111adf:	89 28                	mov    %ebp,(%rax)
  111ae1:	48 83 c0 04          	add    $0x4,%rax
  111ae5:	4d 39 fe             	cmp    %r15,%r14
  111ae8:	76 b6                	jbe    111aa0 <quorem+0x140>
  111aea:	41 83 c5 01          	add    $0x1,%r13d
  111aee:	49 63 c4             	movslq %r12d,%rax
  111af1:	41 83 7c 80 18 00    	cmpl   $0x0,0x18(%r8,%rax,4)
  111af7:	75 2d                	jne    111b26 <quorem+0x1c6>
  111af9:	49 8d 04 80          	lea    (%r8,%rax,4),%rax
  111afd:	48 83 c0 18          	add    $0x18,%rax
  111b01:	eb 11                	jmp    111b14 <quorem+0x1b4>
  111b03:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  111b0a:	00 00 00 
  111b0d:	0f 1f 00             	nopl   (%rax)
  111b10:	41 83 c4 ff          	add    $0xffffffff,%r12d
  111b14:	48 83 c0 fc          	add    $0xfffffffffffffffc,%rax
  111b18:	4c 39 c8             	cmp    %r9,%rax
  111b1b:	76 05                	jbe    111b22 <quorem+0x1c2>
  111b1d:	83 38 00             	cmpl   $0x0,(%rax)
  111b20:	74 ee                	je     111b10 <quorem+0x1b0>
  111b22:	45 89 60 14          	mov    %r12d,0x14(%r8)
  111b26:	44 89 e8             	mov    %r13d,%eax
  111b29:	48 83 c4 18          	add    $0x18,%rsp
  111b2d:	5b                   	pop    %rbx
  111b2e:	41 5c                	pop    %r12
  111b30:	41 5d                	pop    %r13
  111b32:	41 5e                	pop    %r14
  111b34:	41 5f                	pop    %r15
  111b36:	5d                   	pop    %rbp
  111b37:	c3                   	ret    
  111b38:	cc                   	int3   
  111b39:	cc                   	int3   
  111b3a:	cc                   	int3   
  111b3b:	cc                   	int3   
  111b3c:	cc                   	int3   
  111b3d:	cc                   	int3   
  111b3e:	cc                   	int3   
  111b3f:	cc                   	int3   

0000000000111b40 <_Balloc>:
  111b40:	55                   	push   %rbp
  111b41:	41 56                	push   %r14
  111b43:	53                   	push   %rbx
  111b44:	41 89 f6             	mov    %esi,%r14d
  111b47:	48 89 fb             	mov    %rdi,%rbx
  111b4a:	48 8b 4f 78          	mov    0x78(%rdi),%rcx
  111b4e:	48 85 c9             	test   %rcx,%rcx
  111b51:	75 1e                	jne    111b71 <_Balloc+0x31>
  111b53:	be 08 00 00 00       	mov    $0x8,%esi
  111b58:	ba 41 00 00 00       	mov    $0x41,%edx
  111b5d:	48 89 df             	mov    %rbx,%rdi
  111b60:	e8 bb 1b 00 00       	call   113720 <_calloc_r>
  111b65:	48 89 c1             	mov    %rax,%rcx
  111b68:	48 89 43 78          	mov    %rax,0x78(%rbx)
  111b6c:	48 85 c0             	test   %rax,%rax
  111b6f:	74 4d                	je     111bbe <_Balloc+0x7e>
  111b71:	49 63 d6             	movslq %r14d,%rdx
  111b74:	48 8b 04 d1          	mov    (%rcx,%rdx,8),%rax
  111b78:	48 85 c0             	test   %rax,%rax
  111b7b:	74 09                	je     111b86 <_Balloc+0x46>
  111b7d:	48 8b 30             	mov    (%rax),%rsi
  111b80:	48 89 34 d1          	mov    %rsi,(%rcx,%rdx,8)
  111b84:	eb 2e                	jmp    111bb4 <_Balloc+0x74>
  111b86:	bd 01 00 00 00       	mov    $0x1,%ebp
  111b8b:	44 89 f1             	mov    %r14d,%ecx
  111b8e:	d3 e5                	shl    %cl,%ebp
  111b90:	48 63 c5             	movslq %ebp,%rax
  111b93:	48 8d 14 85 1c 00 00 	lea    0x1c(,%rax,4),%rdx
  111b9a:	00 
  111b9b:	be 01 00 00 00       	mov    $0x1,%esi
  111ba0:	48 89 df             	mov    %rbx,%rdi
  111ba3:	e8 78 1b 00 00       	call   113720 <_calloc_r>
  111ba8:	48 85 c0             	test   %rax,%rax
  111bab:	74 11                	je     111bbe <_Balloc+0x7e>
  111bad:	44 89 70 08          	mov    %r14d,0x8(%rax)
  111bb1:	89 68 0c             	mov    %ebp,0xc(%rax)
  111bb4:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  111bbb:	00 
  111bbc:	eb 02                	jmp    111bc0 <_Balloc+0x80>
  111bbe:	31 c0                	xor    %eax,%eax
  111bc0:	5b                   	pop    %rbx
  111bc1:	41 5e                	pop    %r14
  111bc3:	5d                   	pop    %rbp
  111bc4:	c3                   	ret    
  111bc5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  111bcc:	00 00 00 
  111bcf:	90                   	nop

0000000000111bd0 <_Bfree>:
  111bd0:	48 85 f6             	test   %rsi,%rsi
  111bd3:	74 13                	je     111be8 <_Bfree+0x18>
  111bd5:	48 8b 47 78          	mov    0x78(%rdi),%rax
  111bd9:	48 63 4e 08          	movslq 0x8(%rsi),%rcx
  111bdd:	48 8b 14 c8          	mov    (%rax,%rcx,8),%rdx
  111be1:	48 89 16             	mov    %rdx,(%rsi)
  111be4:	48 89 34 c8          	mov    %rsi,(%rax,%rcx,8)
  111be8:	c3                   	ret    
  111be9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000111bf0 <__multadd>:
  111bf0:	55                   	push   %rbp
  111bf1:	41 57                	push   %r15
  111bf3:	41 56                	push   %r14
  111bf5:	41 55                	push   %r13
  111bf7:	41 54                	push   %r12
  111bf9:	53                   	push   %rbx
  111bfa:	50                   	push   %rax
  111bfb:	89 cd                	mov    %ecx,%ebp
  111bfd:	48 89 f3             	mov    %rsi,%rbx
  111c00:	49 89 fe             	mov    %rdi,%r14
  111c03:	4c 63 6e 14          	movslq 0x14(%rsi),%r13
  111c07:	31 c0                	xor    %eax,%eax
  111c09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  111c10:	8b 4c 83 18          	mov    0x18(%rbx,%rax,4),%ecx
  111c14:	0f b7 f1             	movzwl %cx,%esi
  111c17:	0f af f2             	imul   %edx,%esi
  111c1a:	01 ee                	add    %ebp,%esi
  111c1c:	c1 e9 10             	shr    $0x10,%ecx
  111c1f:	0f af ca             	imul   %edx,%ecx
  111c22:	0f b7 fe             	movzwl %si,%edi
  111c25:	c1 ee 10             	shr    $0x10,%esi
  111c28:	01 ce                	add    %ecx,%esi
  111c2a:	89 f5                	mov    %esi,%ebp
  111c2c:	c1 ed 10             	shr    $0x10,%ebp
  111c2f:	c1 e6 10             	shl    $0x10,%esi
  111c32:	09 f7                	or     %esi,%edi
  111c34:	89 7c 83 18          	mov    %edi,0x18(%rbx,%rax,4)
  111c38:	48 83 c0 01          	add    $0x1,%rax
  111c3c:	44 39 e8             	cmp    %r13d,%eax
  111c3f:	7c cf                	jl     111c10 <__multadd+0x20>
  111c41:	85 ed                	test   %ebp,%ebp
  111c43:	0f 84 cf 00 00 00    	je     111d18 <__multadd+0x128>
  111c49:	44 3b 6b 0c          	cmp    0xc(%rbx),%r13d
  111c4d:	0f 8c b9 00 00 00    	jl     111d0c <__multadd+0x11c>
  111c53:	4c 63 7b 08          	movslq 0x8(%rbx),%r15
  111c57:	49 8b 46 78          	mov    0x78(%r14),%rax
  111c5b:	48 85 c0             	test   %rax,%rax
  111c5e:	75 1b                	jne    111c7b <__multadd+0x8b>
  111c60:	be 08 00 00 00       	mov    $0x8,%esi
  111c65:	ba 41 00 00 00       	mov    $0x41,%edx
  111c6a:	4c 89 f7             	mov    %r14,%rdi
  111c6d:	e8 ae 1a 00 00       	call   113720 <_calloc_r>
  111c72:	49 89 46 78          	mov    %rax,0x78(%r14)
  111c76:	48 85 c0             	test   %rax,%rax
  111c79:	74 5e                	je     111cd9 <__multadd+0xe9>
  111c7b:	4e 8b 64 f8 08       	mov    0x8(%rax,%r15,8),%r12
  111c80:	4d 85 e4             	test   %r12,%r12
  111c83:	74 0b                	je     111c90 <__multadd+0xa0>
  111c85:	49 8b 0c 24          	mov    (%r12),%rcx
  111c89:	4a 89 4c f8 08       	mov    %rcx,0x8(%rax,%r15,8)
  111c8e:	eb 3e                	jmp    111cce <__multadd+0xde>
  111c90:	41 83 c7 01          	add    $0x1,%r15d
  111c94:	b8 01 00 00 00       	mov    $0x1,%eax
  111c99:	44 89 f9             	mov    %r15d,%ecx
  111c9c:	d3 e0                	shl    %cl,%eax
  111c9e:	89 44 24 04          	mov    %eax,0x4(%rsp)
  111ca2:	48 98                	cltq   
  111ca4:	48 8d 14 85 1c 00 00 	lea    0x1c(,%rax,4),%rdx
  111cab:	00 
  111cac:	be 01 00 00 00       	mov    $0x1,%esi
  111cb1:	4c 89 f7             	mov    %r14,%rdi
  111cb4:	e8 67 1a 00 00       	call   113720 <_calloc_r>
  111cb9:	48 85 c0             	test   %rax,%rax
  111cbc:	74 1b                	je     111cd9 <__multadd+0xe9>
  111cbe:	49 89 c4             	mov    %rax,%r12
  111cc1:	44 89 78 08          	mov    %r15d,0x8(%rax)
  111cc5:	8b 44 24 04          	mov    0x4(%rsp),%eax
  111cc9:	41 89 44 24 0c       	mov    %eax,0xc(%r12)
  111cce:	49 c7 44 24 10 00 00 	movq   $0x0,0x10(%r12)
  111cd5:	00 00 
  111cd7:	eb 03                	jmp    111cdc <__multadd+0xec>
  111cd9:	45 31 e4             	xor    %r12d,%r12d
  111cdc:	49 8d 7c 24 10       	lea    0x10(%r12),%rdi
  111ce1:	48 8d 73 10          	lea    0x10(%rbx),%rsi
  111ce5:	48 63 43 14          	movslq 0x14(%rbx),%rax
  111ce9:	48 8d 14 85 08 00 00 	lea    0x8(,%rax,4),%rdx
  111cf0:	00 
  111cf1:	e8 0a 94 ff ff       	call   10b100 <memcpy>
  111cf6:	49 8b 46 78          	mov    0x78(%r14),%rax
  111cfa:	48 63 4b 08          	movslq 0x8(%rbx),%rcx
  111cfe:	48 8b 14 c8          	mov    (%rax,%rcx,8),%rdx
  111d02:	48 89 13             	mov    %rdx,(%rbx)
  111d05:	48 89 1c c8          	mov    %rbx,(%rax,%rcx,8)
  111d09:	4c 89 e3             	mov    %r12,%rbx
  111d0c:	41 8d 45 01          	lea    0x1(%r13),%eax
  111d10:	42 89 6c ab 18       	mov    %ebp,0x18(%rbx,%r13,4)
  111d15:	89 43 14             	mov    %eax,0x14(%rbx)
  111d18:	48 89 d8             	mov    %rbx,%rax
  111d1b:	48 83 c4 08          	add    $0x8,%rsp
  111d1f:	5b                   	pop    %rbx
  111d20:	41 5c                	pop    %r12
  111d22:	41 5d                	pop    %r13
  111d24:	41 5e                	pop    %r14
  111d26:	41 5f                	pop    %r15
  111d28:	5d                   	pop    %rbp
  111d29:	c3                   	ret    
  111d2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000111d30 <__s2b>:
  111d30:	55                   	push   %rbp
  111d31:	41 57                	push   %r15
  111d33:	41 56                	push   %r14
  111d35:	41 55                	push   %r13
  111d37:	41 54                	push   %r12
  111d39:	53                   	push   %rbx
  111d3a:	50                   	push   %rax
  111d3b:	45 89 c5             	mov    %r8d,%r13d
  111d3e:	41 89 ce             	mov    %ecx,%r14d
  111d41:	41 89 d4             	mov    %edx,%r12d
  111d44:	49 89 f7             	mov    %rsi,%r15
  111d47:	48 89 fb             	mov    %rdi,%rbx
  111d4a:	31 ed                	xor    %ebp,%ebp
  111d4c:	83 f9 0a             	cmp    $0xa,%ecx
  111d4f:	7c 38                	jl     111d89 <__s2b+0x59>
  111d51:	41 8d 46 08          	lea    0x8(%r14),%eax
  111d55:	48 98                	cltq   
  111d57:	48 69 c0 39 8e e3 38 	imul   $0x38e38e39,%rax,%rax
  111d5e:	48 89 c1             	mov    %rax,%rcx
  111d61:	48 c1 e9 3f          	shr    $0x3f,%rcx
  111d65:	48 c1 f8 21          	sar    $0x21,%rax
  111d69:	01 c8                	add    %ecx,%eax
  111d6b:	31 ed                	xor    %ebp,%ebp
  111d6d:	b9 01 00 00 00       	mov    $0x1,%ecx
  111d72:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  111d79:	00 00 00 
  111d7c:	0f 1f 40 00          	nopl   0x0(%rax)
  111d80:	01 c9                	add    %ecx,%ecx
  111d82:	83 c5 01             	add    $0x1,%ebp
  111d85:	39 c8                	cmp    %ecx,%eax
  111d87:	7f f7                	jg     111d80 <__s2b+0x50>
  111d89:	48 8b 4b 78          	mov    0x78(%rbx),%rcx
  111d8d:	48 85 c9             	test   %rcx,%rcx
  111d90:	75 22                	jne    111db4 <__s2b+0x84>
  111d92:	be 08 00 00 00       	mov    $0x8,%esi
  111d97:	ba 41 00 00 00       	mov    $0x41,%edx
  111d9c:	48 89 df             	mov    %rbx,%rdi
  111d9f:	e8 7c 19 00 00       	call   113720 <_calloc_r>
  111da4:	48 89 c1             	mov    %rax,%rcx
  111da7:	48 89 43 78          	mov    %rax,0x78(%rbx)
  111dab:	48 85 c0             	test   %rax,%rax
  111dae:	0f 84 0c 01 00 00    	je     111ec0 <__s2b+0x190>
  111db4:	89 ea                	mov    %ebp,%edx
  111db6:	48 8b 04 d1          	mov    (%rcx,%rdx,8),%rax
  111dba:	48 85 c0             	test   %rax,%rax
  111dbd:	74 09                	je     111dc8 <__s2b+0x98>
  111dbf:	48 8b 30             	mov    (%rax),%rsi
  111dc2:	48 89 34 d1          	mov    %rsi,(%rcx,%rdx,8)
  111dc6:	eb 3b                	jmp    111e03 <__s2b+0xd3>
  111dc8:	4c 89 24 24          	mov    %r12,(%rsp)
  111dcc:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  111dd2:	89 e9                	mov    %ebp,%ecx
  111dd4:	41 d3 e4             	shl    %cl,%r12d
  111dd7:	49 63 c4             	movslq %r12d,%rax
  111dda:	48 8d 14 85 1c 00 00 	lea    0x1c(,%rax,4),%rdx
  111de1:	00 
  111de2:	be 01 00 00 00       	mov    $0x1,%esi
  111de7:	48 89 df             	mov    %rbx,%rdi
  111dea:	e8 31 19 00 00       	call   113720 <_calloc_r>
  111def:	48 85 c0             	test   %rax,%rax
  111df2:	0f 84 cf 00 00 00    	je     111ec7 <__s2b+0x197>
  111df8:	89 68 08             	mov    %ebp,0x8(%rax)
  111dfb:	44 89 60 0c          	mov    %r12d,0xc(%rax)
  111dff:	4c 8b 24 24          	mov    (%rsp),%r12
  111e03:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  111e0a:	00 
  111e0b:	44 89 68 18          	mov    %r13d,0x18(%rax)
  111e0f:	c7 40 14 01 00 00 00 	movl   $0x1,0x14(%rax)
  111e16:	41 83 fc 0a          	cmp    $0xa,%r12d
  111e1a:	7c 57                	jl     111e73 <__s2b+0x143>
  111e1c:	45 8d 6c 24 f6       	lea    -0xa(%r12),%r13d
  111e21:	49 83 c5 09          	add    $0x9,%r13
  111e25:	4c 89 24 24          	mov    %r12,(%rsp)
  111e29:	44 89 e5             	mov    %r12d,%ebp
  111e2c:	41 bc 09 00 00 00    	mov    $0x9,%r12d
  111e32:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  111e39:	00 00 00 
  111e3c:	0f 1f 40 00          	nopl   0x0(%rax)
  111e40:	43 0f be 0c 27       	movsbl (%r15,%r12,1),%ecx
  111e45:	83 c1 d0             	add    $0xffffffd0,%ecx
  111e48:	ba 0a 00 00 00       	mov    $0xa,%edx
  111e4d:	48 89 df             	mov    %rbx,%rdi
  111e50:	48 89 c6             	mov    %rax,%rsi
  111e53:	e8 98 fd ff ff       	call   111bf0 <__multadd>
  111e58:	49 83 c4 01          	add    $0x1,%r12
  111e5c:	44 39 e5             	cmp    %r12d,%ebp
  111e5f:	75 df                	jne    111e40 <__s2b+0x110>
  111e61:	4d 01 ef             	add    %r13,%r15
  111e64:	49 83 c7 02          	add    $0x2,%r15
  111e68:	48 8b 0c 24          	mov    (%rsp),%rcx
  111e6c:	44 39 f1             	cmp    %r14d,%ecx
  111e6f:	7c 10                	jl     111e81 <__s2b+0x151>
  111e71:	eb 3e                	jmp    111eb1 <__s2b+0x181>
  111e73:	49 83 c7 0a          	add    $0xa,%r15
  111e77:	b9 09 00 00 00       	mov    $0x9,%ecx
  111e7c:	44 39 f1             	cmp    %r14d,%ecx
  111e7f:	7d 30                	jge    111eb1 <__s2b+0x181>
  111e81:	41 29 ce             	sub    %ecx,%r14d
  111e84:	31 ed                	xor    %ebp,%ebp
  111e86:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  111e8d:	00 00 00 
  111e90:	41 0f be 0c 2f       	movsbl (%r15,%rbp,1),%ecx
  111e95:	83 c1 d0             	add    $0xffffffd0,%ecx
  111e98:	ba 0a 00 00 00       	mov    $0xa,%edx
  111e9d:	48 89 df             	mov    %rbx,%rdi
  111ea0:	48 89 c6             	mov    %rax,%rsi
  111ea3:	e8 48 fd ff ff       	call   111bf0 <__multadd>
  111ea8:	48 83 c5 01          	add    $0x1,%rbp
  111eac:	41 39 ee             	cmp    %ebp,%r14d
  111eaf:	75 df                	jne    111e90 <__s2b+0x160>
  111eb1:	48 83 c4 08          	add    $0x8,%rsp
  111eb5:	5b                   	pop    %rbx
  111eb6:	41 5c                	pop    %r12
  111eb8:	41 5d                	pop    %r13
  111eba:	41 5e                	pop    %r14
  111ebc:	41 5f                	pop    %r15
  111ebe:	5d                   	pop    %rbp
  111ebf:	c3                   	ret    
  111ec0:	31 c0                	xor    %eax,%eax
  111ec2:	e9 44 ff ff ff       	jmp    111e0b <__s2b+0xdb>
  111ec7:	31 c0                	xor    %eax,%eax
  111ec9:	4c 8b 24 24          	mov    (%rsp),%r12
  111ecd:	e9 39 ff ff ff       	jmp    111e0b <__s2b+0xdb>
  111ed2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  111ed9:	00 00 00 
  111edc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000111ee0 <__hi0bits>:
  111ee0:	31 c0                	xor    %eax,%eax
  111ee2:	81 ff 00 00 01 00    	cmp    $0x10000,%edi
  111ee8:	0f 92 c0             	setb   %al
  111eeb:	89 f9                	mov    %edi,%ecx
  111eed:	c1 e1 10             	shl    $0x10,%ecx
  111ef0:	81 ff ff ff 00 00    	cmp    $0xffff,%edi
  111ef6:	0f 47 cf             	cmova  %edi,%ecx
  111ef9:	c1 e0 04             	shl    $0x4,%eax
  111efc:	8d 50 08             	lea    0x8(%rax),%edx
  111eff:	89 ce                	mov    %ecx,%esi
  111f01:	c1 e6 08             	shl    $0x8,%esi
  111f04:	81 f9 ff ff ff 00    	cmp    $0xffffff,%ecx
  111f0a:	0f 47 f1             	cmova  %ecx,%esi
  111f0d:	0f 47 d0             	cmova  %eax,%edx
  111f10:	89 f0                	mov    %esi,%eax
  111f12:	c1 e0 04             	shl    $0x4,%eax
  111f15:	81 fe ff ff ff 0f    	cmp    $0xfffffff,%esi
  111f1b:	0f 47 c6             	cmova  %esi,%eax
  111f1e:	8d 72 04             	lea    0x4(%rdx),%esi
  111f21:	0f 47 f2             	cmova  %edx,%esi
  111f24:	8d 4e 02             	lea    0x2(%rsi),%ecx
  111f27:	8d 14 85 00 00 00 00 	lea    0x0(,%rax,4),%edx
  111f2e:	3d ff ff ff 3f       	cmp    $0x3fffffff,%eax
  111f33:	0f 47 d0             	cmova  %eax,%edx
  111f36:	0f 47 ce             	cmova  %esi,%ecx
  111f39:	85 d2                	test   %edx,%edx
  111f3b:	78 10                	js     111f4d <__hi0bits+0x6d>
  111f3d:	b8 20 00 00 00       	mov    $0x20,%eax
  111f42:	f7 c2 00 00 00 40    	test   $0x40000000,%edx
  111f48:	74 05                	je     111f4f <__hi0bits+0x6f>
  111f4a:	83 c1 01             	add    $0x1,%ecx
  111f4d:	89 c8                	mov    %ecx,%eax
  111f4f:	c3                   	ret    

0000000000111f50 <__lo0bits>:
  111f50:	8b 0f                	mov    (%rdi),%ecx
  111f52:	f6 c1 07             	test   $0x7,%cl
  111f55:	74 17                	je     111f6e <__lo0bits+0x1e>
  111f57:	31 c0                	xor    %eax,%eax
  111f59:	f6 c1 01             	test   $0x1,%cl
  111f5c:	75 68                	jne    111fc6 <__lo0bits+0x76>
  111f5e:	f6 c1 02             	test   $0x2,%cl
  111f61:	75 64                	jne    111fc7 <__lo0bits+0x77>
  111f63:	c1 e9 02             	shr    $0x2,%ecx
  111f66:	89 0f                	mov    %ecx,(%rdi)
  111f68:	b8 02 00 00 00       	mov    $0x2,%eax
  111f6d:	c3                   	ret    
  111f6e:	89 c8                	mov    %ecx,%eax
  111f70:	c1 e8 10             	shr    $0x10,%eax
  111f73:	31 d2                	xor    %edx,%edx
  111f75:	66 85 c9             	test   %cx,%cx
  111f78:	0f 94 c2             	sete   %dl
  111f7b:	0f 45 c1             	cmovne %ecx,%eax
  111f7e:	c1 e2 04             	shl    $0x4,%edx
  111f81:	8d 4a 08             	lea    0x8(%rdx),%ecx
  111f84:	89 c6                	mov    %eax,%esi
  111f86:	c1 ee 08             	shr    $0x8,%esi
  111f89:	84 c0                	test   %al,%al
  111f8b:	0f 45 ca             	cmovne %edx,%ecx
  111f8e:	0f 45 f0             	cmovne %eax,%esi
  111f91:	44 8d 41 04          	lea    0x4(%rcx),%r8d
  111f95:	89 f2                	mov    %esi,%edx
  111f97:	c1 ea 04             	shr    $0x4,%edx
  111f9a:	40 f6 c6 0f          	test   $0xf,%sil
  111f9e:	44 0f 45 c1          	cmovne %ecx,%r8d
  111fa2:	0f 45 d6             	cmovne %esi,%edx
  111fa5:	41 8d 40 02          	lea    0x2(%r8),%eax
  111fa9:	89 d1                	mov    %edx,%ecx
  111fab:	c1 e9 02             	shr    $0x2,%ecx
  111fae:	f6 c2 03             	test   $0x3,%dl
  111fb1:	41 0f 45 c0          	cmovne %r8d,%eax
  111fb5:	0f 45 ca             	cmovne %edx,%ecx
  111fb8:	f6 c1 01             	test   $0x1,%cl
  111fbb:	75 07                	jne    111fc4 <__lo0bits+0x74>
  111fbd:	d1 e9                	shr    %ecx
  111fbf:	74 10                	je     111fd1 <__lo0bits+0x81>
  111fc1:	83 c0 01             	add    $0x1,%eax
  111fc4:	89 0f                	mov    %ecx,(%rdi)
  111fc6:	c3                   	ret    
  111fc7:	d1 e9                	shr    %ecx
  111fc9:	89 0f                	mov    %ecx,(%rdi)
  111fcb:	b8 01 00 00 00       	mov    $0x1,%eax
  111fd0:	c3                   	ret    
  111fd1:	b8 20 00 00 00       	mov    $0x20,%eax
  111fd6:	c3                   	ret    
  111fd7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  111fde:	00 00 

0000000000111fe0 <__i2b>:
  111fe0:	55                   	push   %rbp
  111fe1:	53                   	push   %rbx
  111fe2:	50                   	push   %rax
  111fe3:	89 f5                	mov    %esi,%ebp
  111fe5:	48 89 fb             	mov    %rdi,%rbx
  111fe8:	48 8b 4f 78          	mov    0x78(%rdi),%rcx
  111fec:	48 85 c9             	test   %rcx,%rcx
  111fef:	75 1e                	jne    11200f <__i2b+0x2f>
  111ff1:	be 08 00 00 00       	mov    $0x8,%esi
  111ff6:	ba 41 00 00 00       	mov    $0x41,%edx
  111ffb:	48 89 df             	mov    %rbx,%rdi
  111ffe:	e8 1d 17 00 00       	call   113720 <_calloc_r>
  112003:	48 89 c1             	mov    %rax,%rcx
  112006:	48 89 43 78          	mov    %rax,0x78(%rbx)
  11200a:	48 85 c0             	test   %rax,%rax
  11200d:	74 41                	je     112050 <__i2b+0x70>
  11200f:	48 8b 41 08          	mov    0x8(%rcx),%rax
  112013:	48 85 c0             	test   %rax,%rax
  112016:	74 09                	je     112021 <__i2b+0x41>
  112018:	48 8b 10             	mov    (%rax),%rdx
  11201b:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  11201f:	eb 25                	jmp    112046 <__i2b+0x66>
  112021:	be 01 00 00 00       	mov    $0x1,%esi
  112026:	ba 24 00 00 00       	mov    $0x24,%edx
  11202b:	48 89 df             	mov    %rbx,%rdi
  11202e:	e8 ed 16 00 00       	call   113720 <_calloc_r>
  112033:	48 85 c0             	test   %rax,%rax
  112036:	74 18                	je     112050 <__i2b+0x70>
  112038:	48 b9 01 00 00 00 02 	movabs $0x200000001,%rcx
  11203f:	00 00 00 
  112042:	48 89 48 08          	mov    %rcx,0x8(%rax)
  112046:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  11204d:	00 
  11204e:	eb 02                	jmp    112052 <__i2b+0x72>
  112050:	31 c0                	xor    %eax,%eax
  112052:	89 68 18             	mov    %ebp,0x18(%rax)
  112055:	c7 40 14 01 00 00 00 	movl   $0x1,0x14(%rax)
  11205c:	48 83 c4 08          	add    $0x8,%rsp
  112060:	5b                   	pop    %rbx
  112061:	5d                   	pop    %rbp
  112062:	c3                   	ret    
  112063:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11206a:	00 00 00 
  11206d:	0f 1f 00             	nopl   (%rax)

0000000000112070 <__multiply>:
  112070:	55                   	push   %rbp
  112071:	41 57                	push   %r15
  112073:	41 56                	push   %r14
  112075:	41 55                	push   %r13
  112077:	41 54                	push   %r12
  112079:	53                   	push   %rbx
  11207a:	48 83 ec 18          	sub    $0x18,%rsp
  11207e:	49 89 f7             	mov    %rsi,%r15
  112081:	8b 46 14             	mov    0x14(%rsi),%eax
  112084:	3b 42 14             	cmp    0x14(%rdx),%eax
  112087:	49 89 d6             	mov    %rdx,%r14
  11208a:	4c 0f 4c f6          	cmovl  %rsi,%r14
  11208e:	4c 0f 4c fa          	cmovl  %rdx,%r15
  112092:	4d 63 4f 14          	movslq 0x14(%r15),%r9
  112096:	4d 63 46 14          	movslq 0x14(%r14),%r8
  11209a:	4f 8d 2c 08          	lea    (%r8,%r9,1),%r13
  11209e:	31 ed                	xor    %ebp,%ebp
  1120a0:	45 3b 6f 0c          	cmp    0xc(%r15),%r13d
  1120a4:	4d 63 67 08          	movslq 0x8(%r15),%r12
  1120a8:	0f 9f c3             	setg   %bl
  1120ab:	48 8b 4f 78          	mov    0x78(%rdi),%rcx
  1120af:	48 85 c9             	test   %rcx,%rcx
  1120b2:	75 3b                	jne    1120ef <__multiply+0x7f>
  1120b4:	be 08 00 00 00       	mov    $0x8,%esi
  1120b9:	ba 41 00 00 00       	mov    $0x41,%edx
  1120be:	4c 89 04 24          	mov    %r8,(%rsp)
  1120c2:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
  1120c7:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  1120cc:	e8 4f 16 00 00       	call   113720 <_calloc_r>
  1120d1:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  1120d6:	4c 8b 04 24          	mov    (%rsp),%r8
  1120da:	4c 8b 4c 24 10       	mov    0x10(%rsp),%r9
  1120df:	48 89 c1             	mov    %rax,%rcx
  1120e2:	48 89 47 78          	mov    %rax,0x78(%rdi)
  1120e6:	48 85 c0             	test   %rax,%rax
  1120e9:	0f 84 1e 03 00 00    	je     11240d <__multiply+0x39d>
  1120ef:	40 88 dd             	mov    %bl,%bpl
  1120f2:	49 01 ec             	add    %rbp,%r12
  1120f5:	4a 8b 04 e1          	mov    (%rcx,%r12,8),%rax
  1120f9:	48 85 c0             	test   %rax,%rax
  1120fc:	74 09                	je     112107 <__multiply+0x97>
  1120fe:	48 8b 10             	mov    (%rax),%rdx
  112101:	4a 89 14 e1          	mov    %rdx,(%rcx,%r12,8)
  112105:	eb 3d                	jmp    112144 <__multiply+0xd4>
  112107:	4c 89 04 24          	mov    %r8,(%rsp)
  11210b:	4c 89 cd             	mov    %r9,%rbp
  11210e:	bb 01 00 00 00       	mov    $0x1,%ebx
  112113:	44 89 e1             	mov    %r12d,%ecx
  112116:	d3 e3                	shl    %cl,%ebx
  112118:	48 63 c3             	movslq %ebx,%rax
  11211b:	48 8d 14 85 1c 00 00 	lea    0x1c(,%rax,4),%rdx
  112122:	00 
  112123:	be 01 00 00 00       	mov    $0x1,%esi
  112128:	e8 f3 15 00 00       	call   113720 <_calloc_r>
  11212d:	48 85 c0             	test   %rax,%rax
  112130:	0f 84 de 02 00 00    	je     112414 <__multiply+0x3a4>
  112136:	44 89 60 08          	mov    %r12d,0x8(%rax)
  11213a:	89 58 0c             	mov    %ebx,0xc(%rax)
  11213d:	49 89 e9             	mov    %rbp,%r9
  112140:	4c 8b 04 24          	mov    (%rsp),%r8
  112144:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  11214b:	00 
  11214c:	4c 8d 58 18          	lea    0x18(%rax),%r11
  112150:	45 85 ed             	test   %r13d,%r13d
  112153:	0f 8e 46 01 00 00    	jle    11229f <__multiply+0x22f>
  112159:	4a 8d 14 a8          	lea    (%rax,%r13,4),%rdx
  11215d:	48 83 c2 18          	add    $0x18,%rdx
  112161:	48 8d 48 1c          	lea    0x1c(%rax),%rcx
  112165:	48 39 ca             	cmp    %rcx,%rdx
  112168:	48 0f 47 ca          	cmova  %rdx,%rcx
  11216c:	48 c7 c6 e7 ff ff ff 	mov    $0xffffffffffffffe7,%rsi
  112173:	48 29 c6             	sub    %rax,%rsi
  112176:	48 01 ce             	add    %rcx,%rsi
  112179:	48 c1 ee 02          	shr    $0x2,%rsi
  11217d:	48 83 c6 01          	add    $0x1,%rsi
  112181:	4c 89 d9             	mov    %r11,%rcx
  112184:	48 83 fe 08          	cmp    $0x8,%rsi
  112188:	0f 82 02 01 00 00    	jb     112290 <__multiply+0x220>
  11218e:	49 89 f4             	mov    %rsi,%r12
  112191:	49 83 e4 f8          	and    $0xfffffffffffffff8,%r12
  112195:	49 8d 7c 24 f8       	lea    -0x8(%r12),%rdi
  11219a:	48 89 f9             	mov    %rdi,%rcx
  11219d:	48 c1 e9 03          	shr    $0x3,%rcx
  1121a1:	48 83 c1 01          	add    $0x1,%rcx
  1121a5:	89 cd                	mov    %ecx,%ebp
  1121a7:	83 e5 07             	and    $0x7,%ebp
  1121aa:	48 83 ff 38          	cmp    $0x38,%rdi
  1121ae:	73 10                	jae    1121c0 <__multiply+0x150>
  1121b0:	31 db                	xor    %ebx,%ebx
  1121b2:	48 85 ed             	test   %rbp,%rbp
  1121b5:	0f 85 9f 00 00 00    	jne    11225a <__multiply+0x1ea>
  1121bb:	e9 c1 00 00 00       	jmp    112281 <__multiply+0x211>
  1121c0:	bf 01 00 00 00       	mov    $0x1,%edi
  1121c5:	48 29 cf             	sub    %rcx,%rdi
  1121c8:	48 01 ef             	add    %rbp,%rdi
  1121cb:	48 83 c7 ff          	add    $0xffffffffffffffff,%rdi
  1121cf:	31 db                	xor    %ebx,%ebx
  1121d1:	0f 57 c0             	xorps  %xmm0,%xmm0
  1121d4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1121db:	00 00 00 
  1121de:	66 90                	xchg   %ax,%ax
  1121e0:	0f 11 44 98 18       	movups %xmm0,0x18(%rax,%rbx,4)
  1121e5:	0f 11 44 98 28       	movups %xmm0,0x28(%rax,%rbx,4)
  1121ea:	0f 11 44 98 38       	movups %xmm0,0x38(%rax,%rbx,4)
  1121ef:	0f 11 44 98 48       	movups %xmm0,0x48(%rax,%rbx,4)
  1121f4:	0f 11 44 98 58       	movups %xmm0,0x58(%rax,%rbx,4)
  1121f9:	0f 11 44 98 68       	movups %xmm0,0x68(%rax,%rbx,4)
  1121fe:	0f 11 44 98 78       	movups %xmm0,0x78(%rax,%rbx,4)
  112203:	0f 11 84 98 88 00 00 	movups %xmm0,0x88(%rax,%rbx,4)
  11220a:	00 
  11220b:	0f 11 84 98 98 00 00 	movups %xmm0,0x98(%rax,%rbx,4)
  112212:	00 
  112213:	0f 11 84 98 a8 00 00 	movups %xmm0,0xa8(%rax,%rbx,4)
  11221a:	00 
  11221b:	0f 11 84 98 b8 00 00 	movups %xmm0,0xb8(%rax,%rbx,4)
  112222:	00 
  112223:	0f 11 84 98 c8 00 00 	movups %xmm0,0xc8(%rax,%rbx,4)
  11222a:	00 
  11222b:	0f 11 84 98 d8 00 00 	movups %xmm0,0xd8(%rax,%rbx,4)
  112232:	00 
  112233:	0f 11 84 98 e8 00 00 	movups %xmm0,0xe8(%rax,%rbx,4)
  11223a:	00 
  11223b:	0f 11 84 98 f8 00 00 	movups %xmm0,0xf8(%rax,%rbx,4)
  112242:	00 
  112243:	0f 11 84 98 08 01 00 	movups %xmm0,0x108(%rax,%rbx,4)
  11224a:	00 
  11224b:	48 83 c3 40          	add    $0x40,%rbx
  11224f:	48 83 c7 08          	add    $0x8,%rdi
  112253:	75 8b                	jne    1121e0 <__multiply+0x170>
  112255:	48 85 ed             	test   %rbp,%rbp
  112258:	74 27                	je     112281 <__multiply+0x211>
  11225a:	48 8d 0c 98          	lea    (%rax,%rbx,4),%rcx
  11225e:	48 83 c1 28          	add    $0x28,%rcx
  112262:	48 f7 dd             	neg    %rbp
  112265:	0f 57 c0             	xorps  %xmm0,%xmm0
  112268:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  11226f:	00 
  112270:	0f 11 41 f0          	movups %xmm0,-0x10(%rcx)
  112274:	0f 11 01             	movups %xmm0,(%rcx)
  112277:	48 83 c1 20          	add    $0x20,%rcx
  11227b:	48 83 c5 01          	add    $0x1,%rbp
  11227f:	75 ef                	jne    112270 <__multiply+0x200>
  112281:	4c 39 e6             	cmp    %r12,%rsi
  112284:	74 19                	je     11229f <__multiply+0x22f>
  112286:	4a 8d 0c a0          	lea    (%rax,%r12,4),%rcx
  11228a:	48 83 c1 18          	add    $0x18,%rcx
  11228e:	66 90                	xchg   %ax,%ax
  112290:	c7 01 00 00 00 00    	movl   $0x0,(%rcx)
  112296:	48 83 c1 04          	add    $0x4,%rcx
  11229a:	48 39 d1             	cmp    %rdx,%rcx
  11229d:	72 f1                	jb     112290 <__multiply+0x220>
  11229f:	45 85 c0             	test   %r8d,%r8d
  1122a2:	0f 8e 2b 01 00 00    	jle    1123d3 <__multiply+0x363>
  1122a8:	4f 8d 14 8f          	lea    (%r15,%r9,4),%r10
  1122ac:	49 83 c2 18          	add    $0x18,%r10
  1122b0:	4f 8d 04 86          	lea    (%r14,%r8,4),%r8
  1122b4:	49 83 c0 18          	add    $0x18,%r8
  1122b8:	49 83 c6 18          	add    $0x18,%r14
  1122bc:	49 8d 4f 1c          	lea    0x1c(%r15),%rcx
  1122c0:	49 39 ca             	cmp    %rcx,%r10
  1122c3:	49 0f 47 ca          	cmova  %r10,%rcx
  1122c7:	48 c7 c2 e7 ff ff ff 	mov    $0xffffffffffffffe7,%rdx
  1122ce:	4c 29 fa             	sub    %r15,%rdx
  1122d1:	4d 8d 67 18          	lea    0x18(%r15),%r12
  1122d5:	4c 8d 0c 11          	lea    (%rcx,%rdx,1),%r9
  1122d9:	49 83 c1 1c          	add    $0x1c,%r9
  1122dd:	49 83 e1 fc          	and    $0xfffffffffffffffc,%r9
  1122e1:	49 01 c1             	add    %rax,%r9
  1122e4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1122eb:	00 00 00 
  1122ee:	66 90                	xchg   %ax,%ax
  1122f0:	41 8b 1e             	mov    (%r14),%ebx
  1122f3:	41 89 df             	mov    %ebx,%r15d
  1122f6:	41 81 e7 ff ff 00 00 	and    $0xffff,%r15d
  1122fd:	74 60                	je     11235f <__multiply+0x2ef>
  1122ff:	31 db                	xor    %ebx,%ebx
  112301:	31 f6                	xor    %esi,%esi
  112303:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11230a:	00 00 00 
  11230d:	0f 1f 00             	nopl   (%rax)
  112310:	41 8b 14 1c          	mov    (%r12,%rbx,1),%edx
  112314:	0f b7 ea             	movzwl %dx,%ebp
  112317:	41 0f af ef          	imul   %r15d,%ebp
  11231b:	41 8b 0c 1b          	mov    (%r11,%rbx,1),%ecx
  11231f:	0f b7 f9             	movzwl %cx,%edi
  112322:	01 f7                	add    %esi,%edi
  112324:	01 ef                	add    %ebp,%edi
  112326:	0f b7 ef             	movzwl %di,%ebp
  112329:	c1 ef 10             	shr    $0x10,%edi
  11232c:	c1 ea 10             	shr    $0x10,%edx
  11232f:	41 0f af d7          	imul   %r15d,%edx
  112333:	c1 e9 10             	shr    $0x10,%ecx
  112336:	01 d1                	add    %edx,%ecx
  112338:	01 f9                	add    %edi,%ecx
  11233a:	89 ce                	mov    %ecx,%esi
  11233c:	c1 ee 10             	shr    $0x10,%esi
  11233f:	c1 e1 10             	shl    $0x10,%ecx
  112342:	09 cd                	or     %ecx,%ebp
  112344:	41 89 2c 1b          	mov    %ebp,(%r11,%rbx,1)
  112348:	49 8d 0c 1c          	lea    (%r12,%rbx,1),%rcx
  11234c:	48 83 c1 04          	add    $0x4,%rcx
  112350:	48 83 c3 04          	add    $0x4,%rbx
  112354:	4c 39 d1             	cmp    %r10,%rcx
  112357:	72 b7                	jb     112310 <__multiply+0x2a0>
  112359:	41 89 31             	mov    %esi,(%r9)
  11235c:	41 8b 1e             	mov    (%r14),%ebx
  11235f:	c1 eb 10             	shr    $0x10,%ebx
  112362:	74 5a                	je     1123be <__multiply+0x34e>
  112364:	41 8b 2b             	mov    (%r11),%ebp
  112367:	31 f6                	xor    %esi,%esi
  112369:	31 c9                	xor    %ecx,%ecx
  11236b:	89 ea                	mov    %ebp,%edx
  11236d:	0f 1f 00             	nopl   (%rax)
  112370:	41 0f b7 3c 34       	movzwl (%r12,%rsi,1),%edi
  112375:	0f af fb             	imul   %ebx,%edi
  112378:	c1 ed 10             	shr    $0x10,%ebp
  11237b:	01 cd                	add    %ecx,%ebp
  11237d:	01 fd                	add    %edi,%ebp
  11237f:	89 e9                	mov    %ebp,%ecx
  112381:	c1 e9 10             	shr    $0x10,%ecx
  112384:	c1 e5 10             	shl    $0x10,%ebp
  112387:	0f b7 d2             	movzwl %dx,%edx
  11238a:	09 ea                	or     %ebp,%edx
  11238c:	41 89 14 33          	mov    %edx,(%r11,%rsi,1)
  112390:	41 0f b7 7c 34 02    	movzwl 0x2(%r12,%rsi,1),%edi
  112396:	0f af fb             	imul   %ebx,%edi
  112399:	41 8b 6c 33 04       	mov    0x4(%r11,%rsi,1),%ebp
  11239e:	0f b7 d5             	movzwl %bp,%edx
  1123a1:	01 fa                	add    %edi,%edx
  1123a3:	01 ca                	add    %ecx,%edx
  1123a5:	89 d1                	mov    %edx,%ecx
  1123a7:	c1 e9 10             	shr    $0x10,%ecx
  1123aa:	49 8d 3c 34          	lea    (%r12,%rsi,1),%rdi
  1123ae:	48 83 c7 04          	add    $0x4,%rdi
  1123b2:	48 83 c6 04          	add    $0x4,%rsi
  1123b6:	4c 39 d7             	cmp    %r10,%rdi
  1123b9:	72 b5                	jb     112370 <__multiply+0x300>
  1123bb:	41 89 11             	mov    %edx,(%r9)
  1123be:	49 83 c6 04          	add    $0x4,%r14
  1123c2:	49 83 c3 04          	add    $0x4,%r11
  1123c6:	49 83 c1 04          	add    $0x4,%r9
  1123ca:	4d 39 c6             	cmp    %r8,%r14
  1123cd:	0f 82 1d ff ff ff    	jb     1122f0 <__multiply+0x280>
  1123d3:	45 85 ed             	test   %r13d,%r13d
  1123d6:	7e 20                	jle    1123f8 <__multiply+0x388>
  1123d8:	4a 8d 0c a8          	lea    (%rax,%r13,4),%rcx
  1123dc:	48 83 c1 14          	add    $0x14,%rcx
  1123e0:	83 39 00             	cmpl   $0x0,(%rcx)
  1123e3:	75 13                	jne    1123f8 <__multiply+0x388>
  1123e5:	41 8d 55 ff          	lea    -0x1(%r13),%edx
  1123e9:	48 83 c1 fc          	add    $0xfffffffffffffffc,%rcx
  1123ed:	41 83 fd 01          	cmp    $0x1,%r13d
  1123f1:	41 89 d5             	mov    %edx,%r13d
  1123f4:	7f ea                	jg     1123e0 <__multiply+0x370>
  1123f6:	eb 03                	jmp    1123fb <__multiply+0x38b>
  1123f8:	44 89 ea             	mov    %r13d,%edx
  1123fb:	89 50 14             	mov    %edx,0x14(%rax)
  1123fe:	48 83 c4 18          	add    $0x18,%rsp
  112402:	5b                   	pop    %rbx
  112403:	41 5c                	pop    %r12
  112405:	41 5d                	pop    %r13
  112407:	41 5e                	pop    %r14
  112409:	41 5f                	pop    %r15
  11240b:	5d                   	pop    %rbp
  11240c:	c3                   	ret    
  11240d:	31 c0                	xor    %eax,%eax
  11240f:	e9 38 fd ff ff       	jmp    11214c <__multiply+0xdc>
  112414:	31 c0                	xor    %eax,%eax
  112416:	49 89 e9             	mov    %rbp,%r9
  112419:	4c 8b 04 24          	mov    (%rsp),%r8
  11241d:	e9 2a fd ff ff       	jmp    11214c <__multiply+0xdc>
  112422:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  112429:	00 00 00 
  11242c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000112430 <__pow5mult>:
  112430:	55                   	push   %rbp
  112431:	41 57                	push   %r15
  112433:	41 56                	push   %r14
  112435:	53                   	push   %rbx
  112436:	50                   	push   %rax
  112437:	89 d5                	mov    %edx,%ebp
  112439:	49 89 f7             	mov    %rsi,%r15
  11243c:	49 89 fe             	mov    %rdi,%r14
  11243f:	89 d0                	mov    %edx,%eax
  112441:	83 e0 03             	and    $0x3,%eax
  112444:	74 1d                	je     112463 <__pow5mult+0x33>
  112446:	48 98                	cltq   
  112448:	48 8d 0d e1 f8 fe ff 	lea    -0x1071f(%rip),%rcx        # 101d30 <__pow5mult.p05>
  11244f:	8b 54 81 fc          	mov    -0x4(%rcx,%rax,4),%edx
  112453:	31 c9                	xor    %ecx,%ecx
  112455:	4c 89 f7             	mov    %r14,%rdi
  112458:	4c 89 fe             	mov    %r15,%rsi
  11245b:	e8 90 f7 ff ff       	call   111bf0 <__multadd>
  112460:	49 89 c7             	mov    %rax,%r15
  112463:	c1 fd 02             	sar    $0x2,%ebp
  112466:	0f 84 e1 00 00 00    	je     11254d <__pow5mult+0x11d>
  11246c:	49 8b 46 70          	mov    0x70(%r14),%rax
  112470:	48 85 c0             	test   %rax,%rax
  112473:	0f 85 83 00 00 00    	jne    1124fc <__pow5mult+0xcc>
  112479:	49 8b 4e 78          	mov    0x78(%r14),%rcx
  11247d:	48 85 c9             	test   %rcx,%rcx
  112480:	75 1e                	jne    1124a0 <__pow5mult+0x70>
  112482:	be 08 00 00 00       	mov    $0x8,%esi
  112487:	ba 41 00 00 00       	mov    $0x41,%edx
  11248c:	4c 89 f7             	mov    %r14,%rdi
  11248f:	e8 8c 12 00 00       	call   113720 <_calloc_r>
  112494:	48 89 c1             	mov    %rax,%rcx
  112497:	49 89 46 78          	mov    %rax,0x78(%r14)
  11249b:	48 85 c0             	test   %rax,%rax
  11249e:	74 41                	je     1124e1 <__pow5mult+0xb1>
  1124a0:	48 8b 41 08          	mov    0x8(%rcx),%rax
  1124a4:	48 85 c0             	test   %rax,%rax
  1124a7:	74 09                	je     1124b2 <__pow5mult+0x82>
  1124a9:	48 8b 10             	mov    (%rax),%rdx
  1124ac:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  1124b0:	eb 25                	jmp    1124d7 <__pow5mult+0xa7>
  1124b2:	be 01 00 00 00       	mov    $0x1,%esi
  1124b7:	ba 24 00 00 00       	mov    $0x24,%edx
  1124bc:	4c 89 f7             	mov    %r14,%rdi
  1124bf:	e8 5c 12 00 00       	call   113720 <_calloc_r>
  1124c4:	48 85 c0             	test   %rax,%rax
  1124c7:	74 18                	je     1124e1 <__pow5mult+0xb1>
  1124c9:	48 b9 01 00 00 00 02 	movabs $0x200000001,%rcx
  1124d0:	00 00 00 
  1124d3:	48 89 48 08          	mov    %rcx,0x8(%rax)
  1124d7:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  1124de:	00 
  1124df:	eb 02                	jmp    1124e3 <__pow5mult+0xb3>
  1124e1:	31 c0                	xor    %eax,%eax
  1124e3:	48 b9 01 00 00 00 71 	movabs $0x27100000001,%rcx
  1124ea:	02 00 00 
  1124ed:	48 89 48 14          	mov    %rcx,0x14(%rax)
  1124f1:	49 89 46 70          	mov    %rax,0x70(%r14)
  1124f5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  1124fc:	48 89 c3             	mov    %rax,%rbx
  1124ff:	40 f6 c5 01          	test   $0x1,%bpl
  112503:	74 29                	je     11252e <__pow5mult+0xfe>
  112505:	4c 89 f7             	mov    %r14,%rdi
  112508:	4c 89 fe             	mov    %r15,%rsi
  11250b:	48 89 da             	mov    %rbx,%rdx
  11250e:	e8 5d fb ff ff       	call   112070 <__multiply>
  112513:	4d 85 ff             	test   %r15,%r15
  112516:	74 13                	je     11252b <__pow5mult+0xfb>
  112518:	49 8b 4e 78          	mov    0x78(%r14),%rcx
  11251c:	49 63 57 08          	movslq 0x8(%r15),%rdx
  112520:	48 8b 34 d1          	mov    (%rcx,%rdx,8),%rsi
  112524:	49 89 37             	mov    %rsi,(%r15)
  112527:	4c 89 3c d1          	mov    %r15,(%rcx,%rdx,8)
  11252b:	49 89 c7             	mov    %rax,%r15
  11252e:	d1 fd                	sar    %ebp
  112530:	74 1b                	je     11254d <__pow5mult+0x11d>
  112532:	48 8b 03             	mov    (%rbx),%rax
  112535:	48 85 c0             	test   %rax,%rax
  112538:	75 c2                	jne    1124fc <__pow5mult+0xcc>
  11253a:	4c 89 f7             	mov    %r14,%rdi
  11253d:	48 89 de             	mov    %rbx,%rsi
  112540:	48 89 da             	mov    %rbx,%rdx
  112543:	e8 28 fb ff ff       	call   112070 <__multiply>
  112548:	48 89 03             	mov    %rax,(%rbx)
  11254b:	eb a8                	jmp    1124f5 <__pow5mult+0xc5>
  11254d:	4c 89 f8             	mov    %r15,%rax
  112550:	48 83 c4 08          	add    $0x8,%rsp
  112554:	5b                   	pop    %rbx
  112555:	41 5e                	pop    %r14
  112557:	41 5f                	pop    %r15
  112559:	5d                   	pop    %rbp
  11255a:	c3                   	ret    
  11255b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000112560 <__lshift>:
  112560:	55                   	push   %rbp
  112561:	41 57                	push   %r15
  112563:	41 56                	push   %r14
  112565:	41 55                	push   %r13
  112567:	41 54                	push   %r12
  112569:	53                   	push   %rbx
  11256a:	48 83 ec 18          	sub    $0x18,%rsp
  11256e:	41 89 d7             	mov    %edx,%r15d
  112571:	49 89 f6             	mov    %rsi,%r14
  112574:	41 89 d5             	mov    %edx,%r13d
  112577:	41 c1 fd 05          	sar    $0x5,%r13d
  11257b:	8b 6e 08             	mov    0x8(%rsi),%ebp
  11257e:	8b 46 0c             	mov    0xc(%rsi),%eax
  112581:	8b 5e 14             	mov    0x14(%rsi),%ebx
  112584:	46 8d 24 2b          	lea    (%rbx,%r13,1),%r12d
  112588:	41 39 c4             	cmp    %eax,%r12d
  11258b:	7c 0d                	jl     11259a <__lshift+0x3a>
  11258d:	0f 1f 00             	nopl   (%rax)
  112590:	83 c5 01             	add    $0x1,%ebp
  112593:	01 c0                	add    %eax,%eax
  112595:	41 39 c4             	cmp    %eax,%r12d
  112598:	7d f6                	jge    112590 <__lshift+0x30>
  11259a:	48 8b 4f 78          	mov    0x78(%rdi),%rcx
  11259e:	48 85 c9             	test   %rcx,%rcx
  1125a1:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  1125a6:	75 24                	jne    1125cc <__lshift+0x6c>
  1125a8:	be 08 00 00 00       	mov    $0x8,%esi
  1125ad:	ba 41 00 00 00       	mov    $0x41,%edx
  1125b2:	e8 69 11 00 00       	call   113720 <_calloc_r>
  1125b7:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  1125bc:	48 89 c1             	mov    %rax,%rcx
  1125bf:	48 89 47 78          	mov    %rax,0x78(%rdi)
  1125c3:	48 85 c0             	test   %rax,%rax
  1125c6:	0f 84 a9 02 00 00    	je     112875 <__lshift+0x315>
  1125cc:	48 63 d5             	movslq %ebp,%rdx
  1125cf:	48 8b 04 d1          	mov    (%rcx,%rdx,8),%rax
  1125d3:	48 85 c0             	test   %rax,%rax
  1125d6:	74 09                	je     1125e1 <__lshift+0x81>
  1125d8:	48 8b 30             	mov    (%rax),%rsi
  1125db:	48 89 34 d1          	mov    %rsi,(%rcx,%rdx,8)
  1125df:	eb 37                	jmp    112618 <__lshift+0xb8>
  1125e1:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
  1125e6:	bb 01 00 00 00       	mov    $0x1,%ebx
  1125eb:	89 e9                	mov    %ebp,%ecx
  1125ed:	d3 e3                	shl    %cl,%ebx
  1125ef:	48 63 c3             	movslq %ebx,%rax
  1125f2:	48 8d 14 85 1c 00 00 	lea    0x1c(,%rax,4),%rdx
  1125f9:	00 
  1125fa:	be 01 00 00 00       	mov    $0x1,%esi
  1125ff:	e8 1c 11 00 00       	call   113720 <_calloc_r>
  112604:	48 85 c0             	test   %rax,%rax
  112607:	0f 84 6f 02 00 00    	je     11287c <__lshift+0x31c>
  11260d:	89 68 08             	mov    %ebp,0x8(%rax)
  112610:	89 58 0c             	mov    %ebx,0xc(%rax)
  112613:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  112618:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  11261f:	00 
  112620:	48 8d 70 18          	lea    0x18(%rax),%rsi
  112624:	41 83 ff 20          	cmp    $0x20,%r15d
  112628:	7c 68                	jl     112692 <__lshift+0x132>
  11262a:	45 85 ed             	test   %r13d,%r13d
  11262d:	ba 01 00 00 00       	mov    $0x1,%edx
  112632:	41 0f 4f d5          	cmovg  %r13d,%edx
  112636:	8d 7a ff             	lea    -0x1(%rdx),%edi
  112639:	48 83 c7 01          	add    $0x1,%rdi
  11263d:	31 c9                	xor    %ecx,%ecx
  11263f:	48 83 ff 08          	cmp    $0x8,%rdi
  112643:	72 3b                	jb     112680 <__lshift+0x120>
  112645:	83 e2 07             	and    $0x7,%edx
  112648:	48 29 d7             	sub    %rdx,%rdi
  11264b:	48 8d 34 b8          	lea    (%rax,%rdi,4),%rsi
  11264f:	48 83 c6 18          	add    $0x18,%rsi
  112653:	89 f9                	mov    %edi,%ecx
  112655:	31 ed                	xor    %ebp,%ebp
  112657:	0f 57 c0             	xorps  %xmm0,%xmm0
  11265a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  112660:	0f 11 44 a8 18       	movups %xmm0,0x18(%rax,%rbp,4)
  112665:	0f 11 44 a8 28       	movups %xmm0,0x28(%rax,%rbp,4)
  11266a:	48 83 c5 08          	add    $0x8,%rbp
  11266e:	48 39 ef             	cmp    %rbp,%rdi
  112671:	75 ed                	jne    112660 <__lshift+0x100>
  112673:	85 d2                	test   %edx,%edx
  112675:	74 1b                	je     112692 <__lshift+0x132>
  112677:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  11267e:	00 00 
  112680:	c7 06 00 00 00 00    	movl   $0x0,(%rsi)
  112686:	48 83 c6 04          	add    $0x4,%rsi
  11268a:	83 c1 01             	add    $0x1,%ecx
  11268d:	44 39 e9             	cmp    %r13d,%ecx
  112690:	7c ee                	jl     112680 <__lshift+0x120>
  112692:	46 8d 04 2b          	lea    (%rbx,%r13,1),%r8d
  112696:	41 83 c0 01          	add    $0x1,%r8d
  11269a:	49 8d 6e 18          	lea    0x18(%r14),%rbp
  11269e:	49 63 4e 14          	movslq 0x14(%r14),%rcx
  1126a2:	4d 8d 1c 8e          	lea    (%r14,%rcx,4),%r11
  1126a6:	49 83 c3 18          	add    $0x18,%r11
  1126aa:	41 83 e7 1f          	and    $0x1f,%r15d
  1126ae:	74 4d                	je     1126fd <__lshift+0x19d>
  1126b0:	41 bd 20 00 00 00    	mov    $0x20,%r13d
  1126b6:	45 29 fd             	sub    %r15d,%r13d
  1126b9:	49 8d 4e 1c          	lea    0x1c(%r14),%rcx
  1126bd:	49 39 cb             	cmp    %rcx,%r11
  1126c0:	49 0f 47 cb          	cmova  %r11,%rcx
  1126c4:	48 c7 c7 e7 ff ff ff 	mov    $0xffffffffffffffe7,%rdi
  1126cb:	4c 29 f7             	sub    %r14,%rdi
  1126ce:	48 01 cf             	add    %rcx,%rdi
  1126d1:	49 89 f9             	mov    %rdi,%r9
  1126d4:	49 c1 e9 02          	shr    $0x2,%r9
  1126d8:	45 8d 51 01          	lea    0x1(%r9),%r10d
  1126dc:	41 83 e2 03          	and    $0x3,%r10d
  1126e0:	48 83 ff 0c          	cmp    $0xc,%rdi
  1126e4:	0f 83 ac 00 00 00    	jae    112796 <__lshift+0x236>
  1126ea:	31 ff                	xor    %edi,%edi
  1126ec:	49 89 f3             	mov    %rsi,%r11
  1126ef:	4d 85 d2             	test   %r10,%r10
  1126f2:	0f 85 41 01 00 00    	jne    112839 <__lshift+0x2d9>
  1126f8:	e9 64 01 00 00       	jmp    112861 <__lshift+0x301>
  1126fd:	49 8d 7e 1c          	lea    0x1c(%r14),%rdi
  112701:	49 39 fb             	cmp    %rdi,%r11
  112704:	49 89 fa             	mov    %rdi,%r10
  112707:	4d 0f 47 d3          	cmova  %r11,%r10
  11270b:	48 c7 c3 e7 ff ff ff 	mov    $0xffffffffffffffe7,%rbx
  112712:	4c 29 f3             	sub    %r14,%rbx
  112715:	49 01 da             	add    %rbx,%r10
  112718:	49 c1 ea 02          	shr    $0x2,%r10
  11271c:	49 83 c2 01          	add    $0x1,%r10
  112720:	49 83 fa 07          	cmp    $0x7,%r10
  112724:	0f 86 27 02 00 00    	jbe    112951 <__lshift+0x3f1>
  11272a:	49 39 fb             	cmp    %rdi,%r11
  11272d:	49 0f 47 fb          	cmova  %r11,%rdi
  112731:	48 8d 0c 1f          	lea    (%rdi,%rbx,1),%rcx
  112735:	48 83 c1 1c          	add    $0x1c,%rcx
  112739:	48 83 e1 fc          	and    $0xfffffffffffffffc,%rcx
  11273d:	4c 01 f1             	add    %r14,%rcx
  112740:	48 39 f1             	cmp    %rsi,%rcx
  112743:	76 1c                	jbe    112761 <__lshift+0x201>
  112745:	49 8d 4e 18          	lea    0x18(%r14),%rcx
  112749:	48 01 df             	add    %rbx,%rdi
  11274c:	48 83 e7 fc          	and    $0xfffffffffffffffc,%rdi
  112750:	48 8d 14 3e          	lea    (%rsi,%rdi,1),%rdx
  112754:	48 83 c2 04          	add    $0x4,%rdx
  112758:	48 39 d1             	cmp    %rdx,%rcx
  11275b:	0f 82 f0 01 00 00    	jb     112951 <__lshift+0x3f1>
  112761:	4d 89 d1             	mov    %r10,%r9
  112764:	49 83 e1 f8          	and    $0xfffffffffffffff8,%r9
  112768:	49 8d 49 f8          	lea    -0x8(%r9),%rcx
  11276c:	48 89 ca             	mov    %rcx,%rdx
  11276f:	48 c1 ea 03          	shr    $0x3,%rdx
  112773:	48 83 c2 01          	add    $0x1,%rdx
  112777:	89 d5                	mov    %edx,%ebp
  112779:	83 e5 03             	and    $0x3,%ebp
  11277c:	48 83 f9 18          	cmp    $0x18,%rcx
  112780:	0f 83 02 01 00 00    	jae    112888 <__lshift+0x328>
  112786:	31 db                	xor    %ebx,%ebx
  112788:	48 85 ed             	test   %rbp,%rbp
  11278b:	0f 85 78 01 00 00    	jne    112909 <__lshift+0x3a9>
  112791:	e9 a6 01 00 00       	jmp    11293c <__lshift+0x3dc>
  112796:	4d 8d 59 01          	lea    0x1(%r9),%r11
  11279a:	4d 29 d3             	sub    %r10,%r11
  11279d:	31 ed                	xor    %ebp,%ebp
  11279f:	31 db                	xor    %ebx,%ebx
  1127a1:	31 ff                	xor    %edi,%edi
  1127a3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1127aa:	00 00 00 
  1127ad:	0f 1f 00             	nopl   (%rax)
  1127b0:	41 8b 54 ae 18       	mov    0x18(%r14,%rbp,4),%edx
  1127b5:	44 89 f9             	mov    %r15d,%ecx
  1127b8:	d3 e2                	shl    %cl,%edx
  1127ba:	09 fa                	or     %edi,%edx
  1127bc:	89 14 ae             	mov    %edx,(%rsi,%rbp,4)
  1127bf:	41 8b 54 ae 18       	mov    0x18(%r14,%rbp,4),%edx
  1127c4:	44 89 e9             	mov    %r13d,%ecx
  1127c7:	d3 ea                	shr    %cl,%edx
  1127c9:	41 8b 7c ae 1c       	mov    0x1c(%r14,%rbp,4),%edi
  1127ce:	44 89 f9             	mov    %r15d,%ecx
  1127d1:	d3 e7                	shl    %cl,%edi
  1127d3:	09 d7                	or     %edx,%edi
  1127d5:	89 7c ae 04          	mov    %edi,0x4(%rsi,%rbp,4)
  1127d9:	41 8b 54 ae 1c       	mov    0x1c(%r14,%rbp,4),%edx
  1127de:	44 89 e9             	mov    %r13d,%ecx
  1127e1:	d3 ea                	shr    %cl,%edx
  1127e3:	41 8b 7c ae 20       	mov    0x20(%r14,%rbp,4),%edi
  1127e8:	44 89 f9             	mov    %r15d,%ecx
  1127eb:	d3 e7                	shl    %cl,%edi
  1127ed:	09 d7                	or     %edx,%edi
  1127ef:	89 7c ae 08          	mov    %edi,0x8(%rsi,%rbp,4)
  1127f3:	41 8b 54 ae 20       	mov    0x20(%r14,%rbp,4),%edx
  1127f8:	44 89 e9             	mov    %r13d,%ecx
  1127fb:	d3 ea                	shr    %cl,%edx
  1127fd:	41 8b 7c ae 24       	mov    0x24(%r14,%rbp,4),%edi
  112802:	44 89 f9             	mov    %r15d,%ecx
  112805:	d3 e7                	shl    %cl,%edi
  112807:	09 d7                	or     %edx,%edi
  112809:	89 7c ae 0c          	mov    %edi,0xc(%rsi,%rbp,4)
  11280d:	41 8b 7c ae 24       	mov    0x24(%r14,%rbp,4),%edi
  112812:	44 89 e9             	mov    %r13d,%ecx
  112815:	d3 ef                	shr    %cl,%edi
  112817:	48 83 c3 f0          	add    $0xfffffffffffffff0,%rbx
  11281b:	48 83 c5 04          	add    $0x4,%rbp
  11281f:	49 39 eb             	cmp    %rbp,%r11
  112822:	75 8c                	jne    1127b0 <__lshift+0x250>
  112824:	4c 89 f5             	mov    %r14,%rbp
  112827:	48 29 dd             	sub    %rbx,%rbp
  11282a:	48 83 c5 18          	add    $0x18,%rbp
  11282e:	49 89 f3             	mov    %rsi,%r11
  112831:	49 29 db             	sub    %rbx,%r11
  112834:	4d 85 d2             	test   %r10,%r10
  112837:	74 28                	je     112861 <__lshift+0x301>
  112839:	31 db                	xor    %ebx,%ebx
  11283b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  112840:	8b 54 9d 00          	mov    0x0(%rbp,%rbx,4),%edx
  112844:	44 89 f9             	mov    %r15d,%ecx
  112847:	d3 e2                	shl    %cl,%edx
  112849:	09 fa                	or     %edi,%edx
  11284b:	41 89 14 9b          	mov    %edx,(%r11,%rbx,4)
  11284f:	8b 7c 9d 00          	mov    0x0(%rbp,%rbx,4),%edi
  112853:	44 89 e9             	mov    %r13d,%ecx
  112856:	d3 ef                	shr    %cl,%edi
  112858:	48 83 c3 01          	add    $0x1,%rbx
  11285c:	49 39 da             	cmp    %rbx,%r10
  11285f:	75 df                	jne    112840 <__lshift+0x2e0>
  112861:	42 89 7c 8e 04       	mov    %edi,0x4(%rsi,%r9,4)
  112866:	41 83 c4 02          	add    $0x2,%r12d
  11286a:	85 ff                	test   %edi,%edi
  11286c:	45 0f 45 c4          	cmovne %r12d,%r8d
  112870:	e9 8b 01 00 00       	jmp    112a00 <__lshift+0x4a0>
  112875:	31 c0                	xor    %eax,%eax
  112877:	e9 a4 fd ff ff       	jmp    112620 <__lshift+0xc0>
  11287c:	31 c0                	xor    %eax,%eax
  11287e:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  112883:	e9 98 fd ff ff       	jmp    112620 <__lshift+0xc0>
  112888:	b9 01 00 00 00       	mov    $0x1,%ecx
  11288d:	48 29 d1             	sub    %rdx,%rcx
  112890:	48 8d 3c 29          	lea    (%rcx,%rbp,1),%rdi
  112894:	48 83 c7 ff          	add    $0xffffffffffffffff,%rdi
  112898:	31 db                	xor    %ebx,%ebx
  11289a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  1128a0:	41 0f 10 44 9e 18    	movups 0x18(%r14,%rbx,4),%xmm0
  1128a6:	41 0f 10 4c 9e 28    	movups 0x28(%r14,%rbx,4),%xmm1
  1128ac:	0f 11 04 9e          	movups %xmm0,(%rsi,%rbx,4)
  1128b0:	0f 11 4c 9e 10       	movups %xmm1,0x10(%rsi,%rbx,4)
  1128b5:	41 0f 10 44 9e 38    	movups 0x38(%r14,%rbx,4),%xmm0
  1128bb:	41 0f 10 4c 9e 48    	movups 0x48(%r14,%rbx,4),%xmm1
  1128c1:	0f 11 44 9e 20       	movups %xmm0,0x20(%rsi,%rbx,4)
  1128c6:	0f 11 4c 9e 30       	movups %xmm1,0x30(%rsi,%rbx,4)
  1128cb:	41 0f 10 44 9e 58    	movups 0x58(%r14,%rbx,4),%xmm0
  1128d1:	41 0f 10 4c 9e 68    	movups 0x68(%r14,%rbx,4),%xmm1
  1128d7:	0f 11 44 9e 40       	movups %xmm0,0x40(%rsi,%rbx,4)
  1128dc:	0f 11 4c 9e 50       	movups %xmm1,0x50(%rsi,%rbx,4)
  1128e1:	41 0f 10 44 9e 78    	movups 0x78(%r14,%rbx,4),%xmm0
  1128e7:	41 0f 10 8c 9e 88 00 	movups 0x88(%r14,%rbx,4),%xmm1
  1128ee:	00 00 
  1128f0:	0f 11 44 9e 60       	movups %xmm0,0x60(%rsi,%rbx,4)
  1128f5:	0f 11 4c 9e 70       	movups %xmm1,0x70(%rsi,%rbx,4)
  1128fa:	48 83 c3 20          	add    $0x20,%rbx
  1128fe:	48 83 c7 04          	add    $0x4,%rdi
  112902:	75 9c                	jne    1128a0 <__lshift+0x340>
  112904:	48 85 ed             	test   %rbp,%rbp
  112907:	74 33                	je     11293c <__lshift+0x3dc>
  112909:	48 8d 3c 9e          	lea    (%rsi,%rbx,4),%rdi
  11290d:	48 83 c7 10          	add    $0x10,%rdi
  112911:	49 8d 1c 9e          	lea    (%r14,%rbx,4),%rbx
  112915:	48 83 c3 28          	add    $0x28,%rbx
  112919:	48 f7 dd             	neg    %rbp
  11291c:	31 d2                	xor    %edx,%edx
  11291e:	66 90                	xchg   %ax,%ax
  112920:	0f 10 44 13 f0       	movups -0x10(%rbx,%rdx,1),%xmm0
  112925:	0f 10 0c 13          	movups (%rbx,%rdx,1),%xmm1
  112929:	0f 11 44 17 f0       	movups %xmm0,-0x10(%rdi,%rdx,1)
  11292e:	0f 11 0c 17          	movups %xmm1,(%rdi,%rdx,1)
  112932:	48 83 c2 20          	add    $0x20,%rdx
  112936:	48 83 c5 01          	add    $0x1,%rbp
  11293a:	75 e4                	jne    112920 <__lshift+0x3c0>
  11293c:	4d 39 ca             	cmp    %r9,%r10
  11293f:	0f 84 bb 00 00 00    	je     112a00 <__lshift+0x4a0>
  112945:	4b 8d 2c 8e          	lea    (%r14,%r9,4),%rbp
  112949:	48 83 c5 18          	add    $0x18,%rbp
  11294d:	4a 8d 34 8e          	lea    (%rsi,%r9,4),%rsi
  112951:	48 8d 55 04          	lea    0x4(%rbp),%rdx
  112955:	49 39 d3             	cmp    %rdx,%r11
  112958:	49 0f 47 d3          	cmova  %r11,%rdx
  11295c:	49 89 e9             	mov    %rbp,%r9
  11295f:	49 f7 d1             	not    %r9
  112962:	49 01 d1             	add    %rdx,%r9
  112965:	44 89 cf             	mov    %r9d,%edi
  112968:	c1 ef 02             	shr    $0x2,%edi
  11296b:	83 c7 01             	add    $0x1,%edi
  11296e:	48 83 e7 07          	and    $0x7,%rdi
  112972:	74 26                	je     11299a <__lshift+0x43a>
  112974:	31 db                	xor    %ebx,%ebx
  112976:	31 d2                	xor    %edx,%edx
  112978:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  11297f:	00 
  112980:	8b 4c 95 00          	mov    0x0(%rbp,%rdx,4),%ecx
  112984:	89 0c 96             	mov    %ecx,(%rsi,%rdx,4)
  112987:	48 83 c2 01          	add    $0x1,%rdx
  11298b:	48 83 c3 fc          	add    $0xfffffffffffffffc,%rbx
  11298f:	48 39 d7             	cmp    %rdx,%rdi
  112992:	75 ec                	jne    112980 <__lshift+0x420>
  112994:	48 29 dd             	sub    %rbx,%rbp
  112997:	48 29 de             	sub    %rbx,%rsi
  11299a:	49 83 f9 1c          	cmp    $0x1c,%r9
  11299e:	72 60                	jb     112a00 <__lshift+0x4a0>
  1129a0:	31 d2                	xor    %edx,%edx
  1129a2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1129a9:	00 00 00 
  1129ac:	0f 1f 40 00          	nopl   0x0(%rax)
  1129b0:	8b 4c 15 00          	mov    0x0(%rbp,%rdx,1),%ecx
  1129b4:	89 0c 16             	mov    %ecx,(%rsi,%rdx,1)
  1129b7:	8b 4c 15 04          	mov    0x4(%rbp,%rdx,1),%ecx
  1129bb:	89 4c 16 04          	mov    %ecx,0x4(%rsi,%rdx,1)
  1129bf:	8b 4c 15 08          	mov    0x8(%rbp,%rdx,1),%ecx
  1129c3:	89 4c 16 08          	mov    %ecx,0x8(%rsi,%rdx,1)
  1129c7:	8b 4c 15 0c          	mov    0xc(%rbp,%rdx,1),%ecx
  1129cb:	89 4c 16 0c          	mov    %ecx,0xc(%rsi,%rdx,1)
  1129cf:	8b 4c 15 10          	mov    0x10(%rbp,%rdx,1),%ecx
  1129d3:	89 4c 16 10          	mov    %ecx,0x10(%rsi,%rdx,1)
  1129d7:	8b 4c 15 14          	mov    0x14(%rbp,%rdx,1),%ecx
  1129db:	89 4c 16 14          	mov    %ecx,0x14(%rsi,%rdx,1)
  1129df:	8b 4c 15 18          	mov    0x18(%rbp,%rdx,1),%ecx
  1129e3:	89 4c 16 18          	mov    %ecx,0x18(%rsi,%rdx,1)
  1129e7:	8b 4c 15 1c          	mov    0x1c(%rbp,%rdx,1),%ecx
  1129eb:	89 4c 16 1c          	mov    %ecx,0x1c(%rsi,%rdx,1)
  1129ef:	48 8d 0c 2a          	lea    (%rdx,%rbp,1),%rcx
  1129f3:	48 83 c1 20          	add    $0x20,%rcx
  1129f7:	48 83 c2 20          	add    $0x20,%rdx
  1129fb:	4c 39 d9             	cmp    %r11,%rcx
  1129fe:	72 b0                	jb     1129b0 <__lshift+0x450>
  112a00:	41 83 c0 ff          	add    $0xffffffff,%r8d
  112a04:	44 89 40 14          	mov    %r8d,0x14(%rax)
  112a08:	4d 85 f6             	test   %r14,%r14
  112a0b:	74 18                	je     112a25 <__lshift+0x4c5>
  112a0d:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  112a12:	48 8b 49 78          	mov    0x78(%rcx),%rcx
  112a16:	49 63 56 08          	movslq 0x8(%r14),%rdx
  112a1a:	48 8b 34 d1          	mov    (%rcx,%rdx,8),%rsi
  112a1e:	49 89 36             	mov    %rsi,(%r14)
  112a21:	4c 89 34 d1          	mov    %r14,(%rcx,%rdx,8)
  112a25:	48 83 c4 18          	add    $0x18,%rsp
  112a29:	5b                   	pop    %rbx
  112a2a:	41 5c                	pop    %r12
  112a2c:	41 5d                	pop    %r13
  112a2e:	41 5e                	pop    %r14
  112a30:	41 5f                	pop    %r15
  112a32:	5d                   	pop    %rbp
  112a33:	c3                   	ret    
  112a34:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  112a3b:	00 00 00 
  112a3e:	66 90                	xchg   %ax,%ax

0000000000112a40 <__mcmp>:
  112a40:	8b 47 14             	mov    0x14(%rdi),%eax
  112a43:	48 63 4e 14          	movslq 0x14(%rsi),%rcx
  112a47:	29 c8                	sub    %ecx,%eax
  112a49:	74 01                	je     112a4c <__mcmp+0xc>
  112a4b:	c3                   	ret    
  112a4c:	48 8d 04 8f          	lea    (%rdi,%rcx,4),%rax
  112a50:	48 83 c0 18          	add    $0x18,%rax
  112a54:	48 83 c7 18          	add    $0x18,%rdi
  112a58:	48 8d 0c 8e          	lea    (%rsi,%rcx,4),%rcx
  112a5c:	48 83 c1 14          	add    $0x14,%rcx
  112a60:	8b 11                	mov    (%rcx),%edx
  112a62:	39 50 fc             	cmp    %edx,-0x4(%rax)
  112a65:	75 10                	jne    112a77 <__mcmp+0x37>
  112a67:	48 83 c0 fc          	add    $0xfffffffffffffffc,%rax
  112a6b:	48 83 c1 fc          	add    $0xfffffffffffffffc,%rcx
  112a6f:	48 39 f8             	cmp    %rdi,%rax
  112a72:	77 ec                	ja     112a60 <__mcmp+0x20>
  112a74:	31 c0                	xor    %eax,%eax
  112a76:	c3                   	ret    
  112a77:	0f 93 c0             	setae  %al
  112a7a:	0f b6 c0             	movzbl %al,%eax
  112a7d:	8d 04 00             	lea    (%rax,%rax,1),%eax
  112a80:	83 c0 ff             	add    $0xffffffff,%eax
  112a83:	c3                   	ret    
  112a84:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  112a8b:	00 00 00 
  112a8e:	66 90                	xchg   %ax,%ax

0000000000112a90 <__mdiff>:
  112a90:	55                   	push   %rbp
  112a91:	41 57                	push   %r15
  112a93:	41 56                	push   %r14
  112a95:	41 55                	push   %r13
  112a97:	41 54                	push   %r12
  112a99:	53                   	push   %rbx
  112a9a:	50                   	push   %rax
  112a9b:	49 89 f5             	mov    %rsi,%r13
  112a9e:	48 89 fd             	mov    %rdi,%rbp
  112aa1:	44 8b 66 14          	mov    0x14(%rsi),%r12d
  112aa5:	48 63 72 14          	movslq 0x14(%rdx),%rsi
  112aa9:	41 29 f4             	sub    %esi,%r12d
  112aac:	75 7d                	jne    112b2b <__mdiff+0x9b>
  112aae:	49 8d 45 18          	lea    0x18(%r13),%rax
  112ab2:	48 8d 0c b5 18 00 00 	lea    0x18(,%rsi,4),%rcx
  112ab9:	00 
  112aba:	4c 01 e9             	add    %r13,%rcx
  112abd:	48 8d 34 b2          	lea    (%rdx,%rsi,4),%rsi
  112ac1:	48 83 c6 14          	add    $0x14,%rsi
  112ac5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  112acc:	00 00 00 
  112acf:	90                   	nop
  112ad0:	8b 3e                	mov    (%rsi),%edi
  112ad2:	39 79 fc             	cmp    %edi,-0x4(%rcx)
  112ad5:	75 46                	jne    112b1d <__mdiff+0x8d>
  112ad7:	48 83 c1 fc          	add    $0xfffffffffffffffc,%rcx
  112adb:	48 83 c6 fc          	add    $0xfffffffffffffffc,%rsi
  112adf:	48 39 c1             	cmp    %rax,%rcx
  112ae2:	77 ec                	ja     112ad0 <__mdiff+0x40>
  112ae4:	48 8b 4d 78          	mov    0x78(%rbp),%rcx
  112ae8:	48 85 c9             	test   %rcx,%rcx
  112aeb:	75 19                	jne    112b06 <__mdiff+0x76>
  112aed:	be 08 00 00 00       	mov    $0x8,%esi
  112af2:	ba 41 00 00 00       	mov    $0x41,%edx
  112af7:	48 89 ef             	mov    %rbp,%rdi
  112afa:	e8 21 0c 00 00       	call   113720 <_calloc_r>
  112aff:	48 89 c1             	mov    %rax,%rcx
  112b02:	48 89 45 78          	mov    %rax,0x78(%rbp)
  112b06:	48 8b 01             	mov    (%rcx),%rax
  112b09:	48 85 c0             	test   %rax,%rax
  112b0c:	0f 84 1f 02 00 00    	je     112d31 <__mdiff+0x2a1>
  112b12:	48 8b 10             	mov    (%rax),%rdx
  112b15:	48 89 11             	mov    %rdx,(%rcx)
  112b18:	e9 34 02 00 00       	jmp    112d51 <__mdiff+0x2c1>
  112b1d:	0f 93 c0             	setae  %al
  112b20:	0f b6 c0             	movzbl %al,%eax
  112b23:	44 8d 24 00          	lea    (%rax,%rax,1),%r12d
  112b27:	41 83 c4 ff          	add    $0xffffffff,%r12d
  112b2b:	45 85 e4             	test   %r12d,%r12d
  112b2e:	49 89 d6             	mov    %rdx,%r14
  112b31:	4d 0f 48 f5          	cmovs  %r13,%r14
  112b35:	4c 0f 48 ea          	cmovs  %rdx,%r13
  112b39:	45 8b 7d 08          	mov    0x8(%r13),%r15d
  112b3d:	49 63 df             	movslq %r15d,%rbx
  112b40:	48 8b 4d 78          	mov    0x78(%rbp),%rcx
  112b44:	48 85 c9             	test   %rcx,%rcx
  112b47:	75 19                	jne    112b62 <__mdiff+0xd2>
  112b49:	be 08 00 00 00       	mov    $0x8,%esi
  112b4e:	ba 41 00 00 00       	mov    $0x41,%edx
  112b53:	48 89 ef             	mov    %rbp,%rdi
  112b56:	e8 c5 0b 00 00       	call   113720 <_calloc_r>
  112b5b:	48 89 c1             	mov    %rax,%rcx
  112b5e:	48 89 45 78          	mov    %rax,0x78(%rbp)
  112b62:	41 c1 ec 1f          	shr    $0x1f,%r12d
  112b66:	48 8b 04 d9          	mov    (%rcx,%rbx,8),%rax
  112b6a:	48 85 c0             	test   %rax,%rax
  112b6d:	74 09                	je     112b78 <__mdiff+0xe8>
  112b6f:	48 8b 10             	mov    (%rax),%rdx
  112b72:	48 89 14 d9          	mov    %rdx,(%rcx,%rbx,8)
  112b76:	eb 29                	jmp    112ba1 <__mdiff+0x111>
  112b78:	b8 01 00 00 00       	mov    $0x1,%eax
  112b7d:	44 89 f9             	mov    %r15d,%ecx
  112b80:	d3 e0                	shl    %cl,%eax
  112b82:	48 63 d8             	movslq %eax,%rbx
  112b85:	48 8d 14 9d 1c 00 00 	lea    0x1c(,%rbx,4),%rdx
  112b8c:	00 
  112b8d:	be 01 00 00 00       	mov    $0x1,%esi
  112b92:	48 89 ef             	mov    %rbp,%rdi
  112b95:	e8 86 0b 00 00       	call   113720 <_calloc_r>
  112b9a:	44 89 78 08          	mov    %r15d,0x8(%rax)
  112b9e:	89 58 0c             	mov    %ebx,0xc(%rax)
  112ba1:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%rax)
  112ba8:	44 89 60 10          	mov    %r12d,0x10(%rax)
  112bac:	4d 63 5d 14          	movslq 0x14(%r13),%r11
  112bb0:	49 63 56 14          	movslq 0x14(%r14),%rdx
  112bb4:	4d 8d 04 96          	lea    (%r14,%rdx,4),%r8
  112bb8:	49 83 c0 18          	add    $0x18,%r8
  112bbc:	49 8d 56 1c          	lea    0x1c(%r14),%rdx
  112bc0:	49 39 d0             	cmp    %rdx,%r8
  112bc3:	49 0f 47 d0          	cmova  %r8,%rdx
  112bc7:	48 c7 c7 e7 ff ff ff 	mov    $0xffffffffffffffe7,%rdi
  112bce:	4c 29 f7             	sub    %r14,%rdi
  112bd1:	4c 8d 0c 3a          	lea    (%rdx,%rdi,1),%r9
  112bd5:	49 83 c1 1c          	add    $0x1c,%r9
  112bd9:	49 83 e1 fc          	and    $0xfffffffffffffffc,%r9
  112bdd:	4f 8d 14 29          	lea    (%r9,%r13,1),%r10
  112be1:	4e 8d 3c 08          	lea    (%rax,%r9,1),%r15
  112be5:	31 ed                	xor    %ebp,%ebp
  112be7:	bb 18 00 00 00       	mov    $0x18,%ebx
  112bec:	0f 1f 40 00          	nopl   0x0(%rax)
  112bf0:	41 8b 7c 1d 00       	mov    0x0(%r13,%rbx,1),%edi
  112bf5:	0f b7 f7             	movzwl %di,%esi
  112bf8:	41 8b 0c 1e          	mov    (%r14,%rbx,1),%ecx
  112bfc:	0f b7 d1             	movzwl %cx,%edx
  112bff:	29 d6                	sub    %edx,%esi
  112c01:	01 ee                	add    %ebp,%esi
  112c03:	0f b7 d6             	movzwl %si,%edx
  112c06:	c1 fe 10             	sar    $0x10,%esi
  112c09:	c1 ef 10             	shr    $0x10,%edi
  112c0c:	c1 e9 10             	shr    $0x10,%ecx
  112c0f:	29 cf                	sub    %ecx,%edi
  112c11:	01 f7                	add    %esi,%edi
  112c13:	89 fd                	mov    %edi,%ebp
  112c15:	c1 fd 10             	sar    $0x10,%ebp
  112c18:	c1 e7 10             	shl    $0x10,%edi
  112c1b:	09 fa                	or     %edi,%edx
  112c1d:	89 14 18             	mov    %edx,(%rax,%rbx,1)
  112c20:	49 8d 0c 1e          	lea    (%r14,%rbx,1),%rcx
  112c24:	48 83 c1 04          	add    $0x4,%rcx
  112c28:	48 83 c3 04          	add    $0x4,%rbx
  112c2c:	4c 39 c1             	cmp    %r8,%rcx
  112c2f:	72 bf                	jb     112bf0 <__mdiff+0x160>
  112c31:	4e 8d 04 9d 18 00 00 	lea    0x18(,%r11,4),%r8
  112c38:	00 
  112c39:	4d 01 e8             	add    %r13,%r8
  112c3c:	4d 39 d0             	cmp    %r10,%r8
  112c3f:	0f 86 b4 00 00 00    	jbe    112cf9 <__mdiff+0x269>
  112c45:	4a 8d 34 9d 17 00 00 	lea    0x17(,%r11,4),%rsi
  112c4c:	00 
  112c4d:	48 89 f1             	mov    %rsi,%rcx
  112c50:	4c 29 d1             	sub    %r10,%rcx
  112c53:	49 01 cd             	add    %rcx,%r13
  112c56:	49 c1 ed 02          	shr    $0x2,%r13
  112c5a:	4c 29 ce             	sub    %r9,%rsi
  112c5d:	40 f6 c6 04          	test   $0x4,%sil
  112c61:	75 2a                	jne    112c8d <__mdiff+0x1fd>
  112c63:	41 8b 0a             	mov    (%r10),%ecx
  112c66:	0f b7 d1             	movzwl %cx,%edx
  112c69:	01 ea                	add    %ebp,%edx
  112c6b:	0f b7 da             	movzwl %dx,%ebx
  112c6e:	c1 fa 10             	sar    $0x10,%edx
  112c71:	49 83 c2 04          	add    $0x4,%r10
  112c75:	c1 e9 10             	shr    $0x10,%ecx
  112c78:	01 d1                	add    %edx,%ecx
  112c7a:	89 cd                	mov    %ecx,%ebp
  112c7c:	c1 fd 10             	sar    $0x10,%ebp
  112c7f:	c1 e1 10             	shl    $0x10,%ecx
  112c82:	09 cb                	or     %ecx,%ebx
  112c84:	49 8d 7f 04          	lea    0x4(%r15),%rdi
  112c88:	41 89 1f             	mov    %ebx,(%r15)
  112c8b:	eb 03                	jmp    112c90 <__mdiff+0x200>
  112c8d:	4c 89 ff             	mov    %r15,%rdi
  112c90:	49 83 c5 01          	add    $0x1,%r13
  112c94:	48 83 fe 03          	cmp    $0x3,%rsi
  112c98:	74 5b                	je     112cf5 <__mdiff+0x265>
  112c9a:	31 f6                	xor    %esi,%esi
  112c9c:	0f 1f 40 00          	nopl   0x0(%rax)
  112ca0:	41 8b 0c 32          	mov    (%r10,%rsi,1),%ecx
  112ca4:	0f b7 d1             	movzwl %cx,%edx
  112ca7:	01 ea                	add    %ebp,%edx
  112ca9:	0f b7 ea             	movzwl %dx,%ebp
  112cac:	c1 fa 10             	sar    $0x10,%edx
  112caf:	c1 e9 10             	shr    $0x10,%ecx
  112cb2:	01 d1                	add    %edx,%ecx
  112cb4:	89 ca                	mov    %ecx,%edx
  112cb6:	c1 fa 10             	sar    $0x10,%edx
  112cb9:	c1 e1 10             	shl    $0x10,%ecx
  112cbc:	09 cd                	or     %ecx,%ebp
  112cbe:	89 2c 37             	mov    %ebp,(%rdi,%rsi,1)
  112cc1:	41 8b 4c 32 04       	mov    0x4(%r10,%rsi,1),%ecx
  112cc6:	0f b7 e9             	movzwl %cx,%ebp
  112cc9:	01 d5                	add    %edx,%ebp
  112ccb:	0f b7 d5             	movzwl %bp,%edx
  112cce:	c1 fd 10             	sar    $0x10,%ebp
  112cd1:	c1 e9 10             	shr    $0x10,%ecx
  112cd4:	01 e9                	add    %ebp,%ecx
  112cd6:	89 cd                	mov    %ecx,%ebp
  112cd8:	c1 fd 10             	sar    $0x10,%ebp
  112cdb:	c1 e1 10             	shl    $0x10,%ecx
  112cde:	09 ca                	or     %ecx,%edx
  112ce0:	89 54 37 04          	mov    %edx,0x4(%rdi,%rsi,1)
  112ce4:	49 8d 0c 32          	lea    (%r10,%rsi,1),%rcx
  112ce8:	48 83 c1 08          	add    $0x8,%rcx
  112cec:	48 83 c6 08          	add    $0x8,%rsi
  112cf0:	4c 39 c1             	cmp    %r8,%rcx
  112cf3:	72 ab                	jb     112ca0 <__mdiff+0x210>
  112cf5:	4f 8d 3c af          	lea    (%r15,%r13,4),%r15
  112cf9:	41 83 c3 01          	add    $0x1,%r11d
  112cfd:	49 83 c7 fc          	add    $0xfffffffffffffffc,%r15
  112d01:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  112d08:	00 00 00 
  112d0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  112d10:	41 83 c3 ff          	add    $0xffffffff,%r11d
  112d14:	41 83 3f 00          	cmpl   $0x0,(%r15)
  112d18:	4d 8d 7f fc          	lea    -0x4(%r15),%r15
  112d1c:	74 f2                	je     112d10 <__mdiff+0x280>
  112d1e:	44 89 58 14          	mov    %r11d,0x14(%rax)
  112d22:	48 83 c4 08          	add    $0x8,%rsp
  112d26:	5b                   	pop    %rbx
  112d27:	41 5c                	pop    %r12
  112d29:	41 5d                	pop    %r13
  112d2b:	41 5e                	pop    %r14
  112d2d:	41 5f                	pop    %r15
  112d2f:	5d                   	pop    %rbp
  112d30:	c3                   	ret    
  112d31:	be 01 00 00 00       	mov    $0x1,%esi
  112d36:	ba 20 00 00 00       	mov    $0x20,%edx
  112d3b:	48 89 ef             	mov    %rbp,%rdi
  112d3e:	e8 dd 09 00 00       	call   113720 <_calloc_r>
  112d43:	48 b9 00 00 00 00 01 	movabs $0x100000000,%rcx
  112d4a:	00 00 00 
  112d4d:	48 89 48 08          	mov    %rcx,0x8(%rax)
  112d51:	48 b9 00 00 00 00 01 	movabs $0x100000000,%rcx
  112d58:	00 00 00 
  112d5b:	48 89 48 10          	mov    %rcx,0x10(%rax)
  112d5f:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%rax)
  112d66:	eb ba                	jmp    112d22 <__mdiff+0x292>
  112d68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  112d6f:	00 

0000000000112d70 <__ulp>:
  112d70:	66 48 0f 7e c0       	movq   %xmm0,%rax
  112d75:	48 c1 e8 20          	shr    $0x20,%rax
  112d79:	25 00 00 f0 7f       	and    $0x7ff00000,%eax
  112d7e:	3d 01 00 40 03       	cmp    $0x3400001,%eax
  112d83:	72 07                	jb     112d8c <__ulp+0x1c>
  112d85:	05 00 00 c0 fc       	add    $0xfcc00000,%eax
  112d8a:	eb 1b                	jmp    112da7 <__ulp+0x37>
  112d8c:	ba 00 00 40 03       	mov    $0x3400000,%edx
  112d91:	29 c2                	sub    %eax,%edx
  112d93:	89 d1                	mov    %edx,%ecx
  112d95:	c1 f9 14             	sar    $0x14,%ecx
  112d98:	81 fa ff ff 3f 01    	cmp    $0x13fffff,%edx
  112d9e:	7f 11                	jg     112db1 <__ulp+0x41>
  112da0:	b8 00 00 08 00       	mov    $0x80000,%eax
  112da5:	d3 e8                	shr    %cl,%eax
  112da7:	48 c1 e0 20          	shl    $0x20,%rax
  112dab:	66 48 0f 6e c0       	movq   %rax,%xmm0
  112db0:	c3                   	ret    
  112db1:	81 fa 00 00 20 03    	cmp    $0x3200000,%edx
  112db7:	7e 09                	jle    112dc2 <__ulp+0x52>
  112db9:	f2 0f 10 05 17 eb fe 	movsd  -0x114e9(%rip),%xmm0        # 1018d8 <_ZTVN3usb14HIDMouseDriverE+0xa8>
  112dc0:	ff 
  112dc1:	c3                   	ret    
  112dc2:	b8 33 00 00 00       	mov    $0x33,%eax
  112dc7:	29 c8                	sub    %ecx,%eax
  112dc9:	ba 01 00 00 00       	mov    $0x1,%edx
  112dce:	89 c1                	mov    %eax,%ecx
  112dd0:	d3 e2                	shl    %cl,%edx
  112dd2:	66 48 0f 6e c2       	movq   %rdx,%xmm0
  112dd7:	c3                   	ret    
  112dd8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  112ddf:	00 

0000000000112de0 <__b2d>:
  112de0:	53                   	push   %rbx
  112de1:	4c 63 57 14          	movslq 0x14(%rdi),%r10
  112de5:	46 8b 44 97 14       	mov    0x14(%rdi,%r10,4),%r8d
  112dea:	31 c9                	xor    %ecx,%ecx
  112dec:	41 81 f8 00 00 01 00 	cmp    $0x10000,%r8d
  112df3:	0f 92 c1             	setb   %cl
  112df6:	44 89 c0             	mov    %r8d,%eax
  112df9:	c1 e0 10             	shl    $0x10,%eax
  112dfc:	41 81 f8 ff ff 00 00 	cmp    $0xffff,%r8d
  112e03:	41 0f 47 c0          	cmova  %r8d,%eax
  112e07:	4e 8d 0c 97          	lea    (%rdi,%r10,4),%r9
  112e0b:	49 83 c1 18          	add    $0x18,%r9
  112e0f:	c1 e1 04             	shl    $0x4,%ecx
  112e12:	44 8d 59 08          	lea    0x8(%rcx),%r11d
  112e16:	89 c2                	mov    %eax,%edx
  112e18:	c1 e2 08             	shl    $0x8,%edx
  112e1b:	3d ff ff ff 00       	cmp    $0xffffff,%eax
  112e20:	0f 47 d0             	cmova  %eax,%edx
  112e23:	44 0f 47 d9          	cmova  %ecx,%r11d
  112e27:	89 d3                	mov    %edx,%ebx
  112e29:	c1 e3 04             	shl    $0x4,%ebx
  112e2c:	81 fa ff ff ff 0f    	cmp    $0xfffffff,%edx
  112e32:	0f 47 da             	cmova  %edx,%ebx
  112e35:	41 8d 53 04          	lea    0x4(%r11),%edx
  112e39:	41 0f 47 d3          	cmova  %r11d,%edx
  112e3d:	4e 8d 14 97          	lea    (%rdi,%r10,4),%r10
  112e41:	49 83 c2 14          	add    $0x14,%r10
  112e45:	4c 8d 5f 18          	lea    0x18(%rdi),%r11
  112e49:	8d 42 02             	lea    0x2(%rdx),%eax
  112e4c:	8d 0c 9d 00 00 00 00 	lea    0x0(,%rbx,4),%ecx
  112e53:	81 fb ff ff ff 3f    	cmp    $0x3fffffff,%ebx
  112e59:	0f 47 cb             	cmova  %ebx,%ecx
  112e5c:	0f 47 c2             	cmova  %edx,%eax
  112e5f:	85 c9                	test   %ecx,%ecx
  112e61:	78 18                	js     112e7b <__b2d+0x9b>
  112e63:	f7 c1 00 00 00 40    	test   $0x40000000,%ecx
  112e69:	75 0d                	jne    112e78 <__b2d+0x98>
  112e6b:	c7 06 00 00 00 00    	movl   $0x0,(%rsi)
  112e71:	b8 20 00 00 00       	mov    $0x20,%eax
  112e76:	eb 3b                	jmp    112eb3 <__b2d+0xd3>
  112e78:	83 c0 01             	add    $0x1,%eax
  112e7b:	b9 20 00 00 00       	mov    $0x20,%ecx
  112e80:	29 c1                	sub    %eax,%ecx
  112e82:	89 0e                	mov    %ecx,(%rsi)
  112e84:	83 f8 0a             	cmp    $0xa,%eax
  112e87:	7f 2a                	jg     112eb3 <__b2d+0xd3>
  112e89:	ba 0b 00 00 00       	mov    $0xb,%edx
  112e8e:	29 c2                	sub    %eax,%edx
  112e90:	44 89 c6             	mov    %r8d,%esi
  112e93:	89 d1                	mov    %edx,%ecx
  112e95:	d3 ee                	shr    %cl,%esi
  112e97:	31 ff                	xor    %edi,%edi
  112e99:	4d 39 da             	cmp    %r11,%r10
  112e9c:	76 04                	jbe    112ea2 <__b2d+0xc2>
  112e9e:	41 8b 79 f8          	mov    -0x8(%r9),%edi
  112ea2:	83 c0 15             	add    $0x15,%eax
  112ea5:	89 c1                	mov    %eax,%ecx
  112ea7:	41 d3 e0             	shl    %cl,%r8d
  112eaa:	89 d1                	mov    %edx,%ecx
  112eac:	d3 ef                	shr    %cl,%edi
  112eae:	44 09 c7             	or     %r8d,%edi
  112eb1:	eb 49                	jmp    112efc <__b2d+0x11c>
  112eb3:	31 ff                	xor    %edi,%edi
  112eb5:	4d 39 da             	cmp    %r11,%r10
  112eb8:	76 0b                	jbe    112ec5 <__b2d+0xe5>
  112eba:	41 8b 79 f8          	mov    -0x8(%r9),%edi
  112ebe:	49 83 c1 f8          	add    $0xfffffffffffffff8,%r9
  112ec2:	4d 89 ca             	mov    %r9,%r10
  112ec5:	89 c2                	mov    %eax,%edx
  112ec7:	83 c2 f5             	add    $0xfffffff5,%edx
  112eca:	74 2d                	je     112ef9 <__b2d+0x119>
  112ecc:	89 d1                	mov    %edx,%ecx
  112ece:	41 d3 e0             	shl    %cl,%r8d
  112ed1:	be 2b 00 00 00       	mov    $0x2b,%esi
  112ed6:	29 c6                	sub    %eax,%esi
  112ed8:	89 f8                	mov    %edi,%eax
  112eda:	89 f1                	mov    %esi,%ecx
  112edc:	d3 e8                	shr    %cl,%eax
  112ede:	45 31 c9             	xor    %r9d,%r9d
  112ee1:	4d 39 da             	cmp    %r11,%r10
  112ee4:	76 04                	jbe    112eea <__b2d+0x10a>
  112ee6:	45 8b 4a fc          	mov    -0x4(%r10),%r9d
  112eea:	41 09 c0             	or     %eax,%r8d
  112eed:	89 d1                	mov    %edx,%ecx
  112eef:	d3 e7                	shl    %cl,%edi
  112ef1:	89 f1                	mov    %esi,%ecx
  112ef3:	41 d3 e9             	shr    %cl,%r9d
  112ef6:	44 09 cf             	or     %r9d,%edi
  112ef9:	44 89 c6             	mov    %r8d,%esi
  112efc:	81 ce 00 00 f0 3f    	or     $0x3ff00000,%esi
  112f02:	48 c1 e6 20          	shl    $0x20,%rsi
  112f06:	89 f8                	mov    %edi,%eax
  112f08:	48 09 f0             	or     %rsi,%rax
  112f0b:	66 48 0f 6e c0       	movq   %rax,%xmm0
  112f10:	5b                   	pop    %rbx
  112f11:	c3                   	ret    
  112f12:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  112f19:	00 00 00 
  112f1c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000112f20 <__d2b>:
  112f20:	41 57                	push   %r15
  112f22:	41 56                	push   %r14
  112f24:	53                   	push   %rbx
  112f25:	48 83 ec 10          	sub    $0x10,%rsp
  112f29:	49 89 d6             	mov    %rdx,%r14
  112f2c:	49 89 f7             	mov    %rsi,%r15
  112f2f:	48 89 fb             	mov    %rdi,%rbx
  112f32:	48 8b 4f 78          	mov    0x78(%rdi),%rcx
  112f36:	48 85 c9             	test   %rcx,%rcx
  112f39:	75 2e                	jne    112f69 <__d2b+0x49>
  112f3b:	be 08 00 00 00       	mov    $0x8,%esi
  112f40:	ba 41 00 00 00       	mov    $0x41,%edx
  112f45:	48 89 df             	mov    %rbx,%rdi
  112f48:	f2 0f 11 44 24 08    	movsd  %xmm0,0x8(%rsp)
  112f4e:	e8 cd 07 00 00       	call   113720 <_calloc_r>
  112f53:	f3 0f 7e 44 24 08    	movq   0x8(%rsp),%xmm0
  112f59:	48 89 c1             	mov    %rax,%rcx
  112f5c:	48 89 43 78          	mov    %rax,0x78(%rbx)
  112f60:	48 85 c0             	test   %rax,%rax
  112f63:	0f 84 3f 01 00 00    	je     1130a8 <__d2b+0x188>
  112f69:	48 8b 41 08          	mov    0x8(%rcx),%rax
  112f6d:	48 85 c0             	test   %rax,%rax
  112f70:	74 09                	je     112f7b <__d2b+0x5b>
  112f72:	48 8b 10             	mov    (%rax),%rdx
  112f75:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  112f79:	eb 35                	jmp    112fb0 <__d2b+0x90>
  112f7b:	66 0f d6 44 24 08    	movq   %xmm0,0x8(%rsp)
  112f81:	be 01 00 00 00       	mov    $0x1,%esi
  112f86:	ba 24 00 00 00       	mov    $0x24,%edx
  112f8b:	48 89 df             	mov    %rbx,%rdi
  112f8e:	e8 8d 07 00 00       	call   113720 <_calloc_r>
  112f93:	48 85 c0             	test   %rax,%rax
  112f96:	0f 84 72 01 00 00    	je     11310e <__d2b+0x1ee>
  112f9c:	48 b9 01 00 00 00 02 	movabs $0x200000001,%rcx
  112fa3:	00 00 00 
  112fa6:	48 89 48 08          	mov    %rcx,0x8(%rax)
  112faa:	f3 0f 7e 44 24 08    	movq   0x8(%rsp),%xmm0
  112fb0:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  112fb7:	00 
  112fb8:	66 48 0f 7e c3       	movq   %xmm0,%rbx
  112fbd:	48 89 d9             	mov    %rbx,%rcx
  112fc0:	48 c1 e9 20          	shr    $0x20,%rcx
  112fc4:	81 e1 ff ff 0f 00    	and    $0xfffff,%ecx
  112fca:	49 89 d8             	mov    %rbx,%r8
  112fcd:	49 c1 e8 34          	shr    $0x34,%r8
  112fd1:	44 8d 89 00 00 10 00 	lea    0x100000(%rcx),%r9d
  112fd8:	41 81 e0 ff 07 00 00 	and    $0x7ff,%r8d
  112fdf:	44 0f 44 c9          	cmove  %ecx,%r9d
  112fe3:	85 db                	test   %ebx,%ebx
  112fe5:	74 24                	je     11300b <__d2b+0xeb>
  112fe7:	f6 c3 07             	test   $0x7,%bl
  112fea:	74 4d                	je     113039 <__d2b+0x119>
  112fec:	f6 c3 01             	test   $0x1,%bl
  112fef:	0f 85 a9 00 00 00    	jne    11309e <__d2b+0x17e>
  112ff5:	f6 c3 02             	test   $0x2,%bl
  112ff8:	0f 85 1d 01 00 00    	jne    11311b <__d2b+0x1fb>
  112ffe:	c1 eb 02             	shr    $0x2,%ebx
  113001:	ba 02 00 00 00       	mov    $0x2,%edx
  113006:	e9 28 01 00 00       	jmp    113133 <__d2b+0x213>
  11300b:	41 f6 c1 07          	test   $0x7,%r9b
  11300f:	0f 84 9a 00 00 00    	je     1130af <__d2b+0x18f>
  113015:	31 d2                	xor    %edx,%edx
  113017:	41 f6 c1 01          	test   $0x1,%r9b
  11301b:	0f 85 42 01 00 00    	jne    113163 <__d2b+0x243>
  113021:	41 f6 c1 02          	test   $0x2,%r9b
  113025:	0f 85 f9 00 00 00    	jne    113124 <__d2b+0x204>
  11302b:	41 c1 e9 02          	shr    $0x2,%r9d
  11302f:	ba 02 00 00 00       	mov    $0x2,%edx
  113034:	e9 2a 01 00 00       	jmp    113163 <__d2b+0x243>
  113039:	89 df                	mov    %ebx,%edi
  11303b:	c1 ef 10             	shr    $0x10,%edi
  11303e:	31 d2                	xor    %edx,%edx
  113040:	66 85 db             	test   %bx,%bx
  113043:	0f 94 c2             	sete   %dl
  113046:	0f 45 fb             	cmovne %ebx,%edi
  113049:	c1 e2 04             	shl    $0x4,%edx
  11304c:	44 8d 52 08          	lea    0x8(%rdx),%r10d
  113050:	89 f9                	mov    %edi,%ecx
  113052:	c1 e9 08             	shr    $0x8,%ecx
  113055:	40 84 ff             	test   %dil,%dil
  113058:	44 0f 45 d2          	cmovne %edx,%r10d
  11305c:	0f 45 cf             	cmovne %edi,%ecx
  11305f:	41 8d 7a 04          	lea    0x4(%r10),%edi
  113063:	89 ce                	mov    %ecx,%esi
  113065:	c1 ee 04             	shr    $0x4,%esi
  113068:	f6 c1 0f             	test   $0xf,%cl
  11306b:	41 0f 45 fa          	cmovne %r10d,%edi
  11306f:	0f 45 f1             	cmovne %ecx,%esi
  113072:	8d 57 02             	lea    0x2(%rdi),%edx
  113075:	89 f1                	mov    %esi,%ecx
  113077:	c1 e9 02             	shr    $0x2,%ecx
  11307a:	40 f6 c6 03          	test   $0x3,%sil
  11307e:	0f 45 d7             	cmovne %edi,%edx
  113081:	0f 45 ce             	cmovne %esi,%ecx
  113084:	f6 c1 01             	test   $0x1,%cl
  113087:	75 0b                	jne    113094 <__d2b+0x174>
  113089:	d1 e9                	shr    %ecx
  11308b:	0f 84 9d 00 00 00    	je     11312e <__d2b+0x20e>
  113091:	83 c2 01             	add    $0x1,%edx
  113094:	89 cb                	mov    %ecx,%ebx
  113096:	85 d2                	test   %edx,%edx
  113098:	0f 85 95 00 00 00    	jne    113133 <__d2b+0x213>
  11309e:	89 58 18             	mov    %ebx,0x18(%rax)
  1130a1:	31 d2                	xor    %edx,%edx
  1130a3:	e9 a1 00 00 00       	jmp    113149 <__d2b+0x229>
  1130a8:	31 c0                	xor    %eax,%eax
  1130aa:	e9 09 ff ff ff       	jmp    112fb8 <__d2b+0x98>
  1130af:	44 89 c9             	mov    %r9d,%ecx
  1130b2:	c1 e9 10             	shr    $0x10,%ecx
  1130b5:	31 d2                	xor    %edx,%edx
  1130b7:	66 45 85 c9          	test   %r9w,%r9w
  1130bb:	0f 94 c2             	sete   %dl
  1130be:	41 0f 45 c9          	cmovne %r9d,%ecx
  1130c2:	c1 e2 04             	shl    $0x4,%edx
  1130c5:	44 8d 52 08          	lea    0x8(%rdx),%r10d
  1130c9:	89 cf                	mov    %ecx,%edi
  1130cb:	c1 ef 08             	shr    $0x8,%edi
  1130ce:	84 c9                	test   %cl,%cl
  1130d0:	44 0f 45 d2          	cmovne %edx,%r10d
  1130d4:	0f 45 f9             	cmovne %ecx,%edi
  1130d7:	41 8d 5a 04          	lea    0x4(%r10),%ebx
  1130db:	89 fe                	mov    %edi,%esi
  1130dd:	c1 ee 04             	shr    $0x4,%esi
  1130e0:	40 f6 c7 0f          	test   $0xf,%dil
  1130e4:	41 0f 45 da          	cmovne %r10d,%ebx
  1130e8:	0f 45 f7             	cmovne %edi,%esi
  1130eb:	8d 53 02             	lea    0x2(%rbx),%edx
  1130ee:	89 f1                	mov    %esi,%ecx
  1130f0:	c1 e9 02             	shr    $0x2,%ecx
  1130f3:	40 f6 c6 03          	test   $0x3,%sil
  1130f7:	0f 45 d3             	cmovne %ebx,%edx
  1130fa:	0f 45 ce             	cmovne %esi,%ecx
  1130fd:	f6 c1 01             	test   $0x1,%cl
  113100:	75 07                	jne    113109 <__d2b+0x1e9>
  113102:	d1 e9                	shr    %ecx
  113104:	74 58                	je     11315e <__d2b+0x23e>
  113106:	83 c2 01             	add    $0x1,%edx
  113109:	41 89 c9             	mov    %ecx,%r9d
  11310c:	eb 55                	jmp    113163 <__d2b+0x243>
  11310e:	31 c0                	xor    %eax,%eax
  113110:	f3 0f 7e 44 24 08    	movq   0x8(%rsp),%xmm0
  113116:	e9 9d fe ff ff       	jmp    112fb8 <__d2b+0x98>
  11311b:	d1 eb                	shr    %ebx
  11311d:	ba 01 00 00 00       	mov    $0x1,%edx
  113122:	eb 0f                	jmp    113133 <__d2b+0x213>
  113124:	41 d1 e9             	shr    %r9d
  113127:	ba 01 00 00 00       	mov    $0x1,%edx
  11312c:	eb 35                	jmp    113163 <__d2b+0x243>
  11312e:	ba 20 00 00 00       	mov    $0x20,%edx
  113133:	b9 20 00 00 00       	mov    $0x20,%ecx
  113138:	29 d1                	sub    %edx,%ecx
  11313a:	44 89 ce             	mov    %r9d,%esi
  11313d:	d3 e6                	shl    %cl,%esi
  11313f:	09 de                	or     %ebx,%esi
  113141:	89 70 18             	mov    %esi,0x18(%rax)
  113144:	89 d1                	mov    %edx,%ecx
  113146:	41 d3 e9             	shr    %cl,%r9d
  113149:	44 89 48 1c          	mov    %r9d,0x1c(%rax)
  11314d:	41 83 f9 01          	cmp    $0x1,%r9d
  113151:	b9 02 00 00 00       	mov    $0x2,%ecx
  113156:	83 d9 00             	sbb    $0x0,%ecx
  113159:	89 48 14             	mov    %ecx,0x14(%rax)
  11315c:	eb 18                	jmp    113176 <__d2b+0x256>
  11315e:	ba 20 00 00 00       	mov    $0x20,%edx
  113163:	44 89 48 18          	mov    %r9d,0x18(%rax)
  113167:	c7 40 14 01 00 00 00 	movl   $0x1,0x14(%rax)
  11316e:	83 c2 20             	add    $0x20,%edx
  113171:	b9 01 00 00 00       	mov    $0x1,%ecx
  113176:	42 8d 3c 02          	lea    (%rdx,%r8,1),%edi
  11317a:	45 85 c0             	test   %r8d,%r8d
  11317d:	74 15                	je     113194 <__d2b+0x274>
  11317f:	81 c7 cd fb ff ff    	add    $0xfffffbcd,%edi
  113185:	41 89 3f             	mov    %edi,(%r15)
  113188:	b9 35 00 00 00       	mov    $0x35,%ecx
  11318d:	29 d1                	sub    %edx,%ecx
  11318f:	e9 86 00 00 00       	jmp    11321a <__d2b+0x2fa>
  113194:	81 c7 ce fb ff ff    	add    $0xfffffbce,%edi
  11319a:	41 89 3f             	mov    %edi,(%r15)
  11319d:	48 63 d1             	movslq %ecx,%rdx
  1131a0:	c1 e1 05             	shl    $0x5,%ecx
  1131a3:	8b 7c 90 14          	mov    0x14(%rax,%rdx,4),%edi
  1131a7:	31 f6                	xor    %esi,%esi
  1131a9:	81 ff 00 00 01 00    	cmp    $0x10000,%edi
  1131af:	40 0f 92 c6          	setb   %sil
  1131b3:	89 fa                	mov    %edi,%edx
  1131b5:	c1 e2 10             	shl    $0x10,%edx
  1131b8:	81 ff ff ff 00 00    	cmp    $0xffff,%edi
  1131be:	0f 47 d7             	cmova  %edi,%edx
  1131c1:	c1 e6 04             	shl    $0x4,%esi
  1131c4:	8d 5e 08             	lea    0x8(%rsi),%ebx
  1131c7:	89 d7                	mov    %edx,%edi
  1131c9:	c1 e7 08             	shl    $0x8,%edi
  1131cc:	81 fa ff ff ff 00    	cmp    $0xffffff,%edx
  1131d2:	0f 47 fa             	cmova  %edx,%edi
  1131d5:	0f 47 de             	cmova  %esi,%ebx
  1131d8:	89 fa                	mov    %edi,%edx
  1131da:	c1 e2 04             	shl    $0x4,%edx
  1131dd:	81 ff ff ff ff 0f    	cmp    $0xfffffff,%edi
  1131e3:	0f 47 d7             	cmova  %edi,%edx
  1131e6:	8d 7b 04             	lea    0x4(%rbx),%edi
  1131e9:	0f 47 fb             	cmova  %ebx,%edi
  1131ec:	8d 5f 02             	lea    0x2(%rdi),%ebx
  1131ef:	8d 34 95 00 00 00 00 	lea    0x0(,%rdx,4),%esi
  1131f6:	81 fa ff ff ff 3f    	cmp    $0x3fffffff,%edx
  1131fc:	0f 47 f2             	cmova  %edx,%esi
  1131ff:	0f 47 df             	cmova  %edi,%ebx
  113202:	85 f6                	test   %esi,%esi
  113204:	78 10                	js     113216 <__d2b+0x2f6>
  113206:	ba 20 00 00 00       	mov    $0x20,%edx
  11320b:	f7 c6 00 00 00 40    	test   $0x40000000,%esi
  113211:	74 05                	je     113218 <__d2b+0x2f8>
  113213:	83 c3 01             	add    $0x1,%ebx
  113216:	89 da                	mov    %ebx,%edx
  113218:	29 d1                	sub    %edx,%ecx
  11321a:	41 89 0e             	mov    %ecx,(%r14)
  11321d:	48 83 c4 10          	add    $0x10,%rsp
  113221:	5b                   	pop    %rbx
  113222:	41 5e                	pop    %r14
  113224:	41 5f                	pop    %r15
  113226:	c3                   	ret    
  113227:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  11322e:	00 00 

0000000000113230 <__ratio>:
  113230:	41 56                	push   %r14
  113232:	53                   	push   %rbx
  113233:	48 83 ec 18          	sub    $0x18,%rsp
  113237:	49 89 f6             	mov    %rsi,%r14
  11323a:	48 89 fb             	mov    %rdi,%rbx
  11323d:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  113242:	e8 99 fb ff ff       	call   112de0 <__b2d>
  113247:	66 0f d6 44 24 10    	movq   %xmm0,0x10(%rsp)
  11324d:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  113252:	4c 89 f7             	mov    %r14,%rdi
  113255:	e8 86 fb ff ff       	call   112de0 <__b2d>
  11325a:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  11325e:	2b 44 24 08          	sub    0x8(%rsp),%eax
  113262:	8b 4b 14             	mov    0x14(%rbx),%ecx
  113265:	41 2b 4e 14          	sub    0x14(%r14),%ecx
  113269:	c1 e1 05             	shl    $0x5,%ecx
  11326c:	01 c1                	add    %eax,%ecx
  11326e:	89 c8                	mov    %ecx,%eax
  113270:	c1 e0 14             	shl    $0x14,%eax
  113273:	85 c9                	test   %ecx,%ecx
  113275:	7e 21                	jle    113298 <__ratio+0x68>
  113277:	f3 0f 7e 4c 24 10    	movq   0x10(%rsp),%xmm1
  11327d:	66 48 0f 7e c9       	movq   %xmm1,%rcx
  113282:	89 ca                	mov    %ecx,%edx
  113284:	48 c1 e9 20          	shr    $0x20,%rcx
  113288:	01 c8                	add    %ecx,%eax
  11328a:	48 c1 e0 20          	shl    $0x20,%rax
  11328e:	48 09 c2             	or     %rax,%rdx
  113291:	66 48 0f 6e ca       	movq   %rdx,%xmm1
  113296:	eb 1f                	jmp    1132b7 <__ratio+0x87>
  113298:	66 48 0f 7e c1       	movq   %xmm0,%rcx
  11329d:	89 ca                	mov    %ecx,%edx
  11329f:	48 c1 e9 20          	shr    $0x20,%rcx
  1132a3:	29 c1                	sub    %eax,%ecx
  1132a5:	48 c1 e1 20          	shl    $0x20,%rcx
  1132a9:	48 09 ca             	or     %rcx,%rdx
  1132ac:	66 48 0f 6e c2       	movq   %rdx,%xmm0
  1132b1:	f3 0f 7e 4c 24 10    	movq   0x10(%rsp),%xmm1
  1132b7:	f2 0f 5e c8          	divsd  %xmm0,%xmm1
  1132bb:	66 0f 28 c1          	movapd %xmm1,%xmm0
  1132bf:	48 83 c4 18          	add    $0x18,%rsp
  1132c3:	5b                   	pop    %rbx
  1132c4:	41 5e                	pop    %r14
  1132c6:	c3                   	ret    
  1132c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  1132ce:	00 00 

00000000001132d0 <_mprec_log10>:
  1132d0:	83 ff 18             	cmp    $0x18,%edi
  1132d3:	7d 10                	jge    1132e5 <_mprec_log10+0x15>
  1132d5:	48 63 c7             	movslq %edi,%rax
  1132d8:	48 8b 0d 99 3a 00 00 	mov    0x3a99(%rip),%rcx        # 116d78 <_global_impure_ptr+0x60>
  1132df:	f2 0f 10 04 c1       	movsd  (%rcx,%rax,8),%xmm0
  1132e4:	c3                   	ret    
  1132e5:	83 c7 01             	add    $0x1,%edi
  1132e8:	f2 0f 10 05 c8 e5 fe 	movsd  -0x11a38(%rip),%xmm0        # 1018b8 <_ZTVN3usb14HIDMouseDriverE+0x88>
  1132ef:	ff 
  1132f0:	f2 0f 10 0d 98 e5 fe 	movsd  -0x11a68(%rip),%xmm1        # 101890 <_ZTVN3usb14HIDMouseDriverE+0x60>
  1132f7:	ff 
  1132f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  1132ff:	00 
  113300:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  113304:	83 c7 ff             	add    $0xffffffff,%edi
  113307:	83 ff 01             	cmp    $0x1,%edi
  11330a:	7f f4                	jg     113300 <_mprec_log10+0x30>
  11330c:	c3                   	ret    
  11330d:	0f 1f 00             	nopl   (%rax)

0000000000113310 <__copybits>:
  113310:	83 c6 ff             	add    $0xffffffff,%esi
  113313:	c1 fe 05             	sar    $0x5,%esi
  113316:	4c 63 ce             	movslq %esi,%r9
  113319:	4e 8d 04 8f          	lea    (%rdi,%r9,4),%r8
  11331d:	49 83 c0 04          	add    $0x4,%r8
  113321:	48 63 42 14          	movslq 0x14(%rdx),%rax
  113325:	48 89 f9             	mov    %rdi,%rcx
  113328:	48 85 c0             	test   %rax,%rax
  11332b:	0f 8e 26 02 00 00    	jle    113557 <__copybits+0x247>
  113331:	55                   	push   %rbp
  113332:	41 56                	push   %r14
  113334:	53                   	push   %rbx
  113335:	4c 8d 34 82          	lea    (%rdx,%rax,4),%r14
  113339:	49 83 c6 18          	add    $0x18,%r14
  11333d:	48 8d 4a 1c          	lea    0x1c(%rdx),%rcx
  113341:	49 39 ce             	cmp    %rcx,%r14
  113344:	49 89 ca             	mov    %rcx,%r10
  113347:	4d 0f 47 d6          	cmova  %r14,%r10
  11334b:	48 8d 42 18          	lea    0x18(%rdx),%rax
  11334f:	48 c7 c3 e7 ff ff ff 	mov    $0xffffffffffffffe7,%rbx
  113356:	48 29 d3             	sub    %rdx,%rbx
  113359:	49 01 da             	add    %rbx,%r10
  11335c:	49 c1 ea 02          	shr    $0x2,%r10
  113360:	49 83 c2 01          	add    $0x1,%r10
  113364:	49 83 fa 07          	cmp    $0x7,%r10
  113368:	77 08                	ja     113372 <__copybits+0x62>
  11336a:	48 89 f9             	mov    %rdi,%rcx
  11336d:	e9 2f 01 00 00       	jmp    1134a1 <__copybits+0x191>
  113372:	49 39 ce             	cmp    %rcx,%r14
  113375:	49 0f 47 ce          	cmova  %r14,%rcx
  113379:	48 8d 34 19          	lea    (%rcx,%rbx,1),%rsi
  11337d:	48 83 c6 1c          	add    $0x1c,%rsi
  113381:	48 83 e6 fc          	and    $0xfffffffffffffffc,%rsi
  113385:	48 01 d6             	add    %rdx,%rsi
  113388:	48 39 fe             	cmp    %rdi,%rsi
  11338b:	76 1f                	jbe    1133ac <__copybits+0x9c>
  11338d:	48 8d 72 18          	lea    0x18(%rdx),%rsi
  113391:	48 01 d9             	add    %rbx,%rcx
  113394:	48 83 e1 fc          	and    $0xfffffffffffffffc,%rcx
  113398:	48 8d 2c 0f          	lea    (%rdi,%rcx,1),%rbp
  11339c:	48 83 c5 04          	add    $0x4,%rbp
  1133a0:	48 89 f9             	mov    %rdi,%rcx
  1133a3:	48 39 ee             	cmp    %rbp,%rsi
  1133a6:	0f 82 f5 00 00 00    	jb     1134a1 <__copybits+0x191>
  1133ac:	4d 89 d3             	mov    %r10,%r11
  1133af:	49 83 e3 f8          	and    $0xfffffffffffffff8,%r11
  1133b3:	49 8d 73 f8          	lea    -0x8(%r11),%rsi
  1133b7:	48 89 f0             	mov    %rsi,%rax
  1133ba:	48 c1 e8 03          	shr    $0x3,%rax
  1133be:	48 83 c0 01          	add    $0x1,%rax
  1133c2:	89 c1                	mov    %eax,%ecx
  1133c4:	83 e1 03             	and    $0x3,%ecx
  1133c7:	48 83 fe 18          	cmp    $0x18,%rsi
  1133cb:	73 0c                	jae    1133d9 <__copybits+0xc9>
  1133cd:	31 c0                	xor    %eax,%eax
  1133cf:	48 85 c9             	test   %rcx,%rcx
  1133d2:	75 7d                	jne    113451 <__copybits+0x141>
  1133d4:	e9 b3 00 00 00       	jmp    11348c <__copybits+0x17c>
  1133d9:	be 01 00 00 00       	mov    $0x1,%esi
  1133de:	48 29 c6             	sub    %rax,%rsi
  1133e1:	48 8d 1c 31          	lea    (%rcx,%rsi,1),%rbx
  1133e5:	48 83 c3 ff          	add    $0xffffffffffffffff,%rbx
  1133e9:	31 c0                	xor    %eax,%eax
  1133eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  1133f0:	0f 10 44 82 18       	movups 0x18(%rdx,%rax,4),%xmm0
  1133f5:	0f 10 4c 82 28       	movups 0x28(%rdx,%rax,4),%xmm1
  1133fa:	0f 11 04 87          	movups %xmm0,(%rdi,%rax,4)
  1133fe:	0f 11 4c 87 10       	movups %xmm1,0x10(%rdi,%rax,4)
  113403:	0f 10 44 82 38       	movups 0x38(%rdx,%rax,4),%xmm0
  113408:	0f 10 4c 82 48       	movups 0x48(%rdx,%rax,4),%xmm1
  11340d:	0f 11 44 87 20       	movups %xmm0,0x20(%rdi,%rax,4)
  113412:	0f 11 4c 87 30       	movups %xmm1,0x30(%rdi,%rax,4)
  113417:	0f 10 44 82 58       	movups 0x58(%rdx,%rax,4),%xmm0
  11341c:	0f 10 4c 82 68       	movups 0x68(%rdx,%rax,4),%xmm1
  113421:	0f 11 44 87 40       	movups %xmm0,0x40(%rdi,%rax,4)
  113426:	0f 11 4c 87 50       	movups %xmm1,0x50(%rdi,%rax,4)
  11342b:	0f 10 44 82 78       	movups 0x78(%rdx,%rax,4),%xmm0
  113430:	0f 10 8c 82 88 00 00 	movups 0x88(%rdx,%rax,4),%xmm1
  113437:	00 
  113438:	0f 11 44 87 60       	movups %xmm0,0x60(%rdi,%rax,4)
  11343d:	0f 11 4c 87 70       	movups %xmm1,0x70(%rdi,%rax,4)
  113442:	48 83 c0 20          	add    $0x20,%rax
  113446:	48 83 c3 04          	add    $0x4,%rbx
  11344a:	75 a4                	jne    1133f0 <__copybits+0xe0>
  11344c:	48 85 c9             	test   %rcx,%rcx
  11344f:	74 3b                	je     11348c <__copybits+0x17c>
  113451:	48 8d 1c 82          	lea    (%rdx,%rax,4),%rbx
  113455:	48 83 c3 28          	add    $0x28,%rbx
  113459:	48 8d 04 87          	lea    (%rdi,%rax,4),%rax
  11345d:	48 83 c0 10          	add    $0x10,%rax
  113461:	48 f7 d9             	neg    %rcx
  113464:	31 f6                	xor    %esi,%esi
  113466:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11346d:	00 00 00 
  113470:	0f 10 44 33 f0       	movups -0x10(%rbx,%rsi,1),%xmm0
  113475:	0f 10 0c 33          	movups (%rbx,%rsi,1),%xmm1
  113479:	0f 11 44 30 f0       	movups %xmm0,-0x10(%rax,%rsi,1)
  11347e:	0f 11 0c 30          	movups %xmm1,(%rax,%rsi,1)
  113482:	48 83 c6 20          	add    $0x20,%rsi
  113486:	48 83 c1 01          	add    $0x1,%rcx
  11348a:	75 e4                	jne    113470 <__copybits+0x160>
  11348c:	4d 39 da             	cmp    %r11,%r10
  11348f:	0f 84 ba 00 00 00    	je     11354f <__copybits+0x23f>
  113495:	4a 8d 0c 9f          	lea    (%rdi,%r11,4),%rcx
  113499:	4a 8d 04 9a          	lea    (%rdx,%r11,4),%rax
  11349d:	48 83 c0 18          	add    $0x18,%rax
  1134a1:	48 8d 50 04          	lea    0x4(%rax),%rdx
  1134a5:	49 39 d6             	cmp    %rdx,%r14
  1134a8:	49 0f 47 d6          	cmova  %r14,%rdx
  1134ac:	49 89 c3             	mov    %rax,%r11
  1134af:	49 f7 d3             	not    %r11
  1134b2:	49 01 d3             	add    %rdx,%r11
  1134b5:	44 89 da             	mov    %r11d,%edx
  1134b8:	c1 ea 02             	shr    $0x2,%edx
  1134bb:	83 c2 01             	add    $0x1,%edx
  1134be:	48 83 e2 07          	and    $0x7,%rdx
  1134c2:	74 25                	je     1134e9 <__copybits+0x1d9>
  1134c4:	31 f6                	xor    %esi,%esi
  1134c6:	31 db                	xor    %ebx,%ebx
  1134c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  1134cf:	00 
  1134d0:	8b 2c 98             	mov    (%rax,%rbx,4),%ebp
  1134d3:	89 2c 99             	mov    %ebp,(%rcx,%rbx,4)
  1134d6:	48 83 c3 01          	add    $0x1,%rbx
  1134da:	48 83 c6 fc          	add    $0xfffffffffffffffc,%rsi
  1134de:	48 39 da             	cmp    %rbx,%rdx
  1134e1:	75 ed                	jne    1134d0 <__copybits+0x1c0>
  1134e3:	48 29 f1             	sub    %rsi,%rcx
  1134e6:	48 29 f0             	sub    %rsi,%rax
  1134e9:	49 83 fb 1c          	cmp    $0x1c,%r11
  1134ed:	72 60                	jb     11354f <__copybits+0x23f>
  1134ef:	31 d2                	xor    %edx,%edx
  1134f1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1134f8:	00 00 00 
  1134fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  113500:	8b 34 10             	mov    (%rax,%rdx,1),%esi
  113503:	89 34 11             	mov    %esi,(%rcx,%rdx,1)
  113506:	8b 74 10 04          	mov    0x4(%rax,%rdx,1),%esi
  11350a:	89 74 11 04          	mov    %esi,0x4(%rcx,%rdx,1)
  11350e:	8b 74 10 08          	mov    0x8(%rax,%rdx,1),%esi
  113512:	89 74 11 08          	mov    %esi,0x8(%rcx,%rdx,1)
  113516:	8b 74 10 0c          	mov    0xc(%rax,%rdx,1),%esi
  11351a:	89 74 11 0c          	mov    %esi,0xc(%rcx,%rdx,1)
  11351e:	8b 74 10 10          	mov    0x10(%rax,%rdx,1),%esi
  113522:	89 74 11 10          	mov    %esi,0x10(%rcx,%rdx,1)
  113526:	8b 74 10 14          	mov    0x14(%rax,%rdx,1),%esi
  11352a:	89 74 11 14          	mov    %esi,0x14(%rcx,%rdx,1)
  11352e:	8b 74 10 18          	mov    0x18(%rax,%rdx,1),%esi
  113532:	89 74 11 18          	mov    %esi,0x18(%rcx,%rdx,1)
  113536:	8b 74 10 1c          	mov    0x1c(%rax,%rdx,1),%esi
  11353a:	89 74 11 1c          	mov    %esi,0x1c(%rcx,%rdx,1)
  11353e:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
  113542:	48 83 c6 20          	add    $0x20,%rsi
  113546:	48 83 c2 20          	add    $0x20,%rdx
  11354a:	4c 39 f6             	cmp    %r14,%rsi
  11354d:	72 b1                	jb     113500 <__copybits+0x1f0>
  11354f:	4a 8d 0c 97          	lea    (%rdi,%r10,4),%rcx
  113553:	5b                   	pop    %rbx
  113554:	41 5e                	pop    %r14
  113556:	5d                   	pop    %rbp
  113557:	4c 39 c1             	cmp    %r8,%rcx
  11355a:	0f 83 40 01 00 00    	jae    1136a0 <__copybits+0x390>
  113560:	4a 8d 04 8f          	lea    (%rdi,%r9,4),%rax
  113564:	48 39 c1             	cmp    %rax,%rcx
  113567:	48 89 c2             	mov    %rax,%rdx
  11356a:	48 0f 47 d1          	cmova  %rcx,%rdx
  11356e:	41 b9 03 00 00 00    	mov    $0x3,%r9d
  113574:	49 29 c9             	sub    %rcx,%r9
  113577:	49 01 d1             	add    %rdx,%r9
  11357a:	49 c1 e9 02          	shr    $0x2,%r9
  11357e:	49 83 c1 01          	add    $0x1,%r9
  113582:	49 83 f9 07          	cmp    $0x7,%r9
  113586:	0f 86 fe 00 00 00    	jbe    11368a <__copybits+0x37a>
  11358c:	4d 89 c8             	mov    %r9,%r8
  11358f:	49 83 e0 f8          	and    $0xfffffffffffffff8,%r8
  113593:	49 8d 70 f8          	lea    -0x8(%r8),%rsi
  113597:	48 89 f2             	mov    %rsi,%rdx
  11359a:	48 c1 ea 03          	shr    $0x3,%rdx
  11359e:	48 83 c2 01          	add    $0x1,%rdx
  1135a2:	89 d7                	mov    %edx,%edi
  1135a4:	83 e7 07             	and    $0x7,%edi
  1135a7:	48 83 fe 38          	cmp    $0x38,%rsi
  1135ab:	73 10                	jae    1135bd <__copybits+0x2ad>
  1135ad:	31 f6                	xor    %esi,%esi
  1135af:	48 85 ff             	test   %rdi,%rdi
  1135b2:	0f 85 9e 00 00 00    	jne    113656 <__copybits+0x346>
  1135b8:	e9 c4 00 00 00       	jmp    113681 <__copybits+0x371>
  1135bd:	be 01 00 00 00       	mov    $0x1,%esi
  1135c2:	48 29 d6             	sub    %rdx,%rsi
  1135c5:	48 8d 14 37          	lea    (%rdi,%rsi,1),%rdx
  1135c9:	48 83 c2 ff          	add    $0xffffffffffffffff,%rdx
  1135cd:	31 f6                	xor    %esi,%esi
  1135cf:	0f 57 c0             	xorps  %xmm0,%xmm0
  1135d2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1135d9:	00 00 00 
  1135dc:	0f 1f 40 00          	nopl   0x0(%rax)
  1135e0:	0f 11 04 b1          	movups %xmm0,(%rcx,%rsi,4)
  1135e4:	0f 11 44 b1 10       	movups %xmm0,0x10(%rcx,%rsi,4)
  1135e9:	0f 11 44 b1 20       	movups %xmm0,0x20(%rcx,%rsi,4)
  1135ee:	0f 11 44 b1 30       	movups %xmm0,0x30(%rcx,%rsi,4)
  1135f3:	0f 11 44 b1 40       	movups %xmm0,0x40(%rcx,%rsi,4)
  1135f8:	0f 11 44 b1 50       	movups %xmm0,0x50(%rcx,%rsi,4)
  1135fd:	0f 11 44 b1 60       	movups %xmm0,0x60(%rcx,%rsi,4)
  113602:	0f 11 44 b1 70       	movups %xmm0,0x70(%rcx,%rsi,4)
  113607:	0f 11 84 b1 80 00 00 	movups %xmm0,0x80(%rcx,%rsi,4)
  11360e:	00 
  11360f:	0f 11 84 b1 90 00 00 	movups %xmm0,0x90(%rcx,%rsi,4)
  113616:	00 
  113617:	0f 11 84 b1 a0 00 00 	movups %xmm0,0xa0(%rcx,%rsi,4)
  11361e:	00 
  11361f:	0f 11 84 b1 b0 00 00 	movups %xmm0,0xb0(%rcx,%rsi,4)
  113626:	00 
  113627:	0f 11 84 b1 c0 00 00 	movups %xmm0,0xc0(%rcx,%rsi,4)
  11362e:	00 
  11362f:	0f 11 84 b1 d0 00 00 	movups %xmm0,0xd0(%rcx,%rsi,4)
  113636:	00 
  113637:	0f 11 84 b1 e0 00 00 	movups %xmm0,0xe0(%rcx,%rsi,4)
  11363e:	00 
  11363f:	0f 11 84 b1 f0 00 00 	movups %xmm0,0xf0(%rcx,%rsi,4)
  113646:	00 
  113647:	48 83 c6 40          	add    $0x40,%rsi
  11364b:	48 83 c2 08          	add    $0x8,%rdx
  11364f:	75 8f                	jne    1135e0 <__copybits+0x2d0>
  113651:	48 85 ff             	test   %rdi,%rdi
  113654:	74 2b                	je     113681 <__copybits+0x371>
  113656:	48 8d 14 b1          	lea    (%rcx,%rsi,4),%rdx
  11365a:	48 83 c2 10          	add    $0x10,%rdx
  11365e:	48 f7 df             	neg    %rdi
  113661:	0f 57 c0             	xorps  %xmm0,%xmm0
  113664:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11366b:	00 00 00 
  11366e:	66 90                	xchg   %ax,%ax
  113670:	0f 11 42 f0          	movups %xmm0,-0x10(%rdx)
  113674:	0f 11 02             	movups %xmm0,(%rdx)
  113677:	48 83 c2 20          	add    $0x20,%rdx
  11367b:	48 83 c7 01          	add    $0x1,%rdi
  11367f:	75 ef                	jne    113670 <__copybits+0x360>
  113681:	4d 39 c1             	cmp    %r8,%r9
  113684:	74 1a                	je     1136a0 <__copybits+0x390>
  113686:	4a 8d 0c 81          	lea    (%rcx,%r8,4),%rcx
  11368a:	48 83 c1 fc          	add    $0xfffffffffffffffc,%rcx
  11368e:	66 90                	xchg   %ax,%ax
  113690:	c7 41 04 00 00 00 00 	movl   $0x0,0x4(%rcx)
  113697:	48 83 c1 04          	add    $0x4,%rcx
  11369b:	48 39 c1             	cmp    %rax,%rcx
  11369e:	72 f0                	jb     113690 <__copybits+0x380>
  1136a0:	c3                   	ret    
  1136a1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1136a8:	00 00 00 
  1136ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000001136b0 <__any_on>:
  1136b0:	8b 4f 14             	mov    0x14(%rdi),%ecx
  1136b3:	89 f2                	mov    %esi,%edx
  1136b5:	c1 fa 05             	sar    $0x5,%edx
  1136b8:	39 ca                	cmp    %ecx,%edx
  1136ba:	7f 29                	jg     1136e5 <__any_on+0x35>
  1136bc:	7d 25                	jge    1136e3 <__any_on+0x33>
  1136be:	83 e6 1f             	and    $0x1f,%esi
  1136c1:	74 20                	je     1136e3 <__any_on+0x33>
  1136c3:	48 63 c2             	movslq %edx,%rax
  1136c6:	44 8b 44 87 18       	mov    0x18(%rdi,%rax,4),%r8d
  1136cb:	45 89 c1             	mov    %r8d,%r9d
  1136ce:	89 f1                	mov    %esi,%ecx
  1136d0:	41 d3 e9             	shr    %cl,%r9d
  1136d3:	41 d3 e1             	shl    %cl,%r9d
  1136d6:	b8 01 00 00 00       	mov    $0x1,%eax
  1136db:	89 d1                	mov    %edx,%ecx
  1136dd:	45 39 c1             	cmp    %r8d,%r9d
  1136e0:	74 03                	je     1136e5 <__any_on+0x35>
  1136e2:	c3                   	ret    
  1136e3:	89 d1                	mov    %edx,%ecx
  1136e5:	48 63 c1             	movslq %ecx,%rax
  1136e8:	48 8d 04 87          	lea    (%rdi,%rax,4),%rax
  1136ec:	48 83 c0 18          	add    $0x18,%rax
  1136f0:	48 83 c7 18          	add    $0x18,%rdi
  1136f4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1136fb:	00 00 00 
  1136fe:	66 90                	xchg   %ax,%ax
  113700:	48 39 f8             	cmp    %rdi,%rax
  113703:	76 10                	jbe    113715 <__any_on+0x65>
  113705:	83 78 fc 00          	cmpl   $0x0,-0x4(%rax)
  113709:	48 8d 40 fc          	lea    -0x4(%rax),%rax
  11370d:	74 f1                	je     113700 <__any_on+0x50>
  11370f:	b8 01 00 00 00       	mov    $0x1,%eax
  113714:	c3                   	ret    
  113715:	31 c0                	xor    %eax,%eax
  113717:	c3                   	ret    
  113718:	cc                   	int3   
  113719:	cc                   	int3   
  11371a:	cc                   	int3   
  11371b:	cc                   	int3   
  11371c:	cc                   	int3   
  11371d:	cc                   	int3   
  11371e:	cc                   	int3   
  11371f:	cc                   	int3   

0000000000113720 <_calloc_r>:
  113720:	53                   	push   %rbx
  113721:	48 0f af f2          	imul   %rdx,%rsi
  113725:	e8 26 86 ff ff       	call   10bd50 <_malloc_r>
  11372a:	48 89 c3             	mov    %rax,%rbx
  11372d:	48 85 c0             	test   %rax,%rax
  113730:	74 68                	je     11379a <_calloc_r+0x7a>
  113732:	48 8b 53 f8          	mov    -0x8(%rbx),%rdx
  113736:	48 83 c2 f8          	add    $0xfffffffffffffff8,%rdx
  11373a:	48 83 e2 fc          	and    $0xfffffffffffffffc,%rdx
  11373e:	48 83 fa 48          	cmp    $0x48,%rdx
  113742:	77 2f                	ja     113773 <_calloc_r+0x53>
  113744:	48 89 d8             	mov    %rbx,%rax
  113747:	48 83 fa 28          	cmp    $0x28,%rdx
  11374b:	72 3f                	jb     11378c <_calloc_r+0x6c>
  11374d:	0f 57 c0             	xorps  %xmm0,%xmm0
  113750:	0f 11 03             	movups %xmm0,(%rbx)
  113753:	48 83 fa 38          	cmp    $0x38,%rdx
  113757:	72 26                	jb     11377f <_calloc_r+0x5f>
  113759:	0f 11 43 10          	movups %xmm0,0x10(%rbx)
  11375d:	48 89 d8             	mov    %rbx,%rax
  113760:	48 83 fa 48          	cmp    $0x48,%rdx
  113764:	72 22                	jb     113788 <_calloc_r+0x68>
  113766:	48 83 c0 30          	add    $0x30,%rax
  11376a:	0f 57 c0             	xorps  %xmm0,%xmm0
  11376d:	0f 11 43 20          	movups %xmm0,0x20(%rbx)
  113771:	eb 19                	jmp    11378c <_calloc_r+0x6c>
  113773:	31 f6                	xor    %esi,%esi
  113775:	48 89 df             	mov    %rbx,%rdi
  113778:	e8 23 80 ff ff       	call   10b7a0 <memset>
  11377d:	eb 1b                	jmp    11379a <_calloc_r+0x7a>
  11377f:	48 89 d8             	mov    %rbx,%rax
  113782:	48 83 c0 10          	add    $0x10,%rax
  113786:	eb 04                	jmp    11378c <_calloc_r+0x6c>
  113788:	48 83 c0 20          	add    $0x20,%rax
  11378c:	0f 57 c0             	xorps  %xmm0,%xmm0
  11378f:	0f 11 00             	movups %xmm0,(%rax)
  113792:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  113799:	00 
  11379a:	48 89 d8             	mov    %rbx,%rax
  11379d:	5b                   	pop    %rbx
  11379e:	c3                   	ret    
  11379f:	cc                   	int3   

00000000001137a0 <__localeconv_l>:
  1137a0:	48 8d 87 00 01 00 00 	lea    0x100(%rdi),%rax
  1137a7:	c3                   	ret    
  1137a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  1137af:	00 

00000000001137b0 <_localeconv_r>:
  1137b0:	b8 00 01 00 00       	mov    $0x100,%eax
  1137b5:	48 03 05 74 35 00 00 	add    0x3574(%rip),%rax        # 116d30 <_global_impure_ptr+0x18>
  1137bc:	c3                   	ret    
  1137bd:	0f 1f 00             	nopl   (%rax)

00000000001137c0 <localeconv>:
  1137c0:	b8 00 01 00 00       	mov    $0x100,%eax
  1137c5:	48 03 05 64 35 00 00 	add    0x3564(%rip),%rax        # 116d30 <_global_impure_ptr+0x18>
  1137cc:	c3                   	ret    
  1137cd:	cc                   	int3   
  1137ce:	cc                   	int3   
  1137cf:	cc                   	int3   

00000000001137d0 <_setlocale_r>:
  1137d0:	53                   	push   %rbx
  1137d1:	48 85 d2             	test   %rdx,%rdx
  1137d4:	74 40                	je     113816 <_setlocale_r+0x46>
  1137d6:	48 89 d3             	mov    %rdx,%rbx
  1137d9:	48 8d 35 f6 cc fe ff 	lea    -0x1330a(%rip),%rsi        # 1004d6 <__dso_handle+0x4d6>
  1137e0:	48 89 d7             	mov    %rdx,%rdi
  1137e3:	e8 d8 00 00 00       	call   1138c0 <strcmp>
  1137e8:	85 c0                	test   %eax,%eax
  1137ea:	74 2a                	je     113816 <_setlocale_r+0x46>
  1137ec:	48 8d 35 31 cc fe ff 	lea    -0x133cf(%rip),%rsi        # 100424 <__dso_handle+0x424>
  1137f3:	48 89 df             	mov    %rbx,%rdi
  1137f6:	e8 c5 00 00 00       	call   1138c0 <strcmp>
  1137fb:	85 c0                	test   %eax,%eax
  1137fd:	74 17                	je     113816 <_setlocale_r+0x46>
  1137ff:	48 8d 35 3e d6 fe ff 	lea    -0x129c2(%rip),%rsi        # 100e44 <__dso_handle+0xe44>
  113806:	48 89 df             	mov    %rbx,%rdi
  113809:	e8 b2 00 00 00       	call   1138c0 <strcmp>
  11380e:	85 c0                	test   %eax,%eax
  113810:	74 04                	je     113816 <_setlocale_r+0x46>
  113812:	31 c0                	xor    %eax,%eax
  113814:	5b                   	pop    %rbx
  113815:	c3                   	ret    
  113816:	48 8d 05 07 cc fe ff 	lea    -0x133f9(%rip),%rax        # 100424 <__dso_handle+0x424>
  11381d:	5b                   	pop    %rbx
  11381e:	c3                   	ret    
  11381f:	90                   	nop

0000000000113820 <__locale_mb_cur_max>:
  113820:	48 8b 05 09 35 00 00 	mov    0x3509(%rip),%rax        # 116d30 <_global_impure_ptr+0x18>
  113827:	0f be 80 60 01 00 00 	movsbl 0x160(%rax),%eax
  11382e:	c3                   	ret    
  11382f:	90                   	nop

0000000000113830 <setlocale>:
  113830:	53                   	push   %rbx
  113831:	48 85 f6             	test   %rsi,%rsi
  113834:	74 40                	je     113876 <setlocale+0x46>
  113836:	48 89 f3             	mov    %rsi,%rbx
  113839:	48 8d 35 96 cc fe ff 	lea    -0x1336a(%rip),%rsi        # 1004d6 <__dso_handle+0x4d6>
  113840:	48 89 df             	mov    %rbx,%rdi
  113843:	e8 78 00 00 00       	call   1138c0 <strcmp>
  113848:	85 c0                	test   %eax,%eax
  11384a:	74 2a                	je     113876 <setlocale+0x46>
  11384c:	48 8d 35 d1 cb fe ff 	lea    -0x1342f(%rip),%rsi        # 100424 <__dso_handle+0x424>
  113853:	48 89 df             	mov    %rbx,%rdi
  113856:	e8 65 00 00 00       	call   1138c0 <strcmp>
  11385b:	85 c0                	test   %eax,%eax
  11385d:	74 17                	je     113876 <setlocale+0x46>
  11385f:	48 8d 35 de d5 fe ff 	lea    -0x12a22(%rip),%rsi        # 100e44 <__dso_handle+0xe44>
  113866:	48 89 df             	mov    %rbx,%rdi
  113869:	e8 52 00 00 00       	call   1138c0 <strcmp>
  11386e:	85 c0                	test   %eax,%eax
  113870:	74 04                	je     113876 <setlocale+0x46>
  113872:	31 c0                	xor    %eax,%eax
  113874:	5b                   	pop    %rbx
  113875:	c3                   	ret    
  113876:	48 8d 05 a7 cb fe ff 	lea    -0x13459(%rip),%rax        # 100424 <__dso_handle+0x424>
  11387d:	5b                   	pop    %rbx
  11387e:	c3                   	ret    
  11387f:	cc                   	int3   

0000000000113880 <_mbtowc_r>:
  113880:	48 8b 05 a9 34 00 00 	mov    0x34a9(%rip),%rax        # 116d30 <_global_impure_ptr+0x18>
  113887:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  11388e:	ff e0                	jmp    *%rax

0000000000113890 <__ascii_mbtowc>:
  113890:	48 85 f6             	test   %rsi,%rsi
  113893:	48 8d 44 24 fc       	lea    -0x4(%rsp),%rax
  113898:	48 0f 45 c6          	cmovne %rsi,%rax
  11389c:	48 85 d2             	test   %rdx,%rdx
  11389f:	74 13                	je     1138b4 <__ascii_mbtowc+0x24>
  1138a1:	48 85 c9             	test   %rcx,%rcx
  1138a4:	74 11                	je     1138b7 <__ascii_mbtowc+0x27>
  1138a6:	0f b6 0a             	movzbl (%rdx),%ecx
  1138a9:	89 08                	mov    %ecx,(%rax)
  1138ab:	31 c0                	xor    %eax,%eax
  1138ad:	80 3a 00             	cmpb   $0x0,(%rdx)
  1138b0:	0f 95 c0             	setne  %al
  1138b3:	c3                   	ret    
  1138b4:	31 c0                	xor    %eax,%eax
  1138b6:	c3                   	ret    
  1138b7:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  1138bc:	c3                   	ret    
  1138bd:	cc                   	int3   
  1138be:	cc                   	int3   
  1138bf:	cc                   	int3   

00000000001138c0 <strcmp>:
  1138c0:	89 f0                	mov    %esi,%eax
  1138c2:	09 f8                	or     %edi,%eax
  1138c4:	a8 07                	test   $0x7,%al
  1138c6:	75 49                	jne    113911 <strcmp+0x51>
  1138c8:	48 8b 07             	mov    (%rdi),%rax
  1138cb:	48 3b 06             	cmp    (%rsi),%rax
  1138ce:	75 41                	jne    113911 <strcmp+0x51>
  1138d0:	49 b8 80 80 80 80 80 	movabs $0x8080808080808080,%r8
  1138d7:	80 80 80 
  1138da:	48 ba ff fe fe fe fe 	movabs $0xfefefefefefefeff,%rdx
  1138e1:	fe fe fe 
  1138e4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1138eb:	00 00 00 
  1138ee:	66 90                	xchg   %ax,%ax
  1138f0:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  1138f4:	48 f7 d0             	not    %rax
  1138f7:	4c 21 c0             	and    %r8,%rax
  1138fa:	48 85 c8             	test   %rcx,%rax
  1138fd:	75 3f                	jne    11393e <strcmp+0x7e>
  1138ff:	48 8b 47 08          	mov    0x8(%rdi),%rax
  113903:	48 83 c7 08          	add    $0x8,%rdi
  113907:	48 3b 46 08          	cmp    0x8(%rsi),%rax
  11390b:	48 8d 76 08          	lea    0x8(%rsi),%rsi
  11390f:	74 df                	je     1138f0 <strcmp+0x30>
  113911:	8a 07                	mov    (%rdi),%al
  113913:	84 c0                	test   %al,%al
  113915:	74 1c                	je     113933 <strcmp+0x73>
  113917:	48 83 c7 01          	add    $0x1,%rdi
  11391b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  113920:	3a 06                	cmp    (%rsi),%al
  113922:	75 11                	jne    113935 <strcmp+0x75>
  113924:	48 83 c6 01          	add    $0x1,%rsi
  113928:	0f b6 07             	movzbl (%rdi),%eax
  11392b:	48 83 c7 01          	add    $0x1,%rdi
  11392f:	84 c0                	test   %al,%al
  113931:	75 ed                	jne    113920 <strcmp+0x60>
  113933:	31 c0                	xor    %eax,%eax
  113935:	0f b6 c0             	movzbl %al,%eax
  113938:	0f b6 0e             	movzbl (%rsi),%ecx
  11393b:	29 c8                	sub    %ecx,%eax
  11393d:	c3                   	ret    
  11393e:	31 c0                	xor    %eax,%eax
  113940:	c3                   	ret    
  113941:	cc                   	int3   
  113942:	cc                   	int3   
  113943:	cc                   	int3   
  113944:	cc                   	int3   
  113945:	cc                   	int3   
  113946:	cc                   	int3   
  113947:	cc                   	int3   
  113948:	cc                   	int3   
  113949:	cc                   	int3   
  11394a:	cc                   	int3   
  11394b:	cc                   	int3   
  11394c:	cc                   	int3   
  11394d:	cc                   	int3   
  11394e:	cc                   	int3   
  11394f:	cc                   	int3   

0000000000113950 <_wctomb_r>:
  113950:	48 8b 05 d9 33 00 00 	mov    0x33d9(%rip),%rax        # 116d30 <_global_impure_ptr+0x18>
  113957:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  11395e:	ff e0                	jmp    *%rax

0000000000113960 <__ascii_wctomb>:
  113960:	48 85 f6             	test   %rsi,%rsi
  113963:	74 14                	je     113979 <__ascii_wctomb+0x19>
  113965:	81 fa 00 01 00 00    	cmp    $0x100,%edx
  11396b:	72 0f                	jb     11397c <__ascii_wctomb+0x1c>
  11396d:	c7 07 8a 00 00 00    	movl   $0x8a,(%rdi)
  113973:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  113978:	c3                   	ret    
  113979:	31 c0                	xor    %eax,%eax
  11397b:	c3                   	ret    
  11397c:	88 16                	mov    %dl,(%rsi)
  11397e:	b8 01 00 00 00       	mov    $0x1,%eax
  113983:	c3                   	ret    
  113984:	cc                   	int3   
  113985:	cc                   	int3   
  113986:	cc                   	int3   
  113987:	cc                   	int3   
  113988:	cc                   	int3   
  113989:	cc                   	int3   
  11398a:	cc                   	int3   
  11398b:	cc                   	int3   
  11398c:	cc                   	int3   
  11398d:	cc                   	int3   
  11398e:	cc                   	int3   
  11398f:	cc                   	int3   

0000000000113990 <_ZSt17__throw_bad_allocv>:
  113990:	55                   	push   %rbp
  113991:	48 89 e5             	mov    %rsp,%rbp
  113994:	e8 97 76 ff ff       	call   10b030 <abort>
  113999:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000001139a0 <_Znwm>:
  1139a0:	55                   	push   %rbp
  1139a1:	48 89 e5             	mov    %rsp,%rbp
  1139a4:	41 56                	push   %r14
  1139a6:	53                   	push   %rbx
  1139a7:	48 85 ff             	test   %rdi,%rdi
  1139aa:	bb 01 00 00 00       	mov    $0x1,%ebx
  1139af:	48 0f 45 df          	cmovne %rdi,%rbx
  1139b3:	48 89 df             	mov    %rbx,%rdi
  1139b6:	e8 e5 01 00 00       	call   113ba0 <malloc>
  1139bb:	49 89 c6             	mov    %rax,%r14
  1139be:	48 85 c0             	test   %rax,%rax
  1139c1:	75 29                	jne    1139ec <_Znwm+0x4c>
  1139c3:	45 31 f6             	xor    %r14d,%r14d
  1139c6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1139cd:	00 00 00 
  1139d0:	e8 1b 29 ff ff       	call   1062f0 <_ZSt15get_new_handlerv>
  1139d5:	48 85 c0             	test   %rax,%rax
  1139d8:	74 12                	je     1139ec <_Znwm+0x4c>
  1139da:	ff d0                	call   *%rax
  1139dc:	48 89 df             	mov    %rbx,%rdi
  1139df:	e8 bc 01 00 00       	call   113ba0 <malloc>
  1139e4:	48 85 c0             	test   %rax,%rax
  1139e7:	74 e7                	je     1139d0 <_Znwm+0x30>
  1139e9:	49 89 c6             	mov    %rax,%r14
  1139ec:	4c 89 f0             	mov    %r14,%rax
  1139ef:	5b                   	pop    %rbx
  1139f0:	41 5e                	pop    %r14
  1139f2:	5d                   	pop    %rbp
  1139f3:	c3                   	ret    
  1139f4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1139fb:	00 00 00 
  1139fe:	66 90                	xchg   %ax,%ax

0000000000113a00 <_ZnwmRKSt9nothrow_t>:
  113a00:	55                   	push   %rbp
  113a01:	48 89 e5             	mov    %rsp,%rbp
  113a04:	5d                   	pop    %rbp
  113a05:	e9 96 ff ff ff       	jmp    1139a0 <_Znwm>
  113a0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000113a10 <_Znam>:
  113a10:	55                   	push   %rbp
  113a11:	48 89 e5             	mov    %rsp,%rbp
  113a14:	5d                   	pop    %rbp
  113a15:	e9 86 ff ff ff       	jmp    1139a0 <_Znwm>
  113a1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000113a20 <_ZnamRKSt9nothrow_t>:
  113a20:	55                   	push   %rbp
  113a21:	48 89 e5             	mov    %rsp,%rbp
  113a24:	5d                   	pop    %rbp
  113a25:	e9 e6 ff ff ff       	jmp    113a10 <_Znam>
  113a2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000113a30 <_ZdlPv>:
  113a30:	55                   	push   %rbp
  113a31:	48 89 e5             	mov    %rsp,%rbp
  113a34:	5d                   	pop    %rbp
  113a35:	e9 86 01 00 00       	jmp    113bc0 <free>
  113a3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000113a40 <_ZdlPvRKSt9nothrow_t>:
  113a40:	55                   	push   %rbp
  113a41:	48 89 e5             	mov    %rsp,%rbp
  113a44:	5d                   	pop    %rbp
  113a45:	e9 e6 ff ff ff       	jmp    113a30 <_ZdlPv>
  113a4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000113a50 <_ZdlPvm>:
  113a50:	55                   	push   %rbp
  113a51:	48 89 e5             	mov    %rsp,%rbp
  113a54:	5d                   	pop    %rbp
  113a55:	e9 d6 ff ff ff       	jmp    113a30 <_ZdlPv>
  113a5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000113a60 <_ZdaPv>:
  113a60:	55                   	push   %rbp
  113a61:	48 89 e5             	mov    %rsp,%rbp
  113a64:	5d                   	pop    %rbp
  113a65:	e9 c6 ff ff ff       	jmp    113a30 <_ZdlPv>
  113a6a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000113a70 <_ZdaPvRKSt9nothrow_t>:
  113a70:	55                   	push   %rbp
  113a71:	48 89 e5             	mov    %rsp,%rbp
  113a74:	5d                   	pop    %rbp
  113a75:	e9 e6 ff ff ff       	jmp    113a60 <_ZdaPv>
  113a7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000113a80 <_ZdaPvm>:
  113a80:	55                   	push   %rbp
  113a81:	48 89 e5             	mov    %rsp,%rbp
  113a84:	5d                   	pop    %rbp
  113a85:	e9 d6 ff ff ff       	jmp    113a60 <_ZdaPv>
  113a8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000113a90 <_ZnwmSt11align_val_t>:
  113a90:	55                   	push   %rbp
  113a91:	48 89 e5             	mov    %rsp,%rbp
  113a94:	41 57                	push   %r15
  113a96:	41 56                	push   %r14
  113a98:	53                   	push   %rbx
  113a99:	50                   	push   %rax
  113a9a:	48 85 ff             	test   %rdi,%rdi
  113a9d:	41 be 01 00 00 00    	mov    $0x1,%r14d
  113aa3:	4c 0f 45 f7          	cmovne %rdi,%r14
  113aa7:	48 83 fe 08          	cmp    $0x8,%rsi
  113aab:	bb 08 00 00 00       	mov    $0x8,%ebx
  113ab0:	48 0f 47 de          	cmova  %rsi,%rbx
  113ab4:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  113ab8:	48 89 de             	mov    %rbx,%rsi
  113abb:	4c 89 f2             	mov    %r14,%rdx
  113abe:	e8 3d 28 ff ff       	call   106300 <posix_memalign>
  113ac3:	85 c0                	test   %eax,%eax
  113ac5:	74 31                	je     113af8 <_ZnwmSt11align_val_t+0x68>
  113ac7:	4c 8d 7d e0          	lea    -0x20(%rbp),%r15
  113acb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  113ad0:	e8 1b 28 ff ff       	call   1062f0 <_ZSt15get_new_handlerv>
  113ad5:	48 85 c0             	test   %rax,%rax
  113ad8:	74 16                	je     113af0 <_ZnwmSt11align_val_t+0x60>
  113ada:	ff d0                	call   *%rax
  113adc:	4c 89 ff             	mov    %r15,%rdi
  113adf:	48 89 de             	mov    %rbx,%rsi
  113ae2:	4c 89 f2             	mov    %r14,%rdx
  113ae5:	e8 16 28 ff ff       	call   106300 <posix_memalign>
  113aea:	85 c0                	test   %eax,%eax
  113aec:	75 e2                	jne    113ad0 <_ZnwmSt11align_val_t+0x40>
  113aee:	eb 08                	jmp    113af8 <_ZnwmSt11align_val_t+0x68>
  113af0:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  113af7:	00 
  113af8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  113afc:	48 83 c4 08          	add    $0x8,%rsp
  113b00:	5b                   	pop    %rbx
  113b01:	41 5e                	pop    %r14
  113b03:	41 5f                	pop    %r15
  113b05:	5d                   	pop    %rbp
  113b06:	c3                   	ret    
  113b07:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  113b0e:	00 00 

0000000000113b10 <_ZnwmSt11align_val_tRKSt9nothrow_t>:
  113b10:	55                   	push   %rbp
  113b11:	48 89 e5             	mov    %rsp,%rbp
  113b14:	5d                   	pop    %rbp
  113b15:	e9 76 ff ff ff       	jmp    113a90 <_ZnwmSt11align_val_t>
  113b1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000113b20 <_ZnamSt11align_val_t>:
  113b20:	55                   	push   %rbp
  113b21:	48 89 e5             	mov    %rsp,%rbp
  113b24:	5d                   	pop    %rbp
  113b25:	e9 66 ff ff ff       	jmp    113a90 <_ZnwmSt11align_val_t>
  113b2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000113b30 <_ZnamSt11align_val_tRKSt9nothrow_t>:
  113b30:	55                   	push   %rbp
  113b31:	48 89 e5             	mov    %rsp,%rbp
  113b34:	5d                   	pop    %rbp
  113b35:	e9 e6 ff ff ff       	jmp    113b20 <_ZnamSt11align_val_t>
  113b3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000113b40 <_ZdlPvSt11align_val_t>:
  113b40:	55                   	push   %rbp
  113b41:	48 89 e5             	mov    %rsp,%rbp
  113b44:	5d                   	pop    %rbp
  113b45:	e9 76 00 00 00       	jmp    113bc0 <free>
  113b4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000113b50 <_ZdlPvSt11align_val_tRKSt9nothrow_t>:
  113b50:	55                   	push   %rbp
  113b51:	48 89 e5             	mov    %rsp,%rbp
  113b54:	5d                   	pop    %rbp
  113b55:	e9 e6 ff ff ff       	jmp    113b40 <_ZdlPvSt11align_val_t>
  113b5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000113b60 <_ZdlPvmSt11align_val_t>:
  113b60:	55                   	push   %rbp
  113b61:	48 89 e5             	mov    %rsp,%rbp
  113b64:	48 89 d6             	mov    %rdx,%rsi
  113b67:	5d                   	pop    %rbp
  113b68:	e9 d3 ff ff ff       	jmp    113b40 <_ZdlPvSt11align_val_t>
  113b6d:	0f 1f 00             	nopl   (%rax)

0000000000113b70 <_ZdaPvSt11align_val_t>:
  113b70:	55                   	push   %rbp
  113b71:	48 89 e5             	mov    %rsp,%rbp
  113b74:	5d                   	pop    %rbp
  113b75:	e9 c6 ff ff ff       	jmp    113b40 <_ZdlPvSt11align_val_t>
  113b7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000113b80 <_ZdaPvSt11align_val_tRKSt9nothrow_t>:
  113b80:	55                   	push   %rbp
  113b81:	48 89 e5             	mov    %rsp,%rbp
  113b84:	5d                   	pop    %rbp
  113b85:	e9 e6 ff ff ff       	jmp    113b70 <_ZdaPvSt11align_val_t>
  113b8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000113b90 <_ZdaPvmSt11align_val_t>:
  113b90:	55                   	push   %rbp
  113b91:	48 89 e5             	mov    %rsp,%rbp
  113b94:	48 89 d6             	mov    %rdx,%rsi
  113b97:	5d                   	pop    %rbp
  113b98:	e9 d3 ff ff ff       	jmp    113b70 <_ZdaPvSt11align_val_t>
  113b9d:	cc                   	int3   
  113b9e:	cc                   	int3   
  113b9f:	cc                   	int3   

0000000000113ba0 <malloc>:
  113ba0:	48 89 f8             	mov    %rdi,%rax
  113ba3:	48 8b 0d 7e 31 00 00 	mov    0x317e(%rip),%rcx        # 116d28 <_global_impure_ptr+0x10>
  113baa:	48 8b 39             	mov    (%rcx),%rdi
  113bad:	48 89 c6             	mov    %rax,%rsi
  113bb0:	e9 9b 81 ff ff       	jmp    10bd50 <_malloc_r>
  113bb5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  113bbc:	00 00 00 
  113bbf:	90                   	nop

0000000000113bc0 <free>:
  113bc0:	48 89 f8             	mov    %rdi,%rax
  113bc3:	48 8b 0d 5e 31 00 00 	mov    0x315e(%rip),%rcx        # 116d28 <_global_impure_ptr+0x10>
  113bca:	48 8b 39             	mov    (%rcx),%rdi
  113bcd:	48 89 c6             	mov    %rax,%rsi
  113bd0:	e9 8b 89 ff ff       	jmp    10c560 <_free_r>
